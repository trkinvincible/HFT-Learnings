





<!DOCTYPE html>
<html
  lang="en"
  
  data-color-mode="auto" data-light-theme="light" data-dark-theme="dark"
  data-a11y-animated-images="system" data-a11y-link-underlines="true"
  
  >



  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://github.githubassets.com">
  <link rel="dns-prefetch" href="https://avatars.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">
  <link rel="preconnect" href="https://github.githubassets.com" crossorigin>
  <link rel="preconnect" href="https://avatars.githubusercontent.com">

  


  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/light-d1334f2b22bf.css" /><link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/light_high_contrast-f695a361c6b2.css" /><link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/dark-f73a069fd33e.css" /><link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/dark_high_contrast-3a0d87f72ad4.css" /><link data-color-theme="light" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light-d1334f2b22bf.css" /><link data-color-theme="light_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_high_contrast-f695a361c6b2.css" /><link data-color-theme="light_colorblind" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_colorblind-367eb9a4565a.css" /><link data-color-theme="light_colorblind_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_colorblind_high_contrast-183adc0db479.css" /><link data-color-theme="light_tritanopia" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_tritanopia-2ddc677c041d.css" /><link data-color-theme="light_tritanopia_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_tritanopia_high_contrast-649962a5702a.css" /><link data-color-theme="dark" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark-f73a069fd33e.css" /><link data-color-theme="dark_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_high_contrast-3a0d87f72ad4.css" /><link data-color-theme="dark_colorblind" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_colorblind-b17a8392e6c4.css" /><link data-color-theme="dark_colorblind_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_colorblind_high_contrast-e9ff47cedc2b.css" /><link data-color-theme="dark_tritanopia" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_tritanopia-a1cc7dba9f73.css" /><link data-color-theme="dark_tritanopia_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_tritanopia_high_contrast-6c4dd39e2b0f.css" /><link data-color-theme="dark_dimmed" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_dimmed-55459b36aa6d.css" /><link data-color-theme="dark_dimmed_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_dimmed_high_contrast-9a0ef6e40ed3.css" />


    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-primitives-dc7ca6859caf.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-03a65c451725.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/global-d1aed5b4075c.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/github-db7b386c190b.css" />
  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/repository-b58e401b73ae.css" />
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/code-4ea853641043.css" />

  


  <script type="application/json" id="client-env">{"locale":"en","featureFlags":["alternate_user_config_repo","api_insights_show_missing_data_banner","attestations_filtering","attestations_sorting","client_version_header","code_scanning_security_configuration_ternary_state","codespaces_prebuild_region_target_update","contact_requests_implicit_opt_in","contentful_lp_copilot_extensions","contentful_lp_flex_features","contentful_lp_footnotes","copilot_activity_report","copilot_chat_attach_multiple_images","copilot_chat_floating_sidebar_focus_trap","copilot_chat_group_notifications","copilot_chat_navigable_refs","copilot_chat_vision_in_claude","copilot_chat_vision_skip_thread_create","copilot_chat_wholearea_dd","copilot_custom_copilots_feature_preview","copilot_custom_copilots_images","copilot_duplicate_thread","copilot_free_to_paid_telem","copilot_ftp_hyperspace_upgrade_prompt","copilot_ftp_settings_upgrade","copilot_ftp_upgrade_to_pro_from_models","copilot_ftp_your_copilot_settings","copilot_immersive_draft_issue_template_form_ui","copilot_immersive_structured_model_picker","copilot_no_floating_button","copilot_read_shared_conversation","copilot_spaces_input_menu_select","copilot_spark_allow_empty_commit","copilot_spark_single_user_iteration","copilot_spark_use_billing_headers","copilot_task_oriented_assistive_prompts","copilot_workbench_connection_reload_banner","copilot_workbench_iterate_panel","copilot_workbench_preview_analytics","copilot_workbench_refresh_on_wsod","custom_copilots_128k_window","custom_copilots_capi_mode","custom_copilots_file_uploads","direct_to_salesforce","dotcom_chat_client_side_skills","failbot_report_error_react_apps_on_page","ghost_pilot_confidence_truncation_25","ghost_pilot_confidence_truncation_40","insert_before_patch","issue_fields_report_usage","issues_catch_non_json_graphql_response","issues_comment_load_user_settings","issues_label_search_url","issues_preserve_tokens_in_urls","issues_react_blur_item_picker_on_close","issues_react_bots_timeline_pagination","issues_react_create_milestone","issues_react_optimistic_markdown","issues_react_prohibit_title_fallback","issues_react_remove_placeholders","issues_template_picker_redirect","lifecycle_label_name_updates","link_contact_sales_swp_marketo","marketing_pages_search_explore_provider","memex_mwl_filter_field_delimiter","nonreporting_relay_graphql_status_codes","primer_react_select_panel_with_modern_action_list","remove_child_patch","sample_network_conn_type","scheduled_reminders_updated_limits","site_homepage_contentful","site_msbuild_hide_integrations","site_msbuild_launch","site_msbuild_webgl_hero","spark_commit_on_default_branch","spark_sync_repository_after_iteration","swp_enterprise_contact_form","use_paginated_repo_picker_cost_center_form","viewscreen_sandbox","workbench_default_sonnet4","workbench_store_readonly"],"copilotApiUrl":"https://api.individual.githubcopilot.com"}</script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/high-contrast-cookie-039f089f08c3.js"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/wp-runtime-1685eb918d8c.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_oddbird_popover-polyfill_dist_popover-fn_js-a8c266e5f126.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_mini-throttle_dist_index_js-node_modules_stacktrace-parser_dist_s-1d3d52-babac9434833.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_failbot_failbot_ts-4eaa91ff7c9c.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/environment-37836f8ad297.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_behaviors_dist_esm_index_mjs-c44edfed7f0d.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_selector-observer_dist_index_esm_js-cdf2757bd188.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_relative-time-element_dist_index_js-5913bc24f35d.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_text-expander-element_dist_index_js-e50fb7a5fe8c.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_auto-complete-element_dist_index_js-node_modules_github_catalyst_-8e9f78-c1e2fb329866.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_filter-input-element_dist_index_js-node_modules_github_remote-inp-b5f1d7-514a92c925f0.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_markdown-toolbar-element_dist_index_js-6a8c7d9a08fe.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_file-attachment-element_dist_index_js-node_modules_primer_view-co-f03a40-c631b99b0f08.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/github-elements-594e8106f187.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/element-registry-529fad20b892.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_braintree_browser-detection_dist_browser-detection_js-node_modules_githu-bb80ec-34c4b68b1dd3.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_lit-html_lit-html_js-b93a87060d31.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_morphdom_dist_morphdom-esm_js-300e8e4e0414.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_turbo_dist_turbo_es2017-esm_js-595819d3686f.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_remote-form_dist_index_js-node_modules_delegated-events_dist_inde-893f9f-5f044d8dcee3.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_quote-selection_dist_index_js-node_modules_github_session-resume_-c39857-54c022ad5a68.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_updatable-content_updatable-content_ts-7b14b8aa0beb.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_behaviors_task-list_ts-app_assets_modules_github_sso_ts-ui_packages-900dde-f953ddf42948.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_sticky-scroll-into-view_ts-e45aabc67d13.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_behaviors_ajax-error_ts-app_assets_modules_github_behaviors_include-d0d0a6-a7da4270c5f4.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_behaviors_commenting_edit_ts-app_assets_modules_github_behaviors_ht-83c235-567e0f340e27.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/behaviors-161506cb2918.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_delegated-events_dist_index_js-node_modules_github_catalyst_lib_index_js-ea8eaa-0416579acb39.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/notifications-global-753a553f1820.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_mini-throttle_dist_index_js-node_modules_github_catalyst_lib_inde-dbbea9-558c1f223d1d.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/code-menu-1feff9e17b7b.js" defer="defer"></script>
  
  <script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/primer-react-4622b3e58029.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/react-core-c2c42df71553.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/react-lib-8705026b409a.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/octicons-react-8ed765fdb7a0.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_emotion_is-prop-valid_dist_emotion-is-prop-valid_esm_js-node_modules_emo-b1c483-f0fc35efa8f8.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_cookie_index_js-node_modules_primer_live-region-element_dist_esm_index_j-1ca8f6-89ab81577c38.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_dompurify_dist_purify_es_mjs-7457ebdd1a1f.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_lodash-es__Stack_js-node_modules_lodash-es__Uint8Array_js-node_modules_l-4faaa6-16c4e2c524de.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_lodash-es_isEqual_js-a0841ced23fc.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_tanstack_react-virtual_dist_esm_index_js-807aab04afeb.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_focus-visible_dist_focus-visible_js-node_modules_github_hydro-analytics--e21ffd-0b758af67e69.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_fzy_js_index_js-node_modules_react-reverse-portal_dist_web_index_js-node-452414-05865700b943.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_paths_index_ts-bf609b99b24a.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_document-metadata_document-metadata_ts-ui_packages_fetch-headers_fetch-headers_ts-57e0e0-bed68ec00644.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_ref-selector_RefSelector_tsx-6bd266a4340b.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_commit-attribution_index_ts-ui_packages_commit-checks-status_index_ts-ui_packages-762eaa-4bb9b612ea61.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_use-analytics_use-analytics_ts-ui_packages_use-client-value_use-client-value_ts-u-8be754-144c1ca8ead3.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_code-view-shared_hooks_use-canonical-object_ts-ui_packages_code-view-shared_hooks-9104f7-210e1a626c16.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_app-uuid_app-uuid_ts-ui_packages_repos-file-tree-view_repos-file-tree-view_ts-72a4b5b8380b.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_blob-anchor_ts-ui_packages_code-nav_code-nav_ts-ui_packages_filter--8253c1-5fde020dbad1.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/react-code-view-a5b0067811d6.js" defer="defer"></script>
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-react.47f1598729334a521d2a.module.css" />
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/react-code-view.833cfc1ade3ba9c7b2e4.module.css" />

  <script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_document-metadata_document-metadata_ts-ui_packages_notifications-subscriptions-me-a3b302-2518229acf18.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/notifications-subscriptions-menu-463d138cca3f.js" defer="defer"></script>
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-react.47f1598729334a521d2a.module.css" />
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/notifications-subscriptions-menu.4c58e19e87a9dd1b1dfd.module.css" />


  <title>Catch2/extras/catch_amalgamated.hpp at devel · catchorg/Catch2 · GitHub</title>



  <meta name="route-pattern" content="/:user_id/:repository/blob/*name(/*path)" data-turbo-transient>
  <meta name="route-controller" content="blob" data-turbo-transient>
  <meta name="route-action" content="show" data-turbo-transient>
  <meta name="fetch-nonce" content="v2:c597b4c7-c558-28a2-ff73-37e10999e8ff">

    
  <meta name="current-catalog-service-hash" content="f3abb0cc802f3d7b95fc8762b94bdcb13bf39634c40c357301c4aa1d67a256fb">


  <meta name="request-id" content="A8AA:310124:D9FD4E:117D4E2:687CF554" data-pjax-transient="true"/><meta name="html-safe-nonce" content="029f178d0b9725dce7188f9d4ee947ba78fdb2bee8f67730a9cd519ecfb20f01" data-pjax-transient="true"/><meta name="visitor-payload" content="eyJyZWZlcnJlciI6Imh0dHBzOi8vZ2l0aHViLmNvbS9jYXRjaG9yZy9DYXRjaDIvYmxvYi9kZXZlbC9kb2NzL21pZ3JhdGUtdjItdG8tdjMubWQiLCJyZXF1ZXN0X2lkIjoiQThBQTozMTAxMjQ6RDlGRDRFOjExN0Q0RTI6Njg3Q0Y1NTQiLCJ2aXNpdG9yX2lkIjoiOTA5NDUxMTEzMTI1ODMyMDAyMiIsInJlZ2lvbl9lZGdlIjoidWtzb3V0aCIsInJlZ2lvbl9yZW5kZXIiOiJ1a3NvdXRoIn0=" data-pjax-transient="true"/><meta name="visitor-hmac" content="e681766aa5a45b8d73b353c8bf8b3a7b63fb3b9956c01349cc52dfff5d0e1e65" data-pjax-transient="true"/>


    <meta name="hovercard-subject-tag" content="repository:1062572" data-turbo-transient>


  <meta name="github-keyboard-shortcuts" content="repository,source-code,file-tree,copilot" data-turbo-transient="true" />
  

  <meta name="selected-link" value="repo_source" data-turbo-transient>
  <link rel="assets" href="https://github.githubassets.com/">

    <meta name="google-site-verification" content="Apib7-x98H0j5cPqHWwSMm6dNU4GmODRoqxLiDzdx9I">

<meta name="octolytics-url" content="https://collector.github.com/github/collect" />

  <meta name="analytics-location" content="/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show" data-turbo-transient="true" />

  




    <meta name="user-login" content="">

  

    <meta name="viewport" content="width=device-width">

    

      <meta name="description" content="A modern, C++-native, test framework for unit-tests, TDD and BDD - using C++14, C++17 and later (C++11 support is in v2.x branch, and C++03 on the Catch1.x branch) - Catch2/extras/catch_amalgamated.hpp at devel · catchorg/Catch2">

      <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">

    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
    <meta property="fb:app_id" content="1401488693436528">
    <meta name="apple-itunes-app" content="app-id=1477376905, app-argument=https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.hpp" />

      <meta name="twitter:image" content="https://opengraph.githubassets.com/1df8078718f6d9156c5db839bfad6a57537b3a2948979bf9cc18f2e24928115e/catchorg/Catch2" /><meta name="twitter:site" content="@github" /><meta name="twitter:card" content="summary_large_image" /><meta name="twitter:title" content="Catch2/extras/catch_amalgamated.hpp at devel · catchorg/Catch2" /><meta name="twitter:description" content="A modern, C++-native, test framework for unit-tests, TDD and BDD - using C++14, C++17 and later (C++11 support is in v2.x branch, and C++03 on the Catch1.x branch) - catchorg/Catch2" />
  <meta property="og:image" content="https://opengraph.githubassets.com/1df8078718f6d9156c5db839bfad6a57537b3a2948979bf9cc18f2e24928115e/catchorg/Catch2" /><meta property="og:image:alt" content="A modern, C++-native, test framework for unit-tests, TDD and BDD - using C++14, C++17 and later (C++11 support is in v2.x branch, and C++03 on the Catch1.x branch) - catchorg/Catch2" /><meta property="og:image:width" content="1200" /><meta property="og:image:height" content="600" /><meta property="og:site_name" content="GitHub" /><meta property="og:type" content="object" /><meta property="og:title" content="Catch2/extras/catch_amalgamated.hpp at devel · catchorg/Catch2" /><meta property="og:url" content="https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.hpp" /><meta property="og:description" content="A modern, C++-native, test framework for unit-tests, TDD and BDD - using C++14, C++17 and later (C++11 support is in v2.x branch, and C++03 on the Catch1.x branch) - catchorg/Catch2" />
  




      <meta name="hostname" content="github.com">



        <meta name="expected-hostname" content="github.com">


  <meta http-equiv="x-pjax-version" content="a10164239a746d51677dd7864bd8a936f1617b21c72f47e9d647f2c061013122" data-turbo-track="reload">
  <meta http-equiv="x-pjax-csp-version" content="352e51c42d5f5727a7c545752bf34d1f83f40219e7036c6959817149a51651bc" data-turbo-track="reload">
  <meta http-equiv="x-pjax-css-version" content="db5407b34ed7dd78a10c3ffb9090ce21da82a95b43668b04d1de30e3d8a51dde" data-turbo-track="reload">
  <meta http-equiv="x-pjax-js-version" content="94f5de206406773bbf4cb7d075bea8be0e6e953d36f462380a86b5c178c4c7ca" data-turbo-track="reload">

  <meta name="turbo-cache-control" content="no-preview" data-turbo-transient="">

      <meta name="turbo-cache-control" content="no-cache" data-turbo-transient>

    <meta data-hydrostats="publish">

  <meta name="go-import" content="github.com/catchorg/Catch2 git https://github.com/catchorg/Catch2.git">

  <meta name="octolytics-dimension-user_id" content="33321405" /><meta name="octolytics-dimension-user_login" content="catchorg" /><meta name="octolytics-dimension-repository_id" content="1062572" /><meta name="octolytics-dimension-repository_nwo" content="catchorg/Catch2" /><meta name="octolytics-dimension-repository_public" content="true" /><meta name="octolytics-dimension-repository_is_fork" content="false" /><meta name="octolytics-dimension-repository_network_root_id" content="1062572" /><meta name="octolytics-dimension-repository_network_root_nwo" content="catchorg/Catch2" />



    

    <meta name="turbo-body-classes" content="logged-out env-production page-responsive">


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <meta name="release" content="af8b8db961ba78e3d23e4b92e239c190ef136f06">
  <meta name="ui-target" content="full">

  <link rel="mask-icon" href="https://github.githubassets.com/assets/pinned-octocat-093da3e6fa40.svg" color="#000000">
  <link rel="alternate icon" class="js-site-favicon" type="image/png" href="https://github.githubassets.com/favicons/favicon.png">
  <link rel="icon" class="js-site-favicon" type="image/svg+xml" href="https://github.githubassets.com/favicons/favicon.svg" data-base-href="https://github.githubassets.com/favicons/favicon">

<meta name="theme-color" content="#1e2327">
<meta name="color-scheme" content="light dark" />


  <link rel="manifest" href="/manifest.json" crossOrigin="use-credentials">

  </head>

  <body class="logged-out env-production page-responsive" style="word-wrap: break-word;">
    <div data-turbo-body class="logged-out env-production page-responsive" style="word-wrap: break-word;">
      



    <div class="position-relative header-wrapper js-header-wrapper ">
      <a href="#start-of-content" data-skip-target-assigned="false" class="px-2 py-4 color-bg-accent-emphasis color-fg-on-emphasis show-on-focus js-skip-to-content">Skip to content</a>

      <span data-view-component="true" class="progress-pjax-loader Progress position-fixed width-full">
    <span style="width: 0%;" data-view-component="true" class="Progress-item progress-pjax-loader-bar left-0 top-0 color-bg-accent-emphasis"></span>
</span>      
      
      <script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_ui-commands_ui-commands_ts-b755d908e0b1.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_document-metadata_document-metadata_ts-ui_packages_hydro-analytics_hydro-analytic-f29230-07417997172c.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/keyboard-shortcuts-dialog-cf9f9950f389.js" defer="defer"></script>
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-react.47f1598729334a521d2a.module.css" />
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/keyboard-shortcuts-dialog.f8fba3bd67fe74f9227b.module.css" />

<react-partial
  partial-name="keyboard-shortcuts-dialog"
  data-ssr="false"
  data-attempted-ssr="false"
  data-react-profiling="false"
>
  
  <script type="application/json" data-target="react-partial.embeddedData">{"props":{"docsUrl":"https://docs.github.com/get-started/accessibility/keyboard-shortcuts"}}</script>
  <div data-target="react-partial.reactRoot"></div>
</react-partial>




      

          

              
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_gsap_index_js-028cb2a18f5a.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_remote-form_dist_index_js-node_modules_delegated-events_dist_inde-94fd67-b0625c39513c.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/sessions-d7b06c3c09b0.js" defer="defer"></script>
<header class="HeaderMktg header-logged-out js-details-container js-header Details f4 py-3" role="banner" data-is-top="true" data-color-mode=light data-light-theme=light data-dark-theme=dark>
  <h2 class="sr-only">Navigation Menu</h2>

  <button type="button" class="HeaderMktg-backdrop d-lg-none border-0 position-fixed top-0 left-0 width-full height-full js-details-target" aria-label="Toggle navigation">
    <span class="d-none">Toggle navigation</span>
  </button>

  <div class="d-flex flex-column flex-lg-row flex-items-center px-3 px-md-4 px-lg-5 height-full position-relative z-1">
    <div class="d-flex flex-justify-between flex-items-center width-full width-lg-auto">
      <div class="flex-1">
        <button aria-label="Toggle navigation" aria-expanded="false" type="button" data-view-component="true" class="js-details-target js-nav-padding-recalculate js-header-menu-toggle Button--link Button--medium Button d-lg-none color-fg-inherit p-1">  <span class="Button-content">
    <span class="Button-label"><div class="HeaderMenu-toggle-bar rounded my-1"></div>
            <div class="HeaderMenu-toggle-bar rounded my-1"></div>
            <div class="HeaderMenu-toggle-bar rounded my-1"></div></span>
  </span>
</button>
      </div>

      <a class="mr-lg-3 color-fg-inherit flex-order-2 js-prevent-focus-on-mobile-nav"
        href="/"
        aria-label="Homepage"
        data-analytics-event="{&quot;category&quot;:&quot;Marketing nav&quot;,&quot;action&quot;:&quot;click to go to homepage&quot;,&quot;label&quot;:&quot;ref_page:Marketing;ref_cta:Logomark;ref_loc:Header&quot;}">
        <svg height="32" aria-hidden="true" viewBox="0 0 24 24" version="1.1" width="32" data-view-component="true" class="octicon octicon-mark-github">
    <path d="M12 1C5.923 1 1 5.923 1 12c0 4.867 3.149 8.979 7.521 10.436.55.096.756-.233.756-.522 0-.262-.013-1.128-.013-2.049-2.764.509-3.479-.674-3.699-1.292-.124-.317-.66-1.293-1.127-1.554-.385-.207-.936-.715-.014-.729.866-.014 1.485.797 1.691 1.128.99 1.663 2.571 1.196 3.204.907.096-.715.385-1.196.701-1.471-2.448-.275-5.005-1.224-5.005-5.432 0-1.196.426-2.186 1.128-2.956-.111-.275-.496-1.402.11-2.915 0 0 .921-.288 3.024 1.128a10.193 10.193 0 0 1 2.75-.371c.936 0 1.871.123 2.75.371 2.104-1.43 3.025-1.128 3.025-1.128.605 1.513.221 2.64.111 2.915.701.77 1.127 1.747 1.127 2.956 0 4.222-2.571 5.157-5.019 5.432.399.344.743 1.004.743 2.035 0 1.471-.014 2.654-.014 3.025 0 .289.206.632.756.522C19.851 20.979 23 16.854 23 12c0-6.077-4.922-11-11-11Z"></path>
</svg>
      </a>

      <div class="d-flex flex-1 flex-order-2 text-right d-lg-none gap-2 flex-justify-end">
          <a
            href="/login?return_to=https%3A%2F%2Fgithub.com%2Fcatchorg%2FCatch2%2Fblob%2Fdevel%2Fextras%2Fcatch_amalgamated.hpp"
            class="HeaderMenu-link HeaderMenu-button d-inline-flex f5 no-underline border color-border-default rounded-2 px-2 py-1 color-fg-inherit js-prevent-focus-on-mobile-nav"
            data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.hpp&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="94223e3defe4566eef98392043e27706ef6357ff4beb6e50255f8c9dd96f932c"
            data-analytics-event="{&quot;category&quot;:&quot;Marketing nav&quot;,&quot;action&quot;:&quot;click to Sign in&quot;,&quot;label&quot;:&quot;ref_page:Marketing;ref_cta:Sign in;ref_loc:Header&quot;}"
          >
            Sign in
          </a>
              <div class="AppHeader-appearanceSettings">
    <react-partial-anchor>
      <button data-target="react-partial-anchor.anchor" id="icon-button-5082724a-75c0-4ef4-b265-29a60525e1e1" aria-labelledby="tooltip-4c0d8736-ef99-4baf-a607-c673d4b81ad4" type="button" disabled="disabled" data-view-component="true" class="Button Button--iconOnly Button--invisible Button--medium AppHeader-button HeaderMenu-link border cursor-wait">  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-sliders Button-visual">
    <path d="M15 2.75a.75.75 0 0 1-.75.75h-4a.75.75 0 0 1 0-1.5h4a.75.75 0 0 1 .75.75Zm-8.5.75v1.25a.75.75 0 0 0 1.5 0v-4a.75.75 0 0 0-1.5 0V2H1.75a.75.75 0 0 0 0 1.5H6.5Zm1.25 5.25a.75.75 0 0 0 0-1.5h-6a.75.75 0 0 0 0 1.5h6ZM15 8a.75.75 0 0 1-.75.75H11.5V10a.75.75 0 1 1-1.5 0V6a.75.75 0 0 1 1.5 0v1.25h2.75A.75.75 0 0 1 15 8Zm-9 5.25v-2a.75.75 0 0 0-1.5 0v1.25H1.75a.75.75 0 0 0 0 1.5H4.5v1.25a.75.75 0 0 0 1.5 0v-2Zm9 0a.75.75 0 0 1-.75.75h-6a.75.75 0 0 1 0-1.5h6a.75.75 0 0 1 .75.75Z"></path>
</svg>
</button><tool-tip id="tooltip-4c0d8736-ef99-4baf-a607-c673d4b81ad4" for="icon-button-5082724a-75c0-4ef4-b265-29a60525e1e1" popover="manual" data-direction="s" data-type="label" data-view-component="true" class="sr-only position-absolute">Appearance settings</tool-tip>

      <template data-target="react-partial-anchor.template">
        <script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_document-metadata_document-metadata_ts-ui_packages_promise-with-resolvers-polyfil-40d47c-2b0274d4149e.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/appearance-settings-d35856a333a1.js" defer="defer"></script>
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-react.47f1598729334a521d2a.module.css" />
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/appearance-settings.76259b61ecc822265749.module.css" />

<react-partial
  partial-name="appearance-settings"
  data-ssr="false"
  data-attempted-ssr="false"
  data-react-profiling="false"
>
  
  <script type="application/json" data-target="react-partial.embeddedData">{"props":{}}</script>
  <div data-target="react-partial.reactRoot"></div>
</react-partial>

      </template>
    </react-partial-anchor>
  </div>

      </div>
    </div>


    <div class="HeaderMenu js-header-menu height-fit position-lg-relative d-lg-flex flex-column flex-auto top-0">
      <div class="HeaderMenu-wrapper d-flex flex-column flex-self-start flex-lg-row flex-auto rounded rounded-lg-0">
          <nav class="HeaderMenu-nav" aria-label="Global">
            <ul class="d-lg-flex list-style-none">


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Product
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>

      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 pt-2 pt-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 pb-2 pb-lg-4 d-lg-flex flex-wrap dropdown-menu-wide">
          <div class="HeaderMenu-column pl-lg-4 px-lg-4">
              <div class="">

                <ul class="list-style-none f5" >
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_product_navbar&quot;}" href="https://github.com/features/copilot">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-copilot color-fg-subtle mr-3">
    <path d="M23.922 16.992c-.861 1.495-5.859 5.023-11.922 5.023-6.063 0-11.061-3.528-11.922-5.023A.641.641 0 0 1 0 16.736v-2.869a.841.841 0 0 1 .053-.22c.372-.935 1.347-2.292 2.605-2.656.167-.429.414-1.055.644-1.517a10.195 10.195 0 0 1-.052-1.086c0-1.331.282-2.499 1.132-3.368.397-.406.89-.717 1.474-.952 1.399-1.136 3.392-2.093 6.122-2.093 2.731 0 4.767.957 6.166 2.093.584.235 1.077.546 1.474.952.85.869 1.132 2.037 1.132 3.368 0 .368-.014.733-.052 1.086.23.462.477 1.088.644 1.517 1.258.364 2.233 1.721 2.605 2.656a.832.832 0 0 1 .053.22v2.869a.641.641 0 0 1-.078.256ZM12.172 11h-.344a4.323 4.323 0 0 1-.355.508C10.703 12.455 9.555 13 7.965 13c-1.725 0-2.989-.359-3.782-1.259a2.005 2.005 0 0 1-.085-.104L4 11.741v6.585c1.435.779 4.514 2.179 8 2.179 3.486 0 6.565-1.4 8-2.179v-6.585l-.098-.104s-.033.045-.085.104c-.793.9-2.057 1.259-3.782 1.259-1.59 0-2.738-.545-3.508-1.492a4.323 4.323 0 0 1-.355-.508h-.016.016Zm.641-2.935c.136 1.057.403 1.913.878 2.497.442.544 1.134.938 2.344.938 1.573 0 2.292-.337 2.657-.751.384-.435.558-1.15.558-2.361 0-1.14-.243-1.847-.705-2.319-.477-.488-1.319-.862-2.824-1.025-1.487-.161-2.192.138-2.533.529-.269.307-.437.808-.438 1.578v.021c0 .265.021.562.063.893Zm-1.626 0c.042-.331.063-.628.063-.894v-.02c-.001-.77-.169-1.271-.438-1.578-.341-.391-1.046-.69-2.533-.529-1.505.163-2.347.537-2.824 1.025-.462.472-.705 1.179-.705 2.319 0 1.211.175 1.926.558 2.361.365.414 1.084.751 2.657.751 1.21 0 1.902-.394 2.344-.938.475-.584.742-1.44.878-2.497Z"></path><path d="M14.5 14.25a1 1 0 0 1 1 1v2a1 1 0 0 1-2 0v-2a1 1 0 0 1 1-1Zm-5 0a1 1 0 0 1 1 1v2a1 1 0 0 1-2 0v-2a1 1 0 0 1 1-1Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            GitHub Copilot
          </div>
        Write better code with AI
      </div>

    
</a></li>

                    
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_models&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_models_link_product_navbar&quot;}" href="https://github.com/features/models">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-ai-model color-fg-subtle mr-3">
    <path d="M19.375 8.5a3.25 3.25 0 1 1-3.163 4h-3a3.252 3.252 0 0 1-4.443 2.509L7.214 17.76a3.25 3.25 0 1 1-1.342-.674l1.672-2.957A3.238 3.238 0 0 1 6.75 12c0-.907.371-1.727.97-2.316L6.117 6.846A3.253 3.253 0 0 1 1.875 3.75a3.25 3.25 0 1 1 5.526 2.32l1.603 2.836A3.25 3.25 0 0 1 13.093 11h3.119a3.252 3.252 0 0 1 3.163-2.5ZM10 10.25a1.75 1.75 0 1 0-.001 3.499A1.75 1.75 0 0 0 10 10.25ZM5.125 2a1.75 1.75 0 1 0 0 3.5 1.75 1.75 0 0 0 0-3.5Zm12.5 9.75a1.75 1.75 0 1 0 3.5 0 1.75 1.75 0 0 0-3.5 0Zm-14.25 8.5a1.75 1.75 0 1 0 3.501-.001 1.75 1.75 0 0 0-3.501.001Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            GitHub Models
              <span class="HeaderMenu-label">
                New
              </span>
          </div>
        Manage and compare prompts
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_advanced_security&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_advanced_security_link_product_navbar&quot;}" href="https://github.com/security/advanced-security">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-shield-check color-fg-subtle mr-3">
    <path d="M16.53 9.78a.75.75 0 0 0-1.06-1.06L11 13.19l-1.97-1.97a.75.75 0 0 0-1.06 1.06l2.5 2.5a.75.75 0 0 0 1.06 0l5-5Z"></path><path d="m12.54.637 8.25 2.675A1.75 1.75 0 0 1 22 4.976V10c0 6.19-3.771 10.704-9.401 12.83a1.704 1.704 0 0 1-1.198 0C5.77 20.705 2 16.19 2 10V4.976c0-.758.489-1.43 1.21-1.664L11.46.637a1.748 1.748 0 0 1 1.08 0Zm-.617 1.426-8.25 2.676a.249.249 0 0 0-.173.237V10c0 5.46 3.28 9.483 8.43 11.426a.199.199 0 0 0 .14 0C17.22 19.483 20.5 15.461 20.5 10V4.976a.25.25 0 0 0-.173-.237l-8.25-2.676a.253.253 0 0 0-.154 0Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            GitHub Advanced Security
          </div>
        Find and fix vulnerabilities
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_product_navbar&quot;}" href="https://github.com/features/actions">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-workflow color-fg-subtle mr-3">
    <path d="M1 3a2 2 0 0 1 2-2h6.5a2 2 0 0 1 2 2v6.5a2 2 0 0 1-2 2H7v4.063C7 16.355 7.644 17 8.438 17H12.5v-2.5a2 2 0 0 1 2-2H21a2 2 0 0 1 2 2V21a2 2 0 0 1-2 2h-6.5a2 2 0 0 1-2-2v-2.5H8.437A2.939 2.939 0 0 1 5.5 15.562V11.5H3a2 2 0 0 1-2-2Zm2-.5a.5.5 0 0 0-.5.5v6.5a.5.5 0 0 0 .5.5h6.5a.5.5 0 0 0 .5-.5V3a.5.5 0 0 0-.5-.5ZM14.5 14a.5.5 0 0 0-.5.5V21a.5.5 0 0 0 .5.5H21a.5.5 0 0 0 .5-.5v-6.5a.5.5 0 0 0-.5-.5Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Actions
          </div>
        Automate any workflow
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_product_navbar&quot;}" href="https://github.com/features/codespaces">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-codespaces color-fg-subtle mr-3">
    <path d="M3.5 3.75C3.5 2.784 4.284 2 5.25 2h13.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0 1 18.75 13H5.25a1.75 1.75 0 0 1-1.75-1.75Zm-2 12c0-.966.784-1.75 1.75-1.75h17.5c.966 0 1.75.784 1.75 1.75v4a1.75 1.75 0 0 1-1.75 1.75H3.25a1.75 1.75 0 0 1-1.75-1.75ZM5.25 3.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h13.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Zm-2 12a.25.25 0 0 0-.25.25v4c0 .138.112.25.25.25h17.5a.25.25 0 0 0 .25-.25v-4a.25.25 0 0 0-.25-.25Z"></path><path d="M10 17.75a.75.75 0 0 1 .75-.75h6.5a.75.75 0 0 1 0 1.5h-6.5a.75.75 0 0 1-.75-.75Zm-4 0a.75.75 0 0 1 .75-.75h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1-.75-.75Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Codespaces
          </div>
        Instant dev environments
      </div>

    
</a></li>

                </ul>
              </div>
          </div>
          <div class="HeaderMenu-column pl-lg-4 px-lg-4 pb-3 pb-lg-0">
              <div class="border-bottom border-lg-bottom-0 pb-3">

                <ul class="list-style-none f5" >
                    
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_product_navbar&quot;}" href="https://github.com/features/issues">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-issue-opened color-fg-subtle mr-3">
    <path d="M12 1c6.075 0 11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12 5.925 1 12 1ZM2.5 12a9.5 9.5 0 0 0 9.5 9.5 9.5 9.5 0 0 0 9.5-9.5A9.5 9.5 0 0 0 12 2.5 9.5 9.5 0 0 0 2.5 12Zm9.5 2a2 2 0 1 1-.001-3.999A2 2 0 0 1 12 14Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Issues
          </div>
        Plan and track work
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_product_navbar&quot;}" href="https://github.com/features/code-review">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-code-review color-fg-subtle mr-3">
    <path d="M10.3 6.74a.75.75 0 0 1-.04 1.06l-2.908 2.7 2.908 2.7a.75.75 0 1 1-1.02 1.1l-3.5-3.25a.75.75 0 0 1 0-1.1l3.5-3.25a.75.75 0 0 1 1.06.04Zm3.44 1.06a.75.75 0 1 1 1.02-1.1l3.5 3.25a.75.75 0 0 1 0 1.1l-3.5 3.25a.75.75 0 1 1-1.02-1.1l2.908-2.7-2.908-2.7Z"></path><path d="M1.5 4.25c0-.966.784-1.75 1.75-1.75h17.5c.966 0 1.75.784 1.75 1.75v12.5a1.75 1.75 0 0 1-1.75 1.75h-9.69l-3.573 3.573A1.458 1.458 0 0 1 5 21.043V18.5H3.25a1.75 1.75 0 0 1-1.75-1.75ZM3.25 4a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h2.5a.75.75 0 0 1 .75.75v3.19l3.72-3.72a.749.749 0 0 1 .53-.22h10a.25.25 0 0 0 .25-.25V4.25a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Code Review
          </div>
        Manage code changes
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_product_navbar&quot;}" href="https://github.com/features/discussions">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-comment-discussion color-fg-subtle mr-3">
    <path d="M1.75 1h12.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 14.25 14H8.061l-2.574 2.573A1.458 1.458 0 0 1 3 15.543V14H1.75A1.75 1.75 0 0 1 0 12.25v-9.5C0 1.784.784 1 1.75 1ZM1.5 2.75v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Z"></path><path d="M22.5 8.75a.25.25 0 0 0-.25-.25h-3.5a.75.75 0 0 1 0-1.5h3.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 22.25 20H21v1.543a1.457 1.457 0 0 1-2.487 1.03L15.939 20H10.75A1.75 1.75 0 0 1 9 18.25v-1.465a.75.75 0 0 1 1.5 0v1.465c0 .138.112.25.25.25h5.5a.75.75 0 0 1 .53.22l2.72 2.72v-2.19a.75.75 0 0 1 .75-.75h2a.25.25 0 0 0 .25-.25v-9.5Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Discussions
          </div>
        Collaborate outside of code
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_search&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_search_link_product_navbar&quot;}" href="https://github.com/features/code-search">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-code-square color-fg-subtle mr-3">
    <path d="M10.3 8.24a.75.75 0 0 1-.04 1.06L7.352 12l2.908 2.7a.75.75 0 1 1-1.02 1.1l-3.5-3.25a.75.75 0 0 1 0-1.1l3.5-3.25a.75.75 0 0 1 1.06.04Zm3.44 1.06a.75.75 0 1 1 1.02-1.1l3.5 3.25a.75.75 0 0 1 0 1.1l-3.5 3.25a.75.75 0 1 1-1.02-1.1l2.908-2.7-2.908-2.7Z"></path><path d="M2 3.75C2 2.784 2.784 2 3.75 2h16.5c.966 0 1.75.784 1.75 1.75v16.5A1.75 1.75 0 0 1 20.25 22H3.75A1.75 1.75 0 0 1 2 20.25Zm1.75-.25a.25.25 0 0 0-.25.25v16.5c0 .138.112.25.25.25h16.5a.25.25 0 0 0 .25-.25V3.75a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Code Search
          </div>
        Find more, search less
      </div>

    
</a></li>

                </ul>
              </div>
          </div>
          <div class="HeaderMenu-column pl-lg-4 border-lg-left pr-lg-7">
              <div class="border-bottom border-lg-bottom-0 border-bottom-0">
                    <span class="d-block h4 color-fg-default my-1" id="product-explore-heading">Explore</span>

                <ul class="list-style-none f5" aria-labelledby="product-explore-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;why_github&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;why_github_link_product_navbar&quot;}" href="https://github.com/why-github">
      Why GitHub

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;all_features&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;all_features_link_product_navbar&quot;}" href="https://github.com/features">
      All features

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary Link--external" target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;documentation&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;documentation_link_product_navbar&quot;}" href="https://docs.github.com">
      Documentation

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary Link--external" target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_skills&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_skills_link_product_navbar&quot;}" href="https://skills.github.com">
      GitHub Skills

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary Link--external" target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;blog&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;blog_link_product_navbar&quot;}" href="https://github.blog">
      Blog

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                </ul>
              </div>
          </div>

      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Solutions
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>

      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 pt-2 pt-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 d-lg-flex flex-wrap dropdown-menu-wide">
          <div class="HeaderMenu-column pl-lg-4 px-lg-4 pb-3 pb-lg-0">
              <div class="border-bottom border-lg-bottom-0 mb-3 pb-3">
                    <span class="d-block h4 color-fg-default my-1" id="solutions-by-company-size-heading">By company size</span>

                <ul class="list-style-none f5" aria-labelledby="solutions-by-company-size-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprises&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprises_link_solutions_navbar&quot;}" href="https://github.com/enterprise">
      Enterprises

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;small_and_medium_teams&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;small_and_medium_teams_link_solutions_navbar&quot;}" href="https://github.com/team">
      Small and medium teams

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;startups&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;startups_link_solutions_navbar&quot;}" href="https://github.com/enterprise/startups">
      Startups

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;nonprofits&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;nonprofits_link_solutions_navbar&quot;}" href="/solutions/industry/nonprofits">
      Nonprofits

    
</a></li>

                </ul>
              </div>
              <div class="border-bottom border-lg-bottom-0 pb-3">
                    <span class="d-block h4 color-fg-default my-1" id="solutions-by-use-case-heading">By use case</span>

                <ul class="list-style-none f5" aria-labelledby="solutions-by-use-case-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;devsecops&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;devsecops_link_solutions_navbar&quot;}" href="/solutions/use-case/devsecops">
      DevSecOps

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;devops&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;devops_link_solutions_navbar&quot;}" href="/solutions/use-case/devops">
      DevOps

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;ci_cd&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;ci_cd_link_solutions_navbar&quot;}" href="/solutions/use-case/ci-cd">
      CI/CD

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;view_all_use_cases&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;view_all_use_cases_link_solutions_navbar&quot;}" href="/solutions/use-case">
      View all use cases

    
</a></li>

                </ul>
              </div>
          </div>
          <div class="HeaderMenu-column pl-lg-4 border-lg-left pr-lg-7">
              <div class="border-bottom border-lg-bottom-0 pb-3 pb-lg-0">
                    <span class="d-block h4 color-fg-default my-1" id="solutions-by-industry-heading">By industry</span>

                <ul class="list-style-none f5" aria-labelledby="solutions-by-industry-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;healthcare&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;healthcare_link_solutions_navbar&quot;}" href="/solutions/industry/healthcare">
      Healthcare

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;financial_services&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;financial_services_link_solutions_navbar&quot;}" href="/solutions/industry/financial-services">
      Financial services

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;manufacturing&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;manufacturing_link_solutions_navbar&quot;}" href="/solutions/industry/manufacturing">
      Manufacturing

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;government&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;government_link_solutions_navbar&quot;}" href="/solutions/industry/government">
      Government

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;view_all_industries&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;view_all_industries_link_solutions_navbar&quot;}" href="/solutions/industry">
      View all industries

    
</a></li>

                </ul>
              </div>
          </div>

         <div class="HeaderMenu-trailing-link rounded-bottom-2 flex-shrink-0 mt-lg-4 px-lg-4 py-4 py-lg-3 f5 text-semibold">
            <a href="/solutions">
              View all solutions
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-right HeaderMenu-trailing-link-icon">
    <path d="M6.22 3.22a.75.75 0 0 1 1.06 0l4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L9.94 8 6.22 4.28a.75.75 0 0 1 0-1.06Z"></path>
</svg>
</a>         </div>
      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Resources
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>

      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 pt-2 pt-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 pb-2 pb-lg-4 d-lg-flex flex-wrap dropdown-menu-wide">
          <div class="HeaderMenu-column pl-lg-4 px-lg-4 pb-3 pb-lg-0">
              <div class="border-bottom border-lg-bottom-0 pb-3">
                    <span class="d-block h4 color-fg-default my-1" id="resources-topics-heading">Topics</span>

                <ul class="list-style-none f5" aria-labelledby="resources-topics-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;ai&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;ai_link_resources_navbar&quot;}" href="/resources/articles/ai">
      AI

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;devops&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;devops_link_resources_navbar&quot;}" href="/resources/articles/devops">
      DevOps

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;security&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;security_link_resources_navbar&quot;}" href="/resources/articles/security">
      Security

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;software_development&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;software_development_link_resources_navbar&quot;}" href="/resources/articles/software-development">
      Software Development

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;view_all&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;view_all_link_resources_navbar&quot;}" href="/resources/articles">
      View all

    
</a></li>

                </ul>
              </div>
          </div>
          <div class="HeaderMenu-column pl-lg-4 border-lg-left pr-lg-7">
              <div class="border-bottom border-lg-bottom-0 border-bottom-0">
                    <span class="d-block h4 color-fg-default my-1" id="resources-explore-heading">Explore</span>

                <ul class="list-style-none f5" aria-labelledby="resources-explore-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary Link--external" target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary Link--external" target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;events_amp_webinars&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;events_amp_webinars_link_resources_navbar&quot;}" href="https://resources.github.com">
      Events &amp; Webinars

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;ebooks_amp_whitepapers&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;ebooks_amp_whitepapers_link_resources_navbar&quot;}" href="https://github.com/resources/whitepapers">
      Ebooks &amp; Whitepapers

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary Link--external" target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_navbar&quot;}" href="https://partner.github.com">
      Partners

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;executive_insights&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;executive_insights_link_resources_navbar&quot;}" href="https://github.com/solutions/executive-insights">
      Executive Insights

    
</a></li>

                </ul>
              </div>
          </div>

      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Open Source
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>

      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 pt-2 pt-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 pb-2 pb-lg-4">
          <div class="HeaderMenu-column px-lg-4">
              <div class="border-bottom mb-3 mb-lg-3 pb-3">

                <ul class="list-style-none f5" >
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_navbar&quot;}" href="/sponsors">
      
      <div>
          <div class="color-fg-default h4">
            GitHub Sponsors
          </div>
        Fund open source developers
      </div>

    
</a></li>

                </ul>
              </div>
              <div class="border-bottom mb-3 mb-lg-3 pb-3">

                <ul class="list-style-none f5" >
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_navbar&quot;}" href="https://github.com/readme">
      
      <div>
          <div class="color-fg-default h4">
            The ReadME Project
          </div>
        GitHub community articles
      </div>

    
</a></li>

                </ul>
              </div>
              <div class="border-bottom border-bottom-0">
                    <span class="d-block h4 color-fg-default my-1" id="open-source-repositories-heading">Repositories</span>

                <ul class="list-style-none f5" aria-labelledby="open-source-repositories-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;topics&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;topics_link_open_source_navbar&quot;}" href="https://github.com/topics">
      Topics

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;trending&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;trending_link_open_source_navbar&quot;}" href="https://github.com/trending">
      Trending

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;collections&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;collections_link_open_source_navbar&quot;}" href="https://github.com/collections">
      Collections

    
</a></li>

                </ul>
              </div>
          </div>

      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Enterprise
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>

      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 pt-2 pt-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 pb-2 pb-lg-4">
          <div class="HeaderMenu-column px-lg-4">
              <div class="border-bottom mb-3 mb-lg-3 pb-3">

                <ul class="list-style-none f5" >
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_navbar&quot;}" href="/enterprise">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-stack color-fg-subtle mr-3">
    <path d="M11.063 1.456a1.749 1.749 0 0 1 1.874 0l8.383 5.316a1.751 1.751 0 0 1 0 2.956l-8.383 5.316a1.749 1.749 0 0 1-1.874 0L2.68 9.728a1.751 1.751 0 0 1 0-2.956Zm1.071 1.267a.25.25 0 0 0-.268 0L3.483 8.039a.25.25 0 0 0 0 .422l8.383 5.316a.25.25 0 0 0 .268 0l8.383-5.316a.25.25 0 0 0 0-.422Z"></path><path d="M1.867 12.324a.75.75 0 0 1 1.035-.232l8.964 5.685a.25.25 0 0 0 .268 0l8.964-5.685a.75.75 0 0 1 .804 1.267l-8.965 5.685a1.749 1.749 0 0 1-1.874 0l-8.965-5.685a.75.75 0 0 1-.231-1.035Z"></path><path d="M1.867 16.324a.75.75 0 0 1 1.035-.232l8.964 5.685a.25.25 0 0 0 .268 0l8.964-5.685a.75.75 0 0 1 .804 1.267l-8.965 5.685a1.749 1.749 0 0 1-1.874 0l-8.965-5.685a.75.75 0 0 1-.231-1.035Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Enterprise platform
          </div>
        AI-powered developer platform
      </div>

    
</a></li>

                </ul>
              </div>
              <div class="border-bottom border-bottom-0">
                    <span class="d-block h4 color-fg-default my-1" id="enterprise-available-add-ons-heading">Available add-ons</span>

                <ul class="list-style-none f5" aria-labelledby="enterprise-available-add-ons-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_advanced_security&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_advanced_security_link_enterprise_navbar&quot;}" href="https://github.com/security/advanced-security">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-shield-check color-fg-subtle mr-3">
    <path d="M16.53 9.78a.75.75 0 0 0-1.06-1.06L11 13.19l-1.97-1.97a.75.75 0 0 0-1.06 1.06l2.5 2.5a.75.75 0 0 0 1.06 0l5-5Z"></path><path d="m12.54.637 8.25 2.675A1.75 1.75 0 0 1 22 4.976V10c0 6.19-3.771 10.704-9.401 12.83a1.704 1.704 0 0 1-1.198 0C5.77 20.705 2 16.19 2 10V4.976c0-.758.489-1.43 1.21-1.664L11.46.637a1.748 1.748 0 0 1 1.08 0Zm-.617 1.426-8.25 2.676a.249.249 0 0 0-.173.237V10c0 5.46 3.28 9.483 8.43 11.426a.199.199 0 0 0 .14 0C17.22 19.483 20.5 15.461 20.5 10V4.976a.25.25 0 0 0-.173-.237l-8.25-2.676a.253.253 0 0 0-.154 0Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            GitHub Advanced Security
          </div>
        Enterprise-grade security features
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;copilot_for_business&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;copilot_for_business_link_enterprise_navbar&quot;}" href="/features/copilot/copilot-business">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-copilot color-fg-subtle mr-3">
    <path d="M23.922 16.992c-.861 1.495-5.859 5.023-11.922 5.023-6.063 0-11.061-3.528-11.922-5.023A.641.641 0 0 1 0 16.736v-2.869a.841.841 0 0 1 .053-.22c.372-.935 1.347-2.292 2.605-2.656.167-.429.414-1.055.644-1.517a10.195 10.195 0 0 1-.052-1.086c0-1.331.282-2.499 1.132-3.368.397-.406.89-.717 1.474-.952 1.399-1.136 3.392-2.093 6.122-2.093 2.731 0 4.767.957 6.166 2.093.584.235 1.077.546 1.474.952.85.869 1.132 2.037 1.132 3.368 0 .368-.014.733-.052 1.086.23.462.477 1.088.644 1.517 1.258.364 2.233 1.721 2.605 2.656a.832.832 0 0 1 .053.22v2.869a.641.641 0 0 1-.078.256ZM12.172 11h-.344a4.323 4.323 0 0 1-.355.508C10.703 12.455 9.555 13 7.965 13c-1.725 0-2.989-.359-3.782-1.259a2.005 2.005 0 0 1-.085-.104L4 11.741v6.585c1.435.779 4.514 2.179 8 2.179 3.486 0 6.565-1.4 8-2.179v-6.585l-.098-.104s-.033.045-.085.104c-.793.9-2.057 1.259-3.782 1.259-1.59 0-2.738-.545-3.508-1.492a4.323 4.323 0 0 1-.355-.508h-.016.016Zm.641-2.935c.136 1.057.403 1.913.878 2.497.442.544 1.134.938 2.344.938 1.573 0 2.292-.337 2.657-.751.384-.435.558-1.15.558-2.361 0-1.14-.243-1.847-.705-2.319-.477-.488-1.319-.862-2.824-1.025-1.487-.161-2.192.138-2.533.529-.269.307-.437.808-.438 1.578v.021c0 .265.021.562.063.893Zm-1.626 0c.042-.331.063-.628.063-.894v-.02c-.001-.77-.169-1.271-.438-1.578-.341-.391-1.046-.69-2.533-.529-1.505.163-2.347.537-2.824 1.025-.462.472-.705 1.179-.705 2.319 0 1.211.175 1.926.558 2.361.365.414 1.084.751 2.657.751 1.21 0 1.902-.394 2.344-.938.475-.584.742-1.44.878-2.497Z"></path><path d="M14.5 14.25a1 1 0 0 1 1 1v2a1 1 0 0 1-2 0v-2a1 1 0 0 1 1-1Zm-5 0a1 1 0 0 1 1 1v2a1 1 0 0 1-2 0v-2a1 1 0 0 1 1-1Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Copilot for business
          </div>
        Enterprise-grade AI features
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;premium_support&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;premium_support_link_enterprise_navbar&quot;}" href="/premium-support">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-comment-discussion color-fg-subtle mr-3">
    <path d="M1.75 1h12.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 14.25 14H8.061l-2.574 2.573A1.458 1.458 0 0 1 3 15.543V14H1.75A1.75 1.75 0 0 1 0 12.25v-9.5C0 1.784.784 1 1.75 1ZM1.5 2.75v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Z"></path><path d="M22.5 8.75a.25.25 0 0 0-.25-.25h-3.5a.75.75 0 0 1 0-1.5h3.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 22.25 20H21v1.543a1.457 1.457 0 0 1-2.487 1.03L15.939 20H10.75A1.75 1.75 0 0 1 9 18.25v-1.465a.75.75 0 0 1 1.5 0v1.465c0 .138.112.25.25.25h5.5a.75.75 0 0 1 .53.22l2.72 2.72v-2.19a.75.75 0 0 1 .75-.75h2a.25.25 0 0 0 .25-.25v-9.5Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Premium Support
          </div>
        Enterprise-grade 24/7 support
      </div>

    
</a></li>

                </ul>
              </div>
          </div>

      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
    <a class="HeaderMenu-link no-underline px-0 px-lg-2 py-3 py-lg-2 d-block d-lg-inline-block" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;pricing&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;pricing_link_global_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div class="d-flex flex-column flex-lg-row width-full flex-justify-end flex-lg-items-center text-center mt-3 mt-lg-0 text-lg-left ml-lg-3">
                


<qbsearch-input class="search-input" data-scope="repo:catchorg/Catch2" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="e3WyJQzJRKyg9vYJxPnwzqMOfPuoh_qNAblAY2QSl_JlQppljyMhDZI-guFw6uWSH0qr-PWrFU1ppBYndHr7rg" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="catchorg/Catch2" data-current-org="catchorg" data-current-owner="" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false" data-retain-scroll-position="true">
  <div
    class="search-input-container search-with-dialog position-relative d-flex flex-row flex-items-center mr-4 rounded"
    data-action="click:qbsearch-input#searchInputContainerClicked"
  >
      <button
        type="button"
        class="header-search-button placeholder  input-button form-control d-flex flex-1 flex-self-stretch flex-items-center no-wrap width-full py-0 pl-2 pr-0 text-left border-0 box-shadow-none"
        data-target="qbsearch-input.inputButton"
        aria-label="Search or jump to…"
        aria-haspopup="dialog"
        placeholder="Search or jump to..."
        data-hotkey=s,/
        autocapitalize="off"
        data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;searchbar&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;input&quot;,&quot;label&quot;:&quot;searchbar_input_global_navbar&quot;}"
        data-action="click:qbsearch-input#handleExpand"
      >
        <div class="mr-2 color-fg-muted">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
        </div>
        <span class="flex-1" data-target="qbsearch-input.inputButtonText">Search or jump to...</span>
          <div class="d-flex" data-target="qbsearch-input.hotkeyIndicator">
            <svg xmlns="http://www.w3.org/2000/svg" width="22" height="20" aria-hidden="true" class="mr-1"><path fill="none" stroke="#979A9C" opacity=".4" d="M3.5.5h12c1.7 0 3 1.3 3 3v13c0 1.7-1.3 3-3 3h-12c-1.7 0-3-1.3-3-3v-13c0-1.7 1.3-3 3-3z"></path><path fill="#979A9C" d="M11.8 6L8 15.1h-.9L10.8 6h1z"></path></svg>
          </div>
      </button>

    <input type="hidden" name="type" class="js-site-search-type-field">

    
<div class="Overlay--hidden " data-modal-dialog-overlay>
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true" class="Overlay Overlay--width-large Overlay--height-auto">
      <h1 id="search-suggestions-dialog-header" class="sr-only">Search code, repositories, users, issues, pull requests...</h1>
    <div class="Overlay-body Overlay-body--paddingNone">
      
          <div data-view-component="true">        <div class="search-suggestions position-fixed width-full color-shadow-large border color-fg-default color-bg-default overflow-hidden d-flex flex-column query-builder-container"
          style="border-radius: 12px;"
          data-target="qbsearch-input.queryBuilderContainer"
          hidden
        >
          <!-- '"` --><!-- </textarea></xmp> --></option></form><form id="query-builder-test-form" action="" accept-charset="UTF-8" method="get">
  <query-builder data-target="qbsearch-input.queryBuilder" id="query-builder-query-builder-test" data-filter-key=":" data-view-component="true" class="QueryBuilder search-query-builder">
    <div class="FormControl FormControl--fullWidth">
      <label id="query-builder-test-label" for="query-builder-test" class="FormControl-label sr-only">
        Search
      </label>
      <div
        class="QueryBuilder-StyledInput width-fit "
        data-target="query-builder.styledInput"
      >
          <span id="query-builder-test-leadingvisual-wrap" class="FormControl-input-leadingVisualWrap QueryBuilder-leadingVisualWrap">
            <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search FormControl-input-leadingVisual">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
          </span>
        <div data-target="query-builder.styledInputContainer" class="QueryBuilder-StyledInputContainer">
          <div
            aria-hidden="true"
            class="QueryBuilder-StyledInputContent"
            data-target="query-builder.styledInputContent"
          ></div>
          <div class="QueryBuilder-InputWrapper">
            <div aria-hidden="true" class="QueryBuilder-Sizer" data-target="query-builder.sizer"></div>
            <input id="query-builder-test" name="query-builder-test" value="" autocomplete="off" type="text" role="combobox" spellcheck="false" aria-expanded="false" aria-describedby="validation-01113116-ba82-4548-be1f-5a5a5f5368a7" data-target="query-builder.input" data-action="
          input:query-builder#inputChange
          blur:query-builder#inputBlur
          keydown:query-builder#inputKeydown
          focus:query-builder#inputFocus
        " data-view-component="true" class="FormControl-input QueryBuilder-Input FormControl-medium" />
          </div>
        </div>
          <span class="sr-only" id="query-builder-test-clear">Clear</span>
          <button role="button" id="query-builder-test-clear-button" aria-labelledby="query-builder-test-clear query-builder-test-label" data-target="query-builder.clearButton" data-action="
                click:query-builder#clear
                focus:query-builder#clearButtonFocus
                blur:query-builder#clearButtonBlur
              " variant="small" hidden="hidden" type="button" data-view-component="true" class="Button Button--iconOnly Button--invisible Button--medium mr-1 px-2 py-0 d-flex flex-items-center rounded-1 color-fg-muted">  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x-circle-fill Button-visual">
    <path d="M2.343 13.657A8 8 0 1 1 13.658 2.343 8 8 0 0 1 2.343 13.657ZM6.03 4.97a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042L6.94 8 4.97 9.97a.749.749 0 0 0 .326 1.275.749.749 0 0 0 .734-.215L8 9.06l1.97 1.97a.749.749 0 0 0 1.275-.326.749.749 0 0 0-.215-.734L9.06 8l1.97-1.97a.749.749 0 0 0-.326-1.275.749.749 0 0 0-.734.215L8 6.94Z"></path>
</svg>
</button>

      </div>
      <template id="search-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
</template>

<template id="code-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code">
    <path d="m11.28 3.22 4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L13.94 8l-3.72-3.72a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215Zm-6.56 0a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L2.06 8l3.72 3.72a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L.47 8.53a.75.75 0 0 1 0-1.06Z"></path>
</svg>
</template>

<template id="file-code-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-file-code">
    <path d="M4 1.75C4 .784 4.784 0 5.75 0h5.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v8.586A1.75 1.75 0 0 1 14.25 15h-9a.75.75 0 0 1 0-1.5h9a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 10 4.25V1.5H5.75a.25.25 0 0 0-.25.25v2.5a.75.75 0 0 1-1.5 0Zm1.72 4.97a.75.75 0 0 1 1.06 0l2 2a.75.75 0 0 1 0 1.06l-2 2a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734l1.47-1.47-1.47-1.47a.75.75 0 0 1 0-1.06ZM3.28 7.78 1.81 9.25l1.47 1.47a.751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018l-2-2a.75.75 0 0 1 0-1.06l2-2a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Zm8.22-6.218V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path>
</svg>
</template>

<template id="history-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-history">
    <path d="m.427 1.927 1.215 1.215a8.002 8.002 0 1 1-1.6 5.685.75.75 0 1 1 1.493-.154 6.5 6.5 0 1 0 1.18-4.458l1.358 1.358A.25.25 0 0 1 3.896 6H.25A.25.25 0 0 1 0 5.75V2.104a.25.25 0 0 1 .427-.177ZM7.75 4a.75.75 0 0 1 .75.75v2.992l2.028.812a.75.75 0 0 1-.557 1.392l-2.5-1A.751.751 0 0 1 7 8.25v-3.5A.75.75 0 0 1 7.75 4Z"></path>
</svg>
</template>

<template id="repo-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
</template>

<template id="bookmark-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-bookmark">
    <path d="M3 2.75C3 1.784 3.784 1 4.75 1h6.5c.966 0 1.75.784 1.75 1.75v11.5a.75.75 0 0 1-1.227.579L8 11.722l-3.773 3.107A.751.751 0 0 1 3 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.91l3.023-2.489a.75.75 0 0 1 .954 0l3.023 2.49V2.75a.25.25 0 0 0-.25-.25Z"></path>
</svg>
</template>

<template id="plus-circle-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-plus-circle">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm7.25-3.25v2.5h2.5a.75.75 0 0 1 0 1.5h-2.5v2.5a.75.75 0 0 1-1.5 0v-2.5h-2.5a.75.75 0 0 1 0-1.5h2.5v-2.5a.75.75 0 0 1 1.5 0Z"></path>
</svg>
</template>

<template id="circle-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-dot-fill">
    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8Z"></path>
</svg>
</template>

<template id="trash-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-trash">
    <path d="M11 1.75V3h2.25a.75.75 0 0 1 0 1.5H2.75a.75.75 0 0 1 0-1.5H5V1.75C5 .784 5.784 0 6.75 0h2.5C10.216 0 11 .784 11 1.75ZM4.496 6.675l.66 6.6a.25.25 0 0 0 .249.225h5.19a.25.25 0 0 0 .249-.225l.66-6.6a.75.75 0 0 1 1.492.149l-.66 6.6A1.748 1.748 0 0 1 10.595 15h-5.19a1.75 1.75 0 0 1-1.741-1.575l-.66-6.6a.75.75 0 1 1 1.492-.15ZM6.5 1.75V3h3V1.75a.25.25 0 0 0-.25-.25h-2.5a.25.25 0 0 0-.25.25Z"></path>
</svg>
</template>

<template id="team-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-people">
    <path d="M2 5.5a3.5 3.5 0 1 1 5.898 2.549 5.508 5.508 0 0 1 3.034 4.084.75.75 0 1 1-1.482.235 4 4 0 0 0-7.9 0 .75.75 0 0 1-1.482-.236A5.507 5.507 0 0 1 3.102 8.05 3.493 3.493 0 0 1 2 5.5ZM11 4a3.001 3.001 0 0 1 2.22 5.018 5.01 5.01 0 0 1 2.56 3.012.749.749 0 0 1-.885.954.752.752 0 0 1-.549-.514 3.507 3.507 0 0 0-2.522-2.372.75.75 0 0 1-.574-.73v-.352a.75.75 0 0 1 .416-.672A1.5 1.5 0 0 0 11 5.5.75.75 0 0 1 11 4Zm-5.5-.5a2 2 0 1 0-.001 3.999A2 2 0 0 0 5.5 3.5Z"></path>
</svg>
</template>

<template id="project-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-project">
    <path d="M1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25V1.75C0 .784.784 0 1.75 0ZM1.5 1.75v12.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25ZM11.75 3a.75.75 0 0 1 .75.75v7.5a.75.75 0 0 1-1.5 0v-7.5a.75.75 0 0 1 .75-.75Zm-8.25.75a.75.75 0 0 1 1.5 0v5.5a.75.75 0 0 1-1.5 0ZM8 3a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 3Z"></path>
</svg>
</template>

<template id="pencil-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-pencil">
    <path d="M11.013 1.427a1.75 1.75 0 0 1 2.474 0l1.086 1.086a1.75 1.75 0 0 1 0 2.474l-8.61 8.61c-.21.21-.47.364-.756.445l-3.251.93a.75.75 0 0 1-.927-.928l.929-3.25c.081-.286.235-.547.445-.758l8.61-8.61Zm.176 4.823L9.75 4.81l-6.286 6.287a.253.253 0 0 0-.064.108l-.558 1.953 1.953-.558a.253.253 0 0 0 .108-.064Zm1.238-3.763a.25.25 0 0 0-.354 0L10.811 3.75l1.439 1.44 1.263-1.263a.25.25 0 0 0 0-.354Z"></path>
</svg>
</template>

<template id="copilot-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copilot">
    <path d="M7.998 15.035c-4.562 0-7.873-2.914-7.998-3.749V9.338c.085-.628.677-1.686 1.588-2.065.013-.07.024-.143.036-.218.029-.183.06-.384.126-.612-.201-.508-.254-1.084-.254-1.656 0-.87.128-1.769.693-2.484.579-.733 1.494-1.124 2.724-1.261 1.206-.134 2.262.034 2.944.765.05.053.096.108.139.165.044-.057.094-.112.143-.165.682-.731 1.738-.899 2.944-.765 1.23.137 2.145.528 2.724 1.261.566.715.693 1.614.693 2.484 0 .572-.053 1.148-.254 1.656.066.228.098.429.126.612.012.076.024.148.037.218.924.385 1.522 1.471 1.591 2.095v1.872c0 .766-3.351 3.795-8.002 3.795Zm0-1.485c2.28 0 4.584-1.11 5.002-1.433V7.862l-.023-.116c-.49.21-1.075.291-1.727.291-1.146 0-2.059-.327-2.71-.991A3.222 3.222 0 0 1 8 6.303a3.24 3.24 0 0 1-.544.743c-.65.664-1.563.991-2.71.991-.652 0-1.236-.081-1.727-.291l-.023.116v4.255c.419.323 2.722 1.433 5.002 1.433ZM6.762 2.83c-.193-.206-.637-.413-1.682-.297-1.019.113-1.479.404-1.713.7-.247.312-.369.789-.369 1.554 0 .793.129 1.171.308 1.371.162.181.519.379 1.442.379.853 0 1.339-.235 1.638-.54.315-.322.527-.827.617-1.553.117-.935-.037-1.395-.241-1.614Zm4.155-.297c-1.044-.116-1.488.091-1.681.297-.204.219-.359.679-.242 1.614.091.726.303 1.231.618 1.553.299.305.784.54 1.638.54.922 0 1.28-.198 1.442-.379.179-.2.308-.578.308-1.371 0-.765-.123-1.242-.37-1.554-.233-.296-.693-.587-1.713-.7Z"></path><path d="M6.25 9.037a.75.75 0 0 1 .75.75v1.501a.75.75 0 0 1-1.5 0V9.787a.75.75 0 0 1 .75-.75Zm4.25.75v1.501a.75.75 0 0 1-1.5 0V9.787a.75.75 0 0 1 1.5 0Z"></path>
</svg>
</template>

<template id="copilot-error-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copilot-error">
    <path d="M16 11.24c0 .112-.072.274-.21.467L13 9.688V7.862l-.023-.116c-.49.21-1.075.291-1.727.291-.198 0-.388-.009-.571-.029L6.833 5.226a4.01 4.01 0 0 0 .17-.782c.117-.935-.037-1.395-.241-1.614-.193-.206-.637-.413-1.682-.297-.683.076-1.115.231-1.395.415l-1.257-.91c.579-.564 1.413-.877 2.485-.996 1.206-.134 2.262.034 2.944.765.05.053.096.108.139.165.044-.057.094-.112.143-.165.682-.731 1.738-.899 2.944-.765 1.23.137 2.145.528 2.724 1.261.566.715.693 1.614.693 2.484 0 .572-.053 1.148-.254 1.656.066.228.098.429.126.612.012.076.024.148.037.218.924.385 1.522 1.471 1.591 2.095Zm-5.083-8.707c-1.044-.116-1.488.091-1.681.297-.204.219-.359.679-.242 1.614.091.726.303 1.231.618 1.553.299.305.784.54 1.638.54.922 0 1.28-.198 1.442-.379.179-.2.308-.578.308-1.371 0-.765-.123-1.242-.37-1.554-.233-.296-.693-.587-1.713-.7Zm2.511 11.074c-1.393.776-3.272 1.428-5.43 1.428-4.562 0-7.873-2.914-7.998-3.749V9.338c.085-.628.677-1.686 1.588-2.065.013-.07.024-.143.036-.218.029-.183.06-.384.126-.612-.18-.455-.241-.963-.252-1.475L.31 4.107A.747.747 0 0 1 0 3.509V3.49a.748.748 0 0 1 .625-.73c.156-.026.306.047.435.139l14.667 10.578a.592.592 0 0 1 .227.264.752.752 0 0 1 .046.249v.022a.75.75 0 0 1-1.19.596Zm-1.367-.991L5.635 7.964a5.128 5.128 0 0 1-.889.073c-.652 0-1.236-.081-1.727-.291l-.023.116v4.255c.419.323 2.722 1.433 5.002 1.433 1.539 0 3.089-.505 4.063-.934Z"></path>
</svg>
</template>

<template id="workflow-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-workflow">
    <path d="M0 1.75C0 .784.784 0 1.75 0h3.5C6.216 0 7 .784 7 1.75v3.5A1.75 1.75 0 0 1 5.25 7H4v4a1 1 0 0 0 1 1h4v-1.25C9 9.784 9.784 9 10.75 9h3.5c.966 0 1.75.784 1.75 1.75v3.5A1.75 1.75 0 0 1 14.25 16h-3.5A1.75 1.75 0 0 1 9 14.25v-.75H5A2.5 2.5 0 0 1 2.5 11V7h-.75A1.75 1.75 0 0 1 0 5.25Zm1.75-.25a.25.25 0 0 0-.25.25v3.5c0 .138.112.25.25.25h3.5a.25.25 0 0 0 .25-.25v-3.5a.25.25 0 0 0-.25-.25Zm9 9a.25.25 0 0 0-.25.25v3.5c0 .138.112.25.25.25h3.5a.25.25 0 0 0 .25-.25v-3.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
</template>

<template id="book-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-book">
    <path d="M0 1.75A.75.75 0 0 1 .75 1h4.253c1.227 0 2.317.59 3 1.501A3.743 3.743 0 0 1 11.006 1h4.245a.75.75 0 0 1 .75.75v10.5a.75.75 0 0 1-.75.75h-4.507a2.25 2.25 0 0 0-1.591.659l-.622.621a.75.75 0 0 1-1.06 0l-.622-.621A2.25 2.25 0 0 0 5.258 13H.75a.75.75 0 0 1-.75-.75Zm7.251 10.324.004-5.073-.002-2.253A2.25 2.25 0 0 0 5.003 2.5H1.5v9h3.757a3.75 3.75 0 0 1 1.994.574ZM8.755 4.75l-.004 7.322a3.752 3.752 0 0 1 1.992-.572H14.5v-9h-3.495a2.25 2.25 0 0 0-2.25 2.25Z"></path>
</svg>
</template>

<template id="code-review-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code-review">
    <path d="M1.75 1h12.5c.966 0 1.75.784 1.75 1.75v8.5A1.75 1.75 0 0 1 14.25 13H8.061l-2.574 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25v-8.5C0 1.784.784 1 1.75 1ZM1.5 2.75v8.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-8.5a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Zm5.28 1.72a.75.75 0 0 1 0 1.06L5.31 7l1.47 1.47a.751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018l-2-2a.75.75 0 0 1 0-1.06l2-2a.75.75 0 0 1 1.06 0Zm2.44 0a.75.75 0 0 1 1.06 0l2 2a.75.75 0 0 1 0 1.06l-2 2a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L10.69 7 9.22 5.53a.75.75 0 0 1 0-1.06Z"></path>
</svg>
</template>

<template id="codespaces-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-codespaces">
    <path d="M0 11.25c0-.966.784-1.75 1.75-1.75h12.5c.966 0 1.75.784 1.75 1.75v3A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25Zm2-9.5C2 .784 2.784 0 3.75 0h8.5C13.216 0 14 .784 14 1.75v5a1.75 1.75 0 0 1-1.75 1.75h-8.5A1.75 1.75 0 0 1 2 6.75Zm1.75-.25a.25.25 0 0 0-.25.25v5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-5a.25.25 0 0 0-.25-.25Zm-2 9.5a.25.25 0 0 0-.25.25v3c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25v-3a.25.25 0 0 0-.25-.25Z"></path><path d="M7 12.75a.75.75 0 0 1 .75-.75h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1-.75-.75Zm-4 0a.75.75 0 0 1 .75-.75h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1-.75-.75Z"></path>
</svg>
</template>

<template id="comment-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-comment">
    <path d="M1 2.75C1 1.784 1.784 1 2.75 1h10.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0 1 13.25 12H9.06l-2.573 2.573A1.458 1.458 0 0 1 4 13.543V12H2.75A1.75 1.75 0 0 1 1 10.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h4.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
</template>

<template id="comment-discussion-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-comment-discussion">
    <path d="M1.75 1h8.5c.966 0 1.75.784 1.75 1.75v5.5A1.75 1.75 0 0 1 10.25 10H7.061l-2.574 2.573A1.458 1.458 0 0 1 2 11.543V10h-.25A1.75 1.75 0 0 1 0 8.25v-5.5C0 1.784.784 1 1.75 1ZM1.5 2.75v5.5c0 .138.112.25.25.25h1a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h3.5a.25.25 0 0 0 .25-.25v-5.5a.25.25 0 0 0-.25-.25h-8.5a.25.25 0 0 0-.25.25Zm13 2a.25.25 0 0 0-.25-.25h-.5a.75.75 0 0 1 0-1.5h.5c.966 0 1.75.784 1.75 1.75v5.5A1.75 1.75 0 0 1 14.25 12H14v1.543a1.458 1.458 0 0 1-2.487 1.03L9.22 12.28a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215l2.22 2.22v-2.19a.75.75 0 0 1 .75-.75h1a.25.25 0 0 0 .25-.25Z"></path>
</svg>
</template>

<template id="organization-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-organization">
    <path d="M1.75 16A1.75 1.75 0 0 1 0 14.25V1.75C0 .784.784 0 1.75 0h8.5C11.216 0 12 .784 12 1.75v12.5c0 .085-.006.168-.018.25h2.268a.25.25 0 0 0 .25-.25V8.285a.25.25 0 0 0-.111-.208l-1.055-.703a.749.749 0 1 1 .832-1.248l1.055.703c.487.325.779.871.779 1.456v5.965A1.75 1.75 0 0 1 14.25 16h-3.5a.766.766 0 0 1-.197-.026c-.099.017-.2.026-.303.026h-3a.75.75 0 0 1-.75-.75V14h-1v1.25a.75.75 0 0 1-.75.75Zm-.25-1.75c0 .138.112.25.25.25H4v-1.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 .75.75v1.25h2.25a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25h-8.5a.25.25 0 0 0-.25.25ZM3.75 6h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1 0-1.5ZM3 3.75A.75.75 0 0 1 3.75 3h.5a.75.75 0 0 1 0 1.5h-.5A.75.75 0 0 1 3 3.75Zm4 3A.75.75 0 0 1 7.75 6h.5a.75.75 0 0 1 0 1.5h-.5A.75.75 0 0 1 7 6.75ZM7.75 3h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1 0-1.5ZM3 9.75A.75.75 0 0 1 3.75 9h.5a.75.75 0 0 1 0 1.5h-.5A.75.75 0 0 1 3 9.75ZM7.75 9h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1 0-1.5Z"></path>
</svg>
</template>

<template id="rocket-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-rocket">
    <path d="M14.064 0h.186C15.216 0 16 .784 16 1.75v.186a8.752 8.752 0 0 1-2.564 6.186l-.458.459c-.314.314-.641.616-.979.904v3.207c0 .608-.315 1.172-.833 1.49l-2.774 1.707a.749.749 0 0 1-1.11-.418l-.954-3.102a1.214 1.214 0 0 1-.145-.125L3.754 9.816a1.218 1.218 0 0 1-.124-.145L.528 8.717a.749.749 0 0 1-.418-1.11l1.71-2.774A1.748 1.748 0 0 1 3.31 4h3.204c.288-.338.59-.665.904-.979l.459-.458A8.749 8.749 0 0 1 14.064 0ZM8.938 3.623h-.002l-.458.458c-.76.76-1.437 1.598-2.02 2.5l-1.5 2.317 2.143 2.143 2.317-1.5c.902-.583 1.74-1.26 2.499-2.02l.459-.458a7.25 7.25 0 0 0 2.123-5.127V1.75a.25.25 0 0 0-.25-.25h-.186a7.249 7.249 0 0 0-5.125 2.123ZM3.56 14.56c-.732.732-2.334 1.045-3.005 1.148a.234.234 0 0 1-.201-.064.234.234 0 0 1-.064-.201c.103-.671.416-2.273 1.15-3.003a1.502 1.502 0 1 1 2.12 2.12Zm6.94-3.935c-.088.06-.177.118-.266.175l-2.35 1.521.548 1.783 1.949-1.2a.25.25 0 0 0 .119-.213ZM3.678 8.116 5.2 5.766c.058-.09.117-.178.176-.266H3.309a.25.25 0 0 0-.213.119l-1.2 1.95ZM12 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
</template>

<template id="shield-check-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-shield-check">
    <path d="m8.533.133 5.25 1.68A1.75 1.75 0 0 1 15 3.48V7c0 1.566-.32 3.182-1.303 4.682-.983 1.498-2.585 2.813-5.032 3.855a1.697 1.697 0 0 1-1.33 0c-2.447-1.042-4.049-2.357-5.032-3.855C1.32 10.182 1 8.566 1 7V3.48a1.75 1.75 0 0 1 1.217-1.667l5.25-1.68a1.748 1.748 0 0 1 1.066 0Zm-.61 1.429.001.001-5.25 1.68a.251.251 0 0 0-.174.237V7c0 1.36.275 2.666 1.057 3.859.784 1.194 2.121 2.342 4.366 3.298a.196.196 0 0 0 .154 0c2.245-.957 3.582-2.103 4.366-3.297C13.225 9.666 13.5 8.358 13.5 7V3.48a.25.25 0 0 0-.174-.238l-5.25-1.68a.25.25 0 0 0-.153 0ZM11.28 6.28l-3.5 3.5a.75.75 0 0 1-1.06 0l-1.5-1.5a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215l.97.97 2.97-2.97a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"></path>
</svg>
</template>

<template id="heart-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-heart">
    <path d="m8 14.25.345.666a.75.75 0 0 1-.69 0l-.008-.004-.018-.01a7.152 7.152 0 0 1-.31-.17 22.055 22.055 0 0 1-3.434-2.414C2.045 10.731 0 8.35 0 5.5 0 2.836 2.086 1 4.25 1 5.797 1 7.153 1.802 8 3.02 8.847 1.802 10.203 1 11.75 1 13.914 1 16 2.836 16 5.5c0 2.85-2.045 5.231-3.885 6.818a22.066 22.066 0 0 1-3.744 2.584l-.018.01-.006.003h-.002ZM4.25 2.5c-1.336 0-2.75 1.164-2.75 3 0 2.15 1.58 4.144 3.365 5.682A20.58 20.58 0 0 0 8 13.393a20.58 20.58 0 0 0 3.135-2.211C12.92 9.644 14.5 7.65 14.5 5.5c0-1.836-1.414-3-2.75-3-1.373 0-2.609.986-3.029 2.456a.749.749 0 0 1-1.442 0C6.859 3.486 5.623 2.5 4.25 2.5Z"></path>
</svg>
</template>

<template id="server-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-server">
    <path d="M1.75 1h12.5c.966 0 1.75.784 1.75 1.75v4c0 .372-.116.717-.314 1 .198.283.314.628.314 1v4a1.75 1.75 0 0 1-1.75 1.75H1.75A1.75 1.75 0 0 1 0 12.75v-4c0-.358.109-.707.314-1a1.739 1.739 0 0 1-.314-1v-4C0 1.784.784 1 1.75 1ZM1.5 2.75v4c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25v-4a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Zm.25 5.75a.25.25 0 0 0-.25.25v4c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25v-4a.25.25 0 0 0-.25-.25ZM7 4.75A.75.75 0 0 1 7.75 4h4.5a.75.75 0 0 1 0 1.5h-4.5A.75.75 0 0 1 7 4.75ZM7.75 10h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM3 4.75A.75.75 0 0 1 3.75 4h.5a.75.75 0 0 1 0 1.5h-.5A.75.75 0 0 1 3 4.75ZM3.75 10h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1 0-1.5Z"></path>
</svg>
</template>

<template id="globe-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-globe">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM5.78 8.75a9.64 9.64 0 0 0 1.363 4.177c.255.426.542.832.857 1.215.245-.296.551-.705.857-1.215A9.64 9.64 0 0 0 10.22 8.75Zm4.44-1.5a9.64 9.64 0 0 0-1.363-4.177c-.307-.51-.612-.919-.857-1.215a9.927 9.927 0 0 0-.857 1.215A9.64 9.64 0 0 0 5.78 7.25Zm-5.944 1.5H1.543a6.507 6.507 0 0 0 4.666 5.5c-.123-.181-.24-.365-.352-.552-.715-1.192-1.437-2.874-1.581-4.948Zm-2.733-1.5h2.733c.144-2.074.866-3.756 1.58-4.948.12-.197.237-.381.353-.552a6.507 6.507 0 0 0-4.666 5.5Zm10.181 1.5c-.144 2.074-.866 3.756-1.58 4.948-.12.197-.237.381-.353.552a6.507 6.507 0 0 0 4.666-5.5Zm2.733-1.5a6.507 6.507 0 0 0-4.666-5.5c.123.181.24.365.353.552.714 1.192 1.436 2.874 1.58 4.948Z"></path>
</svg>
</template>

<template id="issue-opened-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-issue-opened">
    <path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path><path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Z"></path>
</svg>
</template>

<template id="device-mobile-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-device-mobile">
    <path d="M3.75 0h8.5C13.216 0 14 .784 14 1.75v12.5A1.75 1.75 0 0 1 12.25 16h-8.5A1.75 1.75 0 0 1 2 14.25V1.75C2 .784 2.784 0 3.75 0ZM3.5 1.75v12.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25h-8.5a.25.25 0 0 0-.25.25ZM8 13a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path>
</svg>
</template>

<template id="package-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-package">
    <path d="m8.878.392 5.25 3.045c.54.314.872.89.872 1.514v6.098a1.75 1.75 0 0 1-.872 1.514l-5.25 3.045a1.75 1.75 0 0 1-1.756 0l-5.25-3.045A1.75 1.75 0 0 1 1 11.049V4.951c0-.624.332-1.201.872-1.514L7.122.392a1.75 1.75 0 0 1 1.756 0ZM7.875 1.69l-4.63 2.685L8 7.133l4.755-2.758-4.63-2.685a.248.248 0 0 0-.25 0ZM2.5 5.677v5.372c0 .09.047.171.125.216l4.625 2.683V8.432Zm6.25 8.271 4.625-2.683a.25.25 0 0 0 .125-.216V5.677L8.75 8.432Z"></path>
</svg>
</template>

<template id="credit-card-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-credit-card">
    <path d="M10.75 9a.75.75 0 0 0 0 1.5h1.5a.75.75 0 0 0 0-1.5h-1.5Z"></path><path d="M0 3.75C0 2.784.784 2 1.75 2h12.5c.966 0 1.75.784 1.75 1.75v8.5A1.75 1.75 0 0 1 14.25 14H1.75A1.75 1.75 0 0 1 0 12.25ZM14.5 6.5h-13v5.75c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25Zm0-2.75a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25V5h13Z"></path>
</svg>
</template>

<template id="play-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-play">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm4.879-2.773 4.264 2.559a.25.25 0 0 1 0 .428l-4.264 2.559A.25.25 0 0 1 6 10.559V5.442a.25.25 0 0 1 .379-.215Z"></path>
</svg>
</template>

<template id="gift-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-gift">
    <path d="M2 2.75A2.75 2.75 0 0 1 4.75 0c.983 0 1.873.42 2.57 1.232.268.318.497.668.68 1.042.183-.375.411-.725.68-1.044C9.376.42 10.266 0 11.25 0a2.75 2.75 0 0 1 2.45 4h.55c.966 0 1.75.784 1.75 1.75v2c0 .698-.409 1.301-1 1.582v4.918A1.75 1.75 0 0 1 13.25 16H2.75A1.75 1.75 0 0 1 1 14.25V9.332C.409 9.05 0 8.448 0 7.75v-2C0 4.784.784 4 1.75 4h.55c-.192-.375-.3-.8-.3-1.25ZM7.25 9.5H2.5v4.75c0 .138.112.25.25.25h4.5Zm1.5 0v5h4.5a.25.25 0 0 0 .25-.25V9.5Zm0-4V8h5.5a.25.25 0 0 0 .25-.25v-2a.25.25 0 0 0-.25-.25Zm-7 0a.25.25 0 0 0-.25.25v2c0 .138.112.25.25.25h5.5V5.5h-5.5Zm3-4a1.25 1.25 0 0 0 0 2.5h2.309c-.233-.818-.542-1.401-.878-1.793-.43-.502-.915-.707-1.431-.707ZM8.941 4h2.309a1.25 1.25 0 0 0 0-2.5c-.516 0-1 .205-1.43.707-.337.392-.646.975-.879 1.793Z"></path>
</svg>
</template>

<template id="code-square-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code-square">
    <path d="M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25Zm7.47 3.97a.75.75 0 0 1 1.06 0l2 2a.75.75 0 0 1 0 1.06l-2 2a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L10.69 8 9.22 6.53a.75.75 0 0 1 0-1.06ZM6.78 6.53 5.31 8l1.47 1.47a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215l-2-2a.75.75 0 0 1 0-1.06l2-2a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"></path>
</svg>
</template>

<template id="device-desktop-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-device-desktop">
    <path d="M14.25 1c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0 1 14.25 12h-3.727c.099 1.041.52 1.872 1.292 2.757A.752.752 0 0 1 11.25 16h-6.5a.75.75 0 0 1-.565-1.243c.772-.885 1.192-1.716 1.292-2.757H1.75A1.75 1.75 0 0 1 0 10.25v-7.5C0 1.784.784 1 1.75 1ZM1.75 2.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25ZM9.018 12H6.982a5.72 5.72 0 0 1-.765 2.5h3.566a5.72 5.72 0 0 1-.765-2.5Z"></path>
</svg>
</template>

        <div class="position-relative">
                <ul
                  role="listbox"
                  class="ActionListWrap QueryBuilder-ListWrap"
                  aria-label="Suggestions"
                  data-action="
                    combobox-commit:query-builder#comboboxCommit
                    mousedown:query-builder#resultsMousedown
                  "
                  data-target="query-builder.resultsList"
                  data-persist-list=false
                  id="query-builder-test-results"
                  tabindex="-1"
                ></ul>
        </div>
      <div class="FormControl-inlineValidation" id="validation-01113116-ba82-4548-be1f-5a5a5f5368a7" hidden="hidden">
        <span class="FormControl-inlineValidation--visual">
          <svg aria-hidden="true" height="12" viewBox="0 0 12 12" version="1.1" width="12" data-view-component="true" class="octicon octicon-alert-fill">
    <path d="M4.855.708c.5-.896 1.79-.896 2.29 0l4.675 8.351a1.312 1.312 0 0 1-1.146 1.954H1.33A1.313 1.313 0 0 1 .183 9.058ZM7 7V3H5v4Zm-1 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z"></path>
</svg>
        </span>
        <span></span>
</div>    </div>
    <div data-target="query-builder.screenReaderFeedback" aria-live="polite" aria-atomic="true" class="sr-only"></div>
</query-builder></form>
          <div class="d-flex flex-row color-fg-muted px-3 text-small color-bg-default search-feedback-prompt">
            <a target="_blank" href="https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax" data-view-component="true" class="Link color-fg-accent text-normal ml-2">Search syntax tips</a>            <div class="d-flex flex-1"></div>
          </div>
        </div>
</div>

    </div>
</modal-dialog></div>
  </div>
  <div data-action="click:qbsearch-input#retract" class="dark-backdrop position-fixed" hidden data-target="qbsearch-input.darkBackdrop"></div>
  <div class="color-fg-default">
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true" class="Overlay Overlay-whenNarrow Overlay--size-medium Overlay--motion-scaleFade Overlay--disableScroll">
    <div data-view-component="true" class="Overlay-header">
  <div class="Overlay-headerContentWrap">
    <div class="Overlay-titleWrap">
      <h1 class="Overlay-title " id="feedback-dialog-title">
        Provide feedback
      </h1>
        
    </div>
    <div class="Overlay-actionWrap">
      <button data-close-dialog-id="feedback-dialog" aria-label="Close" aria-label="Close" type="button" data-view-component="true" class="close-button Overlay-closeButton"><svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg></button>
    </div>
  </div>
  
</div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        <div data-view-component="true" class="Overlay-body">        <!-- '"` --><!-- </textarea></xmp> --></option></form><form id="code-search-feedback-form" data-turbo="false" action="/search/feedback" accept-charset="UTF-8" method="post"><input type="hidden" data-csrf="true" name="authenticity_token" value="0csYyLqUDRWlC12jWyQDxA6GxdFjXjxEcVwpj1pIE/JKTgWxybVcLQidrlQzAvg1awCHQVJHiDllggYrCZ18XQ==" />
          <p>We read every piece of feedback, and take your input very seriously.</p>
          <textarea name="feedback" class="form-control width-full mb-2" style="height: 120px" id="feedback"></textarea>
          <input name="include_email" id="include_email" aria-label="Include my email address so I can be contacted" class="form-control mr-2" type="checkbox">
          <label for="include_email" style="font-weight: normal">Include my email address so I can be contacted</label>
</form></div>
      </scrollable-region>
      <div data-view-component="true" class="Overlay-footer Overlay-footer--alignEnd">          <button data-close-dialog-id="feedback-dialog" type="button" data-view-component="true" class="btn">    Cancel
</button>
          <button form="code-search-feedback-form" data-action="click:qbsearch-input#submitFeedback" type="submit" data-view-component="true" class="btn-primary btn">    Submit feedback
</button>
</div>
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true" class="Overlay Overlay-whenNarrow Overlay--size-medium Overlay--motion-scaleFade Overlay--disableScroll">
    <div data-view-component="true" class="Overlay-header Overlay-header--divided">
  <div class="Overlay-headerContentWrap">
    <div class="Overlay-titleWrap">
      <h1 class="Overlay-title " id="custom-scopes-dialog-title">
        Saved searches
      </h1>
        <h2 id="custom-scopes-dialog-description" class="Overlay-description">Use saved searches to filter your results more quickly</h2>
    </div>
    <div class="Overlay-actionWrap">
      <button data-close-dialog-id="custom-scopes-dialog" aria-label="Close" aria-label="Close" type="button" data-view-component="true" class="close-button Overlay-closeButton"><svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg></button>
    </div>
  </div>
  
</div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        <div data-view-component="true" class="Overlay-body">        <div data-target="custom-scopes.customScopesModalDialogFlash"></div>

        <div hidden class="create-custom-scope-form" data-target="custom-scopes.createCustomScopeForm">
        <!-- '"` --><!-- </textarea></xmp> --></option></form><form id="custom-scopes-dialog-form" data-turbo="false" action="/search/custom_scopes" accept-charset="UTF-8" method="post"><input type="hidden" data-csrf="true" name="authenticity_token" value="u2d8P9rzsT7DCkTTuRxSRnRjnNYvDIi031ZP4TOcRYz3veP8YJ7uTHUhKwx0ig8uWWmsq2kKDA8+r7Lw7fCOHQ==" />
          <div data-target="custom-scopes.customScopesModalDialogFlash"></div>

          <input type="hidden" id="custom_scope_id" name="custom_scope_id" data-target="custom-scopes.customScopesIdField">

          <div class="form-group">
            <label for="custom_scope_name">Name</label>
            <auto-check src="/search/custom_scopes/check_name" required>
              <input
                type="text"
                name="custom_scope_name"
                id="custom_scope_name"
                data-target="custom-scopes.customScopesNameField"
                class="form-control"
                autocomplete="off"
                placeholder="github-ruby"
                required
                maxlength="50">
              <input type="hidden" data-csrf="true" value="fl+joXetB3IezE/mmR0frVTcvG8tJbLfUmB//m/81DzC43h8INUqWlpTTXuostjRb32y0peEw+rGqYewU3cYng==" />
            </auto-check>
          </div>

          <div class="form-group">
            <label for="custom_scope_query">Query</label>
            <input
              type="text"
              name="custom_scope_query"
              id="custom_scope_query"
              data-target="custom-scopes.customScopesQueryField"
              class="form-control"
              autocomplete="off"
              placeholder="(repo:mona/a OR repo:mona/b) AND lang:python"
              required
              maxlength="500">
          </div>

          <p class="text-small color-fg-muted">
            To see all available qualifiers, see our <a class="Link--inTextBlock" href="https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax">documentation</a>.
          </p>
</form>        </div>

        <div data-target="custom-scopes.manageCustomScopesForm">
          <div data-target="custom-scopes.list"></div>
        </div>

</div>
      </scrollable-region>
      <div data-view-component="true" class="Overlay-footer Overlay-footer--alignEnd Overlay-footer--divided">          <button data-action="click:custom-scopes#customScopesCancel" type="button" data-view-component="true" class="btn">    Cancel
</button>
          <button form="custom-scopes-dialog-form" data-action="click:custom-scopes#customScopesSubmit" data-target="custom-scopes.customScopesSubmitButton" type="submit" data-view-component="true" class="btn-primary btn">    Create saved search
</button>
</div>
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>


            <div class="position-relative HeaderMenu-link-wrap d-lg-inline-block">
              <a
                href="/login?return_to=https%3A%2F%2Fgithub.com%2Fcatchorg%2FCatch2%2Fblob%2Fdevel%2Fextras%2Fcatch_amalgamated.hpp"
                class="HeaderMenu-link HeaderMenu-link--sign-in HeaderMenu-button flex-shrink-0 no-underline d-none d-lg-inline-flex border border-lg-0 rounded px-2 py-1"
                style="margin-left: 12px;"
                data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.hpp&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="94223e3defe4566eef98392043e27706ef6357ff4beb6e50255f8c9dd96f932c"
                data-analytics-event="{&quot;category&quot;:&quot;Marketing nav&quot;,&quot;action&quot;:&quot;click to go to homepage&quot;,&quot;label&quot;:&quot;ref_page:Marketing;ref_cta:Sign in;ref_loc:Header&quot;}"
              >
                Sign in
              </a>
            </div>

              <a href="/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&amp;source=header-repo&amp;source_repo=catchorg%2FCatch2"
                class="HeaderMenu-link HeaderMenu-link--sign-up HeaderMenu-button flex-shrink-0 d-flex d-lg-inline-flex no-underline border color-border-default rounded px-2 py-1"
                data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.hpp&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="94223e3defe4566eef98392043e27706ef6357ff4beb6e50255f8c9dd96f932c"
                data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show;ref_cta:Sign up;ref_loc:header logged out&quot;}"
              >
                Sign up
              </a>

                <div class="AppHeader-appearanceSettings">
    <react-partial-anchor>
      <button data-target="react-partial-anchor.anchor" id="icon-button-7697b9b2-6739-4dba-8022-754aae72ba1b" aria-labelledby="tooltip-7d7a381a-1d33-4738-9ec7-e486c758a6f1" type="button" disabled="disabled" data-view-component="true" class="Button Button--iconOnly Button--invisible Button--medium AppHeader-button HeaderMenu-link border cursor-wait">  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-sliders Button-visual">
    <path d="M15 2.75a.75.75 0 0 1-.75.75h-4a.75.75 0 0 1 0-1.5h4a.75.75 0 0 1 .75.75Zm-8.5.75v1.25a.75.75 0 0 0 1.5 0v-4a.75.75 0 0 0-1.5 0V2H1.75a.75.75 0 0 0 0 1.5H6.5Zm1.25 5.25a.75.75 0 0 0 0-1.5h-6a.75.75 0 0 0 0 1.5h6ZM15 8a.75.75 0 0 1-.75.75H11.5V10a.75.75 0 1 1-1.5 0V6a.75.75 0 0 1 1.5 0v1.25h2.75A.75.75 0 0 1 15 8Zm-9 5.25v-2a.75.75 0 0 0-1.5 0v1.25H1.75a.75.75 0 0 0 0 1.5H4.5v1.25a.75.75 0 0 0 1.5 0v-2Zm9 0a.75.75 0 0 1-.75.75h-6a.75.75 0 0 1 0-1.5h6a.75.75 0 0 1 .75.75Z"></path>
</svg>
</button><tool-tip id="tooltip-7d7a381a-1d33-4738-9ec7-e486c758a6f1" for="icon-button-7697b9b2-6739-4dba-8022-754aae72ba1b" popover="manual" data-direction="s" data-type="label" data-view-component="true" class="sr-only position-absolute">Appearance settings</tool-tip>

      <template data-target="react-partial-anchor.template">
        <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-react.47f1598729334a521d2a.module.css" />
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/appearance-settings.76259b61ecc822265749.module.css" />

<react-partial
  partial-name="appearance-settings"
  data-ssr="false"
  data-attempted-ssr="false"
  data-react-profiling="false"
>
  
  <script type="application/json" data-target="react-partial.embeddedData">{"props":{}}</script>
  <div data-target="react-partial.reactRoot"></div>
</react-partial>

      </template>
    </react-partial-anchor>
  </div>

          <button type="button" class="sr-only js-header-menu-focus-trap d-block d-lg-none">Resetting focus</button>
        </div>
      </div>
    </div>
  </div>
</header>

      <div hidden="hidden" data-view-component="true" class="js-stale-session-flash stale-session-flash flash flash-warn flash-full">
  
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
        <span class="js-stale-session-flash-signed-in" hidden>You signed in with another tab or window. <a class="Link--inTextBlock" href="">Reload</a> to refresh your session.</span>
        <span class="js-stale-session-flash-signed-out" hidden>You signed out in another tab or window. <a class="Link--inTextBlock" href="">Reload</a> to refresh your session.</span>
        <span class="js-stale-session-flash-switched" hidden>You switched accounts on another tab or window. <a class="Link--inTextBlock" href="">Reload</a> to refresh your session.</span>

    <button id="icon-button-fc7e79eb-5231-4d10-bfc1-a0dfd52e1e0f" aria-labelledby="tooltip-655d3673-6087-48cf-a18f-bacb4e28c998" type="button" data-view-component="true" class="Button Button--iconOnly Button--invisible Button--medium flash-close js-flash-close">  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x Button-visual">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
</button><tool-tip id="tooltip-655d3673-6087-48cf-a18f-bacb4e28c998" for="icon-button-fc7e79eb-5231-4d10-bfc1-a0dfd52e1e0f" popover="manual" data-direction="s" data-type="label" data-view-component="true" class="sr-only position-absolute">Dismiss alert</tool-tip>


  
</div>
    </div>

  <div id="start-of-content" class="show-on-focus"></div>








    <div id="js-flash-container" class="flash-container" data-turbo-replace>




  <template class="js-flash-template">
    
<div class="flash flash-full   {{ className }}">
  <div >
    <button autofocus class="flash-close js-flash-close" type="button" aria-label="Dismiss this message">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
    </button>
    <div aria-atomic="true" role="alert" class="js-flash-alert">
      
      <div>{{ message }}</div>

    </div>
  </div>
</div>
  </template>
</div>


    






  <div
    class="application-main "
    data-commit-hovercards-enabled
    data-discussion-hovercards-enabled
    data-issue-and-pr-hovercards-enabled
    data-project-hovercards-enabled
  >
        <div itemscope itemtype="http://schema.org/SoftwareSourceCode" class="">
    <main id="js-repo-pjax-container" >
      
      
    

    






  
  <div id="repository-container-header"  class="pt-3 hide-full-screen" style="background-color: var(--page-header-bgColor, var(--color-page-header-bg));" data-turbo-replace>

      <div class="d-flex flex-nowrap flex-justify-end mb-3  px-3 px-lg-5" style="gap: 1rem;">

        <div class="flex-auto min-width-0 width-fit">
            
  <div class=" d-flex flex-wrap flex-items-center wb-break-word f3 text-normal">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo color-fg-muted mr-2">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
    
    <span class="author flex-self-stretch" itemprop="author">
      <a class="url fn" rel="author" data-hovercard-type="organization" data-hovercard-url="/orgs/catchorg/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/catchorg">
        catchorg
</a>    </span>
    <span class="mx-1 flex-self-stretch color-fg-muted">/</span>
    <strong itemprop="name" class="mr-2 flex-self-stretch">
      <a data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" href="/catchorg/Catch2">Catch2</a>
    </strong>

    <span></span><span class="Label Label--secondary v-align-middle mr-1">Public</span>
  </div>


        </div>

        <div id="repository-details-container" class="flex-shrink-0" data-turbo-replace style="max-width: 70%;">
            <ul class="pagehead-actions flex-shrink-0 d-none d-md-inline" style="padding: 2px 0;">
    
        <li>
          <include-fragment src="/catchorg/Catch2/sponsor_button" data-nonce="v2:c597b4c7-c558-28a2-ff73-37e10999e8ff" data-view-component="true">
  
  <div data-show-on-forbidden-error hidden>
    <div class="Box">
  <div class="blankslate-container">
    <div data-view-component="true" class="blankslate blankslate-spacious color-bg-default rounded-2">
      

      <h3 data-view-component="true" class="blankslate-heading">        Uh oh!
</h3>
      <p data-view-component="true">        <p class="color-fg-muted my-2 mb-2 ws-normal">There was an error while loading. <a class="Link--inTextBlock" data-turbo="false" href="" aria-label="Please reload this page">Please reload this page</a>.</p>
</p>

</div>  </div>
</div>  </div>
</include-fragment>
        </li>

      

  <li>
            <a href="/login?return_to=%2Fcatchorg%2FCatch2" rel="nofollow" id="repository-details-watch-button" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;notification subscription menu watch&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.hpp&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="f0551e1e9e1424af272018b6a9821348fbc9fb84fc65d20ed3a169975bc2b2bf" aria-label="You must be signed in to change notification settings" data-view-component="true" class="btn-sm btn">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-bell mr-2">
    <path d="M8 16a2 2 0 0 0 1.985-1.75c.017-.137-.097-.25-.235-.25h-3.5c-.138 0-.252.113-.235.25A2 2 0 0 0 8 16ZM3 5a5 5 0 0 1 10 0v2.947c0 .05.015.098.042.139l1.703 2.555A1.519 1.519 0 0 1 13.482 13H2.518a1.516 1.516 0 0 1-1.263-2.36l1.703-2.554A.255.255 0 0 0 3 7.947Zm5-3.5A3.5 3.5 0 0 0 4.5 5v2.947c0 .346-.102.683-.294.97l-1.703 2.556a.017.017 0 0 0-.003.01l.001.006c0 .002.002.004.004.006l.006.004.007.001h10.964l.007-.001.006-.004.004-.006.001-.007a.017.017 0 0 0-.003-.01l-1.703-2.554a1.745 1.745 0 0 1-.294-.97V5A3.5 3.5 0 0 0 8 1.5Z"></path>
</svg>Notifications
</a>    <tool-tip id="tooltip-acf423f0-b0f1-4ff1-ac1e-53bb338b4655" for="repository-details-watch-button" popover="manual" data-direction="s" data-type="description" data-view-component="true" class="sr-only position-absolute">You must be signed in to change notification settings</tool-tip>

  </li>

  <li>
          <a icon="repo-forked" id="fork-button" href="/login?return_to=%2Fcatchorg%2FCatch2" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;repo details fork button&quot;,&quot;repository_id&quot;:1062572,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.hpp&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="c6d26d4e25be8f139e117a62c3650a7fa86c8bc3f6d9e906a7ff15726c10792e" data-view-component="true" class="btn-sm btn">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo-forked mr-2">
    <path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-1.5v2.128a2.251 2.251 0 1 1-1.5 0V8.5h-1.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-3 8.75a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"></path>
</svg>Fork
    <span id="repo-network-counter" data-pjax-replace="true" data-turbo-replace="true" title="3,119" data-view-component="true" class="Counter">3.1k</span>
</a>
  </li>

  <li>
        <div data-view-component="true" class="BtnGroup d-flex">
        <a href="/login?return_to=%2Fcatchorg%2FCatch2" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;star button&quot;,&quot;repository_id&quot;:1062572,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.hpp&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="e1678818e3554126a5db05083b631c7f3834f1ff41ad71ddf595de5b771c07e3" aria-label="You must be signed in to star a repository" data-view-component="true" class="tooltipped tooltipped-sw btn-sm btn">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-star v-align-text-bottom d-inline-block mr-2">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg><span data-view-component="true" class="d-inline">
          Star
</span>          <span id="repo-stars-counter-star" aria-label="19588 users starred this repository" data-singular-suffix="user starred this repository" data-plural-suffix="users starred this repository" data-turbo-replace="true" title="19,588" data-view-component="true" class="Counter js-social-count">19.6k</span>
</a></div>
  </li>

</ul>

        </div>
      </div>

        <div id="responsive-meta-container" data-turbo-replace>
</div>


          <nav data-pjax="#js-repo-pjax-container" aria-label="Repository" data-view-component="true" class="js-repo-nav js-sidenav-container-pjax js-responsive-underlinenav overflow-hidden UnderlineNav px-3 px-md-4 px-lg-5">

  <ul data-view-component="true" class="UnderlineNav-body list-style-none">
      <li data-view-component="true" class="d-inline-flex">
  <a id="code-tab" href="/catchorg/Catch2" data-tab-item="i0code-tab" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages repo_deployments repo_attestations /catchorg/Catch2" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g c" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Code&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" aria-current="page" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item selected">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code UnderlineNav-octicon d-none d-sm-inline">
    <path d="m11.28 3.22 4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L13.94 8l-3.72-3.72a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215Zm-6.56 0a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L2.06 8l3.72 3.72a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L.47 8.53a.75.75 0 0 1 0-1.06Z"></path>
</svg>
        <span data-content="Code">Code</span>
          <span id="code-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="issues-tab" href="/catchorg/Catch2/issues" data-tab-item="i1issues-tab" data-selected-links="repo_issues repo_labels repo_milestones /catchorg/Catch2/issues" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g i" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Issues&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-issue-opened UnderlineNav-octicon d-none d-sm-inline">
    <path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path><path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Z"></path>
</svg>
        <span data-content="Issues">Issues</span>
          <span id="issues-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="391" data-view-component="true" class="Counter">391</span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="pull-requests-tab" href="/catchorg/Catch2/pulls" data-tab-item="i2pull-requests-tab" data-selected-links="repo_pulls checks /catchorg/Catch2/pulls" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g p" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Pull requests&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-git-pull-request UnderlineNav-octicon d-none d-sm-inline">
    <path d="M1.5 3.25a2.25 2.25 0 1 1 3 2.122v5.256a2.251 2.251 0 1 1-1.5 0V5.372A2.25 2.25 0 0 1 1.5 3.25Zm5.677-.177L9.573.677A.25.25 0 0 1 10 .854V2.5h1A2.5 2.5 0 0 1 13.5 5v5.628a2.251 2.251 0 1 1-1.5 0V5a1 1 0 0 0-1-1h-1v1.646a.25.25 0 0 1-.427.177L7.177 3.427a.25.25 0 0 1 0-.354ZM3.75 2.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm0 9.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm8.25.75a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Z"></path>
</svg>
        <span data-content="Pull requests">Pull requests</span>
          <span id="pull-requests-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="31" data-view-component="true" class="Counter">31</span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="actions-tab" href="/catchorg/Catch2/actions" data-tab-item="i3actions-tab" data-selected-links="repo_actions /catchorg/Catch2/actions" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g a" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Actions&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-play UnderlineNav-octicon d-none d-sm-inline">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm4.879-2.773 4.264 2.559a.25.25 0 0 1 0 .428l-4.264 2.559A.25.25 0 0 1 6 10.559V5.442a.25.25 0 0 1 .379-.215Z"></path>
</svg>
        <span data-content="Actions">Actions</span>
          <span id="actions-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="projects-tab" href="/catchorg/Catch2/projects" data-tab-item="i4projects-tab" data-selected-links="repo_projects new_repo_project repo_project /catchorg/Catch2/projects" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g b" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Projects&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-table UnderlineNav-octicon d-none d-sm-inline">
    <path d="M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25ZM6.5 6.5v8h7.75a.25.25 0 0 0 .25-.25V6.5Zm8-1.5V1.75a.25.25 0 0 0-.25-.25H6.5V5Zm-13 1.5v7.75c0 .138.112.25.25.25H5v-8ZM5 5V1.5H1.75a.25.25 0 0 0-.25.25V5Z"></path>
</svg>
        <span data-content="Projects">Projects</span>
          <span id="projects-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="0" hidden="hidden" data-view-component="true" class="Counter">0</span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="security-tab" href="/catchorg/Catch2/security" data-tab-item="i5security-tab" data-selected-links="security overview alerts policy token_scanning code_scanning /catchorg/Catch2/security" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g s" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Security&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-shield UnderlineNav-octicon d-none d-sm-inline">
    <path d="M7.467.133a1.748 1.748 0 0 1 1.066 0l5.25 1.68A1.75 1.75 0 0 1 15 3.48V7c0 1.566-.32 3.182-1.303 4.682-.983 1.498-2.585 2.813-5.032 3.855a1.697 1.697 0 0 1-1.33 0c-2.447-1.042-4.049-2.357-5.032-3.855C1.32 10.182 1 8.566 1 7V3.48a1.75 1.75 0 0 1 1.217-1.667Zm.61 1.429a.25.25 0 0 0-.153 0l-5.25 1.68a.25.25 0 0 0-.174.238V7c0 1.358.275 2.666 1.057 3.86.784 1.194 2.121 2.34 4.366 3.297a.196.196 0 0 0 .154 0c2.245-.956 3.582-2.104 4.366-3.298C13.225 9.666 13.5 8.36 13.5 7V3.48a.251.251 0 0 0-.174-.237l-5.25-1.68ZM8.75 4.75v3a.75.75 0 0 1-1.5 0v-3a.75.75 0 0 1 1.5 0ZM9 10.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
        <span data-content="Security">Security</span>
          <include-fragment src="/catchorg/Catch2/security/overall-count" accept="text/fragment+html" data-nonce="v2:c597b4c7-c558-28a2-ff73-37e10999e8ff" data-view-component="true">
  
  <div data-show-on-forbidden-error hidden>
    <div class="Box">
  <div class="blankslate-container">
    <div data-view-component="true" class="blankslate blankslate-spacious color-bg-default rounded-2">
      

      <h3 data-view-component="true" class="blankslate-heading">        Uh oh!
</h3>
      <p data-view-component="true">        <p class="color-fg-muted my-2 mb-2 ws-normal">There was an error while loading. <a class="Link--inTextBlock" data-turbo="false" href="" aria-label="Please reload this page">Please reload this page</a>.</p>
</p>

</div>  </div>
</div>  </div>
</include-fragment>

    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="insights-tab" href="/catchorg/Catch2/pulse" data-tab-item="i6insights-tab" data-selected-links="repo_graphs repo_contributors dependency_graph dependabot_updates pulse people community /catchorg/Catch2/pulse" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Insights&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-graph UnderlineNav-octicon d-none d-sm-inline">
    <path d="M1.5 1.75V13.5h13.75a.75.75 0 0 1 0 1.5H.75a.75.75 0 0 1-.75-.75V1.75a.75.75 0 0 1 1.5 0Zm14.28 2.53-5.25 5.25a.75.75 0 0 1-1.06 0L7 7.06 4.28 9.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.25-3.25a.75.75 0 0 1 1.06 0L10 7.94l4.72-4.72a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"></path>
</svg>
        <span data-content="Insights">Insights</span>
          <span id="insights-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
</ul>
    <div style="visibility:hidden;" data-view-component="true" class="UnderlineNav-actions js-responsive-underlinenav-overflow position-absolute pr-3 pr-md-4 pr-lg-5 right-0">      <action-menu data-select-variant="none" data-view-component="true">
  <focus-group direction="vertical" mnemonics retain>
    <button id="action-menu-ca5bd3d5-8816-4d4e-880a-5973cc8b0463-button" popovertarget="action-menu-ca5bd3d5-8816-4d4e-880a-5973cc8b0463-overlay" aria-controls="action-menu-ca5bd3d5-8816-4d4e-880a-5973cc8b0463-list" aria-haspopup="true" aria-labelledby="tooltip-eded67d2-c0c0-4811-807a-afb4090bbb7a" type="button" data-view-component="true" class="Button Button--iconOnly Button--secondary Button--medium UnderlineNav-item">  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-kebab-horizontal Button-visual">
    <path d="M8 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3ZM1.5 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm13 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path>
</svg>
</button><tool-tip id="tooltip-eded67d2-c0c0-4811-807a-afb4090bbb7a" for="action-menu-ca5bd3d5-8816-4d4e-880a-5973cc8b0463-button" popover="manual" data-direction="s" data-type="label" data-view-component="true" class="sr-only position-absolute">Additional navigation options</tool-tip>


<anchored-position data-target="action-menu.overlay" id="action-menu-ca5bd3d5-8816-4d4e-880a-5973cc8b0463-overlay" anchor="action-menu-ca5bd3d5-8816-4d4e-880a-5973cc8b0463-button" align="start" side="outside-bottom" anchor-offset="normal" popover="auto" data-view-component="true">
  <div data-view-component="true" class="Overlay Overlay--size-auto">
    
      <div data-view-component="true" class="Overlay-body Overlay-body--paddingNone">          <action-list>
  <div data-view-component="true">
    <ul aria-labelledby="action-menu-ca5bd3d5-8816-4d4e-880a-5973cc8b0463-button" id="action-menu-ca5bd3d5-8816-4d4e-880a-5973cc8b0463-list" role="menu" data-view-component="true" class="ActionListWrap--inset ActionListWrap">
        <li hidden="hidden" data-menu-item="i0code-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-28449725-2d04-4618-b6ff-dfe6ef0974ce" href="/catchorg/Catch2" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code">
    <path d="m11.28 3.22 4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L13.94 8l-3.72-3.72a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215Zm-6.56 0a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L2.06 8l3.72 3.72a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L.47 8.53a.75.75 0 0 1 0-1.06Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Code
</span>      
</a>
  
</li>
        <li hidden="hidden" data-menu-item="i1issues-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-613af60f-ff18-45b3-9877-b049f4e8c97e" href="/catchorg/Catch2/issues" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-issue-opened">
    <path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path><path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Issues
</span>      
</a>
  
</li>
        <li hidden="hidden" data-menu-item="i2pull-requests-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-2be599d9-3fb9-4b80-b3da-597809175e35" href="/catchorg/Catch2/pulls" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-git-pull-request">
    <path d="M1.5 3.25a2.25 2.25 0 1 1 3 2.122v5.256a2.251 2.251 0 1 1-1.5 0V5.372A2.25 2.25 0 0 1 1.5 3.25Zm5.677-.177L9.573.677A.25.25 0 0 1 10 .854V2.5h1A2.5 2.5 0 0 1 13.5 5v5.628a2.251 2.251 0 1 1-1.5 0V5a1 1 0 0 0-1-1h-1v1.646a.25.25 0 0 1-.427.177L7.177 3.427a.25.25 0 0 1 0-.354ZM3.75 2.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm0 9.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm8.25.75a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Pull requests
</span>      
</a>
  
</li>
        <li hidden="hidden" data-menu-item="i3actions-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-b6151995-2d4d-4021-8900-8858c2b2d4c9" href="/catchorg/Catch2/actions" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-play">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm4.879-2.773 4.264 2.559a.25.25 0 0 1 0 .428l-4.264 2.559A.25.25 0 0 1 6 10.559V5.442a.25.25 0 0 1 .379-.215Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Actions
</span>      
</a>
  
</li>
        <li hidden="hidden" data-menu-item="i4projects-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-28859a59-8e32-4ddc-b036-0707bd98501f" href="/catchorg/Catch2/projects" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-table">
    <path d="M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25ZM6.5 6.5v8h7.75a.25.25 0 0 0 .25-.25V6.5Zm8-1.5V1.75a.25.25 0 0 0-.25-.25H6.5V5Zm-13 1.5v7.75c0 .138.112.25.25.25H5v-8ZM5 5V1.5H1.75a.25.25 0 0 0-.25.25V5Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Projects
</span>      
</a>
  
</li>
        <li hidden="hidden" data-menu-item="i5security-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-01951231-407b-4598-a0e8-4d4dac99445f" href="/catchorg/Catch2/security" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-shield">
    <path d="M7.467.133a1.748 1.748 0 0 1 1.066 0l5.25 1.68A1.75 1.75 0 0 1 15 3.48V7c0 1.566-.32 3.182-1.303 4.682-.983 1.498-2.585 2.813-5.032 3.855a1.697 1.697 0 0 1-1.33 0c-2.447-1.042-4.049-2.357-5.032-3.855C1.32 10.182 1 8.566 1 7V3.48a1.75 1.75 0 0 1 1.217-1.667Zm.61 1.429a.25.25 0 0 0-.153 0l-5.25 1.68a.25.25 0 0 0-.174.238V7c0 1.358.275 2.666 1.057 3.86.784 1.194 2.121 2.34 4.366 3.297a.196.196 0 0 0 .154 0c2.245-.956 3.582-2.104 4.366-3.298C13.225 9.666 13.5 8.36 13.5 7V3.48a.251.251 0 0 0-.174-.237l-5.25-1.68ZM8.75 4.75v3a.75.75 0 0 1-1.5 0v-3a.75.75 0 0 1 1.5 0ZM9 10.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Security
</span>      
</a>
  
</li>
        <li hidden="hidden" data-menu-item="i6insights-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-6827ab55-0673-4153-ba15-ce6e83ab6fda" href="/catchorg/Catch2/pulse" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-graph">
    <path d="M1.5 1.75V13.5h13.75a.75.75 0 0 1 0 1.5H.75a.75.75 0 0 1-.75-.75V1.75a.75.75 0 0 1 1.5 0Zm14.28 2.53-5.25 5.25a.75.75 0 0 1-1.06 0L7 7.06 4.28 9.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.25-3.25a.75.75 0 0 1 1.06 0L10 7.94l4.72-4.72a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Insights
</span>      
</a>
  
</li>
</ul>    
</div></action-list>


</div>
      
</div></anchored-position>  </focus-group>
</action-menu></div>
</nav>

  </div>

  



<turbo-frame id="repo-content-turbo-frame" target="_top" data-turbo-action="advance" class="">
    <div id="repo-content-pjax-container" class="repository-content " >
    



    
      
    








<react-app
  app-name="react-code-view"
  initial-path="/catchorg/Catch2/blob/devel/extras/catch_amalgamated.hpp"
    style="display: block; min-height: calc(100vh - 64px);"
  data-attempted-ssr="false"
  data-ssr="false"
  data-lazy="false"
  data-alternate="false"
  data-data-router-enabled="false"
  data-react-profiling="false"
>
  
  <script type="application/json" data-target="react-app.embeddedData">{"payload":{"allShortcutsEnabled":false,"fileTree":{"extras":{"items":[{"name":"Catch.cmake","path":"extras/Catch.cmake","contentType":"file"},{"name":"CatchAddTests.cmake","path":"extras/CatchAddTests.cmake","contentType":"file"},{"name":"CatchShardTests.cmake","path":"extras/CatchShardTests.cmake","contentType":"file"},{"name":"CatchShardTestsImpl.cmake","path":"extras/CatchShardTestsImpl.cmake","contentType":"file"},{"name":"ParseAndAddCatchTests.cmake","path":"extras/ParseAndAddCatchTests.cmake","contentType":"file"},{"name":"catch_amalgamated.cpp","path":"extras/catch_amalgamated.cpp","contentType":"file"},{"name":"catch_amalgamated.hpp","path":"extras/catch_amalgamated.hpp","contentType":"file"},{"name":"gdbinit","path":"extras/gdbinit","contentType":"file"},{"name":"lldbinit","path":"extras/lldbinit","contentType":"file"}],"totalCount":9},"":{"items":[{"name":".conan","path":".conan","contentType":"directory"},{"name":".github","path":".github","contentType":"directory"},{"name":"CMake","path":"CMake","contentType":"directory"},{"name":"data","path":"data","contentType":"directory"},{"name":"docs","path":"docs","contentType":"directory"},{"name":"examples","path":"examples","contentType":"directory"},{"name":"extras","path":"extras","contentType":"directory"},{"name":"fuzzing","path":"fuzzing","contentType":"directory"},{"name":"src","path":"src","contentType":"directory"},{"name":"tests","path":"tests","contentType":"directory"},{"name":"third_party","path":"third_party","contentType":"directory"},{"name":"tools","path":"tools","contentType":"directory"},{"name":".bazelrc","path":".bazelrc","contentType":"file"},{"name":".clang-format","path":".clang-format","contentType":"file"},{"name":".clang-tidy","path":".clang-tidy","contentType":"file"},{"name":".gitattributes","path":".gitattributes","contentType":"file"},{"name":".gitignore","path":".gitignore","contentType":"file"},{"name":"BUILD.bazel","path":"BUILD.bazel","contentType":"file"},{"name":"CMakeLists.txt","path":"CMakeLists.txt","contentType":"file"},{"name":"CMakePresets.json","path":"CMakePresets.json","contentType":"file"},{"name":"CODE_OF_CONDUCT.md","path":"CODE_OF_CONDUCT.md","contentType":"file"},{"name":"Doxyfile","path":"Doxyfile","contentType":"file"},{"name":"LICENSE.txt","path":"LICENSE.txt","contentType":"file"},{"name":"MAINTAINERS.md","path":"MAINTAINERS.md","contentType":"file"},{"name":"MODULE.bazel","path":"MODULE.bazel","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"},{"name":"SECURITY.md","path":"SECURITY.md","contentType":"file"},{"name":"appveyor.yml","path":"appveyor.yml","contentType":"file"},{"name":"codecov.yml","path":"codecov.yml","contentType":"file"},{"name":"conanfile.py","path":"conanfile.py","contentType":"file"},{"name":"mdsnippets.json","path":"mdsnippets.json","contentType":"file"},{"name":"meson.build","path":"meson.build","contentType":"file"},{"name":"meson_options.txt","path":"meson_options.txt","contentType":"file"}],"totalCount":33}},"fileTreeProcessingTime":12.472940999999999,"foldersToFetch":[],"incompleteFileTree":false,"repo":{"id":1062572,"defaultBranch":"devel","name":"Catch2","ownerLogin":"catchorg","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2010-11-08T18:22:56.000Z","ownerAvatar":"https://avatars.githubusercontent.com/u/33321405?v=4","public":true,"private":false,"isOrgOwned":true},"codeLineWrapEnabled":false,"symbolsExpanded":false,"treeExpanded":true,"refInfo":{"name":"devel","listCacheKey":"v0:1752785944.0","canEdit":false,"refType":"branch","currentOid":"db6171a706afb712d5ec13cc7b98e256e760fcb2"},"path":"extras/catch_amalgamated.hpp","currentUser":null,"blob":{"rawLines":["","//              Copyright Catch2 Authors","// Distributed under the Boost Software License, Version 1.0.","//   (See accompanying file LICENSE.txt or copy at","//        https://www.boost.org/LICENSE_1_0.txt)","","// SPDX-License-Identifier: BSL-1.0","","//  Catch v3.8.1","//  Generated: 2025-04-08 12:33:19.851017","//  ----------------------------------------------------------","//  This file is an amalgamation of multiple different files.","//  You probably shouldn't edit it directly.","//  ----------------------------------------------------------","#ifndef CATCH_AMALGAMATED_HPP_INCLUDED","#define CATCH_AMALGAMATED_HPP_INCLUDED","","","/** \\file"," * This is a convenience header for Catch2. It includes **all** of Catch2 headers."," *"," * Generally the Catch2 users should use specific includes they need,"," * but this header can be used instead for ease-of-experimentation, or"," * just plain convenience, at the cost of (significantly) increased"," * compilation times."," *"," * When a new header is added to either the top level folder, or to the"," * corresponding internal subfolder, it should be added here. Headers"," * added to the various subparts (e.g. matchers, generators, etc...),"," * should go their respective catch-all headers."," */","","#ifndef CATCH_ALL_HPP_INCLUDED","#define CATCH_ALL_HPP_INCLUDED","","","","/** \\file"," * This is a convenience header for Catch2's benchmarking. It includes"," * **all** of Catch2 headers related to benchmarking."," *"," * Generally the Catch2 users should use specific includes they need,"," * but this header can be used instead for ease-of-experimentation, or"," * just plain convenience, at the cost of (significantly) increased"," * compilation times."," *"," * When a new header is added to either the `benchmark` folder, or to"," * the corresponding internal (detail) subfolder, it should be added here."," */","","#ifndef CATCH_BENCHMARK_ALL_HPP_INCLUDED","#define CATCH_BENCHMARK_ALL_HPP_INCLUDED","","","","// Adapted from donated nonius code.","","#ifndef CATCH_BENCHMARK_HPP_INCLUDED","#define CATCH_BENCHMARK_HPP_INCLUDED","","","","#ifndef CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED","#define CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED","","// Detect a number of compiler features - by compiler","// The following features are defined:","//","// CATCH_CONFIG_WINDOWS_SEH : is Windows SEH supported?","// CATCH_CONFIG_POSIX_SIGNALS : are POSIX signals supported?","// CATCH_CONFIG_DISABLE_EXCEPTIONS : Are exceptions enabled?","// ****************","// Note to maintainers: if new toggles are added please document them","// in configuration.md, too","// ****************","","// In general each macro has a _NO_\u003cfeature name\u003e form","// (e.g. CATCH_CONFIG_NO_POSIX_SIGNALS) which disables the feature.","// Many features, at point of detection, define an _INTERNAL_ macro, so they","// can be combined, en-mass, with the _NO_ forms later.","","","","#ifndef CATCH_PLATFORM_HPP_INCLUDED","#define CATCH_PLATFORM_HPP_INCLUDED","","// See e.g.:","// https://opensource.apple.com/source/CarbonHeaders/CarbonHeaders-18.1/TargetConditionals.h.auto.html","#ifdef __APPLE__","#  ifndef __has_extension","#    define __has_extension(x) 0","#  endif","#  include \u003cTargetConditionals.h\u003e","#  if (defined(TARGET_OS_OSX) \u0026\u0026 TARGET_OS_OSX == 1) || \\","      (defined(TARGET_OS_MAC) \u0026\u0026 TARGET_OS_MAC == 1)","#    define CATCH_PLATFORM_MAC","#  elif (defined(TARGET_OS_IPHONE) \u0026\u0026 TARGET_OS_IPHONE == 1)","#    define CATCH_PLATFORM_IPHONE","#  endif","","#elif defined(linux) || defined(__linux) || defined(__linux__)","#  define CATCH_PLATFORM_LINUX","","#elif defined(WIN32) || defined(__WIN32__) || defined(_WIN32) || defined(_MSC_VER) || defined(__MINGW32__)","#  define CATCH_PLATFORM_WINDOWS","","#  if defined( WINAPI_FAMILY ) \u0026\u0026 ( WINAPI_FAMILY == WINAPI_FAMILY_APP )","#      define CATCH_PLATFORM_WINDOWS_UWP","#  endif","","#elif defined(__ORBIS__) || defined(__PROSPERO__)","#  define CATCH_PLATFORM_PLAYSTATION","","#endif","","#endif // CATCH_PLATFORM_HPP_INCLUDED","","#ifdef __cplusplus","","#  if (__cplusplus \u003e= 201703L) || (defined(_MSVC_LANG) \u0026\u0026 _MSVC_LANG \u003e= 201703L)","#    define CATCH_CPP17_OR_GREATER","#  endif","","#  if (__cplusplus \u003e= 202002L) || (defined(_MSVC_LANG) \u0026\u0026 _MSVC_LANG \u003e= 202002L)","#    define CATCH_CPP20_OR_GREATER","#  endif","","#endif","","// Only GCC compiler should be used in this block, so other compilers trying to","// mask themselves as GCC should be ignored.","#if defined(__GNUC__) \u0026\u0026 !defined(__clang__) \u0026\u0026 !defined(__ICC) \u0026\u0026 !defined(__CUDACC__) \u0026\u0026 !defined(__LCC__) \u0026\u0026 !defined(__NVCOMPILER)","#    define CATCH_INTERNAL_START_WARNINGS_SUPPRESSION _Pragma( \"GCC diagnostic push\" )","#    define CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION  _Pragma( \"GCC diagnostic pop\" )","","// This only works on GCC 9+. so we have to also add a global suppression of Wparentheses","// for older versions of GCC.","#    define CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS \\","         _Pragma( \"GCC diagnostic ignored \\\"-Wparentheses\\\"\" )","","#    define CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT \\","         _Pragma( \"GCC diagnostic ignored \\\"-Wunused-result\\\"\" )","","#    define CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\","         _Pragma( \"GCC diagnostic ignored \\\"-Wunused-variable\\\"\" )","","#    define CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS \\","         _Pragma( \"GCC diagnostic ignored \\\"-Wuseless-cast\\\"\" )","","#    define CATCH_INTERNAL_SUPPRESS_SHADOW_WARNINGS \\","         _Pragma( \"GCC diagnostic ignored \\\"-Wshadow\\\"\" )","","#    define CATCH_INTERNAL_CONFIG_USE_BUILTIN_CONSTANT_P","","#endif","","#if defined(__NVCOMPILER)","#    define CATCH_INTERNAL_START_WARNINGS_SUPPRESSION _Pragma( \"diag push\" )","#    define CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION  _Pragma( \"diag pop\" )","#    define CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS _Pragma( \"diag_suppress declared_but_not_referenced\" )","#endif","","#if defined(__CUDACC__) \u0026\u0026 !defined(__clang__)","#  ifdef __NVCC_DIAG_PRAGMA_SUPPORT__","// New pragmas introduced in CUDA 11.5+","#    define CATCH_INTERNAL_START_WARNINGS_SUPPRESSION _Pragma( \"nv_diagnostic push\" )","#    define CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION  _Pragma( \"nv_diagnostic pop\" )","#    define CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS _Pragma( \"nv_diag_suppress 177\" )","#  else","#    define CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS _Pragma( \"diag_suppress 177\" )","#  endif","#endif","","// clang-cl defines _MSC_VER as well as __clang__, which could cause the","// start/stop internal suppression macros to be double defined.","#if defined(__clang__) \u0026\u0026 !defined(_MSC_VER)","#    define CATCH_INTERNAL_CONFIG_USE_BUILTIN_CONSTANT_P","#    define CATCH_INTERNAL_START_WARNINGS_SUPPRESSION _Pragma( \"clang diagnostic push\" )","#    define CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION  _Pragma( \"clang diagnostic pop\" )","#endif // __clang__ \u0026\u0026 !_MSC_VER","","#if defined(__clang__)","","#    define CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\","         _Pragma( \"clang diagnostic ignored \\\"-Wexit-time-destructors\\\"\" ) \\","         _Pragma( \"clang diagnostic ignored \\\"-Wglobal-constructors\\\"\")","","#    define CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS \\","         _Pragma( \"clang diagnostic ignored \\\"-Wparentheses\\\"\" )","","#    define CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\","         _Pragma( \"clang diagnostic ignored \\\"-Wunused-variable\\\"\" )","","#    if (__clang_major__ \u003e= 20)","#        define CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \\","             _Pragma( \"clang diagnostic ignored \\\"-Wvariadic-macro-arguments-omitted\\\"\" )","#    elif (__clang_major__ == 19)","#        define CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \\","\t         _Pragma( \"clang diagnostic ignored \\\"-Wc++20-extensions\\\"\" )","#    else","#        define CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS","             _Pragma( \"clang diagnostic ignored \\\"-Wgnu-zero-variadic-macro-arguments\\\"\" )","#    endif","","#    define CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \\","         _Pragma( \"clang diagnostic ignored \\\"-Wunused-template\\\"\" )","","#    define CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS \\","        _Pragma( \"clang diagnostic ignored \\\"-Wcomma\\\"\" )","","#    define CATCH_INTERNAL_SUPPRESS_SHADOW_WARNINGS \\","        _Pragma( \"clang diagnostic ignored \\\"-Wshadow\\\"\" )","","#endif // __clang__","","// As of this writing, IBM XL's implementation of __builtin_constant_p has a bug","// which results in calls to destructors being emitted for each temporary,","// without a matching initialization. In practice, this can result in something","// like `std::string::~string` being called on an uninitialized value.","//","// For example, this code will likely segfault under IBM XL:","// ```","// REQUIRE(std::string(\"12\") + \"34\" == \"1234\")","// ```","//","// Similarly, NVHPC's implementation of `__builtin_constant_p` has a bug which","// results in calls to the immediately evaluated lambda expressions to be","// reported as unevaluated lambdas.","// https://developer.nvidia.com/nvidia_bug/3321845.","//","// Therefore, `CATCH_INTERNAL_IGNORE_BUT_WARN` is not implemented.","#if defined( __ibmxl__ ) || defined( __CUDACC__ ) || defined( __NVCOMPILER )","#    define CATCH_INTERNAL_CONFIG_NO_USE_BUILTIN_CONSTANT_P","#endif","","","","////////////////////////////////////////////////////////////////////////////////","// We know some environments not to support full POSIX signals","#if defined( CATCH_PLATFORM_WINDOWS ) ||                                       \\","    defined( CATCH_PLATFORM_PLAYSTATION ) ||                                   \\","    defined( __CYGWIN__ ) ||                                                   \\","    defined( __QNX__ ) ||                                                      \\","    defined( __EMSCRIPTEN__ ) ||                                               \\","    defined( __DJGPP__ ) ||                                                    \\","    defined( __OS400__ )","#    define CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS","#else","#    define CATCH_INTERNAL_CONFIG_POSIX_SIGNALS","#endif","","////////////////////////////////////////////////////////////////////////////////","// Assume that some platforms do not support getenv.","#if defined( CATCH_PLATFORM_WINDOWS_UWP ) ||                                   \\","    defined( CATCH_PLATFORM_PLAYSTATION ) ||                                   \\","    defined( _GAMING_XBOX )","#    define CATCH_INTERNAL_CONFIG_NO_GETENV","#else","#    define CATCH_INTERNAL_CONFIG_GETENV","#endif","","////////////////////////////////////////////////////////////////////////////////","// Android somehow still does not support std::to_string","#if defined(__ANDROID__)","#    define CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING","#endif","","////////////////////////////////////////////////////////////////////////////////","// Not all Windows environments support SEH properly","#if defined(__MINGW32__)","#    define CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH","#endif","","////////////////////////////////////////////////////////////////////////////////","// PS4","#if defined(__ORBIS__)","#    define CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE","#endif","","////////////////////////////////////////////////////////////////////////////////","// Cygwin","#ifdef __CYGWIN__","","// Required for some versions of Cygwin to declare gettimeofday","// see: http://stackoverflow.com/questions/36901803/gettimeofday-not-declared-in-this-scope-cygwin","#   define _BSD_SOURCE","// some versions of cygwin (most) do not support std::to_string. Use the libstd check.","// https://gcc.gnu.org/onlinedocs/gcc-4.8.2/libstdc++/api/a01053_source.html line 2812-2813","# if !((__cplusplus \u003e= 201103L) \u0026\u0026 defined(_GLIBCXX_USE_C99) \\","           \u0026\u0026 !defined(_GLIBCXX_HAVE_BROKEN_VSWPRINTF))","","#    define CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING","","# endif","#endif // __CYGWIN__","","////////////////////////////////////////////////////////////////////////////////","// Visual C++","#if defined(_MSC_VER)","","// We want to defer to nvcc-specific warning suppression if we are compiled","// with nvcc masquerading for MSVC.","#    if !defined( __CUDACC__ )","#        define CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","            __pragma( warning( push ) )","#        define CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\","            __pragma( warning( pop ) )","#    endif","","// Universal Windows platform does not support SEH","// Or console colours (or console at all...)","#  if defined(CATCH_PLATFORM_WINDOWS_UWP)","#    define CATCH_INTERNAL_CONFIG_NO_COLOUR_WIN32","#  else","#    define CATCH_INTERNAL_CONFIG_WINDOWS_SEH","#  endif","","// MSVC traditional preprocessor needs some workaround for __VA_ARGS__","// _MSVC_TRADITIONAL == 0 means new conformant preprocessor","// _MSVC_TRADITIONAL == 1 means old traditional non-conformant preprocessor","#  if !defined(__clang__) // Handle Clang masquerading for msvc","#    if !defined(_MSVC_TRADITIONAL) || (defined(_MSVC_TRADITIONAL) \u0026\u0026 _MSVC_TRADITIONAL)","#      define CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","#    endif // MSVC_TRADITIONAL","#  endif // __clang__","","#endif // _MSC_VER","","#if defined(_REENTRANT) || defined(_MSC_VER)","// Enable async processing, as -pthread is specified or no additional linking is required","# define CATCH_INTERNAL_CONFIG_USE_ASYNC","#endif // _MSC_VER","","////////////////////////////////////////////////////////////////////////////////","// Check if we are compiled with -fno-exceptions or equivalent","#if defined(__EXCEPTIONS) || defined(__cpp_exceptions) || defined(_CPPUNWIND)","#  define CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED","#endif","","","////////////////////////////////////////////////////////////////////////////////","// Embarcadero C++Build","#if defined(__BORLANDC__)","    #define CATCH_INTERNAL_CONFIG_POLYFILL_ISNAN","#endif","","////////////////////////////////////////////////////////////////////////////////","","// RTX is a special version of Windows that is real time.","// This means that it is detected as Windows, but does not provide","// the same set of capabilities as real Windows does.","#if defined(UNDER_RTSS) || defined(RTX64_BUILD)","    #define CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH","    #define CATCH_INTERNAL_CONFIG_NO_ASYNC","    #define CATCH_INTERNAL_CONFIG_NO_COLOUR_WIN32","#endif","","#if !defined(_GLIBCXX_USE_C99_MATH_TR1)","#define CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER","#endif","","// Various stdlib support checks that require __has_include","#if defined(__has_include)","  // Check if string_view is available and usable","  #if __has_include(\u003cstring_view\u003e) \u0026\u0026 defined(CATCH_CPP17_OR_GREATER)","  #    define CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW","  #endif","","  // Check if optional is available and usable","  #  if __has_include(\u003coptional\u003e) \u0026\u0026 defined(CATCH_CPP17_OR_GREATER)","  #    define CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL","  #  endif // __has_include(\u003coptional\u003e) \u0026\u0026 defined(CATCH_CPP17_OR_GREATER)","","  // Check if byte is available and usable","  #  if __has_include(\u003ccstddef\u003e) \u0026\u0026 defined(CATCH_CPP17_OR_GREATER)","  #    include \u003ccstddef\u003e","  #    if defined(__cpp_lib_byte) \u0026\u0026 (__cpp_lib_byte \u003e 0)","  #      define CATCH_INTERNAL_CONFIG_CPP17_BYTE","  #    endif","  #  endif // __has_include(\u003ccstddef\u003e) \u0026\u0026 defined(CATCH_CPP17_OR_GREATER)","","  // Check if variant is available and usable","  #  if __has_include(\u003cvariant\u003e) \u0026\u0026 defined(CATCH_CPP17_OR_GREATER)","  #    if defined(__clang__) \u0026\u0026 (__clang_major__ \u003c 8)","         // work around clang bug with libstdc++ https://bugs.llvm.org/show_bug.cgi?id=31852","         // fix should be in clang 8, workaround in libstdc++ 8.2","  #      include \u003cciso646\u003e","  #      if defined(__GLIBCXX__) \u0026\u0026 defined(_GLIBCXX_RELEASE) \u0026\u0026 (_GLIBCXX_RELEASE \u003c 9)","  #        define CATCH_CONFIG_NO_CPP17_VARIANT","  #      else","  #        define CATCH_INTERNAL_CONFIG_CPP17_VARIANT","  #      endif // defined(__GLIBCXX__) \u0026\u0026 defined(_GLIBCXX_RELEASE) \u0026\u0026 (_GLIBCXX_RELEASE \u003c 9)","  #    else","  #      define CATCH_INTERNAL_CONFIG_CPP17_VARIANT","  #    endif // defined(__clang__) \u0026\u0026 (__clang_major__ \u003c 8)","  #  endif // __has_include(\u003cvariant\u003e) \u0026\u0026 defined(CATCH_CPP17_OR_GREATER)","#endif // defined(__has_include)","","","#if defined(CATCH_INTERNAL_CONFIG_WINDOWS_SEH) \u0026\u0026 !defined(CATCH_CONFIG_NO_WINDOWS_SEH) \u0026\u0026 !defined(CATCH_CONFIG_WINDOWS_SEH) \u0026\u0026 !defined(CATCH_INTERNAL_CONFIG_NO_WINDOWS_SEH)","#   define CATCH_CONFIG_WINDOWS_SEH","#endif","// This is set by default, because we assume that unix compilers are posix-signal-compatible by default.","#if defined(CATCH_INTERNAL_CONFIG_POSIX_SIGNALS) \u0026\u0026 !defined(CATCH_INTERNAL_CONFIG_NO_POSIX_SIGNALS) \u0026\u0026 !defined(CATCH_CONFIG_NO_POSIX_SIGNALS) \u0026\u0026 !defined(CATCH_CONFIG_POSIX_SIGNALS)","#   define CATCH_CONFIG_POSIX_SIGNALS","#endif","","#if defined(CATCH_INTERNAL_CONFIG_GETENV) \u0026\u0026 !defined(CATCH_INTERNAL_CONFIG_NO_GETENV) \u0026\u0026 !defined(CATCH_CONFIG_NO_GETENV) \u0026\u0026 !defined(CATCH_CONFIG_GETENV)","#   define CATCH_CONFIG_GETENV","#endif","","#if !defined(CATCH_INTERNAL_CONFIG_NO_CPP11_TO_STRING) \u0026\u0026 !defined(CATCH_CONFIG_NO_CPP11_TO_STRING) \u0026\u0026 !defined(CATCH_CONFIG_CPP11_TO_STRING)","#    define CATCH_CONFIG_CPP11_TO_STRING","#endif","","#if defined(CATCH_INTERNAL_CONFIG_CPP17_OPTIONAL) \u0026\u0026 !defined(CATCH_CONFIG_NO_CPP17_OPTIONAL) \u0026\u0026 !defined(CATCH_CONFIG_CPP17_OPTIONAL)","#  define CATCH_CONFIG_CPP17_OPTIONAL","#endif","","#if defined(CATCH_INTERNAL_CONFIG_CPP17_STRING_VIEW) \u0026\u0026 !defined(CATCH_CONFIG_NO_CPP17_STRING_VIEW) \u0026\u0026 !defined(CATCH_CONFIG_CPP17_STRING_VIEW)","#  define CATCH_CONFIG_CPP17_STRING_VIEW","#endif","","#if defined(CATCH_INTERNAL_CONFIG_CPP17_VARIANT) \u0026\u0026 !defined(CATCH_CONFIG_NO_CPP17_VARIANT) \u0026\u0026 !defined(CATCH_CONFIG_CPP17_VARIANT)","#  define CATCH_CONFIG_CPP17_VARIANT","#endif","","#if defined(CATCH_INTERNAL_CONFIG_CPP17_BYTE) \u0026\u0026 !defined(CATCH_CONFIG_NO_CPP17_BYTE) \u0026\u0026 !defined(CATCH_CONFIG_CPP17_BYTE)","#  define CATCH_CONFIG_CPP17_BYTE","#endif","","","#if defined(CATCH_CONFIG_EXPERIMENTAL_REDIRECT)","#  define CATCH_INTERNAL_CONFIG_NEW_CAPTURE","#endif","","#if defined(CATCH_INTERNAL_CONFIG_NEW_CAPTURE) \u0026\u0026 !defined(CATCH_INTERNAL_CONFIG_NO_NEW_CAPTURE) \u0026\u0026 !defined(CATCH_CONFIG_NO_NEW_CAPTURE) \u0026\u0026 !defined(CATCH_CONFIG_NEW_CAPTURE)","#  define CATCH_CONFIG_NEW_CAPTURE","#endif","","#if !defined( CATCH_INTERNAL_CONFIG_EXCEPTIONS_ENABLED ) \u0026\u0026 \\","    !defined( CATCH_CONFIG_DISABLE_EXCEPTIONS ) \u0026\u0026          \\","    !defined( CATCH_CONFIG_NO_DISABLE_EXCEPTIONS )","#  define CATCH_CONFIG_DISABLE_EXCEPTIONS","#endif","","#if defined(CATCH_INTERNAL_CONFIG_POLYFILL_ISNAN) \u0026\u0026 !defined(CATCH_CONFIG_NO_POLYFILL_ISNAN) \u0026\u0026 !defined(CATCH_CONFIG_POLYFILL_ISNAN)","#  define CATCH_CONFIG_POLYFILL_ISNAN","#endif","","#if defined(CATCH_INTERNAL_CONFIG_USE_ASYNC)  \u0026\u0026 !defined(CATCH_INTERNAL_CONFIG_NO_ASYNC) \u0026\u0026 !defined(CATCH_CONFIG_NO_USE_ASYNC) \u0026\u0026 !defined(CATCH_CONFIG_USE_ASYNC)","#  define CATCH_CONFIG_USE_ASYNC","#endif","","#if defined(CATCH_INTERNAL_CONFIG_GLOBAL_NEXTAFTER) \u0026\u0026 !defined(CATCH_CONFIG_NO_GLOBAL_NEXTAFTER) \u0026\u0026 !defined(CATCH_CONFIG_GLOBAL_NEXTAFTER)","#  define CATCH_CONFIG_GLOBAL_NEXTAFTER","#endif","","","// The goal of this macro is to avoid evaluation of the arguments, but","// still have the compiler warn on problems inside...","#if defined( CATCH_INTERNAL_CONFIG_USE_BUILTIN_CONSTANT_P ) \u0026\u0026 \\","    !defined( CATCH_INTERNAL_CONFIG_NO_USE_BUILTIN_CONSTANT_P ) \u0026\u0026 !defined(CATCH_CONFIG_USE_BUILTIN_CONSTANT_P)","#define CATCH_CONFIG_USE_BUILTIN_CONSTANT_P","#endif","","#if defined( CATCH_CONFIG_USE_BUILTIN_CONSTANT_P ) \u0026\u0026 \\","    !defined( CATCH_CONFIG_NO_USE_BUILTIN_CONSTANT_P )","#    define CATCH_INTERNAL_IGNORE_BUT_WARN( ... )                                              \\","        (void)__builtin_constant_p( __VA_ARGS__ ) /* NOLINT(cppcoreguidelines-pro-type-vararg, \\","                                                     hicpp-vararg) */","#else","#    define CATCH_INTERNAL_IGNORE_BUT_WARN( ... )","#endif","","// Even if we do not think the compiler has that warning, we still have","// to provide a macro that can be used by the code.","#if !defined(CATCH_INTERNAL_START_WARNINGS_SUPPRESSION)","#   define CATCH_INTERNAL_START_WARNINGS_SUPPRESSION","#endif","#if !defined(CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION)","#   define CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION","#endif","#if !defined(CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS)","#   define CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS","#endif","#if !defined(CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS)","#   define CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS","#endif","#if !defined(CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT)","#   define CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT","#endif","#if !defined(CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS)","#   define CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS","#endif","#if !defined(CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS)","#   define CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS","#endif","#if !defined(CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS)","#   define CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS","#endif","#if !defined( CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS )","#    define CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS","#endif","#if !defined( CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS )","#    define CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS","#endif","#if !defined( CATCH_INTERNAL_SUPPRESS_SHADOW_WARNINGS )","#    define CATCH_INTERNAL_SUPPRESS_SHADOW_WARNINGS","#endif","","#if defined(__APPLE__) \u0026\u0026 defined(__apple_build_version__) \u0026\u0026 (__clang_major__ \u003c 10)","#   undef CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS","#elif defined(__clang__) \u0026\u0026 (__clang_major__ \u003c 5)","#   undef CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS","#endif","","","#if defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)","#define CATCH_TRY if ((true))","#define CATCH_CATCH_ALL if ((false))","#define CATCH_CATCH_ANON(type) if ((false))","#else","#define CATCH_TRY try","#define CATCH_CATCH_ALL catch (...)","#define CATCH_CATCH_ANON(type) catch (type)","#endif","","#if defined(CATCH_INTERNAL_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR) \u0026\u0026 !defined(CATCH_CONFIG_NO_TRADITIONAL_MSVC_PREPROCESSOR) \u0026\u0026 !defined(CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR)","#define CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","#endif","","#if defined( CATCH_PLATFORM_WINDOWS ) \u0026\u0026       \\","    !defined( CATCH_CONFIG_COLOUR_WIN32 ) \u0026\u0026 \\","    !defined( CATCH_CONFIG_NO_COLOUR_WIN32 ) \u0026\u0026 \\","    !defined( CATCH_INTERNAL_CONFIG_NO_COLOUR_WIN32 )","#    define CATCH_CONFIG_COLOUR_WIN32","#endif","","#if defined( CATCH_CONFIG_SHARED_LIBRARY ) \u0026\u0026 defined( _MSC_VER ) \u0026\u0026 \\","    !defined( CATCH_CONFIG_STATIC )","#    ifdef Catch2_EXPORTS","#        define CATCH_EXPORT //__declspec( dllexport ) // not needed","#    else","#        define CATCH_EXPORT __declspec( dllimport )","#    endif","#else","#    define CATCH_EXPORT","#endif","","#endif // CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED","","","#ifndef CATCH_CONTEXT_HPP_INCLUDED","#define CATCH_CONTEXT_HPP_INCLUDED","","","namespace Catch {","","    class IResultCapture;","    class IConfig;","","    class Context {","        IConfig const* m_config = nullptr;","        IResultCapture* m_resultCapture = nullptr;","","        CATCH_EXPORT static Context* currentContext;","        friend Context\u0026 getCurrentMutableContext();","        friend Context const\u0026 getCurrentContext();","        static void createContext();","        friend void cleanUpContext();","","    public:","        constexpr IResultCapture* getResultCapture() const {","            return m_resultCapture;","        }","        constexpr IConfig const* getConfig() const { return m_config; }","        constexpr void setResultCapture( IResultCapture* resultCapture ) {","            m_resultCapture = resultCapture;","        }","        constexpr void setConfig( IConfig const* config ) { m_config = config; }","","    };","","    Context\u0026 getCurrentMutableContext();","","    inline Context const\u0026 getCurrentContext() {","        // We duplicate the logic from `getCurrentMutableContext` here,","        // to avoid paying the call overhead in debug mode.","        if ( !Context::currentContext ) { Context::createContext(); }","        // NOLINTNEXTLINE(clang-analyzer-core.uninitialized.UndefReturn)","        return *Context::currentContext;","    }","","    void cleanUpContext();","","    class SimplePcg32;","    SimplePcg32\u0026 sharedRng();","}","","#endif // CATCH_CONTEXT_HPP_INCLUDED","","","#ifndef CATCH_MOVE_AND_FORWARD_HPP_INCLUDED","#define CATCH_MOVE_AND_FORWARD_HPP_INCLUDED","","#include \u003ctype_traits\u003e","","//! Replacement for std::move with better compile time performance","#define CATCH_MOVE(...) static_cast\u003cstd::remove_reference_t\u003cdecltype(__VA_ARGS__)\u003e\u0026\u0026\u003e(__VA_ARGS__)","","//! Replacement for std::forward with better compile time performance","#define CATCH_FORWARD(...) static_cast\u003cdecltype(__VA_ARGS__)\u0026\u0026\u003e(__VA_ARGS__)","","#endif // CATCH_MOVE_AND_FORWARD_HPP_INCLUDED","","","#ifndef CATCH_TEST_FAILURE_EXCEPTION_HPP_INCLUDED","#define CATCH_TEST_FAILURE_EXCEPTION_HPP_INCLUDED","","namespace Catch {","","    //! Used to signal that an assertion macro failed","    struct TestFailureException{};","    //! Used to signal that the remainder of a test should be skipped","    struct TestSkipException {};","","    /**","     * Outlines throwing of `TestFailureException` into a single TU","     *","     * Also handles `CATCH_CONFIG_DISABLE_EXCEPTIONS` for callers.","     */","    [[noreturn]] void throw_test_failure_exception();","","    /**","     * Outlines throwing of `TestSkipException` into a single TU","     *","     * Also handles `CATCH_CONFIG_DISABLE_EXCEPTIONS` for callers.","     */","    [[noreturn]] void throw_test_skip_exception();","","} // namespace Catch","","#endif // CATCH_TEST_FAILURE_EXCEPTION_HPP_INCLUDED","","","#ifndef CATCH_UNIQUE_NAME_HPP_INCLUDED","#define CATCH_UNIQUE_NAME_HPP_INCLUDED","","","","","/** \\file"," * Wrapper for the CONFIG configuration option"," *"," * When generating internal unique names, there are two options. Either"," * we mix in the current line number, or mix in an incrementing number."," * We prefer the latter, using `__COUNTER__`, but users might want to"," * use the former."," */","","#ifndef CATCH_CONFIG_COUNTER_HPP_INCLUDED","#define CATCH_CONFIG_COUNTER_HPP_INCLUDED","","","#if ( !defined(__JETBRAINS_IDE__) || __JETBRAINS_IDE__ \u003e= 20170300L )","    #define CATCH_INTERNAL_CONFIG_COUNTER","#endif","","#if defined( CATCH_INTERNAL_CONFIG_COUNTER ) \u0026\u0026 \\","    !defined( CATCH_CONFIG_NO_COUNTER ) \u0026\u0026 \\","    !defined( CATCH_CONFIG_COUNTER )","#    define CATCH_CONFIG_COUNTER","#endif","","","#endif // CATCH_CONFIG_COUNTER_HPP_INCLUDED","#define INTERNAL_CATCH_UNIQUE_NAME_LINE2( name, line ) name##line","#define INTERNAL_CATCH_UNIQUE_NAME_LINE( name, line ) INTERNAL_CATCH_UNIQUE_NAME_LINE2( name, line )","#ifdef CATCH_CONFIG_COUNTER","#  define INTERNAL_CATCH_UNIQUE_NAME( name ) INTERNAL_CATCH_UNIQUE_NAME_LINE( name, __COUNTER__ )","#else","#  define INTERNAL_CATCH_UNIQUE_NAME( name ) INTERNAL_CATCH_UNIQUE_NAME_LINE( name, __LINE__ )","#endif","","#endif // CATCH_UNIQUE_NAME_HPP_INCLUDED","","","#ifndef CATCH_INTERFACES_CAPTURE_HPP_INCLUDED","#define CATCH_INTERFACES_CAPTURE_HPP_INCLUDED","","#include \u003cstring\u003e","","","","#ifndef CATCH_STRINGREF_HPP_INCLUDED","#define CATCH_STRINGREF_HPP_INCLUDED","","#include \u003ccstddef\u003e","#include \u003cstring\u003e","#include \u003ciosfwd\u003e","#include \u003ccassert\u003e","","#include \u003ccstring\u003e","","namespace Catch {","","    /// A non-owning string class (similar to the forthcoming std::string_view)","    /// Note that, because a StringRef may be a substring of another string,","    /// it may not be null terminated.","    class StringRef {","    public:","        using size_type = std::size_t;","        using const_iterator = const char*;","","        static constexpr size_type npos{ static_cast\u003csize_type\u003e( -1 ) };","","    private:","        static constexpr char const* const s_empty = \"\";","","        char const* m_start = s_empty;","        size_type m_size = 0;","","    public: // construction","        constexpr StringRef() noexcept = default;","","        StringRef( char const* rawChars ) noexcept;","","        constexpr StringRef( char const* rawChars, size_type size ) noexcept","        :   m_start( rawChars ),","            m_size( size )","        {}","","        StringRef( std::string const\u0026 stdString ) noexcept","        :   m_start( stdString.c_str() ),","            m_size( stdString.size() )","        {}","","        explicit operator std::string() const {","            return std::string(m_start, m_size);","        }","","    public: // operators","        auto operator == ( StringRef other ) const noexcept -\u003e bool {","            return m_size == other.m_size","                \u0026\u0026 (std::memcmp( m_start, other.m_start, m_size ) == 0);","        }","        auto operator != (StringRef other) const noexcept -\u003e bool {","            return !(*this == other);","        }","","        constexpr auto operator[] ( size_type index ) const noexcept -\u003e char {","            assert(index \u003c m_size);","            return m_start[index];","        }","","        bool operator\u003c(StringRef rhs) const noexcept;","","    public: // named queries","        constexpr auto empty() const noexcept -\u003e bool {","            return m_size == 0;","        }","        constexpr auto size() const noexcept -\u003e size_type {","            return m_size;","        }","","        // Returns a substring of [start, start + length).","        // If start + length \u003e size(), then the substring is [start, size()).","        // If start \u003e size(), then the substring is empty.","        constexpr StringRef substr(size_type start, size_type length) const noexcept {","            if (start \u003c m_size) {","                const auto shortened_size = m_size - start;","                return StringRef(m_start + start, (shortened_size \u003c length) ? shortened_size : length);","            } else {","                return StringRef();","            }","        }","","        // Returns the current start pointer. May not be null-terminated.","        constexpr char const* data() const noexcept {","            return m_start;","        }","","        constexpr const_iterator begin() const { return m_start; }","        constexpr const_iterator end() const { return m_start + m_size; }","","","        friend std::string\u0026 operator += (std::string\u0026 lhs, StringRef rhs);","        friend std::ostream\u0026 operator \u003c\u003c (std::ostream\u0026 os, StringRef str);","        friend std::string operator+(StringRef lhs, StringRef rhs);","","        /**","         * Provides a three-way comparison with rhs","         *","         * Returns negative number if lhs \u003c rhs, 0 if lhs == rhs, and a positive","         * number if lhs \u003e rhs","         */","        int compare( StringRef rhs ) const;","    };","","","    constexpr auto operator \"\"_sr( char const* rawChars, std::size_t size ) noexcept -\u003e StringRef {","        return StringRef( rawChars, size );","    }","} // namespace Catch","","constexpr auto operator \"\"_catch_sr( char const* rawChars, std::size_t size ) noexcept -\u003e Catch::StringRef {","    return Catch::StringRef( rawChars, size );","}","","#endif // CATCH_STRINGREF_HPP_INCLUDED","","","#ifndef CATCH_RESULT_TYPE_HPP_INCLUDED","#define CATCH_RESULT_TYPE_HPP_INCLUDED","","namespace Catch {","","    // ResultWas::OfType enum","    struct ResultWas { enum OfType {","        Unknown = -1,","        Ok = 0,","        Info = 1,","        Warning = 2,","        // TODO: Should explicit skip be considered \"not OK\" (cf. isOk)? I.e., should it have the failure bit?","        ExplicitSkip = 4,","","        FailureBit = 0x10,","","        ExpressionFailed = FailureBit | 1,","        ExplicitFailure = FailureBit | 2,","","        Exception = 0x100 | FailureBit,","","        ThrewException = Exception | 1,","        DidntThrowException = Exception | 2,","","        FatalErrorCondition = 0x200 | FailureBit","","    }; };","","    constexpr bool isOk( ResultWas::OfType resultType ) {","        return ( resultType \u0026 ResultWas::FailureBit ) == 0;","    }","    constexpr bool isJustInfo( int flags ) { return flags == ResultWas::Info; }","","","    // ResultDisposition::Flags enum","    struct ResultDisposition { enum Flags {","        Normal = 0x01,","","        ContinueOnFailure = 0x02,   // Failures fail test, but execution continues","        FalseTest = 0x04,           // Prefix expression with !","        SuppressFail = 0x08         // Failures are reported but do not fail the test","    }; };","","    constexpr ResultDisposition::Flags operator|( ResultDisposition::Flags lhs,","                                        ResultDisposition::Flags rhs ) {","        return static_cast\u003cResultDisposition::Flags\u003e( static_cast\u003cint\u003e( lhs ) |","                                                      static_cast\u003cint\u003e( rhs ) );","    }","","    constexpr bool isFalseTest( int flags ) {","        return ( flags \u0026 ResultDisposition::FalseTest ) != 0;","    }","    constexpr bool shouldSuppressFailure( int flags ) {","        return ( flags \u0026 ResultDisposition::SuppressFail ) != 0;","    }","","} // end namespace Catch","","#endif // CATCH_RESULT_TYPE_HPP_INCLUDED","","","#ifndef CATCH_UNIQUE_PTR_HPP_INCLUDED","#define CATCH_UNIQUE_PTR_HPP_INCLUDED","","#include \u003ccassert\u003e","#include \u003ctype_traits\u003e","","","namespace Catch {","namespace Detail {","    /**","     * A reimplementation of `std::unique_ptr` for improved compilation performance","     *","     * Does not support arrays nor custom deleters.","     */","    template \u003ctypename T\u003e","    class unique_ptr {","        T* m_ptr;","    public:","        constexpr unique_ptr(std::nullptr_t = nullptr):","            m_ptr{}","        {}","        explicit constexpr unique_ptr(T* ptr):","            m_ptr(ptr)","        {}","","        template \u003ctypename U, typename = std::enable_if_t\u003cstd::is_base_of\u003cT, U\u003e::value\u003e\u003e","        unique_ptr(unique_ptr\u003cU\u003e\u0026\u0026 from):","            m_ptr(from.release())","        {}","","        template \u003ctypename U, typename = std::enable_if_t\u003cstd::is_base_of\u003cT, U\u003e::value\u003e\u003e","        unique_ptr\u0026 operator=(unique_ptr\u003cU\u003e\u0026\u0026 from) {","            reset(from.release());","","            return *this;","        }","","        unique_ptr(unique_ptr const\u0026) = delete;","        unique_ptr\u0026 operator=(unique_ptr const\u0026) = delete;","","        unique_ptr(unique_ptr\u0026\u0026 rhs) noexcept:","            m_ptr(rhs.m_ptr) {","            rhs.m_ptr = nullptr;","        }","        unique_ptr\u0026 operator=(unique_ptr\u0026\u0026 rhs) noexcept {","            reset(rhs.release());","","            return *this;","        }","","        ~unique_ptr() {","            delete m_ptr;","        }","","        T\u0026 operator*() {","            assert(m_ptr);","            return *m_ptr;","        }","        T const\u0026 operator*() const {","            assert(m_ptr);","            return *m_ptr;","        }","        T* operator-\u003e() noexcept {","            assert(m_ptr);","            return m_ptr;","        }","        T const* operator-\u003e() const noexcept {","            assert(m_ptr);","            return m_ptr;","        }","","        T* get() { return m_ptr; }","        T const* get() const { return m_ptr; }","","        void reset(T* ptr = nullptr) {","            delete m_ptr;","            m_ptr = ptr;","        }","","        T* release() {","            auto temp = m_ptr;","            m_ptr = nullptr;","            return temp;","        }","","        explicit operator bool() const {","            return m_ptr;","        }","","        friend void swap(unique_ptr\u0026 lhs, unique_ptr\u0026 rhs) {","            auto temp = lhs.m_ptr;","            lhs.m_ptr = rhs.m_ptr;","            rhs.m_ptr = temp;","        }","    };","","    //! Specialization to cause compile-time error for arrays","    template \u003ctypename T\u003e","    class unique_ptr\u003cT[]\u003e;","","    template \u003ctypename T, typename... Args\u003e","    unique_ptr\u003cT\u003e make_unique(Args\u0026\u0026... args) {","        return unique_ptr\u003cT\u003e(new T(CATCH_FORWARD(args)...));","    }","","","} // end namespace Detail","} // end namespace Catch","","#endif // CATCH_UNIQUE_PTR_HPP_INCLUDED","","","#ifndef CATCH_BENCHMARK_STATS_FWD_HPP_INCLUDED","#define CATCH_BENCHMARK_STATS_FWD_HPP_INCLUDED","","","","// Adapted from donated nonius code.","","#ifndef CATCH_CLOCK_HPP_INCLUDED","#define CATCH_CLOCK_HPP_INCLUDED","","#include \u003cchrono\u003e","","namespace Catch {","    namespace Benchmark {","        using IDuration = std::chrono::nanoseconds;","        using FDuration = std::chrono::duration\u003cdouble, std::nano\u003e;","","        template \u003ctypename Clock\u003e","        using TimePoint = typename Clock::time_point;","","        using default_clock = std::chrono::steady_clock;","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_CLOCK_HPP_INCLUDED","","namespace Catch {","","    // We cannot forward declare the type with default template argument","    // multiple times, so it is split out into a separate header so that","    // we can prevent multiple declarations in dependees","    template \u003ctypename Duration = Benchmark::FDuration\u003e","    struct BenchmarkStats;","","} // end namespace Catch","","#endif // CATCH_BENCHMARK_STATS_FWD_HPP_INCLUDED","","namespace Catch {","","    class AssertionResult;","    struct AssertionInfo;","    struct SectionInfo;","    struct SectionEndInfo;","    struct MessageInfo;","    struct MessageBuilder;","    struct Counts;","    struct AssertionReaction;","    struct SourceLineInfo;","","    class ITransientExpression;","    class IGeneratorTracker;","","    struct BenchmarkInfo;","","    namespace Generators {","        class GeneratorUntypedBase;","        using GeneratorBasePtr = Catch::Detail::unique_ptr\u003cGeneratorUntypedBase\u003e;","    }","","","    class IResultCapture {","    public:","        virtual ~IResultCapture();","","        virtual void notifyAssertionStarted( AssertionInfo const\u0026 info ) = 0;","        virtual bool sectionStarted( StringRef sectionName,","                                     SourceLineInfo const\u0026 sectionLineInfo,","                                     Counts\u0026 assertions ) = 0;","        virtual void sectionEnded( SectionEndInfo\u0026\u0026 endInfo ) = 0;","        virtual void sectionEndedEarly( SectionEndInfo\u0026\u0026 endInfo ) = 0;","","        virtual IGeneratorTracker*","        acquireGeneratorTracker( StringRef generatorName,","                                 SourceLineInfo const\u0026 lineInfo ) = 0;","        virtual IGeneratorTracker*","        createGeneratorTracker( StringRef generatorName,","                                SourceLineInfo lineInfo,","                                Generators::GeneratorBasePtr\u0026\u0026 generator ) = 0;","","        virtual void benchmarkPreparing( StringRef name ) = 0;","        virtual void benchmarkStarting( BenchmarkInfo const\u0026 info ) = 0;","        virtual void benchmarkEnded( BenchmarkStats\u003c\u003e const\u0026 stats ) = 0;","        virtual void benchmarkFailed( StringRef error ) = 0;","","        virtual void pushScopedMessage( MessageInfo const\u0026 message ) = 0;","        virtual void popScopedMessage( MessageInfo const\u0026 message ) = 0;","","        virtual void emplaceUnscopedMessage( MessageBuilder\u0026\u0026 builder ) = 0;","","        virtual void handleFatalErrorCondition( StringRef message ) = 0;","","        virtual void handleExpr","                (   AssertionInfo const\u0026 info,","                    ITransientExpression const\u0026 expr,","                    AssertionReaction\u0026 reaction ) = 0;","        virtual void handleMessage","                (   AssertionInfo const\u0026 info,","                    ResultWas::OfType resultType,","                    std::string\u0026\u0026 message,","                    AssertionReaction\u0026 reaction ) = 0;","        virtual void handleUnexpectedExceptionNotThrown","                (   AssertionInfo const\u0026 info,","                    AssertionReaction\u0026 reaction ) = 0;","        virtual void handleUnexpectedInflightException","                (   AssertionInfo const\u0026 info,","                    std::string\u0026\u0026 message,","                    AssertionReaction\u0026 reaction ) = 0;","        virtual void handleIncomplete","                (   AssertionInfo const\u0026 info ) = 0;","        virtual void handleNonExpr","                (   AssertionInfo const \u0026info,","                    ResultWas::OfType resultType,","                    AssertionReaction \u0026reaction ) = 0;","","","","        virtual bool lastAssertionPassed() = 0;","        virtual void assertionPassed() = 0;","","        // Deprecated, do not use:","        virtual std::string getCurrentTestName() const = 0;","        virtual const AssertionResult* getLastResult() const = 0;","        virtual void exceptionEarlyReported() = 0;","    };","","    IResultCapture\u0026 getResultCapture();","}","","#endif // CATCH_INTERFACES_CAPTURE_HPP_INCLUDED","","","#ifndef CATCH_INTERFACES_CONFIG_HPP_INCLUDED","#define CATCH_INTERFACES_CONFIG_HPP_INCLUDED","","","","#ifndef CATCH_NONCOPYABLE_HPP_INCLUDED","#define CATCH_NONCOPYABLE_HPP_INCLUDED","","namespace Catch {","    namespace Detail {","","        //! Deriving classes become noncopyable and nonmovable","        class NonCopyable {","            NonCopyable( NonCopyable const\u0026 ) = delete;","            NonCopyable( NonCopyable\u0026\u0026 ) = delete;","            NonCopyable\u0026 operator=( NonCopyable const\u0026 ) = delete;","            NonCopyable\u0026 operator=( NonCopyable\u0026\u0026 ) = delete;","","        protected:","            NonCopyable() noexcept = default;","        };","","    } // namespace Detail","} // namespace Catch","","#endif // CATCH_NONCOPYABLE_HPP_INCLUDED","","#include \u003cchrono\u003e","#include \u003ciosfwd\u003e","#include \u003cstring\u003e","#include \u003cvector\u003e","","namespace Catch {","","    enum class Verbosity {","        Quiet = 0,","        Normal,","        High","    };","","    struct WarnAbout { enum What {","        Nothing = 0x00,","        //! A test case or leaf section did not run any assertions","        NoAssertions = 0x01,","        //! A command line test spec matched no test cases","        UnmatchedTestSpec = 0x02,","    }; };","","    enum class ShowDurations {","        DefaultForReporter,","        Always,","        Never","    };","    enum class TestRunOrder {","        Declared,","        LexicographicallySorted,","        Randomized","    };","    enum class ColourMode : std::uint8_t {","        //! Let Catch2 pick implementation based on platform detection","        PlatformDefault,","        //! Use ANSI colour code escapes","        ANSI,","        //! Use Win32 console colour API","        Win32,","        //! Don't use any colour","        None","    };","    struct WaitForKeypress { enum When {","        Never,","        BeforeStart = 1,","        BeforeExit = 2,","        BeforeStartAndExit = BeforeStart | BeforeExit","    }; };","","    class TestSpec;","    class IStream;","","    class IConfig : public Detail::NonCopyable {","    public:","        virtual ~IConfig();","","        virtual bool allowThrows() const = 0;","        virtual StringRef name() const = 0;","        virtual bool includeSuccessfulResults() const = 0;","        virtual bool shouldDebugBreak() const = 0;","        virtual bool warnAboutMissingAssertions() const = 0;","        virtual bool warnAboutUnmatchedTestSpecs() const = 0;","        virtual bool zeroTestsCountAsSuccess() const = 0;","        virtual int abortAfter() const = 0;","        virtual bool showInvisibles() const = 0;","        virtual ShowDurations showDurations() const = 0;","        virtual double minDuration() const = 0;","        virtual TestSpec const\u0026 testSpec() const = 0;","        virtual bool hasTestFilters() const = 0;","        virtual std::vector\u003cstd::string\u003e const\u0026 getTestsOrTags() const = 0;","        virtual TestRunOrder runOrder() const = 0;","        virtual uint32_t rngSeed() const = 0;","        virtual unsigned int shardCount() const = 0;","        virtual unsigned int shardIndex() const = 0;","        virtual ColourMode defaultColourMode() const = 0;","        virtual std::vector\u003cstd::string\u003e const\u0026 getSectionsToRun() const = 0;","        virtual Verbosity verbosity() const = 0;","","        virtual bool skipBenchmarks() const = 0;","        virtual bool benchmarkNoAnalysis() const = 0;","        virtual unsigned int benchmarkSamples() const = 0;","        virtual double benchmarkConfidenceInterval() const = 0;","        virtual unsigned int benchmarkResamples() const = 0;","        virtual std::chrono::milliseconds benchmarkWarmupTime() const = 0;","    };","}","","#endif // CATCH_INTERFACES_CONFIG_HPP_INCLUDED","","","#ifndef CATCH_INTERFACES_REGISTRY_HUB_HPP_INCLUDED","#define CATCH_INTERFACES_REGISTRY_HUB_HPP_INCLUDED","","","#include \u003cstring\u003e","","namespace Catch {","","    class TestCaseHandle;","    struct TestCaseInfo;","    class ITestCaseRegistry;","    class IExceptionTranslatorRegistry;","    class IExceptionTranslator;","    class ReporterRegistry;","    class IReporterFactory;","    class ITagAliasRegistry;","    class ITestInvoker;","    class IMutableEnumValuesRegistry;","    struct SourceLineInfo;","","    class StartupExceptionRegistry;","    class EventListenerFactory;","","    using IReporterFactoryPtr = Detail::unique_ptr\u003cIReporterFactory\u003e;","","    class IRegistryHub {","    public:","        virtual ~IRegistryHub(); // = default","","        virtual ReporterRegistry const\u0026 getReporterRegistry() const = 0;","        virtual ITestCaseRegistry const\u0026 getTestCaseRegistry() const = 0;","        virtual ITagAliasRegistry const\u0026 getTagAliasRegistry() const = 0;","        virtual IExceptionTranslatorRegistry const\u0026 getExceptionTranslatorRegistry() const = 0;","","","        virtual StartupExceptionRegistry const\u0026 getStartupExceptionRegistry() const = 0;","    };","","    class IMutableRegistryHub {","    public:","        virtual ~IMutableRegistryHub(); // = default","        virtual void registerReporter( std::string const\u0026 name, IReporterFactoryPtr factory ) = 0;","        virtual void registerListener( Detail::unique_ptr\u003cEventListenerFactory\u003e factory ) = 0;","        virtual void registerTest(Detail::unique_ptr\u003cTestCaseInfo\u003e\u0026\u0026 testInfo, Detail::unique_ptr\u003cITestInvoker\u003e\u0026\u0026 invoker) = 0;","        virtual void registerTranslator( Detail::unique_ptr\u003cIExceptionTranslator\u003e\u0026\u0026 translator ) = 0;","        virtual void registerTagAlias( std::string const\u0026 alias, std::string const\u0026 tag, SourceLineInfo const\u0026 lineInfo ) = 0;","        virtual void registerStartupException() noexcept = 0;","        virtual IMutableEnumValuesRegistry\u0026 getMutableEnumValuesRegistry() = 0;","    };","","    IRegistryHub const\u0026 getRegistryHub();","    IMutableRegistryHub\u0026 getMutableRegistryHub();","    void cleanUp();","    std::string translateActiveException();","","}","","#endif // CATCH_INTERFACES_REGISTRY_HUB_HPP_INCLUDED","","","#ifndef CATCH_BENCHMARK_STATS_HPP_INCLUDED","#define CATCH_BENCHMARK_STATS_HPP_INCLUDED","","","","// Adapted from donated nonius code.","","#ifndef CATCH_ESTIMATE_HPP_INCLUDED","#define CATCH_ESTIMATE_HPP_INCLUDED","","namespace Catch {","    namespace Benchmark {","        template \u003ctypename Type\u003e","        struct Estimate {","            Type point;","            Type lower_bound;","            Type upper_bound;","            double confidence_interval;","        };","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_ESTIMATE_HPP_INCLUDED","","","// Adapted from donated nonius code.","","#ifndef CATCH_OUTLIER_CLASSIFICATION_HPP_INCLUDED","#define CATCH_OUTLIER_CLASSIFICATION_HPP_INCLUDED","","namespace Catch {","    namespace Benchmark {","        struct OutlierClassification {","            int samples_seen = 0;","            int low_severe = 0;     // more than 3 times IQR below Q1","            int low_mild = 0;       // 1.5 to 3 times IQR below Q1","            int high_mild = 0;      // 1.5 to 3 times IQR above Q3","            int high_severe = 0;    // more than 3 times IQR above Q3","","            constexpr int total() const {","                return low_severe + low_mild + high_mild + high_severe;","            }","        };","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_OUTLIERS_CLASSIFICATION_HPP_INCLUDED","// The fwd decl \u0026 default specialization needs to be seen by VS2017 before","// BenchmarkStats itself, or VS2017 will report compilation error.","","#include \u003cstring\u003e","#include \u003cvector\u003e","","namespace Catch {","","    struct BenchmarkInfo {","        std::string name;","        double estimatedDuration;","        int iterations;","        unsigned int samples;","        unsigned int resamples;","        double clockResolution;","        double clockCost;","    };","","    // We need to keep template parameter for backwards compatibility,","    // but we also do not want to use the template paraneter.","    template \u003cclass Dummy\u003e","    struct BenchmarkStats {","        BenchmarkInfo info;","","        std::vector\u003cBenchmark::FDuration\u003e samples;","        Benchmark::Estimate\u003cBenchmark::FDuration\u003e mean;","        Benchmark::Estimate\u003cBenchmark::FDuration\u003e standardDeviation;","        Benchmark::OutlierClassification outliers;","        double outlierVariance;","    };","","","} // end namespace Catch","","#endif // CATCH_BENCHMARK_STATS_HPP_INCLUDED","","","// Adapted from donated nonius code.","","#ifndef CATCH_ENVIRONMENT_HPP_INCLUDED","#define CATCH_ENVIRONMENT_HPP_INCLUDED","","","namespace Catch {","    namespace Benchmark {","        struct EnvironmentEstimate {","            FDuration mean;","            OutlierClassification outliers;","        };","        struct Environment {","            EnvironmentEstimate clock_resolution;","            EnvironmentEstimate clock_cost;","        };","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_ENVIRONMENT_HPP_INCLUDED","","","// Adapted from donated nonius code.","","#ifndef CATCH_EXECUTION_PLAN_HPP_INCLUDED","#define CATCH_EXECUTION_PLAN_HPP_INCLUDED","","","","// Adapted from donated nonius code.","","#ifndef CATCH_BENCHMARK_FUNCTION_HPP_INCLUDED","#define CATCH_BENCHMARK_FUNCTION_HPP_INCLUDED","","","","// Adapted from donated nonius code.","","#ifndef CATCH_CHRONOMETER_HPP_INCLUDED","#define CATCH_CHRONOMETER_HPP_INCLUDED","","","","// Adapted from donated nonius code.","","#ifndef CATCH_OPTIMIZER_HPP_INCLUDED","#define CATCH_OPTIMIZER_HPP_INCLUDED","","#if defined(_MSC_VER) || defined(__IAR_SYSTEMS_ICC__)","#   include \u003catomic\u003e // atomic_thread_fence","#endif","","","#include \u003ctype_traits\u003e","","namespace Catch {","    namespace Benchmark {","#if defined(__GNUC__) || defined(__clang__)","        template \u003ctypename T\u003e","        inline void keep_memory(T* p) {","            asm volatile(\"\" : : \"g\"(p) : \"memory\");","        }","        inline void keep_memory() {","            asm volatile(\"\" : : : \"memory\");","        }","","        namespace Detail {","            inline void optimizer_barrier() { keep_memory(); }","        } // namespace Detail","#elif defined(_MSC_VER) || defined(__IAR_SYSTEMS_ICC__)","","#if defined(_MSVC_VER)","#pragma optimize(\"\", off)","#elif defined(__IAR_SYSTEMS_ICC__)","// For IAR the pragma only affects the following function","#pragma optimize=disable","#endif","        template \u003ctypename T\u003e","        inline void keep_memory(T* p) {","            // thanks @milleniumbug","            *reinterpret_cast\u003cchar volatile*\u003e(p) = *reinterpret_cast\u003cchar const volatile*\u003e(p);","        }","        // TODO equivalent keep_memory()","#if defined(_MSVC_VER)","#pragma optimize(\"\", on)","#endif","","        namespace Detail {","            inline void optimizer_barrier() {","                std::atomic_thread_fence(std::memory_order_seq_cst);","            }","        } // namespace Detail","","#endif","","        template \u003ctypename T\u003e","        inline void deoptimize_value(T\u0026\u0026 x) {","            keep_memory(\u0026x);","        }","","        template \u003ctypename Fn, typename... Args\u003e","        inline auto invoke_deoptimized(Fn\u0026\u0026 fn, Args\u0026\u0026... args) -\u003e std::enable_if_t\u003c!std::is_same\u003cvoid, decltype(fn(args...))\u003e::value\u003e {","            deoptimize_value(CATCH_FORWARD(fn) (CATCH_FORWARD(args)...));","        }","","        template \u003ctypename Fn, typename... Args\u003e","        inline auto invoke_deoptimized(Fn\u0026\u0026 fn, Args\u0026\u0026... args) -\u003e std::enable_if_t\u003cstd::is_same\u003cvoid, decltype(fn(args...))\u003e::value\u003e {","            CATCH_FORWARD((fn)) (CATCH_FORWARD(args)...);","        }","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_OPTIMIZER_HPP_INCLUDED","","","#ifndef CATCH_META_HPP_INCLUDED","#define CATCH_META_HPP_INCLUDED","","#include \u003ctype_traits\u003e","","namespace Catch {","    template \u003ctypename\u003e","    struct true_given : std::true_type {};","","    struct is_callable_tester {","        template \u003ctypename Fun, typename... Args\u003e","        static true_given\u003cdecltype(std::declval\u003cFun\u003e()(std::declval\u003cArgs\u003e()...))\u003e test(int);","        template \u003ctypename...\u003e","        static std::false_type test(...);","    };","","    template \u003ctypename T\u003e","    struct is_callable;","","    template \u003ctypename Fun, typename... Args\u003e","    struct is_callable\u003cFun(Args...)\u003e : decltype(is_callable_tester::test\u003cFun, Args...\u003e(0)) {};","","","#if defined(__cpp_lib_is_invocable) \u0026\u0026 __cpp_lib_is_invocable \u003e= 201703","    // std::result_of is deprecated in C++17 and removed in C++20. Hence, it is","    // replaced with std::invoke_result here.","    template \u003ctypename Func, typename... U\u003e","    using FunctionReturnType = std::remove_reference_t\u003cstd::remove_cv_t\u003cstd::invoke_result_t\u003cFunc, U...\u003e\u003e\u003e;","#else","    template \u003ctypename Func, typename... U\u003e","    using FunctionReturnType = std::remove_reference_t\u003cstd::remove_cv_t\u003cstd::result_of_t\u003cFunc(U...)\u003e\u003e\u003e;","#endif","","} // namespace Catch","","namespace mpl_{","    struct na;","}","","#endif // CATCH_META_HPP_INCLUDED","","namespace Catch {","    namespace Benchmark {","        namespace Detail {","            struct ChronometerConcept {","                virtual void start() = 0;","                virtual void finish() = 0;","                virtual ~ChronometerConcept(); // = default;","","                ChronometerConcept() = default;","                ChronometerConcept(ChronometerConcept const\u0026) = default;","                ChronometerConcept\u0026 operator=(ChronometerConcept const\u0026) = default;","            };","            template \u003ctypename Clock\u003e","            struct ChronometerModel final : public ChronometerConcept {","                void start() override { started = Clock::now(); }","                void finish() override { finished = Clock::now(); }","","                IDuration elapsed() const {","                    return std::chrono::duration_cast\u003cstd::chrono::nanoseconds\u003e(","                        finished - started );","                }","","                TimePoint\u003cClock\u003e started;","                TimePoint\u003cClock\u003e finished;","            };","        } // namespace Detail","","        struct Chronometer {","        public:","            template \u003ctypename Fun\u003e","            void measure(Fun\u0026\u0026 fun) { measure(CATCH_FORWARD(fun), is_callable\u003cFun(int)\u003e()); }","","            int runs() const { return repeats; }","","            Chronometer(Detail::ChronometerConcept\u0026 meter, int repeats_)","                : impl(\u0026meter)","                , repeats(repeats_) {}","","        private:","            template \u003ctypename Fun\u003e","            void measure(Fun\u0026\u0026 fun, std::false_type) {","                measure([\u0026fun](int) { return fun(); }, std::true_type());","            }","","            template \u003ctypename Fun\u003e","            void measure(Fun\u0026\u0026 fun, std::true_type) {","                Detail::optimizer_barrier();","                impl-\u003estart();","                for (int i = 0; i \u003c repeats; ++i) invoke_deoptimized(fun, i);","                impl-\u003efinish();","                Detail::optimizer_barrier();","            }","","            Detail::ChronometerConcept* impl;","            int repeats;","        };","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_CHRONOMETER_HPP_INCLUDED","","#include \u003ctype_traits\u003e","","namespace Catch {","    namespace Benchmark {","        namespace Detail {","            template \u003ctypename T, typename U\u003e","            struct is_related","                : std::is_same\u003cstd::decay_t\u003cT\u003e, std::decay_t\u003cU\u003e\u003e {};","","            /// We need to reinvent std::function because every piece of code that might add overhead","            /// in a measurement context needs to have consistent performance characteristics so that we","            /// can account for it in the measurement.","            /// Implementations of std::function with optimizations that aren't always applicable, like","            /// small buffer optimizations, are not uncommon.","            /// This is effectively an implementation of std::function without any such optimizations;","            /// it may be slow, but it is consistently slow.","            struct BenchmarkFunction {","            private:","                struct callable {","                    virtual void call(Chronometer meter) const = 0;","                    virtual ~callable(); // = default;","","                    callable() = default;","                    callable(callable\u0026\u0026) = default;","                    callable\u0026 operator=(callable\u0026\u0026) = default;","                };","                template \u003ctypename Fun\u003e","                struct model : public callable {","                    model(Fun\u0026\u0026 fun_) : fun(CATCH_MOVE(fun_)) {}","                    model(Fun const\u0026 fun_) : fun(fun_) {}","","                    void call(Chronometer meter) const override {","                        call(meter, is_callable\u003cFun(Chronometer)\u003e());","                    }","                    void call(Chronometer meter, std::true_type) const {","                        fun(meter);","                    }","                    void call(Chronometer meter, std::false_type) const {","                        meter.measure(fun);","                    }","","                    Fun fun;","                };","","            public:","                BenchmarkFunction();","","                template \u003ctypename Fun,","                    std::enable_if_t\u003c!is_related\u003cFun, BenchmarkFunction\u003e::value, int\u003e = 0\u003e","                    BenchmarkFunction(Fun\u0026\u0026 fun)","                    : f(new model\u003cstd::decay_t\u003cFun\u003e\u003e(CATCH_FORWARD(fun))) {}","","                BenchmarkFunction( BenchmarkFunction\u0026\u0026 that ) noexcept:","                    f( CATCH_MOVE( that.f ) ) {}","","                BenchmarkFunction\u0026","                operator=( BenchmarkFunction\u0026\u0026 that ) noexcept {","                    f = CATCH_MOVE( that.f );","                    return *this;","                }","","                void operator()(Chronometer meter) const { f-\u003ecall(meter); }","","            private:","                Catch::Detail::unique_ptr\u003ccallable\u003e f;","            };","        } // namespace Detail","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_BENCHMARK_FUNCTION_HPP_INCLUDED","","","// Adapted from donated nonius code.","","#ifndef CATCH_REPEAT_HPP_INCLUDED","#define CATCH_REPEAT_HPP_INCLUDED","","#include \u003ctype_traits\u003e","","namespace Catch {","    namespace Benchmark {","        namespace Detail {","            template \u003ctypename Fun\u003e","            struct repeater {","                void operator()(int k) const {","                    for (int i = 0; i \u003c k; ++i) {","                        fun();","                    }","                }","                Fun fun;","            };","            template \u003ctypename Fun\u003e","            repeater\u003cstd::decay_t\u003cFun\u003e\u003e repeat(Fun\u0026\u0026 fun) {","                return { CATCH_FORWARD(fun) };","            }","        } // namespace Detail","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_REPEAT_HPP_INCLUDED","","","// Adapted from donated nonius code.","","#ifndef CATCH_RUN_FOR_AT_LEAST_HPP_INCLUDED","#define CATCH_RUN_FOR_AT_LEAST_HPP_INCLUDED","","","","// Adapted from donated nonius code.","","#ifndef CATCH_MEASURE_HPP_INCLUDED","#define CATCH_MEASURE_HPP_INCLUDED","","","","// Adapted from donated nonius code.","","#ifndef CATCH_COMPLETE_INVOKE_HPP_INCLUDED","#define CATCH_COMPLETE_INVOKE_HPP_INCLUDED","","","namespace Catch {","    namespace Benchmark {","        namespace Detail {","            template \u003ctypename T\u003e","            struct CompleteType { using type = T; };","            template \u003c\u003e","            struct CompleteType\u003cvoid\u003e { struct type {}; };","","            template \u003ctypename T\u003e","            using CompleteType_t = typename CompleteType\u003cT\u003e::type;","","            template \u003ctypename Result\u003e","            struct CompleteInvoker {","                template \u003ctypename Fun, typename... Args\u003e","                static Result invoke(Fun\u0026\u0026 fun, Args\u0026\u0026... args) {","                    return CATCH_FORWARD(fun)(CATCH_FORWARD(args)...);","                }","            };","            template \u003c\u003e","            struct CompleteInvoker\u003cvoid\u003e {","                template \u003ctypename Fun, typename... Args\u003e","                static CompleteType_t\u003cvoid\u003e invoke(Fun\u0026\u0026 fun, Args\u0026\u0026... args) {","                    CATCH_FORWARD(fun)(CATCH_FORWARD(args)...);","                    return {};","                }","            };","","            // invoke and not return void :(","            template \u003ctypename Fun, typename... Args\u003e","            CompleteType_t\u003cFunctionReturnType\u003cFun, Args...\u003e\u003e complete_invoke(Fun\u0026\u0026 fun, Args\u0026\u0026... args) {","                return CompleteInvoker\u003cFunctionReturnType\u003cFun, Args...\u003e\u003e::invoke(CATCH_FORWARD(fun), CATCH_FORWARD(args)...);","            }","","        } // namespace Detail","","        template \u003ctypename Fun\u003e","        Detail::CompleteType_t\u003cFunctionReturnType\u003cFun\u003e\u003e user_code(Fun\u0026\u0026 fun) {","            return Detail::complete_invoke(CATCH_FORWARD(fun));","        }","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_COMPLETE_INVOKE_HPP_INCLUDED","","","// Adapted from donated nonius code.","","#ifndef CATCH_TIMING_HPP_INCLUDED","#define CATCH_TIMING_HPP_INCLUDED","","","#include \u003ctype_traits\u003e","","namespace Catch {","    namespace Benchmark {","        template \u003ctypename Result\u003e","        struct Timing {","            IDuration elapsed;","            Result result;","            int iterations;","        };","        template \u003ctypename Func, typename... Args\u003e","        using TimingOf = Timing\u003cDetail::CompleteType_t\u003cFunctionReturnType\u003cFunc, Args...\u003e\u003e\u003e;","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_TIMING_HPP_INCLUDED","","namespace Catch {","    namespace Benchmark {","        namespace Detail {","            template \u003ctypename Clock, typename Fun, typename... Args\u003e","            TimingOf\u003cFun, Args...\u003e measure(Fun\u0026\u0026 fun, Args\u0026\u0026... args) {","                auto start = Clock::now();","                auto\u0026\u0026 r = Detail::complete_invoke(CATCH_FORWARD(fun), CATCH_FORWARD(args)...);","                auto end = Clock::now();","                auto delta = end - start;","                return { delta, CATCH_FORWARD(r), 1 };","            }","        } // namespace Detail","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_MEASURE_HPP_INCLUDED","","#include \u003ctype_traits\u003e","","namespace Catch {","    namespace Benchmark {","        namespace Detail {","            template \u003ctypename Clock, typename Fun\u003e","            TimingOf\u003cFun, int\u003e measure_one(Fun\u0026\u0026 fun, int iters, std::false_type) {","                return Detail::measure\u003cClock\u003e(fun, iters);","            }","            template \u003ctypename Clock, typename Fun\u003e","            TimingOf\u003cFun, Chronometer\u003e measure_one(Fun\u0026\u0026 fun, int iters, std::true_type) {","                Detail::ChronometerModel\u003cClock\u003e meter;","                auto\u0026\u0026 result = Detail::complete_invoke(fun, Chronometer(meter, iters));","","                return { meter.elapsed(), CATCH_MOVE(result), iters };","            }","","            template \u003ctypename Clock, typename Fun\u003e","            using run_for_at_least_argument_t = std::conditional_t\u003cis_callable\u003cFun(Chronometer)\u003e::value, Chronometer, int\u003e;","","","            [[noreturn]]","            void throw_optimized_away_error();","","            template \u003ctypename Clock, typename Fun\u003e","            TimingOf\u003cFun, run_for_at_least_argument_t\u003cClock, Fun\u003e\u003e","                run_for_at_least(IDuration how_long,","                                 const int initial_iterations,","                                 Fun\u0026\u0026 fun) {","                auto iters = initial_iterations;","                while (iters \u003c (1 \u003c\u003c 30)) {","                    auto\u0026\u0026 Timing = measure_one\u003cClock\u003e(fun, iters, is_callable\u003cFun(Chronometer)\u003e());","","                    if (Timing.elapsed \u003e= how_long) {","                        return { Timing.elapsed, CATCH_MOVE(Timing.result), iters };","                    }","                    iters *= 2;","                }","                throw_optimized_away_error();","            }","        } // namespace Detail","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_RUN_FOR_AT_LEAST_HPP_INCLUDED","","#include \u003cvector\u003e","","namespace Catch {","    namespace Benchmark {","        struct ExecutionPlan {","            int iterations_per_sample;","            FDuration estimated_duration;","            Detail::BenchmarkFunction benchmark;","            FDuration warmup_time;","            int warmup_iterations;","","            template \u003ctypename Clock\u003e","            std::vector\u003cFDuration\u003e run(const IConfig \u0026cfg, Environment env) const {","                // warmup a bit","                Detail::run_for_at_least\u003cClock\u003e(","                    std::chrono::duration_cast\u003cIDuration\u003e( warmup_time ),","                    warmup_iterations,","                    Detail::repeat( []() { return Clock::now(); } )","                );","","                std::vector\u003cFDuration\u003e times;","                const auto num_samples = cfg.benchmarkSamples();","                times.reserve( num_samples );","                for ( size_t i = 0; i \u003c num_samples; ++i ) {","                    Detail::ChronometerModel\u003cClock\u003e model;","                    this-\u003ebenchmark( Chronometer( model, iterations_per_sample ) );","                    auto sample_time = model.elapsed() - env.clock_cost.mean;","                    if ( sample_time \u003c FDuration::zero() ) {","                        sample_time = FDuration::zero();","                    }","                    times.push_back(sample_time / iterations_per_sample);","                }","                return times;","            }","        };","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_EXECUTION_PLAN_HPP_INCLUDED","","","// Adapted from donated nonius code.","","#ifndef CATCH_ESTIMATE_CLOCK_HPP_INCLUDED","#define CATCH_ESTIMATE_CLOCK_HPP_INCLUDED","","","","// Adapted from donated nonius code.","","#ifndef CATCH_STATS_HPP_INCLUDED","#define CATCH_STATS_HPP_INCLUDED","","","#include \u003cvector\u003e","","namespace Catch {","    namespace Benchmark {","        namespace Detail {","            using sample = std::vector\u003cdouble\u003e;","","            double weighted_average_quantile( int k,","                                              int q,","                                              double* first,","                                              double* last );","","            OutlierClassification","            classify_outliers( double const* first, double const* last );","","            double mean( double const* first, double const* last );","","            double normal_cdf( double x );","","            double erfc_inv(double x);","","            double normal_quantile(double p);","","            Estimate\u003cdouble\u003e","            bootstrap( double confidence_level,","                       double* first,","                       double* last,","                       sample const\u0026 resample,","                       double ( *estimator )( double const*, double const* ) );","","            struct bootstrap_analysis {","                Estimate\u003cdouble\u003e mean;","                Estimate\u003cdouble\u003e standard_deviation;","                double outlier_variance;","            };","","            bootstrap_analysis analyse_samples(double confidence_level,","                                               unsigned int n_resamples,","                                               double* first,","                                               double* last);","        } // namespace Detail","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_STATS_HPP_INCLUDED","","#include \u003calgorithm\u003e","#include \u003cvector\u003e","#include \u003ccmath\u003e","","namespace Catch {","    namespace Benchmark {","        namespace Detail {","            template \u003ctypename Clock\u003e","            std::vector\u003cdouble\u003e resolution(int k) {","                const size_t points = static_cast\u003csize_t\u003e( k + 1 );","                // To avoid overhead from the branch inside vector::push_back,","                // we allocate them all and then overwrite.","                std::vector\u003cTimePoint\u003cClock\u003e\u003e times(points);","                for ( auto\u0026 time : times ) {","                    time = Clock::now();","                }","","                std::vector\u003cdouble\u003e deltas;","                deltas.reserve(static_cast\u003csize_t\u003e(k));","                for ( size_t idx = 1; idx \u003c points; ++idx ) {","                    deltas.push_back( static_cast\u003cdouble\u003e(","                        ( times[idx] - times[idx - 1] ).count() ) );","                }","","                return deltas;","            }","","            constexpr auto warmup_iterations = 10000;","            constexpr auto warmup_time = std::chrono::milliseconds(100);","            constexpr auto minimum_ticks = 1000;","            constexpr auto warmup_seed = 10000;","            constexpr auto clock_resolution_estimation_time = std::chrono::milliseconds(500);","            constexpr auto clock_cost_estimation_time_limit = std::chrono::seconds(1);","            constexpr auto clock_cost_estimation_tick_limit = 100000;","            constexpr auto clock_cost_estimation_time = std::chrono::milliseconds(10);","            constexpr auto clock_cost_estimation_iterations = 10000;","","            template \u003ctypename Clock\u003e","            int warmup() {","                return run_for_at_least\u003cClock\u003e(warmup_time, warmup_seed, \u0026resolution\u003cClock\u003e)","                    .iterations;","            }","            template \u003ctypename Clock\u003e","            EnvironmentEstimate estimate_clock_resolution(int iterations) {","                auto r = run_for_at_least\u003cClock\u003e(clock_resolution_estimation_time, iterations, \u0026resolution\u003cClock\u003e)","                    .result;","                return {","                    FDuration(mean(r.data(), r.data() + r.size())),","                    classify_outliers(r.data(), r.data() + r.size()),","                };","            }","            template \u003ctypename Clock\u003e","            EnvironmentEstimate estimate_clock_cost(FDuration resolution) {","                auto time_limit = (std::min)(","                    resolution * clock_cost_estimation_tick_limit,","                    FDuration(clock_cost_estimation_time_limit));","                auto time_clock = [](int k) {","                    return Detail::measure\u003cClock\u003e([k] {","                        for (int i = 0; i \u003c k; ++i) {","                            volatile auto ignored = Clock::now();","                            (void)ignored;","                        }","                    }).elapsed;","                };","                time_clock(1);","                int iters = clock_cost_estimation_iterations;","                auto\u0026\u0026 r = run_for_at_least\u003cClock\u003e(clock_cost_estimation_time, iters, time_clock);","                std::vector\u003cdouble\u003e times;","                int nsamples = static_cast\u003cint\u003e(std::ceil(time_limit / r.elapsed));","                times.reserve(static_cast\u003csize_t\u003e(nsamples));","                for ( int s = 0; s \u003c nsamples; ++s ) {","                    times.push_back( static_cast\u003cdouble\u003e(","                        ( time_clock( r.iterations ) / r.iterations )","                            .count() ) );","                }","                return {","                    FDuration(mean(times.data(), times.data() + times.size())),","                    classify_outliers(times.data(), times.data() + times.size()),","                };","            }","","            template \u003ctypename Clock\u003e","            Environment measure_environment() {","#if defined(__clang__)","#    pragma clang diagnostic push","#    pragma clang diagnostic ignored \"-Wexit-time-destructors\"","#endif","                static Catch::Detail::unique_ptr\u003cEnvironment\u003e env;","#if defined(__clang__)","#    pragma clang diagnostic pop","#endif","                if (env) {","                    return *env;","                }","","                auto iters = Detail::warmup\u003cClock\u003e();","                auto resolution = Detail::estimate_clock_resolution\u003cClock\u003e(iters);","                auto cost = Detail::estimate_clock_cost\u003cClock\u003e(resolution.mean);","","                env = Catch::Detail::make_unique\u003cEnvironment\u003e( Environment{resolution, cost} );","                return *env;","            }","        } // namespace Detail","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_ESTIMATE_CLOCK_HPP_INCLUDED","","","// Adapted from donated nonius code.","","#ifndef CATCH_ANALYSE_HPP_INCLUDED","#define CATCH_ANALYSE_HPP_INCLUDED","","","","// Adapted from donated nonius code.","","#ifndef CATCH_SAMPLE_ANALYSIS_HPP_INCLUDED","#define CATCH_SAMPLE_ANALYSIS_HPP_INCLUDED","","","#include \u003cvector\u003e","","namespace Catch {","    namespace Benchmark {","        struct SampleAnalysis {","            std::vector\u003cFDuration\u003e samples;","            Estimate\u003cFDuration\u003e mean;","            Estimate\u003cFDuration\u003e standard_deviation;","            OutlierClassification outliers;","            double outlier_variance;","        };","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_SAMPLE_ANALYSIS_HPP_INCLUDED","","","namespace Catch {","    class IConfig;","","    namespace Benchmark {","        namespace Detail {","            SampleAnalysis analyse(const IConfig \u0026cfg, FDuration* first, FDuration* last);","        } // namespace Detail","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_ANALYSE_HPP_INCLUDED","","#include \u003calgorithm\u003e","#include \u003cchrono\u003e","#include \u003cexception\u003e","#include \u003cstring\u003e","#include \u003ccmath\u003e","","namespace Catch {","    namespace Benchmark {","        struct Benchmark {","            Benchmark(std::string\u0026\u0026 benchmarkName)","                : name(CATCH_MOVE(benchmarkName)) {}","","            template \u003cclass FUN\u003e","            Benchmark(std::string\u0026\u0026 benchmarkName , FUN \u0026\u0026func)","                : fun(CATCH_MOVE(func)), name(CATCH_MOVE(benchmarkName)) {}","","            template \u003ctypename Clock\u003e","            ExecutionPlan prepare(const IConfig \u0026cfg, Environment env) {","                auto min_time = env.clock_resolution.mean * Detail::minimum_ticks;","                auto run_time = std::max(min_time, std::chrono::duration_cast\u003cdecltype(min_time)\u003e(cfg.benchmarkWarmupTime()));","                auto\u0026\u0026 test = Detail::run_for_at_least\u003cClock\u003e(std::chrono::duration_cast\u003cIDuration\u003e(run_time), 1, fun);","                int new_iters = static_cast\u003cint\u003e(std::ceil(min_time * test.iterations / test.elapsed));","                return { new_iters, test.elapsed / test.iterations * new_iters * cfg.benchmarkSamples(), CATCH_MOVE(fun), std::chrono::duration_cast\u003cFDuration\u003e(cfg.benchmarkWarmupTime()), Detail::warmup_iterations };","            }","","            template \u003ctypename Clock = default_clock\u003e","            void run() {","                static_assert( Clock::is_steady,","                               \"Benchmarking clock should be steady\" );","                auto const* cfg = getCurrentContext().getConfig();","","                auto env = Detail::measure_environment\u003cClock\u003e();","","                getResultCapture().benchmarkPreparing(name);","                CATCH_TRY{","                    auto plan = user_code([\u0026] {","                        return prepare\u003cClock\u003e(*cfg, env);","                    });","","                    BenchmarkInfo info {","                        CATCH_MOVE(name),","                        plan.estimated_duration.count(),","                        plan.iterations_per_sample,","                        cfg-\u003ebenchmarkSamples(),","                        cfg-\u003ebenchmarkResamples(),","                        env.clock_resolution.mean.count(),","                        env.clock_cost.mean.count()","                    };","","                    getResultCapture().benchmarkStarting(info);","","                    auto samples = user_code([\u0026] {","                        return plan.template run\u003cClock\u003e(*cfg, env);","                    });","","                    auto analysis = Detail::analyse(*cfg, samples.data(), samples.data() + samples.size());","                    BenchmarkStats\u003c\u003e stats{ CATCH_MOVE(info), CATCH_MOVE(analysis.samples), analysis.mean, analysis.standard_deviation, analysis.outliers, analysis.outlier_variance };","                    getResultCapture().benchmarkEnded(stats);","                } CATCH_CATCH_ANON (TestFailureException const\u0026) {","                    getResultCapture().benchmarkFailed(\"Benchmark failed due to failed assertion\"_sr);","                } CATCH_CATCH_ALL{","                    getResultCapture().benchmarkFailed(translateActiveException());","                    // We let the exception go further up so that the","                    // test case is marked as failed.","                    std::rethrow_exception(std::current_exception());","                }","            }","","            // sets lambda to be used in fun *and* executes benchmark!","            template \u003ctypename Fun, std::enable_if_t\u003c!Detail::is_related\u003cFun, Benchmark\u003e::value, int\u003e = 0\u003e","                Benchmark \u0026 operator=(Fun func) {","                auto const* cfg = getCurrentContext().getConfig();","                if (!cfg-\u003eskipBenchmarks()) {","                    fun = Detail::BenchmarkFunction(func);","                    run();","                }","                return *this;","            }","","            explicit operator bool() {","                return true;","            }","","        private:","            Detail::BenchmarkFunction fun;","            std::string name;","        };","    }","} // namespace Catch","","#define INTERNAL_CATCH_GET_1_ARG(arg1, arg2, ...) arg1","#define INTERNAL_CATCH_GET_2_ARG(arg1, arg2, ...) arg2","","#define INTERNAL_CATCH_BENCHMARK(BenchmarkName, name, benchmarkIndex)\\","    if( Catch::Benchmark::Benchmark BenchmarkName{name} ) \\","        BenchmarkName = [\u0026](int benchmarkIndex)","","#define INTERNAL_CATCH_BENCHMARK_ADVANCED(BenchmarkName, name)\\","    if( Catch::Benchmark::Benchmark BenchmarkName{name} ) \\","        BenchmarkName = [\u0026]","","#if defined(CATCH_CONFIG_PREFIX_ALL)","","#define CATCH_BENCHMARK(...) \\","    INTERNAL_CATCH_BENCHMARK(INTERNAL_CATCH_UNIQUE_NAME(CATCH2_INTERNAL_BENCHMARK_), INTERNAL_CATCH_GET_1_ARG(__VA_ARGS__,,), INTERNAL_CATCH_GET_2_ARG(__VA_ARGS__,,))","#define CATCH_BENCHMARK_ADVANCED(name) \\","    INTERNAL_CATCH_BENCHMARK_ADVANCED(INTERNAL_CATCH_UNIQUE_NAME(CATCH2_INTERNAL_BENCHMARK_), name)","","#else","","#define BENCHMARK(...) \\","    INTERNAL_CATCH_BENCHMARK(INTERNAL_CATCH_UNIQUE_NAME(CATCH2_INTERNAL_BENCHMARK_), INTERNAL_CATCH_GET_1_ARG(__VA_ARGS__,,), INTERNAL_CATCH_GET_2_ARG(__VA_ARGS__,,))","#define BENCHMARK_ADVANCED(name) \\","    INTERNAL_CATCH_BENCHMARK_ADVANCED(INTERNAL_CATCH_UNIQUE_NAME(CATCH2_INTERNAL_BENCHMARK_), name)","","#endif","","#endif // CATCH_BENCHMARK_HPP_INCLUDED","","","// Adapted from donated nonius code.","","#ifndef CATCH_CONSTRUCTOR_HPP_INCLUDED","#define CATCH_CONSTRUCTOR_HPP_INCLUDED","","","#include \u003ctype_traits\u003e","","namespace Catch {","    namespace Benchmark {","        namespace Detail {","            template \u003ctypename T, bool Destruct\u003e","            struct ObjectStorage","            {","                ObjectStorage() = default;","","                ObjectStorage(const ObjectStorage\u0026 other)","                {","                    new(\u0026data) T(other.stored_object());","                }","","                ObjectStorage(ObjectStorage\u0026\u0026 other)","                {","                    new(data) T(CATCH_MOVE(other.stored_object()));","                }","","                ~ObjectStorage() { destruct_on_exit\u003cT\u003e(); }","","                template \u003ctypename... Args\u003e","                void construct(Args\u0026\u0026... args)","                {","                    new (data) T(CATCH_FORWARD(args)...);","                }","","                template \u003cbool AllowManualDestruction = !Destruct\u003e","                std::enable_if_t\u003cAllowManualDestruction\u003e destruct()","                {","                    stored_object().~T();","                }","","            private:","                // If this is a constructor benchmark, destruct the underlying object","                template \u003ctypename U\u003e","                void destruct_on_exit(std::enable_if_t\u003cDestruct, U\u003e* = nullptr) { destruct\u003ctrue\u003e(); }","                // Otherwise, don't","                template \u003ctypename U\u003e","                void destruct_on_exit(std::enable_if_t\u003c!Destruct, U\u003e* = nullptr) { }","","#if defined( __GNUC__ ) \u0026\u0026 __GNUC__ \u003c= 6","#    pragma GCC diagnostic push","#    pragma GCC diagnostic ignored \"-Wstrict-aliasing\"","#endif","                T\u0026 stored_object() { return *reinterpret_cast\u003cT*\u003e( data ); }","","                T const\u0026 stored_object() const {","                    return *reinterpret_cast\u003cT const*\u003e( data );","                }","#if defined( __GNUC__ ) \u0026\u0026 __GNUC__ \u003c= 6","#    pragma GCC diagnostic pop","#endif","","                alignas( T ) unsigned char data[sizeof( T )]{};","            };","        } // namespace Detail","","        template \u003ctypename T\u003e","        using storage_for = Detail::ObjectStorage\u003cT, true\u003e;","","        template \u003ctypename T\u003e","        using destructable_object = Detail::ObjectStorage\u003cT, false\u003e;","    } // namespace Benchmark","} // namespace Catch","","#endif // CATCH_CONSTRUCTOR_HPP_INCLUDED","","#endif // CATCH_BENCHMARK_ALL_HPP_INCLUDED","","","#ifndef CATCH_APPROX_HPP_INCLUDED","#define CATCH_APPROX_HPP_INCLUDED","","","","#ifndef CATCH_TOSTRING_HPP_INCLUDED","#define CATCH_TOSTRING_HPP_INCLUDED","","","#include \u003cvector\u003e","#include \u003ccstddef\u003e","#include \u003ctype_traits\u003e","#include \u003cstring\u003e","","","","","/** \\file"," * Wrapper for the WCHAR configuration option"," *"," * We want to support platforms that do not provide `wchar_t`, so we"," * sometimes have to disable providing wchar_t overloads through Catch2,"," * e.g. the StringMaker specialization for `std::wstring`."," */","","#ifndef CATCH_CONFIG_WCHAR_HPP_INCLUDED","#define CATCH_CONFIG_WCHAR_HPP_INCLUDED","","","// We assume that WCHAR should be enabled by default, and only disabled","// for a shortlist (so far only DJGPP) of compilers.","","#if defined(__DJGPP__)","#  define CATCH_INTERNAL_CONFIG_NO_WCHAR","#endif // __DJGPP__","","#if !defined( CATCH_INTERNAL_CONFIG_NO_WCHAR ) \u0026\u0026 \\","    !defined( CATCH_CONFIG_NO_WCHAR ) \u0026\u0026 \\","    !defined( CATCH_CONFIG_WCHAR )","#    define CATCH_CONFIG_WCHAR","#endif","","#endif // CATCH_CONFIG_WCHAR_HPP_INCLUDED","","","#ifndef CATCH_REUSABLE_STRING_STREAM_HPP_INCLUDED","#define CATCH_REUSABLE_STRING_STREAM_HPP_INCLUDED","","","#include \u003ciosfwd\u003e","#include \u003ccstddef\u003e","#include \u003costream\u003e","#include \u003cstring\u003e","","namespace Catch {","","    class ReusableStringStream : Detail::NonCopyable {","        std::size_t m_index;","        std::ostream* m_oss;","    public:","        ReusableStringStream();","        ~ReusableStringStream();","","        //! Returns the serialized state","        std::string str() const;","        //! Sets internal state to `str`","        void str(std::string const\u0026 str);","","#if defined(__GNUC__) \u0026\u0026 !defined(__clang__)","#pragma GCC diagnostic push","// Old versions of GCC do not understand -Wnonnull-compare","#pragma GCC diagnostic ignored \"-Wpragmas\"","// Streaming a function pointer triggers Waddress and Wnonnull-compare","// on GCC, because it implicitly converts it to bool and then decides","// that the check it uses (a? true : false) is tautological and cannot","// be null...","#pragma GCC diagnostic ignored \"-Waddress\"","#pragma GCC diagnostic ignored \"-Wnonnull-compare\"","#endif","","        template\u003ctypename T\u003e","        auto operator \u003c\u003c ( T const\u0026 value ) -\u003e ReusableStringStream\u0026 {","            *m_oss \u003c\u003c value;","            return *this;","        }","","#if defined(__GNUC__) \u0026\u0026 !defined(__clang__)","#pragma GCC diagnostic pop","#endif","        auto get() -\u003e std::ostream\u0026 { return *m_oss; }","    };","}","","#endif // CATCH_REUSABLE_STRING_STREAM_HPP_INCLUDED","","","#ifndef CATCH_VOID_TYPE_HPP_INCLUDED","#define CATCH_VOID_TYPE_HPP_INCLUDED","","","namespace Catch {","    namespace Detail {","","        template \u003ctypename...\u003e","        struct make_void { using type = void; };","","        template \u003ctypename... Ts\u003e","        using void_t = typename make_void\u003cTs...\u003e::type;","","    } // namespace Detail","} // namespace Catch","","","#endif // CATCH_VOID_TYPE_HPP_INCLUDED","","","#ifndef CATCH_INTERFACES_ENUM_VALUES_REGISTRY_HPP_INCLUDED","#define CATCH_INTERFACES_ENUM_VALUES_REGISTRY_HPP_INCLUDED","","","#include \u003cvector\u003e","","namespace Catch {","","    namespace Detail {","        struct EnumInfo {","            StringRef m_name;","            std::vector\u003cstd::pair\u003cint, StringRef\u003e\u003e m_values;","","            ~EnumInfo();","","            StringRef lookup( int value ) const;","        };","    } // namespace Detail","","    class IMutableEnumValuesRegistry {","    public:","        virtual ~IMutableEnumValuesRegistry(); // = default;","","        virtual Detail::EnumInfo const\u0026 registerEnum( StringRef enumName, StringRef allEnums, std::vector\u003cint\u003e const\u0026 values ) = 0;","","        template\u003ctypename E\u003e","        Detail::EnumInfo const\u0026 registerEnum( StringRef enumName, StringRef allEnums, std::initializer_list\u003cE\u003e values ) {","            static_assert(sizeof(int) \u003e= sizeof(E), \"Cannot serialize enum to int\");","            std::vector\u003cint\u003e intValues;","            intValues.reserve( values.size() );","            for( auto enumValue : values )","                intValues.push_back( static_cast\u003cint\u003e( enumValue ) );","            return registerEnum( enumName, allEnums, intValues );","        }","    };","","} // Catch","","#endif // CATCH_INTERFACES_ENUM_VALUES_REGISTRY_HPP_INCLUDED","","#ifdef CATCH_CONFIG_CPP17_STRING_VIEW","#include \u003cstring_view\u003e","#endif","","#ifdef _MSC_VER","#pragma warning(push)","#pragma warning(disable:4180) // We attempt to stream a function (address) by const\u0026, which MSVC complains about but is harmless","#endif","","// We need a dummy global operator\u003c\u003c so we can bring it into Catch namespace later","struct Catch_global_namespace_dummy{};","std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026, Catch_global_namespace_dummy);","","namespace Catch {","    // Bring in global namespace operator\u003c\u003c for ADL lookup in","    // `IsStreamInsertable` below.","    using ::operator\u003c\u003c;","","    namespace Detail {","","        inline std::size_t catch_strnlen(const char *str, std::size_t n) {","            auto ret = std::char_traits\u003cchar\u003e::find(str, n, '\\0');","            if (ret != nullptr) {","                return static_cast\u003cstd::size_t\u003e(ret - str);","            }","            return n;","        }","","        constexpr StringRef unprintableString = \"{?}\"_sr;","","        //! Encases `string in quotes, and optionally escapes invisibles","        std::string convertIntoString( StringRef string, bool escapeInvisibles );","","        //! Encases `string` in quotes, and escapes invisibles if user requested","        //! it via CLI","        std::string convertIntoString( StringRef string );","","        std::string rawMemoryToString( const void *object, std::size_t size );","","        template\u003ctypename T\u003e","        std::string rawMemoryToString( const T\u0026 object ) {","          return rawMemoryToString( \u0026object, sizeof(object) );","        }","","        template\u003ctypename T\u003e","        class IsStreamInsertable {","            template\u003ctypename Stream, typename U\u003e","            static auto test(int)","                -\u003e decltype(std::declval\u003cStream\u0026\u003e() \u003c\u003c std::declval\u003cU\u003e(), std::true_type());","","            template\u003ctypename, typename\u003e","            static auto test(...)-\u003estd::false_type;","","        public:","            static const bool value = decltype(test\u003cstd::ostream, const T\u0026\u003e(0))::value;","        };","","        template\u003ctypename E\u003e","        std::string convertUnknownEnumToString( E e );","","        template\u003ctypename T\u003e","        std::enable_if_t\u003c","            !std::is_enum\u003cT\u003e::value \u0026\u0026 !std::is_base_of\u003cstd::exception, T\u003e::value,","        std::string\u003e convertUnstreamable( T const\u0026 ) {","            return std::string(Detail::unprintableString);","        }","        template\u003ctypename T\u003e","        std::enable_if_t\u003c","            !std::is_enum\u003cT\u003e::value \u0026\u0026 std::is_base_of\u003cstd::exception, T\u003e::value,","         std::string\u003e convertUnstreamable(T const\u0026 ex) {","            return ex.what();","        }","","","        template\u003ctypename T\u003e","        std::enable_if_t\u003c","            std::is_enum\u003cT\u003e::value,","        std::string\u003e convertUnstreamable( T const\u0026 value ) {","            return convertUnknownEnumToString( value );","        }","","#if defined(_MANAGED)","        //! Convert a CLR string to a utf8 std::string","        template\u003ctypename T\u003e","        std::string clrReferenceToString( T^ ref ) {","            if (ref == nullptr)","                return std::string(\"null\");","            auto bytes = System::Text::Encoding::UTF8-\u003eGetBytes(ref-\u003eToString());","            cli::pin_ptr\u003cSystem::Byte\u003e p = \u0026bytes[0];","            return std::string(reinterpret_cast\u003cchar const *\u003e(p), bytes-\u003eLength);","        }","#endif","","    } // namespace Detail","","","    template \u003ctypename T, typename = void\u003e","    struct StringMaker {","        template \u003ctypename Fake = T\u003e","        static","        std::enable_if_t\u003c::Catch::Detail::IsStreamInsertable\u003cFake\u003e::value, std::string\u003e","            convert(const Fake\u0026 value) {","                ReusableStringStream rss;","                // NB: call using the function-like syntax to avoid ambiguity with","                // user-defined templated operator\u003c\u003c under clang.","                rss.operator\u003c\u003c(value);","                return rss.str();","        }","","        template \u003ctypename Fake = T\u003e","        static","        std::enable_if_t\u003c!::Catch::Detail::IsStreamInsertable\u003cFake\u003e::value, std::string\u003e","            convert( const Fake\u0026 value ) {","#if !defined(CATCH_CONFIG_FALLBACK_STRINGIFIER)","            return Detail::convertUnstreamable(value);","#else","            return CATCH_CONFIG_FALLBACK_STRINGIFIER(value);","#endif","        }","    };","","    namespace Detail {","","        // This function dispatches all stringification requests inside of Catch.","        // Should be preferably called fully qualified, like ::Catch::Detail::stringify","        template \u003ctypename T\u003e","        std::string stringify(const T\u0026 e) {","            return ::Catch::StringMaker\u003cstd::remove_cv_t\u003cstd::remove_reference_t\u003cT\u003e\u003e\u003e::convert(e);","        }","","        template\u003ctypename E\u003e","        std::string convertUnknownEnumToString( E e ) {","            return ::Catch::Detail::stringify(static_cast\u003cstd::underlying_type_t\u003cE\u003e\u003e(e));","        }","","#if defined(_MANAGED)","        template \u003ctypename T\u003e","        std::string stringify( T^ e ) {","            return ::Catch::StringMaker\u003cT^\u003e::convert(e);","        }","#endif","","    } // namespace Detail","","    // Some predefined specializations","","    template\u003c\u003e","    struct StringMaker\u003cstd::string\u003e {","        static std::string convert(const std::string\u0026 str);","    };","","#ifdef CATCH_CONFIG_CPP17_STRING_VIEW","    template\u003c\u003e","    struct StringMaker\u003cstd::string_view\u003e {","        static std::string convert(std::string_view str);","    };","#endif","","    template\u003c\u003e","    struct StringMaker\u003cchar const *\u003e {","        static std::string convert(char const * str);","    };","    template\u003c\u003e","    struct StringMaker\u003cchar *\u003e {","        static std::string convert(char * str);","    };","","#if defined(CATCH_CONFIG_WCHAR)","    template\u003c\u003e","    struct StringMaker\u003cstd::wstring\u003e {","        static std::string convert(const std::wstring\u0026 wstr);","    };","","# ifdef CATCH_CONFIG_CPP17_STRING_VIEW","    template\u003c\u003e","    struct StringMaker\u003cstd::wstring_view\u003e {","        static std::string convert(std::wstring_view str);","    };","# endif","","    template\u003c\u003e","    struct StringMaker\u003cwchar_t const *\u003e {","        static std::string convert(wchar_t const * str);","    };","    template\u003c\u003e","    struct StringMaker\u003cwchar_t *\u003e {","        static std::string convert(wchar_t * str);","    };","#endif // CATCH_CONFIG_WCHAR","","    template\u003csize_t SZ\u003e","    struct StringMaker\u003cchar[SZ]\u003e {","        static std::string convert(char const* str) {","            return Detail::convertIntoString(","                StringRef( str, Detail::catch_strnlen( str, SZ ) ) );","        }","    };","    template\u003csize_t SZ\u003e","    struct StringMaker\u003csigned char[SZ]\u003e {","        static std::string convert(signed char const* str) {","            auto reinterpreted = reinterpret_cast\u003cchar const*\u003e(str);","            return Detail::convertIntoString(","                StringRef(reinterpreted, Detail::catch_strnlen(reinterpreted, SZ)));","        }","    };","    template\u003csize_t SZ\u003e","    struct StringMaker\u003cunsigned char[SZ]\u003e {","        static std::string convert(unsigned char const* str) {","            auto reinterpreted = reinterpret_cast\u003cchar const*\u003e(str);","            return Detail::convertIntoString(","                StringRef(reinterpreted, Detail::catch_strnlen(reinterpreted, SZ)));","        }","    };","","#if defined(CATCH_CONFIG_CPP17_BYTE)","    template\u003c\u003e","    struct StringMaker\u003cstd::byte\u003e {","        static std::string convert(std::byte value);","    };","#endif // defined(CATCH_CONFIG_CPP17_BYTE)","    template\u003c\u003e","    struct StringMaker\u003cint\u003e {","        static std::string convert(int value);","    };","    template\u003c\u003e","    struct StringMaker\u003clong\u003e {","        static std::string convert(long value);","    };","    template\u003c\u003e","    struct StringMaker\u003clong long\u003e {","        static std::string convert(long long value);","    };","    template\u003c\u003e","    struct StringMaker\u003cunsigned int\u003e {","        static std::string convert(unsigned int value);","    };","    template\u003c\u003e","    struct StringMaker\u003cunsigned long\u003e {","        static std::string convert(unsigned long value);","    };","    template\u003c\u003e","    struct StringMaker\u003cunsigned long long\u003e {","        static std::string convert(unsigned long long value);","    };","","    template\u003c\u003e","    struct StringMaker\u003cbool\u003e {","        static std::string convert(bool b) {","            using namespace std::string_literals;","            return b ? \"true\"s : \"false\"s;","        }","    };","","    template\u003c\u003e","    struct StringMaker\u003cchar\u003e {","        static std::string convert(char c);","    };","    template\u003c\u003e","    struct StringMaker\u003csigned char\u003e {","        static std::string convert(signed char value);","    };","    template\u003c\u003e","    struct StringMaker\u003cunsigned char\u003e {","        static std::string convert(unsigned char value);","    };","","    template\u003c\u003e","    struct StringMaker\u003cstd::nullptr_t\u003e {","        static std::string convert(std::nullptr_t) {","            using namespace std::string_literals;","            return \"nullptr\"s;","        }","    };","","    template\u003c\u003e","    struct StringMaker\u003cfloat\u003e {","        static std::string convert(float value);","        CATCH_EXPORT static int precision;","    };","","    template\u003c\u003e","    struct StringMaker\u003cdouble\u003e {","        static std::string convert(double value);","        CATCH_EXPORT static int precision;","    };","","    template \u003ctypename T\u003e","    struct StringMaker\u003cT*\u003e {","        template \u003ctypename U\u003e","        static std::string convert(U* p) {","            if (p) {","                return ::Catch::Detail::rawMemoryToString(p);","            } else {","                return \"nullptr\";","            }","        }","    };","","    template \u003ctypename R, typename C\u003e","    struct StringMaker\u003cR C::*\u003e {","        static std::string convert(R C::* p) {","            if (p) {","                return ::Catch::Detail::rawMemoryToString(p);","            } else {","                return \"nullptr\";","            }","        }","    };","","#if defined(_MANAGED)","    template \u003ctypename T\u003e","    struct StringMaker\u003cT^\u003e {","        static std::string convert( T^ ref ) {","            return ::Catch::Detail::clrReferenceToString(ref);","        }","    };","#endif","","    namespace Detail {","        template\u003ctypename InputIterator, typename Sentinel = InputIterator\u003e","        std::string rangeToString(InputIterator first, Sentinel last) {","            ReusableStringStream rss;","            rss \u003c\u003c \"{ \";","            if (first != last) {","                rss \u003c\u003c ::Catch::Detail::stringify(*first);","                for (++first; first != last; ++first)","                    rss \u003c\u003c \", \" \u003c\u003c ::Catch::Detail::stringify(*first);","            }","            rss \u003c\u003c \" }\";","            return rss.str();","        }","    }","","} // namespace Catch","","//////////////////////////////////////////////////////","// Separate std-lib types stringification, so it can be selectively enabled","// This means that we do not bring in their headers","","#if defined(CATCH_CONFIG_ENABLE_ALL_STRINGMAKERS)","#  define CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER","#  define CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER","#  define CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER","#  define CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER","#endif","","// Separate std::pair specialization","#if defined(CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER)","#include \u003cutility\u003e","namespace Catch {","    template\u003ctypename T1, typename T2\u003e","    struct StringMaker\u003cstd::pair\u003cT1, T2\u003e \u003e {","        static std::string convert(const std::pair\u003cT1, T2\u003e\u0026 pair) {","            ReusableStringStream rss;","            rss \u003c\u003c \"{ \"","                \u003c\u003c ::Catch::Detail::stringify(pair.first)","                \u003c\u003c \", \"","                \u003c\u003c ::Catch::Detail::stringify(pair.second)","                \u003c\u003c \" }\";","            return rss.str();","        }","    };","}","#endif // CATCH_CONFIG_ENABLE_PAIR_STRINGMAKER","","#if defined(CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER) \u0026\u0026 defined(CATCH_CONFIG_CPP17_OPTIONAL)","#include \u003coptional\u003e","namespace Catch {","    template\u003ctypename T\u003e","    struct StringMaker\u003cstd::optional\u003cT\u003e \u003e {","        static std::string convert(const std::optional\u003cT\u003e\u0026 optional) {","            if (optional.has_value()) {","                return ::Catch::Detail::stringify(*optional);","            } else {","                return \"{ }\";","            }","        }","    };","    template \u003c\u003e","    struct StringMaker\u003cstd::nullopt_t\u003e {","        static std::string convert(const std::nullopt_t\u0026) {","            return \"{ }\";","        }","    };","}","#endif // CATCH_CONFIG_ENABLE_OPTIONAL_STRINGMAKER","","// Separate std::tuple specialization","#if defined(CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER)","#include \u003ctuple\u003e","namespace Catch {","    namespace Detail {","        template\u003c","            typename Tuple,","            std::size_t N = 0,","            bool = (N \u003c std::tuple_size\u003cTuple\u003e::value)","            \u003e","            struct TupleElementPrinter {","            static void print(const Tuple\u0026 tuple, std::ostream\u0026 os) {","                os \u003c\u003c (N ? \", \" : \" \")","                    \u003c\u003c ::Catch::Detail::stringify(std::get\u003cN\u003e(tuple));","                TupleElementPrinter\u003cTuple, N + 1\u003e::print(tuple, os);","            }","        };","","        template\u003c","            typename Tuple,","            std::size_t N","        \u003e","            struct TupleElementPrinter\u003cTuple, N, false\u003e {","            static void print(const Tuple\u0026, std::ostream\u0026) {}","        };","","    }","","","    template\u003ctypename ...Types\u003e","    struct StringMaker\u003cstd::tuple\u003cTypes...\u003e\u003e {","        static std::string convert(const std::tuple\u003cTypes...\u003e\u0026 tuple) {","            ReusableStringStream rss;","            rss \u003c\u003c '{';","            Detail::TupleElementPrinter\u003cstd::tuple\u003cTypes...\u003e\u003e::print(tuple, rss.get());","            rss \u003c\u003c \" }\";","            return rss.str();","        }","    };","}","#endif // CATCH_CONFIG_ENABLE_TUPLE_STRINGMAKER","","#if defined(CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER) \u0026\u0026 defined(CATCH_CONFIG_CPP17_VARIANT)","#include \u003cvariant\u003e","namespace Catch {","    template\u003c\u003e","    struct StringMaker\u003cstd::monostate\u003e {","        static std::string convert(const std::monostate\u0026) {","            return \"{ }\";","        }","    };","","    template\u003ctypename... Elements\u003e","    struct StringMaker\u003cstd::variant\u003cElements...\u003e\u003e {","        static std::string convert(const std::variant\u003cElements...\u003e\u0026 variant) {","            if (variant.valueless_by_exception()) {","                return \"{valueless variant}\";","            } else {","                return std::visit(","                    [](const auto\u0026 value) {","                        return ::Catch::Detail::stringify(value);","                    },","                    variant","                );","            }","        }","    };","}","#endif // CATCH_CONFIG_ENABLE_VARIANT_STRINGMAKER","","namespace Catch {","    // Import begin/ end from std here","    using std::begin;","    using std::end;","","    namespace Detail {","        template \u003ctypename T, typename = void\u003e","        struct is_range_impl : std::false_type {};","","        template \u003ctypename T\u003e","        struct is_range_impl\u003cT, void_t\u003cdecltype(begin(std::declval\u003cT\u003e()))\u003e\u003e : std::true_type {};","    } // namespace Detail","","    template \u003ctypename T\u003e","    struct is_range : Detail::is_range_impl\u003cT\u003e {};","","#if defined(_MANAGED) // Managed types are never ranges","    template \u003ctypename T\u003e","    struct is_range\u003cT^\u003e {","        static const bool value = false;","    };","#endif","","    template\u003ctypename Range\u003e","    std::string rangeToString( Range const\u0026 range ) {","        return ::Catch::Detail::rangeToString( begin( range ), end( range ) );","    }","","    // Handle vector\u003cbool\u003e specially","    template\u003ctypename Allocator\u003e","    std::string rangeToString( std::vector\u003cbool, Allocator\u003e const\u0026 v ) {","        ReusableStringStream rss;","        rss \u003c\u003c \"{ \";","        bool first = true;","        for( bool b : v ) {","            if( first )","                first = false;","            else","                rss \u003c\u003c \", \";","            rss \u003c\u003c ::Catch::Detail::stringify( b );","        }","        rss \u003c\u003c \" }\";","        return rss.str();","    }","","    template\u003ctypename R\u003e","    struct StringMaker\u003cR, std::enable_if_t\u003cis_range\u003cR\u003e::value \u0026\u0026 !::Catch::Detail::IsStreamInsertable\u003cR\u003e::value\u003e\u003e {","        static std::string convert( R const\u0026 range ) {","            return rangeToString( range );","        }","    };","","    template \u003ctypename T, size_t SZ\u003e","    struct StringMaker\u003cT[SZ]\u003e {","        static std::string convert(T const(\u0026arr)[SZ]) {","            return rangeToString(arr);","        }","    };","","","} // namespace Catch","","// Separate std::chrono::duration specialization","#include \u003cctime\u003e","#include \u003cratio\u003e","#include \u003cchrono\u003e","","","namespace Catch {","","template \u003cclass Ratio\u003e","struct ratio_string {","    static std::string symbol() {","        Catch::ReusableStringStream rss;","        rss \u003c\u003c '[' \u003c\u003c Ratio::num \u003c\u003c '/'","            \u003c\u003c Ratio::den \u003c\u003c ']';","        return rss.str();","    }","};","","template \u003c\u003e","struct ratio_string\u003cstd::atto\u003e {","    static char symbol() { return 'a'; }","};","template \u003c\u003e","struct ratio_string\u003cstd::femto\u003e {","    static char symbol() { return 'f'; }","};","template \u003c\u003e","struct ratio_string\u003cstd::pico\u003e {","    static char symbol() { return 'p'; }","};","template \u003c\u003e","struct ratio_string\u003cstd::nano\u003e {","    static char symbol() { return 'n'; }","};","template \u003c\u003e","struct ratio_string\u003cstd::micro\u003e {","    static char symbol() { return 'u'; }","};","template \u003c\u003e","struct ratio_string\u003cstd::milli\u003e {","    static char symbol() { return 'm'; }","};","","    ////////////","    // std::chrono::duration specializations","    template\u003ctypename Value, typename Ratio\u003e","    struct StringMaker\u003cstd::chrono::duration\u003cValue, Ratio\u003e\u003e {","        static std::string convert(std::chrono::duration\u003cValue, Ratio\u003e const\u0026 duration) {","            ReusableStringStream rss;","            rss \u003c\u003c duration.count() \u003c\u003c ' ' \u003c\u003c ratio_string\u003cRatio\u003e::symbol() \u003c\u003c 's';","            return rss.str();","        }","    };","    template\u003ctypename Value\u003e","    struct StringMaker\u003cstd::chrono::duration\u003cValue, std::ratio\u003c1\u003e\u003e\u003e {","        static std::string convert(std::chrono::duration\u003cValue, std::ratio\u003c1\u003e\u003e const\u0026 duration) {","            ReusableStringStream rss;","            rss \u003c\u003c duration.count() \u003c\u003c \" s\";","            return rss.str();","        }","    };","    template\u003ctypename Value\u003e","    struct StringMaker\u003cstd::chrono::duration\u003cValue, std::ratio\u003c60\u003e\u003e\u003e {","        static std::string convert(std::chrono::duration\u003cValue, std::ratio\u003c60\u003e\u003e const\u0026 duration) {","            ReusableStringStream rss;","            rss \u003c\u003c duration.count() \u003c\u003c \" m\";","            return rss.str();","        }","    };","    template\u003ctypename Value\u003e","    struct StringMaker\u003cstd::chrono::duration\u003cValue, std::ratio\u003c3600\u003e\u003e\u003e {","        static std::string convert(std::chrono::duration\u003cValue, std::ratio\u003c3600\u003e\u003e const\u0026 duration) {","            ReusableStringStream rss;","            rss \u003c\u003c duration.count() \u003c\u003c \" h\";","            return rss.str();","        }","    };","","    ////////////","    // std::chrono::time_point specialization","    // Generic time_point cannot be specialized, only std::chrono::time_point\u003csystem_clock\u003e","    template\u003ctypename Clock, typename Duration\u003e","    struct StringMaker\u003cstd::chrono::time_point\u003cClock, Duration\u003e\u003e {","        static std::string convert(std::chrono::time_point\u003cClock, Duration\u003e const\u0026 time_point) {","            return ::Catch::Detail::stringify(time_point.time_since_epoch()) + \" since epoch\";","        }","    };","    // std::chrono::time_point\u003csystem_clock\u003e specialization","    template\u003ctypename Duration\u003e","    struct StringMaker\u003cstd::chrono::time_point\u003cstd::chrono::system_clock, Duration\u003e\u003e {","        static std::string convert(std::chrono::time_point\u003cstd::chrono::system_clock, Duration\u003e const\u0026 time_point) {","            auto converted = std::chrono::system_clock::to_time_t(time_point);","","#ifdef _MSC_VER","            std::tm timeInfo = {};","            const auto err = gmtime_s(\u0026timeInfo, \u0026converted);","            if ( err ) {","                return \"gmtime from provided timepoint has failed. This \"","                       \"happens e.g. with pre-1970 dates using Microsoft libc\";","            }","#else","            std::tm* timeInfo = std::gmtime(\u0026converted);","#endif","","            auto const timeStampSize = sizeof(\"2017-01-16T17:06:45Z\");","            char timeStamp[timeStampSize];","            const char * const fmt = \"%Y-%m-%dT%H:%M:%SZ\";","","#ifdef _MSC_VER","            std::strftime(timeStamp, timeStampSize, fmt, \u0026timeInfo);","#else","            std::strftime(timeStamp, timeStampSize, fmt, timeInfo);","#endif","            return std::string(timeStamp, timeStampSize - 1);","        }","    };","}","","","#define INTERNAL_CATCH_REGISTER_ENUM( enumName, ... ) \\","namespace Catch { \\","    template\u003c\u003e struct StringMaker\u003cenumName\u003e { \\","        static std::string convert( enumName value ) { \\","            static const auto\u0026 enumInfo = ::Catch::getMutableRegistryHub().getMutableEnumValuesRegistry().registerEnum( #enumName, #__VA_ARGS__, { __VA_ARGS__ } ); \\","            return static_cast\u003cstd::string\u003e(enumInfo.lookup( static_cast\u003cint\u003e( value ) )); \\","        } \\","    }; \\","}","","#define CATCH_REGISTER_ENUM( enumName, ... ) INTERNAL_CATCH_REGISTER_ENUM( enumName, __VA_ARGS__ )","","#ifdef _MSC_VER","#pragma warning(pop)","#endif","","#endif // CATCH_TOSTRING_HPP_INCLUDED","","#include \u003ctype_traits\u003e","","namespace Catch {","","    class Approx {","    private:","        bool equalityComparisonImpl(double other) const;","        // Sets and validates the new margin (margin \u003e= 0)","        void setMargin(double margin);","        // Sets and validates the new epsilon (0 \u003c epsilon \u003c 1)","        void setEpsilon(double epsilon);","","    public:","        explicit Approx ( double value );","","        static Approx custom();","","        Approx operator-() const;","","        template \u003ctypename T, typename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        Approx operator()( T const\u0026 value ) const {","            Approx approx( static_cast\u003cdouble\u003e(value) );","            approx.m_epsilon = m_epsilon;","            approx.m_margin = m_margin;","            approx.m_scale = m_scale;","            return approx;","        }","","        template \u003ctypename T, typename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        explicit Approx( T const\u0026 value ): Approx(static_cast\u003cdouble\u003e(value))","        {}","","","        template \u003ctypename T, typename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        friend bool operator == ( const T\u0026 lhs, Approx const\u0026 rhs ) {","            auto lhs_v = static_cast\u003cdouble\u003e(lhs);","            return rhs.equalityComparisonImpl(lhs_v);","        }","","        template \u003ctypename T, typename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        friend bool operator == ( Approx const\u0026 lhs, const T\u0026 rhs ) {","            return operator==( rhs, lhs );","        }","","        template \u003ctypename T, typename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        friend bool operator != ( T const\u0026 lhs, Approx const\u0026 rhs ) {","            return !operator==( lhs, rhs );","        }","","        template \u003ctypename T, typename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        friend bool operator != ( Approx const\u0026 lhs, T const\u0026 rhs ) {","            return !operator==( rhs, lhs );","        }","","        template \u003ctypename T, typename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        friend bool operator \u003c= ( T const\u0026 lhs, Approx const\u0026 rhs ) {","            return static_cast\u003cdouble\u003e(lhs) \u003c rhs.m_value || lhs == rhs;","        }","","        template \u003ctypename T, typename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        friend bool operator \u003c= ( Approx const\u0026 lhs, T const\u0026 rhs ) {","            return lhs.m_value \u003c static_cast\u003cdouble\u003e(rhs) || lhs == rhs;","        }","","        template \u003ctypename T, typename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        friend bool operator \u003e= ( T const\u0026 lhs, Approx const\u0026 rhs ) {","            return static_cast\u003cdouble\u003e(lhs) \u003e rhs.m_value || lhs == rhs;","        }","","        template \u003ctypename T, typename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        friend bool operator \u003e= ( Approx const\u0026 lhs, T const\u0026 rhs ) {","            return lhs.m_value \u003e static_cast\u003cdouble\u003e(rhs) || lhs == rhs;","        }","","        template \u003ctypename T, typename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        Approx\u0026 epsilon( T const\u0026 newEpsilon ) {","            const auto epsilonAsDouble = static_cast\u003cdouble\u003e(newEpsilon);","            setEpsilon(epsilonAsDouble);","            return *this;","        }","","        template \u003ctypename T, typename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        Approx\u0026 margin( T const\u0026 newMargin ) {","            const auto marginAsDouble = static_cast\u003cdouble\u003e(newMargin);","            setMargin(marginAsDouble);","            return *this;","        }","","        template \u003ctypename T, typename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        Approx\u0026 scale( T const\u0026 newScale ) {","            m_scale = static_cast\u003cdouble\u003e(newScale);","            return *this;","        }","","        std::string toString() const;","","    private:","        double m_epsilon;","        double m_margin;","        double m_scale;","        double m_value;","    };","","namespace literals {","    Approx operator \"\"_a(long double val);","    Approx operator \"\"_a(unsigned long long val);","} // end namespace literals","","template\u003c\u003e","struct StringMaker\u003cCatch::Approx\u003e {","    static std::string convert(Catch::Approx const\u0026 value);","};","","} // end namespace Catch","","#endif // CATCH_APPROX_HPP_INCLUDED","","","#ifndef CATCH_ASSERTION_INFO_HPP_INCLUDED","#define CATCH_ASSERTION_INFO_HPP_INCLUDED","","","","#ifndef CATCH_SOURCE_LINE_INFO_HPP_INCLUDED","#define CATCH_SOURCE_LINE_INFO_HPP_INCLUDED","","#include \u003ccstddef\u003e","#include \u003ciosfwd\u003e","","namespace Catch {","","    struct SourceLineInfo {","","        SourceLineInfo() = delete;","        constexpr SourceLineInfo( char const* _file, std::size_t _line ) noexcept:","            file( _file ),","            line( _line )","        {}","","        bool operator == ( SourceLineInfo const\u0026 other ) const noexcept;","        bool operator \u003c ( SourceLineInfo const\u0026 other ) const noexcept;","","        char const* file;","        std::size_t line;","","        friend std::ostream\u0026 operator \u003c\u003c (std::ostream\u0026 os, SourceLineInfo const\u0026 info);","    };","}","","#define CATCH_INTERNAL_LINEINFO \\","    ::Catch::SourceLineInfo( __FILE__, static_cast\u003cstd::size_t\u003e( __LINE__ ) )","","#endif // CATCH_SOURCE_LINE_INFO_HPP_INCLUDED","","namespace Catch {","","    struct AssertionInfo {","        // AssertionInfo() = delete;","","        StringRef macroName;","        SourceLineInfo lineInfo;","        StringRef capturedExpression;","        ResultDisposition::Flags resultDisposition;","    };","","} // end namespace Catch","","#endif // CATCH_ASSERTION_INFO_HPP_INCLUDED","","","#ifndef CATCH_ASSERTION_RESULT_HPP_INCLUDED","#define CATCH_ASSERTION_RESULT_HPP_INCLUDED","","","","#ifndef CATCH_LAZY_EXPR_HPP_INCLUDED","#define CATCH_LAZY_EXPR_HPP_INCLUDED","","#include \u003ciosfwd\u003e","","namespace Catch {","","    class ITransientExpression;","","    class LazyExpression {","        friend class AssertionHandler;","        friend struct AssertionStats;","        friend class RunContext;","","        ITransientExpression const* m_transientExpression = nullptr;","        bool m_isNegated;","    public:","        constexpr LazyExpression( bool isNegated ):","            m_isNegated(isNegated)","        {}","        constexpr LazyExpression(LazyExpression const\u0026 other) = default;","        LazyExpression\u0026 operator = ( LazyExpression const\u0026 ) = delete;","","        constexpr explicit operator bool() const {","            return m_transientExpression != nullptr;","        }","","        friend auto operator \u003c\u003c ( std::ostream\u0026 os, LazyExpression const\u0026 lazyExpr ) -\u003e std::ostream\u0026;","    };","","} // namespace Catch","","#endif // CATCH_LAZY_EXPR_HPP_INCLUDED","","#include \u003cstring\u003e","","namespace Catch {","","    struct AssertionResultData","    {","        AssertionResultData() = delete;","","        AssertionResultData( ResultWas::OfType _resultType, LazyExpression const\u0026 _lazyExpression );","","        std::string message;","        mutable std::string reconstructedExpression;","        LazyExpression lazyExpression;","        ResultWas::OfType resultType;","","        std::string reconstructExpression() const;","    };","","    class AssertionResult {","    public:","        AssertionResult() = delete;","        AssertionResult( AssertionInfo const\u0026 info, AssertionResultData\u0026\u0026 data );","","        bool isOk() const;","        bool succeeded() const;","        ResultWas::OfType getResultType() const;","        bool hasExpression() const;","        bool hasMessage() const;","        std::string getExpression() const;","        std::string getExpressionInMacro() const;","        bool hasExpandedExpression() const;","        std::string getExpandedExpression() const;","        StringRef getMessage() const;","        SourceLineInfo getSourceInfo() const;","        StringRef getTestMacroName() const;","","    //protected:","        AssertionInfo m_info;","        AssertionResultData m_resultData;","    };","","} // end namespace Catch","","#endif // CATCH_ASSERTION_RESULT_HPP_INCLUDED","","","#ifndef CATCH_CASE_SENSITIVE_HPP_INCLUDED","#define CATCH_CASE_SENSITIVE_HPP_INCLUDED","","namespace Catch {","","    enum class CaseSensitive { Yes, No };","","} // namespace Catch","","#endif // CATCH_CASE_SENSITIVE_HPP_INCLUDED","","","#ifndef CATCH_CONFIG_HPP_INCLUDED","#define CATCH_CONFIG_HPP_INCLUDED","","","","#ifndef CATCH_TEST_SPEC_HPP_INCLUDED","#define CATCH_TEST_SPEC_HPP_INCLUDED","","#ifdef __clang__","#pragma clang diagnostic push","#pragma clang diagnostic ignored \"-Wpadded\"","#endif","","","","#ifndef CATCH_WILDCARD_PATTERN_HPP_INCLUDED","#define CATCH_WILDCARD_PATTERN_HPP_INCLUDED","","","#include \u003cstring\u003e","","namespace Catch","{","    class WildcardPattern {","        enum WildcardPosition {","            NoWildcard = 0,","            WildcardAtStart = 1,","            WildcardAtEnd = 2,","            WildcardAtBothEnds = WildcardAtStart | WildcardAtEnd","        };","","    public:","","        WildcardPattern( std::string const\u0026 pattern, CaseSensitive caseSensitivity );","        bool matches( std::string const\u0026 str ) const;","","    private:","        std::string normaliseString( std::string const\u0026 str ) const;","        CaseSensitive m_caseSensitivity;","        WildcardPosition m_wildcard = NoWildcard;","        std::string m_pattern;","    };","}","","#endif // CATCH_WILDCARD_PATTERN_HPP_INCLUDED","","#include \u003ciosfwd\u003e","#include \u003cstring\u003e","#include \u003cvector\u003e","","namespace Catch {","","    class IConfig;","    struct TestCaseInfo;","    class TestCaseHandle;","","    class TestSpec {","","        class Pattern {","        public:","            explicit Pattern( std::string const\u0026 name );","            virtual ~Pattern();","            virtual bool matches( TestCaseInfo const\u0026 testCase ) const = 0;","            std::string const\u0026 name() const;","        private:","            virtual void serializeTo( std::ostream\u0026 out ) const = 0;","            // Writes string that would be reparsed into the pattern","            friend std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 out,","                                            Pattern const\u0026 pattern) {","                pattern.serializeTo( out );","                return out;","            }","","            std::string const m_name;","        };","","        class NamePattern : public Pattern {","        public:","            explicit NamePattern( std::string const\u0026 name, std::string const\u0026 filterString );","            bool matches( TestCaseInfo const\u0026 testCase ) const override;","        private:","            void serializeTo( std::ostream\u0026 out ) const override;","","            WildcardPattern m_wildcardPattern;","        };","","        class TagPattern : public Pattern {","        public:","            explicit TagPattern( std::string const\u0026 tag, std::string const\u0026 filterString );","            bool matches( TestCaseInfo const\u0026 testCase ) const override;","        private:","            void serializeTo( std::ostream\u0026 out ) const override;","","            std::string m_tag;","        };","","        struct Filter {","            std::vector\u003cDetail::unique_ptr\u003cPattern\u003e\u003e m_required;","            std::vector\u003cDetail::unique_ptr\u003cPattern\u003e\u003e m_forbidden;","","            //! Serializes this filter into a string that would be parsed into","            //! an equivalent filter","            void serializeTo( std::ostream\u0026 out ) const;","            friend std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 out, Filter const\u0026 f) {","                f.serializeTo( out );","                return out;","            }","","            bool matches( TestCaseInfo const\u0026 testCase ) const;","        };","","        static std::string extractFilterName( Filter const\u0026 filter );","","    public:","        struct FilterMatch {","            std::string name;","            std::vector\u003cTestCaseHandle const*\u003e tests;","        };","        using Matches = std::vector\u003cFilterMatch\u003e;","        using vectorStrings = std::vector\u003cstd::string\u003e;","","        bool hasFilters() const;","        bool matches( TestCaseInfo const\u0026 testCase ) const;","        Matches matchesByFilter( std::vector\u003cTestCaseHandle\u003e const\u0026 testCases, IConfig const\u0026 config ) const;","        const vectorStrings \u0026 getInvalidSpecs() const;","","    private:","        std::vector\u003cFilter\u003e m_filters;","        std::vector\u003cstd::string\u003e m_invalidSpecs;","","        friend class TestSpecParser;","        //! Serializes this test spec into a string that would be parsed into","        //! equivalent test spec","        void serializeTo( std::ostream\u0026 out ) const;","        friend std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 out,","                                        TestSpec const\u0026 spec) {","            spec.serializeTo( out );","            return out;","        }","    };","}","","#ifdef __clang__","#pragma clang diagnostic pop","#endif","","#endif // CATCH_TEST_SPEC_HPP_INCLUDED","","","#ifndef CATCH_OPTIONAL_HPP_INCLUDED","#define CATCH_OPTIONAL_HPP_INCLUDED","","","#include \u003ccassert\u003e","","namespace Catch {","","    // An optional type","    template\u003ctypename T\u003e","    class Optional {","    public:","        Optional(): nullableValue( nullptr ) {}","        ~Optional() { reset(); }","","        Optional( T const\u0026 _value ):","            nullableValue( new ( storage ) T( _value ) ) {}","        Optional( T\u0026\u0026 _value ):","            nullableValue( new ( storage ) T( CATCH_MOVE( _value ) ) ) {}","","        Optional\u0026 operator=( T const\u0026 _value ) {","            reset();","            nullableValue = new ( storage ) T( _value );","            return *this;","        }","        Optional\u0026 operator=( T\u0026\u0026 _value ) {","            reset();","            nullableValue = new ( storage ) T( CATCH_MOVE( _value ) );","            return *this;","        }","","        Optional( Optional const\u0026 _other ):","            nullableValue( _other ? new ( storage ) T( *_other ) : nullptr ) {}","        Optional( Optional\u0026\u0026 _other ):","            nullableValue( _other ? new ( storage ) T( CATCH_MOVE( *_other ) )","                                  : nullptr ) {}","","        Optional\u0026 operator=( Optional const\u0026 _other ) {","            if ( \u0026_other != this ) {","                reset();","                if ( _other ) { nullableValue = new ( storage ) T( *_other ); }","            }","            return *this;","        }","        Optional\u0026 operator=( Optional\u0026\u0026 _other ) {","            if ( \u0026_other != this ) {","                reset();","                if ( _other ) {","                    nullableValue = new ( storage ) T( CATCH_MOVE( *_other ) );","                }","            }","            return *this;","        }","","        void reset() {","            if ( nullableValue ) { nullableValue-\u003e~T(); }","            nullableValue = nullptr;","        }","","        T\u0026 operator*() {","            assert(nullableValue);","            return *nullableValue;","        }","        T const\u0026 operator*() const {","            assert(nullableValue);","            return *nullableValue;","        }","        T* operator-\u003e() {","            assert(nullableValue);","            return nullableValue;","        }","        const T* operator-\u003e() const {","            assert(nullableValue);","            return nullableValue;","        }","","        T valueOr( T const\u0026 defaultValue ) const {","            return nullableValue ? *nullableValue : defaultValue;","        }","","        bool some() const { return nullableValue != nullptr; }","        bool none() const { return nullableValue == nullptr; }","","        bool operator !() const { return nullableValue == nullptr; }","        explicit operator bool() const {","            return some();","        }","","        friend bool operator==(Optional const\u0026 a, Optional const\u0026 b) {","            if (a.none() \u0026\u0026 b.none()) {","                return true;","            } else if (a.some() \u0026\u0026 b.some()) {","                return *a == *b;","            } else {","                return false;","            }","        }","        friend bool operator!=(Optional const\u0026 a, Optional const\u0026 b) {","            return !( a == b );","        }","","    private:","        T* nullableValue;","        alignas(alignof(T)) char storage[sizeof(T)];","    };","","} // end namespace Catch","","#endif // CATCH_OPTIONAL_HPP_INCLUDED","","","#ifndef CATCH_RANDOM_SEED_GENERATION_HPP_INCLUDED","#define CATCH_RANDOM_SEED_GENERATION_HPP_INCLUDED","","#include \u003ccstdint\u003e","","namespace Catch {","","    enum class GenerateFrom {","        Time,","        RandomDevice,","        //! Currently equivalent to RandomDevice, but can change at any point","        Default","    };","","    std::uint32_t generateRandomSeed(GenerateFrom from);","","} // end namespace Catch","","#endif // CATCH_RANDOM_SEED_GENERATION_HPP_INCLUDED","","","#ifndef CATCH_REPORTER_SPEC_PARSER_HPP_INCLUDED","#define CATCH_REPORTER_SPEC_PARSER_HPP_INCLUDED","","","#include \u003cmap\u003e","#include \u003cstring\u003e","#include \u003cvector\u003e","","namespace Catch {","","    enum class ColourMode : std::uint8_t;","","    namespace Detail {","        //! Splits the reporter spec into reporter name and kv-pair options","        std::vector\u003cstd::string\u003e splitReporterSpec( StringRef reporterSpec );","","        Optional\u003cColourMode\u003e stringToColourMode( StringRef colourMode );","    }","","    /**","     * Structured reporter spec that a reporter can be created from","     *","     * Parsing has been validated, but semantics have not. This means e.g.","     * that the colour mode is known to Catch2, but it might not be","     * compiled into the binary, and the output filename might not be","     * openable.","     */","    class ReporterSpec {","        std::string m_name;","        Optional\u003cstd::string\u003e m_outputFileName;","        Optional\u003cColourMode\u003e m_colourMode;","        std::map\u003cstd::string, std::string\u003e m_customOptions;","","        friend bool operator==( ReporterSpec const\u0026 lhs,","                                ReporterSpec const\u0026 rhs );","        friend bool operator!=( ReporterSpec const\u0026 lhs,","                                ReporterSpec const\u0026 rhs ) {","            return !( lhs == rhs );","        }","","    public:","        ReporterSpec(","            std::string name,","            Optional\u003cstd::string\u003e outputFileName,","            Optional\u003cColourMode\u003e colourMode,","            std::map\u003cstd::string, std::string\u003e customOptions );","","        std::string const\u0026 name() const { return m_name; }","","        Optional\u003cstd::string\u003e const\u0026 outputFile() const {","            return m_outputFileName;","        }","","        Optional\u003cColourMode\u003e const\u0026 colourMode() const { return m_colourMode; }","","        std::map\u003cstd::string, std::string\u003e const\u0026 customOptions() const {","            return m_customOptions;","        }","    };","","    /**","     * Parses provided reporter spec string into","     *","     * Returns empty optional on errors, e.g.","     *  * field that is not first and not a key+value pair","     *  * duplicated keys in kv pair","     *  * unknown catch reporter option","     *  * empty key/value in an custom kv pair","     *  * ...","     */","    Optional\u003cReporterSpec\u003e parseReporterSpec( StringRef reporterSpec );","","}","","#endif // CATCH_REPORTER_SPEC_PARSER_HPP_INCLUDED","","#include \u003cchrono\u003e","#include \u003cmap\u003e","#include \u003cstring\u003e","#include \u003cvector\u003e","","namespace Catch {","","    class IStream;","","    /**","     * `ReporterSpec` but with the defaults filled in.","     *","     * Like `ReporterSpec`, the semantics are unchecked.","     */","    struct ProcessedReporterSpec {","        std::string name;","        std::string outputFilename;","        ColourMode colourMode;","        std::map\u003cstd::string, std::string\u003e customOptions;","        friend bool operator==( ProcessedReporterSpec const\u0026 lhs,","                                ProcessedReporterSpec const\u0026 rhs );","        friend bool operator!=( ProcessedReporterSpec const\u0026 lhs,","                                ProcessedReporterSpec const\u0026 rhs ) {","            return !( lhs == rhs );","        }","    };","","    struct ConfigData {","","        bool listTests = false;","        bool listTags = false;","        bool listReporters = false;","        bool listListeners = false;","","        bool showSuccessfulTests = false;","        bool shouldDebugBreak = false;","        bool noThrow = false;","        bool showHelp = false;","        bool showInvisibles = false;","        bool filenamesAsTags = false;","        bool libIdentify = false;","        bool allowZeroTests = false;","","        int abortAfter = -1;","        uint32_t rngSeed = generateRandomSeed(GenerateFrom::Default);","","        unsigned int shardCount = 1;","        unsigned int shardIndex = 0;","","        bool skipBenchmarks = false;","        bool benchmarkNoAnalysis = false;","        unsigned int benchmarkSamples = 100;","        double benchmarkConfidenceInterval = 0.95;","        unsigned int benchmarkResamples = 100'000;","        std::chrono::milliseconds::rep benchmarkWarmupTime = 100;","","        Verbosity verbosity = Verbosity::Normal;","        WarnAbout::What warnings = WarnAbout::Nothing;","        ShowDurations showDurations = ShowDurations::DefaultForReporter;","        double minDuration = -1;","        TestRunOrder runOrder = TestRunOrder::Declared;","        ColourMode defaultColourMode = ColourMode::PlatformDefault;","        WaitForKeypress::When waitForKeypress = WaitForKeypress::Never;","","        std::string defaultOutputFilename;","        std::string name;","        std::string processName;","        std::vector\u003cReporterSpec\u003e reporterSpecifications;","","        std::vector\u003cstd::string\u003e testsOrTags;","        std::vector\u003cstd::string\u003e sectionsToRun;","    };","","","    class Config : public IConfig {","    public:","","        Config() = default;","        Config( ConfigData const\u0026 data );","        ~Config() override; // = default in the cpp file","","        bool listTests() const;","        bool listTags() const;","        bool listReporters() const;","        bool listListeners() const;","","        std::vector\u003cReporterSpec\u003e const\u0026 getReporterSpecs() const;","        std::vector\u003cProcessedReporterSpec\u003e const\u0026","        getProcessedReporterSpecs() const;","","        std::vector\u003cstd::string\u003e const\u0026 getTestsOrTags() const override;","        std::vector\u003cstd::string\u003e const\u0026 getSectionsToRun() const override;","","        TestSpec const\u0026 testSpec() const override;","        bool hasTestFilters() const override;","","        bool showHelp() const;","","        // IConfig interface","        bool allowThrows() const override;","        StringRef name() const override;","        bool includeSuccessfulResults() const override;","        bool warnAboutMissingAssertions() const override;","        bool warnAboutUnmatchedTestSpecs() const override;","        bool zeroTestsCountAsSuccess() const override;","        ShowDurations showDurations() const override;","        double minDuration() const override;","        TestRunOrder runOrder() const override;","        uint32_t rngSeed() const override;","        unsigned int shardCount() const override;","        unsigned int shardIndex() const override;","        ColourMode defaultColourMode() const override;","        bool shouldDebugBreak() const override;","        int abortAfter() const override;","        bool showInvisibles() const override;","        Verbosity verbosity() const override;","        bool skipBenchmarks() const override;","        bool benchmarkNoAnalysis() const override;","        unsigned int benchmarkSamples() const override;","        double benchmarkConfidenceInterval() const override;","        unsigned int benchmarkResamples() const override;","        std::chrono::milliseconds benchmarkWarmupTime() const override;","","    private:","        // Reads Bazel env vars and applies them to the config","        void readBazelEnvVars();","","        ConfigData m_data;","        std::vector\u003cProcessedReporterSpec\u003e m_processedReporterSpecs;","        TestSpec m_testSpec;","        bool m_hasTestFilters = false;","    };","} // end namespace Catch","","#endif // CATCH_CONFIG_HPP_INCLUDED","","","#ifndef CATCH_GET_RANDOM_SEED_HPP_INCLUDED","#define CATCH_GET_RANDOM_SEED_HPP_INCLUDED","","#include \u003ccstdint\u003e","","namespace Catch {","    //! Returns Catch2's current RNG seed.","    std::uint32_t getSeed();","}","","#endif // CATCH_GET_RANDOM_SEED_HPP_INCLUDED","","","#ifndef CATCH_MESSAGE_HPP_INCLUDED","#define CATCH_MESSAGE_HPP_INCLUDED","","","","","/** \\file"," * Wrapper for the CATCH_CONFIG_PREFIX_MESSAGES configuration option"," *"," * CATCH_CONFIG_PREFIX_ALL can be used to avoid clashes with other macros"," * by prepending CATCH_. This may not be desirable if the only clashes are with"," * logger macros such as INFO and WARN. In this cases"," * CATCH_CONFIG_PREFIX_MESSAGES can be used to only prefix a small subset"," * of relevant macros."," *"," */","","#ifndef CATCH_CONFIG_PREFIX_MESSAGES_HPP_INCLUDED","#define CATCH_CONFIG_PREFIX_MESSAGES_HPP_INCLUDED","","","#if defined(CATCH_CONFIG_PREFIX_ALL) \u0026\u0026 !defined(CATCH_CONFIG_PREFIX_MESSAGES)","    #define CATCH_CONFIG_PREFIX_MESSAGES","#endif","","#endif // CATCH_CONFIG_PREFIX_MESSAGES_HPP_INCLUDED","","","#ifndef CATCH_STREAM_END_STOP_HPP_INCLUDED","#define CATCH_STREAM_END_STOP_HPP_INCLUDED","","","namespace Catch {","","    // Use this in variadic streaming macros to allow","    //    \u003c\u003c +StreamEndStop","    // as well as","    //    \u003c\u003c stuff +StreamEndStop","    struct StreamEndStop {","        constexpr StringRef operator+() const { return StringRef(); }","","        template \u003ctypename T\u003e","        constexpr friend T const\u0026 operator+( T const\u0026 value, StreamEndStop ) {","            return value;","        }","    };","","} // namespace Catch","","#endif // CATCH_STREAM_END_STOP_HPP_INCLUDED","","","#ifndef CATCH_MESSAGE_INFO_HPP_INCLUDED","#define CATCH_MESSAGE_INFO_HPP_INCLUDED","","","#include \u003cstring\u003e","","namespace Catch {","","    struct MessageInfo {","        MessageInfo(    StringRef _macroName,","                        SourceLineInfo const\u0026 _lineInfo,","                        ResultWas::OfType _type );","","        StringRef macroName;","        std::string message;","        SourceLineInfo lineInfo;","        ResultWas::OfType type;","        unsigned int sequence;","","        bool operator == (MessageInfo const\u0026 other) const {","            return sequence == other.sequence;","        }","        bool operator \u003c (MessageInfo const\u0026 other) const {","            return sequence \u003c other.sequence;","        }","    private:","        static unsigned int globalCount;","    };","","} // end namespace Catch","","#endif // CATCH_MESSAGE_INFO_HPP_INCLUDED","","#include \u003cstring\u003e","#include \u003cvector\u003e","","namespace Catch {","","    struct SourceLineInfo;","    class IResultCapture;","","    struct MessageStream {","","        template\u003ctypename T\u003e","        MessageStream\u0026 operator \u003c\u003c ( T const\u0026 value ) {","            m_stream \u003c\u003c value;","            return *this;","        }","","        ReusableStringStream m_stream;","    };","","    struct MessageBuilder : MessageStream {","        MessageBuilder( StringRef macroName,","                        SourceLineInfo const\u0026 lineInfo,","                        ResultWas::OfType type ):","            m_info(macroName, lineInfo, type) {}","","        template\u003ctypename T\u003e","        MessageBuilder\u0026\u0026 operator \u003c\u003c ( T const\u0026 value ) \u0026\u0026 {","            m_stream \u003c\u003c value;","            return CATCH_MOVE(*this);","        }","","        MessageInfo m_info;","    };","","    class ScopedMessage {","    public:","        explicit ScopedMessage( MessageBuilder\u0026\u0026 builder );","        ScopedMessage( ScopedMessage\u0026 duplicate ) = delete;","        ScopedMessage( ScopedMessage\u0026\u0026 old ) noexcept;","        ~ScopedMessage();","","        MessageInfo m_info;","        bool m_moved = false;","    };","","    class Capturer {","        std::vector\u003cMessageInfo\u003e m_messages;","        IResultCapture\u0026 m_resultCapture;","        size_t m_captured = 0;","    public:","        Capturer( StringRef macroName, SourceLineInfo const\u0026 lineInfo, ResultWas::OfType resultType, StringRef names );","","        Capturer(Capturer const\u0026) = delete;","        Capturer\u0026 operator=(Capturer const\u0026) = delete;","","        ~Capturer();","","        void captureValue( size_t index, std::string const\u0026 value );","","        template\u003ctypename T\u003e","        void captureValues( size_t index, T const\u0026 value ) {","            captureValue( index, Catch::Detail::stringify( value ) );","        }","","        template\u003ctypename T, typename... Ts\u003e","        void captureValues( size_t index, T const\u0026 value, Ts const\u0026... values ) {","            captureValue( index, Catch::Detail::stringify(value) );","            captureValues( index+1, values... );","        }","    };","","} // end namespace Catch","","///////////////////////////////////////////////////////////////////////////////","#define INTERNAL_CATCH_MSG( macroName, messageType, resultDisposition, ... ) \\","    do { \\","        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::StringRef(), resultDisposition ); \\","        catchAssertionHandler.handleMessage( messageType, ( Catch::MessageStream() \u003c\u003c __VA_ARGS__ + ::Catch::StreamEndStop() ).m_stream.str() ); \\","        catchAssertionHandler.complete(); \\","    } while( false )","","///////////////////////////////////////////////////////////////////////////////","#define INTERNAL_CATCH_CAPTURE( varName, macroName, ... ) \\","    Catch::Capturer varName( macroName##_catch_sr,        \\","                             CATCH_INTERNAL_LINEINFO,     \\","                             Catch::ResultWas::Info,      \\","                             #__VA_ARGS__##_catch_sr );   \\","    varName.captureValues( 0, __VA_ARGS__ )","","///////////////////////////////////////////////////////////////////////////////","#define INTERNAL_CATCH_INFO( macroName, log ) \\","    const Catch::ScopedMessage INTERNAL_CATCH_UNIQUE_NAME( scopedMessage )( Catch::MessageBuilder( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info ) \u003c\u003c log )","","///////////////////////////////////////////////////////////////////////////////","#define INTERNAL_CATCH_UNSCOPED_INFO( macroName, log ) \\","    Catch::getResultCapture().emplaceUnscopedMessage( Catch::MessageBuilder( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, Catch::ResultWas::Info ) \u003c\u003c log )","","","#if defined(CATCH_CONFIG_PREFIX_MESSAGES) \u0026\u0026 !defined(CATCH_CONFIG_DISABLE)","","  #define CATCH_INFO( msg ) INTERNAL_CATCH_INFO( \"CATCH_INFO\", msg )","  #define CATCH_UNSCOPED_INFO( msg ) INTERNAL_CATCH_UNSCOPED_INFO( \"CATCH_UNSCOPED_INFO\", msg )","  #define CATCH_WARN( msg ) INTERNAL_CATCH_MSG( \"CATCH_WARN\", Catch::ResultWas::Warning, Catch::ResultDisposition::ContinueOnFailure, msg )","  #define CATCH_CAPTURE( ... ) INTERNAL_CATCH_CAPTURE( INTERNAL_CATCH_UNIQUE_NAME(capturer), \"CATCH_CAPTURE\", __VA_ARGS__ )","","#elif defined(CATCH_CONFIG_PREFIX_MESSAGES) \u0026\u0026 defined(CATCH_CONFIG_DISABLE)","","  #define CATCH_INFO( msg )          (void)(0)","  #define CATCH_UNSCOPED_INFO( msg ) (void)(0)","  #define CATCH_WARN( msg )          (void)(0)","  #define CATCH_CAPTURE( ... )       (void)(0)","","#elif !defined(CATCH_CONFIG_PREFIX_MESSAGES) \u0026\u0026 !defined(CATCH_CONFIG_DISABLE)","","  #define INFO( msg ) INTERNAL_CATCH_INFO( \"INFO\", msg )","  #define UNSCOPED_INFO( msg ) INTERNAL_CATCH_UNSCOPED_INFO( \"UNSCOPED_INFO\", msg )","  #define WARN( msg ) INTERNAL_CATCH_MSG( \"WARN\", Catch::ResultWas::Warning, Catch::ResultDisposition::ContinueOnFailure, msg )","  #define CAPTURE( ... ) INTERNAL_CATCH_CAPTURE( INTERNAL_CATCH_UNIQUE_NAME(capturer), \"CAPTURE\", __VA_ARGS__ )","","#elif !defined(CATCH_CONFIG_PREFIX_MESSAGES) \u0026\u0026 defined(CATCH_CONFIG_DISABLE)","","  #define INFO( msg )          (void)(0)","  #define UNSCOPED_INFO( msg ) (void)(0)","  #define WARN( msg )          (void)(0)","  #define CAPTURE( ... )       (void)(0)","","#endif // end of user facing macro declarations","","","","","#endif // CATCH_MESSAGE_HPP_INCLUDED","","","#ifndef CATCH_SECTION_INFO_HPP_INCLUDED","#define CATCH_SECTION_INFO_HPP_INCLUDED","","","","#ifndef CATCH_TOTALS_HPP_INCLUDED","#define CATCH_TOTALS_HPP_INCLUDED","","#include \u003ccstdint\u003e","","namespace Catch {","","    struct Counts {","        Counts operator - ( Counts const\u0026 other ) const;","        Counts\u0026 operator += ( Counts const\u0026 other );","","        std::uint64_t total() const;","        bool allPassed() const;","        bool allOk() const;","","        std::uint64_t passed = 0;","        std::uint64_t failed = 0;","        std::uint64_t failedButOk = 0;","        std::uint64_t skipped = 0;","    };","","    struct Totals {","","        Totals operator - ( Totals const\u0026 other ) const;","        Totals\u0026 operator += ( Totals const\u0026 other );","","        Totals delta( Totals const\u0026 prevTotals ) const;","","        Counts assertions;","        Counts testCases;","    };","}","","#endif // CATCH_TOTALS_HPP_INCLUDED","","#include \u003cstring\u003e","","namespace Catch {","","    struct SectionInfo {","        // The last argument is ignored, so that people can write","        // SECTION(\"ShortName\", \"Proper description that is long\") and","        // still use the `-c` flag comfortably.","        SectionInfo( SourceLineInfo const\u0026 _lineInfo, std::string _name,","                    const char* const = nullptr ):","            name(CATCH_MOVE(_name)),","            lineInfo(_lineInfo)","            {}","","        std::string name;","        SourceLineInfo lineInfo;","    };","","    struct SectionEndInfo {","        SectionInfo sectionInfo;","        Counts prevAssertions;","        double durationInSeconds;","    };","","} // end namespace Catch","","#endif // CATCH_SECTION_INFO_HPP_INCLUDED","","","#ifndef CATCH_SESSION_HPP_INCLUDED","#define CATCH_SESSION_HPP_INCLUDED","","","","#ifndef CATCH_COMMANDLINE_HPP_INCLUDED","#define CATCH_COMMANDLINE_HPP_INCLUDED","","","","#ifndef CATCH_CLARA_HPP_INCLUDED","#define CATCH_CLARA_HPP_INCLUDED","","#if defined( __clang__ )","#    pragma clang diagnostic push","#    pragma clang diagnostic ignored \"-Wweak-vtables\"","#    pragma clang diagnostic ignored \"-Wshadow\"","#    pragma clang diagnostic ignored \"-Wdeprecated\"","#endif","","#if defined( __GNUC__ )","#    pragma GCC diagnostic push","#    pragma GCC diagnostic ignored \"-Wsign-conversion\"","#endif","","#ifndef CLARA_CONFIG_OPTIONAL_TYPE","#    ifdef __has_include","#        if __has_include( \u003coptional\u003e) \u0026\u0026 __cplusplus \u003e= 201703L","#            include \u003coptional\u003e","#            define CLARA_CONFIG_OPTIONAL_TYPE std::optional","#        endif","#    endif","#endif","","","#include \u003ccassert\u003e","#include \u003cmemory\u003e","#include \u003costream\u003e","#include \u003csstream\u003e","#include \u003cstring\u003e","#include \u003ctype_traits\u003e","#include \u003cvector\u003e","","namespace Catch {","    namespace Clara {","","        class Args;","        class Parser;","","        // enum of result types from a parse","        enum class ParseResultType {","            Matched,","            NoMatch,","            ShortCircuitAll,","            ShortCircuitSame","        };","","        struct accept_many_t {};","        constexpr accept_many_t accept_many {};","","        namespace Detail {","            struct fake_arg {","                template \u003ctypename T\u003e","                operator T();","            };","","            template \u003ctypename F, typename = void\u003e","            struct is_unary_function : std::false_type {};","","            template \u003ctypename F\u003e","            struct is_unary_function\u003c","                F,","                Catch::Detail::void_t\u003cdecltype(","                    std::declval\u003cF\u003e()( fake_arg() ) )","                \u003e","            \u003e : std::true_type {};","","            // Traits for extracting arg and return type of lambdas (for single","            // argument lambdas)","            template \u003ctypename L\u003e","            struct UnaryLambdaTraits","                : UnaryLambdaTraits\u003cdecltype( \u0026L::operator() )\u003e {};","","            template \u003ctypename ClassT, typename ReturnT, typename... Args\u003e","            struct UnaryLambdaTraits\u003cReturnT ( ClassT::* )( Args... ) const\u003e {","                static const bool isValid = false;","            };","","            template \u003ctypename ClassT, typename ReturnT, typename ArgT\u003e","            struct UnaryLambdaTraits\u003cReturnT ( ClassT::* )( ArgT ) const\u003e {","                static const bool isValid = true;","                using ArgType = std::remove_const_t\u003cstd::remove_reference_t\u003cArgT\u003e\u003e;","                using ReturnType = ReturnT;","            };","","            class TokenStream;","","            // Wraps a token coming from a token stream. These may not directly","            // correspond to strings as a single string may encode an option +","            // its argument if the : or = form is used","            enum class TokenType { Option, Argument };","            struct Token {","                TokenType type;","                StringRef token;","            };","","            // Abstracts iterators into args as a stream of tokens, with option","            // arguments uniformly handled","            class TokenStream {","                using Iterator = std::vector\u003cStringRef\u003e::const_iterator;","                Iterator it;","                Iterator itEnd;","                std::vector\u003cToken\u003e m_tokenBuffer;","                void loadBuffer();","","            public:","                explicit TokenStream( Args const\u0026 args );","                TokenStream( Iterator it, Iterator itEnd );","","                explicit operator bool() const {","                    return !m_tokenBuffer.empty() || it != itEnd;","                }","","                size_t count() const {","                    return m_tokenBuffer.size() + ( itEnd - it );","                }","","                Token operator*() const {","                    assert( !m_tokenBuffer.empty() );","                    return m_tokenBuffer.front();","                }","","                Token const* operator-\u003e() const {","                    assert( !m_tokenBuffer.empty() );","                    return \u0026m_tokenBuffer.front();","                }","","                TokenStream\u0026 operator++();","            };","","            //! Denotes type of a parsing result","            enum class ResultType {","                Ok,          ///\u003c No errors","                LogicError,  ///\u003c Error in user-specified arguments for","                             ///\u003c construction","                RuntimeError ///\u003c Error in parsing inputs","            };","","            class ResultBase {","            protected:","                ResultBase( ResultType type ): m_type( type ) {}","                virtual ~ResultBase(); // = default;","","","                ResultBase(ResultBase const\u0026) = default;","                ResultBase\u0026 operator=(ResultBase const\u0026) = default;","                ResultBase(ResultBase\u0026\u0026) = default;","                ResultBase\u0026 operator=(ResultBase\u0026\u0026) = default;","","                virtual void enforceOk() const = 0;","","                ResultType m_type;","            };","","            template \u003ctypename T\u003e","            class ResultValueBase : public ResultBase {","            public:","                T const\u0026 value() const\u0026 {","                    enforceOk();","                    return m_value;","                }","                T\u0026\u0026 value() \u0026\u0026 {","                    enforceOk();","                    return CATCH_MOVE( m_value );","                }","","            protected:","                ResultValueBase( ResultType type ): ResultBase( type ) {}","","                ResultValueBase( ResultValueBase const\u0026 other ):","                    ResultBase( other ) {","                    if ( m_type == ResultType::Ok )","                        new ( \u0026m_value ) T( other.m_value );","                }","                ResultValueBase( ResultValueBase\u0026\u0026 other ):","                    ResultBase( other ) {","                    if ( m_type == ResultType::Ok )","                        new ( \u0026m_value ) T( CATCH_MOVE(other.m_value) );","                }","","","                ResultValueBase( ResultType, T const\u0026 value ):","                    ResultBase( ResultType::Ok ) {","                    new ( \u0026m_value ) T( value );","                }","                ResultValueBase( ResultType, T\u0026\u0026 value ):","                    ResultBase( ResultType::Ok ) {","                    new ( \u0026m_value ) T( CATCH_MOVE(value) );","                }","","                ResultValueBase\u0026 operator=( ResultValueBase const\u0026 other ) {","                    if ( m_type == ResultType::Ok )","                        m_value.~T();","                    ResultBase::operator=( other );","                    if ( m_type == ResultType::Ok )","                        new ( \u0026m_value ) T( other.m_value );","                    return *this;","                }","                ResultValueBase\u0026 operator=( ResultValueBase\u0026\u0026 other ) {","                    if ( m_type == ResultType::Ok ) m_value.~T();","                    ResultBase::operator=( other );","                    if ( m_type == ResultType::Ok )","                        new ( \u0026m_value ) T( CATCH_MOVE(other.m_value) );","                    return *this;","                }","","","                ~ResultValueBase() override {","                    if ( m_type == ResultType::Ok )","                        m_value.~T();","                }","","                union {","                    T m_value;","                };","            };","","            template \u003c\u003e class ResultValueBase\u003cvoid\u003e : public ResultBase {","            protected:","                using ResultBase::ResultBase;","            };","","            template \u003ctypename T = void\u003e","            class BasicResult : public ResultValueBase\u003cT\u003e {","            public:","                template \u003ctypename U\u003e","                explicit BasicResult( BasicResult\u003cU\u003e const\u0026 other ):","                    ResultValueBase\u003cT\u003e( other.type() ),","                    m_errorMessage( other.errorMessage() ) {","                    assert( type() != ResultType::Ok );","                }","","                template \u003ctypename U\u003e","                static auto ok( U\u0026\u0026 value ) -\u003e BasicResult {","                    return { ResultType::Ok, CATCH_FORWARD(value) };","                }","                static auto ok() -\u003e BasicResult { return { ResultType::Ok }; }","                static auto logicError( std::string\u0026\u0026 message )","                    -\u003e BasicResult {","                    return { ResultType::LogicError, CATCH_MOVE(message) };","                }","                static auto runtimeError( std::string\u0026\u0026 message )","                    -\u003e BasicResult {","                    return { ResultType::RuntimeError, CATCH_MOVE(message) };","                }","","                explicit operator bool() const {","                    return m_type == ResultType::Ok;","                }","                auto type() const -\u003e ResultType { return m_type; }","                auto errorMessage() const -\u003e std::string const\u0026 {","                    return m_errorMessage;","                }","","            protected:","                void enforceOk() const override {","","                    // Errors shouldn't reach this point, but if they do","                    // the actual error message will be in m_errorMessage","                    assert( m_type != ResultType::LogicError );","                    assert( m_type != ResultType::RuntimeError );","                    if ( m_type != ResultType::Ok )","                        std::abort();","                }","","                std::string","                    m_errorMessage; // Only populated if resultType is an error","","                BasicResult( ResultType type,","                             std::string\u0026\u0026 message ):","                    ResultValueBase\u003cT\u003e( type ), m_errorMessage( CATCH_MOVE(message) ) {","                    assert( m_type != ResultType::Ok );","                }","","                using ResultValueBase\u003cT\u003e::ResultValueBase;","                using ResultBase::m_type;","            };","","            class ParseState {","            public:","                ParseState( ParseResultType type,","                            TokenStream remainingTokens );","","                ParseResultType type() const { return m_type; }","                TokenStream const\u0026 remainingTokens() const\u0026 {","                    return m_remainingTokens;","                }","                TokenStream\u0026\u0026 remainingTokens() \u0026\u0026 {","                    return CATCH_MOVE( m_remainingTokens );","                }","","            private:","                ParseResultType m_type;","                TokenStream m_remainingTokens;","            };","","            using Result = BasicResult\u003cvoid\u003e;","            using ParserResult = BasicResult\u003cParseResultType\u003e;","            using InternalParseResult = BasicResult\u003cParseState\u003e;","","            struct HelpColumns {","                std::string left;","                StringRef descriptions;","            };","","            template \u003ctypename T\u003e","            ParserResult convertInto( std::string const\u0026 source, T\u0026 target ) {","                std::stringstream ss( source );","                ss \u003e\u003e target;","                if ( ss.fail() ) {","                    return ParserResult::runtimeError(","                        \"Unable to convert '\" + source +","                        \"' to destination type\" );","                } else {","                    return ParserResult::ok( ParseResultType::Matched );","                }","            }","            ParserResult convertInto( std::string const\u0026 source,","                                      std::string\u0026 target );","            ParserResult convertInto( std::string const\u0026 source, bool\u0026 target );","","#ifdef CLARA_CONFIG_OPTIONAL_TYPE","            template \u003ctypename T\u003e","            auto convertInto( std::string const\u0026 source,","                              CLARA_CONFIG_OPTIONAL_TYPE\u003cT\u003e\u0026 target )","                -\u003e ParserResult {","                T temp;","                auto result = convertInto( source, temp );","                if ( result )","                    target = CATCH_MOVE( temp );","                return result;","            }","#endif // CLARA_CONFIG_OPTIONAL_TYPE","","            struct BoundRef : Catch::Detail::NonCopyable {","                virtual ~BoundRef() = default;","                virtual bool isContainer() const;","                virtual bool isFlag() const;","            };","            struct BoundValueRefBase : BoundRef {","                virtual auto setValue( std::string const\u0026 arg )","                    -\u003e ParserResult = 0;","            };","            struct BoundFlagRefBase : BoundRef {","                virtual auto setFlag( bool flag ) -\u003e ParserResult = 0;","                bool isFlag() const override;","            };","","            template \u003ctypename T\u003e struct BoundValueRef : BoundValueRefBase {","                T\u0026 m_ref;","","                explicit BoundValueRef( T\u0026 ref ): m_ref( ref ) {}","","                ParserResult setValue( std::string const\u0026 arg ) override {","                    return convertInto( arg, m_ref );","                }","            };","","            template \u003ctypename T\u003e","            struct BoundValueRef\u003cstd::vector\u003cT\u003e\u003e : BoundValueRefBase {","                std::vector\u003cT\u003e\u0026 m_ref;","","                explicit BoundValueRef( std::vector\u003cT\u003e\u0026 ref ): m_ref( ref ) {}","","                auto isContainer() const -\u003e bool override { return true; }","","                auto setValue( std::string const\u0026 arg )","                    -\u003e ParserResult override {","                    T temp;","                    auto result = convertInto( arg, temp );","                    if ( result )","                        m_ref.push_back( temp );","                    return result;","                }","            };","","            struct BoundFlagRef : BoundFlagRefBase {","                bool\u0026 m_ref;","","                explicit BoundFlagRef( bool\u0026 ref ): m_ref( ref ) {}","","                ParserResult setFlag( bool flag ) override;","            };","","            template \u003ctypename ReturnType\u003e struct LambdaInvoker {","                static_assert(","                    std::is_same\u003cReturnType, ParserResult\u003e::value,","                    \"Lambda must return void or clara::ParserResult\" );","","                template \u003ctypename L, typename ArgType\u003e","                static auto invoke( L const\u0026 lambda, ArgType const\u0026 arg )","                    -\u003e ParserResult {","                    return lambda( arg );","                }","            };","","            template \u003c\u003e struct LambdaInvoker\u003cvoid\u003e {","                template \u003ctypename L, typename ArgType\u003e","                static auto invoke( L const\u0026 lambda, ArgType const\u0026 arg )","                    -\u003e ParserResult {","                    lambda( arg );","                    return ParserResult::ok( ParseResultType::Matched );","                }","            };","","            template \u003ctypename ArgType, typename L\u003e","            auto invokeLambda( L const\u0026 lambda, std::string const\u0026 arg )","                -\u003e ParserResult {","                ArgType temp{};","                auto result = convertInto( arg, temp );","                return !result ? result","                               : LambdaInvoker\u003ctypename UnaryLambdaTraits\u003c","                                     L\u003e::ReturnType\u003e::invoke( lambda, temp );","            }","","            template \u003ctypename L\u003e struct BoundLambda : BoundValueRefBase {","                L m_lambda;","","                static_assert(","                    UnaryLambdaTraits\u003cL\u003e::isValid,","                    \"Supplied lambda must take exactly one argument\" );","                explicit BoundLambda( L const\u0026 lambda ): m_lambda( lambda ) {}","","                auto setValue( std::string const\u0026 arg )","                    -\u003e ParserResult override {","                    return invokeLambda\u003ctypename UnaryLambdaTraits\u003cL\u003e::ArgType\u003e(","                        m_lambda, arg );","                }","            };","","            template \u003ctypename L\u003e struct BoundManyLambda : BoundLambda\u003cL\u003e {","                explicit BoundManyLambda( L const\u0026 lambda ): BoundLambda\u003cL\u003e( lambda ) {}","                bool isContainer() const override { return true; }","            };","","            template \u003ctypename L\u003e struct BoundFlagLambda : BoundFlagRefBase {","                L m_lambda;","","                static_assert(","                    UnaryLambdaTraits\u003cL\u003e::isValid,","                    \"Supplied lambda must take exactly one argument\" );","                static_assert(","                    std::is_same\u003ctypename UnaryLambdaTraits\u003cL\u003e::ArgType,","                                 bool\u003e::value,","                    \"flags must be boolean\" );","","                explicit BoundFlagLambda( L const\u0026 lambda ):","                    m_lambda( lambda ) {}","","                auto setFlag( bool flag ) -\u003e ParserResult override {","                    return LambdaInvoker\u003ctypename UnaryLambdaTraits\u003c","                        L\u003e::ReturnType\u003e::invoke( m_lambda, flag );","                }","            };","","            enum class Optionality { Optional, Required };","","            class ParserBase {","            public:","                virtual ~ParserBase() = default;","                virtual auto validate() const -\u003e Result { return Result::ok(); }","                virtual auto parse( std::string const\u0026 exeName,","                                    TokenStream tokens ) const","                    -\u003e InternalParseResult = 0;","                virtual size_t cardinality() const;","","                InternalParseResult parse( Args const\u0026 args ) const;","            };","","            template \u003ctypename DerivedT\u003e","            class ComposableParserImpl : public ParserBase {","            public:","                template \u003ctypename T\u003e","                auto operator|( T const\u0026 other ) const -\u003e Parser;","            };","","            // Common code and state for Args and Opts","            template \u003ctypename DerivedT\u003e","            class ParserRefImpl : public ComposableParserImpl\u003cDerivedT\u003e {","            protected:","                Optionality m_optionality = Optionality::Optional;","                std::shared_ptr\u003cBoundRef\u003e m_ref;","                StringRef m_hint;","                StringRef m_description;","","                explicit ParserRefImpl( std::shared_ptr\u003cBoundRef\u003e const\u0026 ref ):","                    m_ref( ref ) {}","","            public:","                template \u003ctypename LambdaT\u003e","                ParserRefImpl( accept_many_t,","                               LambdaT const\u0026 ref,","                               StringRef hint ):","                    m_ref( std::make_shared\u003cBoundManyLambda\u003cLambdaT\u003e\u003e( ref ) ),","                    m_hint( hint ) {}","","                template \u003ctypename T,","                          typename = typename std::enable_if_t\u003c","                              !Detail::is_unary_function\u003cT\u003e::value\u003e\u003e","                ParserRefImpl( T\u0026 ref, StringRef hint ):","                    m_ref( std::make_shared\u003cBoundValueRef\u003cT\u003e\u003e( ref ) ),","                    m_hint( hint ) {}","","                template \u003ctypename LambdaT,","                          typename = typename std::enable_if_t\u003c","                              Detail::is_unary_function\u003cLambdaT\u003e::value\u003e\u003e","                ParserRefImpl( LambdaT const\u0026 ref, StringRef hint ):","                    m_ref( std::make_shared\u003cBoundLambda\u003cLambdaT\u003e\u003e( ref ) ),","                    m_hint( hint ) {}","","                DerivedT\u0026 operator()( StringRef description ) \u0026 {","                    m_description = description;","                    return static_cast\u003cDerivedT\u0026\u003e( *this );","                }","                DerivedT\u0026\u0026 operator()( StringRef description ) \u0026\u0026 {","                    m_description = description;","                    return static_cast\u003cDerivedT\u0026\u0026\u003e( *this );","                }","","                auto optional() -\u003e DerivedT\u0026 {","                    m_optionality = Optionality::Optional;","                    return static_cast\u003cDerivedT\u0026\u003e( *this );","                }","","                auto required() -\u003e DerivedT\u0026 {","                    m_optionality = Optionality::Required;","                    return static_cast\u003cDerivedT\u0026\u003e( *this );","                }","","                auto isOptional() const -\u003e bool {","                    return m_optionality == Optionality::Optional;","                }","","                auto cardinality() const -\u003e size_t override {","                    if ( m_ref-\u003eisContainer() )","                        return 0;","                    else","                        return 1;","                }","","                StringRef hint() const { return m_hint; }","            };","","        } // namespace detail","","","        // A parser for arguments","        class Arg : public Detail::ParserRefImpl\u003cArg\u003e {","        public:","            using ParserRefImpl::ParserRefImpl;","            using ParserBase::parse;","","            Detail::InternalParseResult","                parse(std::string const\u0026,","                      Detail::TokenStream tokens) const override;","        };","","        // A parser for options","        class Opt : public Detail::ParserRefImpl\u003cOpt\u003e {","        protected:","            std::vector\u003cStringRef\u003e m_optNames;","","        public:","            template \u003ctypename LambdaT\u003e","            explicit Opt(LambdaT const\u0026 ref) :","                ParserRefImpl(","                    std::make_shared\u003cDetail::BoundFlagLambda\u003cLambdaT\u003e\u003e(ref)) {}","","            explicit Opt(bool\u0026 ref);","","            template \u003ctypename LambdaT,","                      typename = typename std::enable_if_t\u003c","                          Detail::is_unary_function\u003cLambdaT\u003e::value\u003e\u003e","            Opt( LambdaT const\u0026 ref, StringRef hint ):","                ParserRefImpl( ref, hint ) {}","","            template \u003ctypename LambdaT\u003e","            Opt( accept_many_t, LambdaT const\u0026 ref, StringRef hint ):","                ParserRefImpl( accept_many, ref, hint ) {}","","            template \u003ctypename T,","                      typename = typename std::enable_if_t\u003c","                          !Detail::is_unary_function\u003cT\u003e::value\u003e\u003e","            Opt( T\u0026 ref, StringRef hint ):","                ParserRefImpl( ref, hint ) {}","","            Opt\u0026 operator[]( StringRef optName ) \u0026 {","                m_optNames.push_back(optName);","                return *this;","            }","            Opt\u0026\u0026 operator[]( StringRef optName ) \u0026\u0026 {","                m_optNames.push_back( optName );","                return CATCH_MOVE(*this);","            }","","            Detail::HelpColumns getHelpColumns() const;","","            bool isMatch(StringRef optToken) const;","","            using ParserBase::parse;","","            Detail::InternalParseResult","                parse(std::string const\u0026,","                      Detail::TokenStream tokens) const override;","","            Detail::Result validate() const override;","        };","","        // Specifies the name of the executable","        class ExeName : public Detail::ComposableParserImpl\u003cExeName\u003e {","            std::shared_ptr\u003cstd::string\u003e m_name;","            std::shared_ptr\u003cDetail::BoundValueRefBase\u003e m_ref;","","        public:","            ExeName();","            explicit ExeName(std::string\u0026 ref);","","            template \u003ctypename LambdaT\u003e","            explicit ExeName(LambdaT const\u0026 lambda) : ExeName() {","                m_ref = std::make_shared\u003cDetail::BoundLambda\u003cLambdaT\u003e\u003e(lambda);","            }","","            // The exe name is not parsed out of the normal tokens, but is","            // handled specially","            Detail::InternalParseResult","                parse(std::string const\u0026,","                      Detail::TokenStream tokens) const override;","","            std::string const\u0026 name() const { return *m_name; }","            Detail::ParserResult set(std::string const\u0026 newName);","        };","","","        // A Combined parser","        class Parser : Detail::ParserBase {","            mutable ExeName m_exeName;","            std::vector\u003cOpt\u003e m_options;","            std::vector\u003cArg\u003e m_args;","","        public:","","            auto operator|=(ExeName const\u0026 exeName) -\u003e Parser\u0026 {","                m_exeName = exeName;","                return *this;","            }","","            auto operator|=(Arg const\u0026 arg) -\u003e Parser\u0026 {","                m_args.push_back(arg);","                return *this;","            }","","            friend Parser\u0026 operator|=( Parser\u0026 p, Opt const\u0026 opt ) {","                p.m_options.push_back( opt );","                return p;","            }","            friend Parser\u0026 operator|=( Parser\u0026 p, Opt\u0026\u0026 opt ) {","                p.m_options.push_back( CATCH_MOVE(opt) );","                return p;","            }","","            Parser\u0026 operator|=(Parser const\u0026 other);","","            template \u003ctypename T\u003e","            friend Parser operator|( Parser const\u0026 p, T\u0026\u0026 rhs ) {","                Parser temp( p );","                temp |= rhs;","                return temp;","            }","","            template \u003ctypename T\u003e","            friend Parser operator|( Parser\u0026\u0026 p, T\u0026\u0026 rhs ) {","                p |= CATCH_FORWARD(rhs);","                return CATCH_MOVE(p);","            }","","            std::vector\u003cDetail::HelpColumns\u003e getHelpColumns() const;","","            void writeToStream(std::ostream\u0026 os) const;","","            friend auto operator\u003c\u003c(std::ostream\u0026 os, Parser const\u0026 parser)","                -\u003e std::ostream\u0026 {","                parser.writeToStream(os);","                return os;","            }","","            Detail::Result validate() const override;","","            using ParserBase::parse;","            Detail::InternalParseResult","                parse(std::string const\u0026 exeName,","                      Detail::TokenStream tokens) const override;","        };","","        /**","         * Wrapper over argc + argv, assumes that the inputs outlive it","         */","        class Args {","            friend Detail::TokenStream;","            StringRef m_exeName;","            std::vector\u003cStringRef\u003e m_args;","","        public:","            Args(int argc, char const* const* argv);","            // Helper constructor for testing","            Args(std::initializer_list\u003cStringRef\u003e args);","","            StringRef exeName() const { return m_exeName; }","        };","","","        // Convenience wrapper for option parser that specifies the help option","        struct Help : Opt {","            Help(bool\u0026 showHelpFlag);","        };","","        // Result type for parser operation","        using Detail::ParserResult;","","        namespace Detail {","            template \u003ctypename DerivedT\u003e","            template \u003ctypename T\u003e","            Parser","                ComposableParserImpl\u003cDerivedT\u003e::operator|(T const\u0026 other) const {","                return Parser() | static_cast\u003cDerivedT const\u0026\u003e(*this) | other;","            }","        }","","    } // namespace Clara","} // namespace Catch","","#if defined( __clang__ )","#    pragma clang diagnostic pop","#endif","","#if defined( __GNUC__ )","#    pragma GCC diagnostic pop","#endif","","#endif // CATCH_CLARA_HPP_INCLUDED","","namespace Catch {","","    struct ConfigData;","","    Clara::Parser makeCommandLineParser( ConfigData\u0026 config );","","} // end namespace Catch","","#endif // CATCH_COMMANDLINE_HPP_INCLUDED","","namespace Catch {","","    class Session : Detail::NonCopyable {","    public:","","        Session();","        ~Session();","","        void showHelp() const;","        void libIdentify();","","        int applyCommandLine( int argc, char const * const * argv );","    #if defined(CATCH_CONFIG_WCHAR) \u0026\u0026 defined(_WIN32) \u0026\u0026 defined(UNICODE)","        int applyCommandLine( int argc, wchar_t const * const * argv );","    #endif","","        void useConfigData( ConfigData const\u0026 configData );","","        template\u003ctypename CharT\u003e","        int run(int argc, CharT const * const argv[]) {","            if (m_startupExceptions)","                return 1;","            int returnCode = applyCommandLine(argc, argv);","            if (returnCode == 0)","                returnCode = run();","            return returnCode;","        }","","        int run();","","        Clara::Parser const\u0026 cli() const;","        void cli( Clara::Parser const\u0026 newParser );","        ConfigData\u0026 configData();","        Config\u0026 config();","    private:","        int runInternal();","","        Clara::Parser m_cli;","        ConfigData m_configData;","        Detail::unique_ptr\u003cConfig\u003e m_config;","        bool m_startupExceptions = false;","    };","","} // end namespace Catch","","#endif // CATCH_SESSION_HPP_INCLUDED","","","#ifndef CATCH_TAG_ALIAS_HPP_INCLUDED","#define CATCH_TAG_ALIAS_HPP_INCLUDED","","","#include \u003cstring\u003e","","namespace Catch {","","    struct TagAlias {","        TagAlias(std::string const\u0026 _tag, SourceLineInfo _lineInfo):","            tag(_tag),","            lineInfo(_lineInfo)","        {}","","        std::string tag;","        SourceLineInfo lineInfo;","    };","","} // end namespace Catch","","#endif // CATCH_TAG_ALIAS_HPP_INCLUDED","","","#ifndef CATCH_TAG_ALIAS_AUTOREGISTRAR_HPP_INCLUDED","#define CATCH_TAG_ALIAS_AUTOREGISTRAR_HPP_INCLUDED","","","namespace Catch {","","    struct RegistrarForTagAliases {","        RegistrarForTagAliases( char const* alias, char const* tag, SourceLineInfo const\u0026 lineInfo );","    };","","} // end namespace Catch","","#define CATCH_REGISTER_TAG_ALIAS( alias, spec ) \\","    CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\","    namespace{ Catch::RegistrarForTagAliases INTERNAL_CATCH_UNIQUE_NAME( AutoRegisterTagAlias )( alias, spec, CATCH_INTERNAL_LINEINFO ); } \\","    CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION","","#endif // CATCH_TAG_ALIAS_AUTOREGISTRAR_HPP_INCLUDED","","","#ifndef CATCH_TEMPLATE_TEST_MACROS_HPP_INCLUDED","#define CATCH_TEMPLATE_TEST_MACROS_HPP_INCLUDED","","// We need this suppression to leak, because it took until GCC 10","// for the front end to handle local suppression via _Pragma properly","// inside templates (so `TEMPLATE_TEST_CASE` and co).","// **THIS IS DIFFERENT FOR STANDARD TESTS, WHERE GCC 9 IS SUFFICIENT**","#if defined(__GNUC__) \u0026\u0026 !defined(__clang__) \u0026\u0026 !defined(__ICC) \u0026\u0026 __GNUC__ \u003c 10","#pragma GCC diagnostic ignored \"-Wparentheses\"","#endif","","","","","#ifndef CATCH_TEST_MACROS_HPP_INCLUDED","#define CATCH_TEST_MACROS_HPP_INCLUDED","","","","#ifndef CATCH_TEST_MACRO_IMPL_HPP_INCLUDED","#define CATCH_TEST_MACRO_IMPL_HPP_INCLUDED","","","","#ifndef CATCH_ASSERTION_HANDLER_HPP_INCLUDED","#define CATCH_ASSERTION_HANDLER_HPP_INCLUDED","","","","#ifndef CATCH_DECOMPOSER_HPP_INCLUDED","#define CATCH_DECOMPOSER_HPP_INCLUDED","","","","#ifndef CATCH_COMPARE_TRAITS_HPP_INCLUDED","#define CATCH_COMPARE_TRAITS_HPP_INCLUDED","","","#include \u003ctype_traits\u003e","","namespace Catch {","    namespace Detail {","","#if defined( __GNUC__ ) \u0026\u0026 !defined( __clang__ )","#    pragma GCC diagnostic push","    // GCC likes to complain about comparing bool with 0, in the decltype()","    // that defines the comparable traits below.","#    pragma GCC diagnostic ignored \"-Wbool-compare\"","    // \"ordered comparison of pointer with integer zero\" same as above,","    // but it does not have a separate warning flag to suppress","#    pragma GCC diagnostic ignored \"-Wextra\"","    // Did you know that comparing floats with `0` directly","    // is super-duper dangerous in unevaluated context?","#    pragma GCC diagnostic ignored \"-Wfloat-equal\"","#endif","","#if defined( __clang__ )","#    pragma clang diagnostic push","    // Did you know that comparing floats with `0` directly","    // is super-duper dangerous in unevaluated context?","#    pragma clang diagnostic ignored \"-Wfloat-equal\"","#endif","","#define CATCH_DEFINE_COMPARABLE_TRAIT( id, op )                               \\","    template \u003ctypename, typename, typename = void\u003e                            \\","    struct is_##id##_comparable : std::false_type {};                         \\","    template \u003ctypename T, typename U\u003e                                         \\","    struct is_##id##_comparable\u003c                                              \\","        T,                                                                    \\","        U,                                                                    \\","        void_t\u003cdecltype( std::declval\u003cT\u003e() op std::declval\u003cU\u003e() )\u003e\u003e           \\","        : std::true_type {};                                                  \\","    template \u003ctypename, typename = void\u003e                                      \\","    struct is_##id##_0_comparable : std::false_type {};                       \\","    template \u003ctypename T\u003e                                                     \\","    struct is_##id##_0_comparable\u003cT,                                          \\","                                  void_t\u003cdecltype( std::declval\u003cT\u003e() op 0 )\u003e\u003e \\","        : std::true_type {};","","        // We need all 6 pre-spaceship comparison ops: \u003c, \u003c=, \u003e, \u003e=, ==, !=","        CATCH_DEFINE_COMPARABLE_TRAIT( lt, \u003c )","        CATCH_DEFINE_COMPARABLE_TRAIT( le, \u003c= )","        CATCH_DEFINE_COMPARABLE_TRAIT( gt, \u003e )","        CATCH_DEFINE_COMPARABLE_TRAIT( ge, \u003e= )","        CATCH_DEFINE_COMPARABLE_TRAIT( eq, == )","        CATCH_DEFINE_COMPARABLE_TRAIT( ne, != )","","#undef CATCH_DEFINE_COMPARABLE_TRAIT","","#if defined( __GNUC__ ) \u0026\u0026 !defined( __clang__ )","#    pragma GCC diagnostic pop","#endif","#if defined( __clang__ )","#    pragma clang diagnostic pop","#endif","","","    } // namespace Detail","} // namespace Catch","","#endif // CATCH_COMPARE_TRAITS_HPP_INCLUDED","","","#ifndef CATCH_LOGICAL_TRAITS_HPP_INCLUDED","#define CATCH_LOGICAL_TRAITS_HPP_INCLUDED","","#include \u003ctype_traits\u003e","","namespace Catch {","namespace Detail {","","#if defined( __cpp_lib_logical_traits ) \u0026\u0026 __cpp_lib_logical_traits \u003e= 201510","","    using std::conjunction;","    using std::disjunction;","    using std::negation;","","#else","","    template \u003cclass...\u003e struct conjunction : std::true_type {};","    template \u003cclass B1\u003e struct conjunction\u003cB1\u003e : B1 {};","    template \u003cclass B1, class... Bn\u003e","    struct conjunction\u003cB1, Bn...\u003e","        : std::conditional_t\u003cbool( B1::value ), conjunction\u003cBn...\u003e, B1\u003e {};","","    template \u003cclass...\u003e struct disjunction : std::false_type {};","    template \u003cclass B1\u003e struct disjunction\u003cB1\u003e : B1 {};","    template \u003cclass B1, class... Bn\u003e","    struct disjunction\u003cB1, Bn...\u003e","        : std::conditional_t\u003cbool( B1::value ), B1, disjunction\u003cBn...\u003e\u003e {};","","    template \u003cclass B\u003e","    struct negation : std::integral_constant\u003cbool, !bool(B::value)\u003e {};","","#endif","","} // namespace Detail","} // namespace Catch","","#endif // CATCH_LOGICAL_TRAITS_HPP_INCLUDED","","#include \u003ctype_traits\u003e","#include \u003ciosfwd\u003e","","/** \\file"," * Why does decomposing look the way it does:"," *"," * Conceptually, decomposing is simple. We change `REQUIRE( a == b )` into"," * `Decomposer{} \u003c= a == b`, so that `Decomposer{} \u003c= a` is evaluated first,"," * and our custom operator is used for `a == b`, because `a` is transformed"," * into `ExprLhs\u003cT\u0026\u003e` and then into `BinaryExpr\u003cT\u0026, U\u0026\u003e`."," *"," * In practice, decomposing ends up a mess, because we have to support"," * various fun things."," *"," * 1) Types that are only comparable with literal 0, and they do this by"," *    comparing against a magic type with pointer constructor and deleted"," *    other constructors. Example: `REQUIRE((a \u003c=\u003e b) == 0)` in libstdc++"," *"," * 2) Types that are only comparable with literal 0, and they do this by"," *    comparing against a magic type with consteval integer constructor."," *    Example: `REQUIRE((a \u003c=\u003e b) == 0)` in current MSVC STL."," *"," * 3) Types that have no linkage, and so we cannot form a reference to"," *    them. Example: some implementations of traits."," *"," * 4) Starting with C++20, when the compiler sees `a == b`, it also uses"," *    `b == a` when constructing the overload set. For us this means that"," *    when the compiler handles `ExprLhs\u003cT\u003e == b`, it also tries to resolve"," *    the overload set for `b == ExprLhs\u003cT\u003e`."," *"," * To accomodate these use cases, decomposer ended up rather complex."," *"," * 1) These types are handled by adding SFINAE overloads to our comparison"," *    operators, checking whether `T == U` are comparable with the given"," *    operator, and if not, whether T (or U) are comparable with literal 0."," *    If yes, the overload compares T (or U) with 0 literal inline in the"," *    definition."," *"," *    Note that for extra correctness, we check  that the other type is"," *    either an `int` (literal 0 is captured as `int` by templates), or"," *    a `long` (some platforms use 0L for `NULL` and we want to support"," *    that for pointer comparisons)."," *"," * 2) For these types, `is_foo_comparable\u003cT, int\u003e` is true, but letting"," *    them fall into the overload that actually does `T == int` causes"," *    compilation error. Handling them requires that the decomposition"," *    is `constexpr`, so that P2564R3 applies and the `consteval` from"," *    their accompanying magic type is propagated through the `constexpr`"," *    call stack."," *"," *    However this is not enough to handle these types automatically,"," *    because our default is to capture types by reference, to avoid"," *    runtime copies. While these references cannot become dangling,"," *    they outlive the constexpr context and thus the default capture"," *    path cannot be actually constexpr."," *"," *    The solution is to capture these types by value, by explicitly"," *    specializing `Catch::capture_by_value` for them. Catch2 provides"," *    specialization for `std::foo_ordering`s, but users can specialize"," *    the trait for their own types as well."," *"," * 3) If a type has no linkage, we also cannot capture it by reference."," *    The solution is once again to capture them by value. We handle"," *    the common cases by using `std::is_arithmetic` as the default"," *    for `Catch::capture_by_value`, but that is only a some-effort"," *    heuristic. But as with 2), users can specialize `capture_by_value`"," *    for their own types as needed."," *"," * 4) To support C++20 and make the SFINAE on our decomposing operators"," *    work, the SFINAE has to happen in return type, rather than in"," *    a template type. This is due to our use of logical type traits"," *    (`conjunction`/`disjunction`/`negation`), that we use to workaround"," *    an issue in older (9-) versions of GCC. I still blame C++20 for"," *    this, because without the comparison order switching, the logical"," *    traits could still be used in template type."," *"," * There are also other side concerns, e.g. supporting both `REQUIRE(a)`"," * and `REQUIRE(a == b)`, or making `REQUIRE_THAT(a, IsEqual(b))` slot"," * nicely into the same expression handling logic, but these are rather"," * straightforward and add only a bit of complexity (e.g. common base"," * class for decomposed expressions)."," */","","#ifdef _MSC_VER","#pragma warning(push)","#pragma warning(disable:4389) // '==' : signed/unsigned mismatch","#pragma warning(disable:4018) // more \"signed/unsigned mismatch\"","#pragma warning(disable:4312) // Converting int to T* using reinterpret_cast (issue on x64 platform)","#pragma warning(disable:4180) // qualifier applied to function type has no meaning","#pragma warning(disable:4800) // Forcing result to true or false","#endif","","#ifdef __clang__","#  pragma clang diagnostic push","#  pragma clang diagnostic ignored \"-Wsign-compare\"","#  pragma clang diagnostic ignored \"-Wnon-virtual-dtor\"","#elif defined __GNUC__","#  pragma GCC diagnostic push","#  pragma GCC diagnostic ignored \"-Wsign-compare\"","#  pragma GCC diagnostic ignored \"-Wnon-virtual-dtor\"","#endif","","#if defined(CATCH_CPP20_OR_GREATER) \u0026\u0026 __has_include(\u003ccompare\u003e)","#  include \u003ccompare\u003e","#    if defined( __cpp_lib_three_way_comparison ) \u0026\u0026 \\","            __cpp_lib_three_way_comparison \u003e= 201907L","#      define CATCH_CONFIG_CPP20_COMPARE_OVERLOADS","#    endif","#endif","","namespace Catch {","","    namespace Detail {","        // This was added in C++20, but we require only C++14 for now.","        template \u003ctypename T\u003e","        using RemoveCVRef_t = std::remove_cv_t\u003cstd::remove_reference_t\u003cT\u003e\u003e;","    }","","    // Note: There is nothing that stops us from extending this,","    //       e.g. to `std::is_scalar`, but the more encompassing","    //       traits are usually also more expensive. For now we","    //       keep this as it used to be and it can be changed later.","    template \u003ctypename T\u003e","    struct capture_by_value","        : std::integral_constant\u003cbool, std::is_arithmetic\u003cT\u003e{}\u003e {};","","#if defined( CATCH_CONFIG_CPP20_COMPARE_OVERLOADS )","    template \u003c\u003e","    struct capture_by_value\u003cstd::strong_ordering\u003e : std::true_type {};","    template \u003c\u003e","    struct capture_by_value\u003cstd::weak_ordering\u003e : std::true_type {};","    template \u003c\u003e","    struct capture_by_value\u003cstd::partial_ordering\u003e : std::true_type {};","#endif","","    template \u003ctypename T\u003e","    struct always_false : std::false_type {};","","    class ITransientExpression {","        bool m_isBinaryExpression;","        bool m_result;","","    protected:","        ~ITransientExpression() = default;","","    public:","        constexpr auto isBinaryExpression() const -\u003e bool { return m_isBinaryExpression; }","        constexpr auto getResult() const -\u003e bool { return m_result; }","        //! This function **has** to be overriden by the derived class.","        virtual void streamReconstructedExpression( std::ostream\u0026 os ) const;","","        constexpr ITransientExpression( bool isBinaryExpression, bool result )","        :   m_isBinaryExpression( isBinaryExpression ),","            m_result( result )","        {}","","        constexpr ITransientExpression( ITransientExpression const\u0026 ) = default;","        constexpr ITransientExpression\u0026 operator=( ITransientExpression const\u0026 ) = default;","","        friend std::ostream\u0026 operator\u003c\u003c(std::ostream\u0026 out, ITransientExpression const\u0026 expr) {","            expr.streamReconstructedExpression(out);","            return out;","        }","    };","","    void formatReconstructedExpression( std::ostream \u0026os, std::string const\u0026 lhs, StringRef op, std::string const\u0026 rhs );","","    template\u003ctypename LhsT, typename RhsT\u003e","    class BinaryExpr  : public ITransientExpression {","        LhsT m_lhs;","        StringRef m_op;","        RhsT m_rhs;","","        void streamReconstructedExpression( std::ostream \u0026os ) const override {","            formatReconstructedExpression","                    ( os, Catch::Detail::stringify( m_lhs ), m_op, Catch::Detail::stringify( m_rhs ) );","        }","","    public:","        constexpr BinaryExpr( bool comparisonResult, LhsT lhs, StringRef op, RhsT rhs )","        :   ITransientExpression{ true, comparisonResult },","            m_lhs( lhs ),","            m_op( op ),","            m_rhs( rhs )","        {}","","        template\u003ctypename T\u003e","        auto operator \u0026\u0026 ( T ) const -\u003e BinaryExpr\u003cLhsT, RhsT const\u0026\u003e const {","            static_assert(always_false\u003cT\u003e::value,","            \"chained comparisons are not supported inside assertions, \"","            \"wrap the expression inside parentheses, or decompose it\");","        }","","        template\u003ctypename T\u003e","        auto operator || ( T ) const -\u003e BinaryExpr\u003cLhsT, RhsT const\u0026\u003e const {","            static_assert(always_false\u003cT\u003e::value,","            \"chained comparisons are not supported inside assertions, \"","            \"wrap the expression inside parentheses, or decompose it\");","        }","","        template\u003ctypename T\u003e","        auto operator == ( T ) const -\u003e BinaryExpr\u003cLhsT, RhsT const\u0026\u003e const {","            static_assert(always_false\u003cT\u003e::value,","            \"chained comparisons are not supported inside assertions, \"","            \"wrap the expression inside parentheses, or decompose it\");","        }","","        template\u003ctypename T\u003e","        auto operator != ( T ) const -\u003e BinaryExpr\u003cLhsT, RhsT const\u0026\u003e const {","            static_assert(always_false\u003cT\u003e::value,","            \"chained comparisons are not supported inside assertions, \"","            \"wrap the expression inside parentheses, or decompose it\");","        }","","        template\u003ctypename T\u003e","        auto operator \u003e ( T ) const -\u003e BinaryExpr\u003cLhsT, RhsT const\u0026\u003e const {","            static_assert(always_false\u003cT\u003e::value,","            \"chained comparisons are not supported inside assertions, \"","            \"wrap the expression inside parentheses, or decompose it\");","        }","","        template\u003ctypename T\u003e","        auto operator \u003c ( T ) const -\u003e BinaryExpr\u003cLhsT, RhsT const\u0026\u003e const {","            static_assert(always_false\u003cT\u003e::value,","            \"chained comparisons are not supported inside assertions, \"","            \"wrap the expression inside parentheses, or decompose it\");","        }","","        template\u003ctypename T\u003e","        auto operator \u003e= ( T ) const -\u003e BinaryExpr\u003cLhsT, RhsT const\u0026\u003e const {","            static_assert(always_false\u003cT\u003e::value,","            \"chained comparisons are not supported inside assertions, \"","            \"wrap the expression inside parentheses, or decompose it\");","        }","","        template\u003ctypename T\u003e","        auto operator \u003c= ( T ) const -\u003e BinaryExpr\u003cLhsT, RhsT const\u0026\u003e const {","            static_assert(always_false\u003cT\u003e::value,","            \"chained comparisons are not supported inside assertions, \"","            \"wrap the expression inside parentheses, or decompose it\");","        }","    };","","    template\u003ctypename LhsT\u003e","    class UnaryExpr : public ITransientExpression {","        LhsT m_lhs;","","        void streamReconstructedExpression( std::ostream \u0026os ) const override {","            os \u003c\u003c Catch::Detail::stringify( m_lhs );","        }","","    public:","        explicit constexpr UnaryExpr( LhsT lhs )","        :   ITransientExpression{ false, static_cast\u003cbool\u003e(lhs) },","            m_lhs( lhs )","        {}","    };","","","    template\u003ctypename LhsT\u003e","    class ExprLhs {","        LhsT m_lhs;","    public:","        explicit constexpr ExprLhs( LhsT lhs ) : m_lhs( lhs ) {}","","#define CATCH_INTERNAL_DEFINE_EXPRESSION_EQUALITY_OPERATOR( id, op )           \\","    template \u003ctypename RhsT\u003e                                                   \\","    constexpr friend auto operator op( ExprLhs\u0026\u0026 lhs, RhsT\u0026\u0026 rhs )             \\","        -\u003e std::enable_if_t\u003c                                                   \\","            Detail::conjunction\u003cDetail::is_##id##_comparable\u003cLhsT, RhsT\u003e,      \\","                                Detail::negation\u003ccapture_by_value\u003c             \\","                                    Detail::RemoveCVRef_t\u003cRhsT\u003e\u003e\u003e\u003e::value,     \\","            BinaryExpr\u003cLhsT, RhsT const\u0026\u003e\u003e {                                   \\","        return {                                                               \\","            static_cast\u003cbool\u003e( lhs.m_lhs op rhs ), lhs.m_lhs, #op##_sr, rhs }; \\","    }                                                                          \\","    template \u003ctypename RhsT\u003e                                                   \\","    constexpr friend auto operator op( ExprLhs\u0026\u0026 lhs, RhsT rhs )               \\","        -\u003e std::enable_if_t\u003c                                                   \\","            Detail::conjunction\u003cDetail::is_##id##_comparable\u003cLhsT, RhsT\u003e,      \\","                                capture_by_value\u003cRhsT\u003e\u003e::value,                \\","            BinaryExpr\u003cLhsT, RhsT\u003e\u003e {                                          \\","        return {                                                               \\","            static_cast\u003cbool\u003e( lhs.m_lhs op rhs ), lhs.m_lhs, #op##_sr, rhs }; \\","    }                                                                          \\","    template \u003ctypename RhsT\u003e                                                   \\","    constexpr friend auto operator op( ExprLhs\u0026\u0026 lhs, RhsT rhs )               \\","        -\u003e std::enable_if_t\u003c                                                   \\","            Detail::conjunction\u003c                                               \\","                Detail::negation\u003cDetail::is_##id##_comparable\u003cLhsT, RhsT\u003e\u003e,    \\","                Detail::is_eq_0_comparable\u003cLhsT\u003e,                              \\","              /* We allow long because we want `ptr op NULL` to be accepted */ \\","                Detail::disjunction\u003cstd::is_same\u003cRhsT, int\u003e,                   \\","                                    std::is_same\u003cRhsT, long\u003e\u003e\u003e::value,         \\","            BinaryExpr\u003cLhsT, RhsT\u003e\u003e {                                          \\","        if ( rhs != 0 ) { throw_test_failure_exception(); }                    \\","        return {                                                               \\","            static_cast\u003cbool\u003e( lhs.m_lhs op 0 ), lhs.m_lhs, #op##_sr, rhs };   \\","    }                                                                          \\","    template \u003ctypename RhsT\u003e                                                   \\","    constexpr friend auto operator op( ExprLhs\u0026\u0026 lhs, RhsT rhs )               \\","        -\u003e std::enable_if_t\u003c                                                   \\","            Detail::conjunction\u003c                                               \\","                Detail::negation\u003cDetail::is_##id##_comparable\u003cLhsT, RhsT\u003e\u003e,    \\","                Detail::is_eq_0_comparable\u003cRhsT\u003e,                              \\","              /* We allow long because we want `ptr op NULL` to be accepted */ \\","                Detail::disjunction\u003cstd::is_same\u003cLhsT, int\u003e,                   \\","                                    std::is_same\u003cLhsT, long\u003e\u003e\u003e::value,         \\","            BinaryExpr\u003cLhsT, RhsT\u003e\u003e {                                          \\","        if ( lhs.m_lhs != 0 ) { throw_test_failure_exception(); }              \\","        return { static_cast\u003cbool\u003e( 0 op rhs ), lhs.m_lhs, #op##_sr, rhs };    \\","    }","","        CATCH_INTERNAL_DEFINE_EXPRESSION_EQUALITY_OPERATOR( eq, == )","        CATCH_INTERNAL_DEFINE_EXPRESSION_EQUALITY_OPERATOR( ne, != )","","    #undef CATCH_INTERNAL_DEFINE_EXPRESSION_EQUALITY_OPERATOR","","","#define CATCH_INTERNAL_DEFINE_EXPRESSION_COMPARISON_OPERATOR( id, op )         \\","    template \u003ctypename RhsT\u003e                                                   \\","    constexpr friend auto operator op( ExprLhs\u0026\u0026 lhs, RhsT\u0026\u0026 rhs )             \\","        -\u003e std::enable_if_t\u003c                                                   \\","            Detail::conjunction\u003cDetail::is_##id##_comparable\u003cLhsT, RhsT\u003e,      \\","                                Detail::negation\u003ccapture_by_value\u003c             \\","                                    Detail::RemoveCVRef_t\u003cRhsT\u003e\u003e\u003e\u003e::value,     \\","            BinaryExpr\u003cLhsT, RhsT const\u0026\u003e\u003e {                                   \\","        return {                                                               \\","            static_cast\u003cbool\u003e( lhs.m_lhs op rhs ), lhs.m_lhs, #op##_sr, rhs }; \\","    }                                                                          \\","    template \u003ctypename RhsT\u003e                                                   \\","    constexpr friend auto operator op( ExprLhs\u0026\u0026 lhs, RhsT rhs )               \\","        -\u003e std::enable_if_t\u003c                                                   \\","            Detail::conjunction\u003cDetail::is_##id##_comparable\u003cLhsT, RhsT\u003e,      \\","                                capture_by_value\u003cRhsT\u003e\u003e::value,                \\","            BinaryExpr\u003cLhsT, RhsT\u003e\u003e {                                          \\","        return {                                                               \\","            static_cast\u003cbool\u003e( lhs.m_lhs op rhs ), lhs.m_lhs, #op##_sr, rhs }; \\","    }                                                                          \\","    template \u003ctypename RhsT\u003e                                                   \\","    constexpr friend auto operator op( ExprLhs\u0026\u0026 lhs, RhsT rhs )               \\","        -\u003e std::enable_if_t\u003c                                                   \\","            Detail::conjunction\u003c                                               \\","                Detail::negation\u003cDetail::is_##id##_comparable\u003cLhsT, RhsT\u003e\u003e,    \\","                Detail::is_##id##_0_comparable\u003cLhsT\u003e,                          \\","                std::is_same\u003cRhsT, int\u003e\u003e::value,                               \\","            BinaryExpr\u003cLhsT, RhsT\u003e\u003e {                                          \\","        if ( rhs != 0 ) { throw_test_failure_exception(); }                    \\","        return {                                                               \\","            static_cast\u003cbool\u003e( lhs.m_lhs op 0 ), lhs.m_lhs, #op##_sr, rhs };   \\","    }                                                                          \\","    template \u003ctypename RhsT\u003e                                                   \\","    constexpr friend auto operator op( ExprLhs\u0026\u0026 lhs, RhsT rhs )               \\","        -\u003e std::enable_if_t\u003c                                                   \\","            Detail::conjunction\u003c                                               \\","                Detail::negation\u003cDetail::is_##id##_comparable\u003cLhsT, RhsT\u003e\u003e,    \\","                Detail::is_##id##_0_comparable\u003cRhsT\u003e,                          \\","                std::is_same\u003cLhsT, int\u003e\u003e::value,                               \\","            BinaryExpr\u003cLhsT, RhsT\u003e\u003e {                                          \\","        if ( lhs.m_lhs != 0 ) { throw_test_failure_exception(); }              \\","        return { static_cast\u003cbool\u003e( 0 op rhs ), lhs.m_lhs, #op##_sr, rhs };    \\","    }","","        CATCH_INTERNAL_DEFINE_EXPRESSION_COMPARISON_OPERATOR( lt, \u003c )","        CATCH_INTERNAL_DEFINE_EXPRESSION_COMPARISON_OPERATOR( le, \u003c= )","        CATCH_INTERNAL_DEFINE_EXPRESSION_COMPARISON_OPERATOR( gt, \u003e )","        CATCH_INTERNAL_DEFINE_EXPRESSION_COMPARISON_OPERATOR( ge, \u003e= )","","    #undef CATCH_INTERNAL_DEFINE_EXPRESSION_COMPARISON_OPERATOR","","","#define CATCH_INTERNAL_DEFINE_EXPRESSION_OPERATOR( op )                        \\","    template \u003ctypename RhsT\u003e                                                   \\","    constexpr friend auto operator op( ExprLhs\u0026\u0026 lhs, RhsT\u0026\u0026 rhs )             \\","        -\u003e std::enable_if_t\u003c                                                   \\","            !capture_by_value\u003cDetail::RemoveCVRef_t\u003cRhsT\u003e\u003e::value,             \\","            BinaryExpr\u003cLhsT, RhsT const\u0026\u003e\u003e {                                   \\","        return {                                                               \\","            static_cast\u003cbool\u003e( lhs.m_lhs op rhs ), lhs.m_lhs, #op##_sr, rhs }; \\","    }                                                                          \\","    template \u003ctypename RhsT\u003e                                                   \\","    constexpr friend auto operator op( ExprLhs\u0026\u0026 lhs, RhsT rhs )               \\","        -\u003e std::enable_if_t\u003ccapture_by_value\u003cRhsT\u003e::value,                     \\","                            BinaryExpr\u003cLhsT, RhsT\u003e\u003e {                          \\","        return {                                                               \\","            static_cast\u003cbool\u003e( lhs.m_lhs op rhs ), lhs.m_lhs, #op##_sr, rhs }; \\","    }","","        CATCH_INTERNAL_DEFINE_EXPRESSION_OPERATOR(|)","        CATCH_INTERNAL_DEFINE_EXPRESSION_OPERATOR(\u0026)","        CATCH_INTERNAL_DEFINE_EXPRESSION_OPERATOR(^)","","    #undef CATCH_INTERNAL_DEFINE_EXPRESSION_OPERATOR","","        template\u003ctypename RhsT\u003e","        friend auto operator \u0026\u0026 ( ExprLhs \u0026\u0026, RhsT \u0026\u0026 ) -\u003e BinaryExpr\u003cLhsT, RhsT const\u0026\u003e {","            static_assert(always_false\u003cRhsT\u003e::value,","            \"operator\u0026\u0026 is not supported inside assertions, \"","            \"wrap the expression inside parentheses, or decompose it\");","        }","","        template\u003ctypename RhsT\u003e","        friend auto operator || ( ExprLhs \u0026\u0026, RhsT \u0026\u0026 ) -\u003e BinaryExpr\u003cLhsT, RhsT const\u0026\u003e {","            static_assert(always_false\u003cRhsT\u003e::value,","            \"operator|| is not supported inside assertions, \"","            \"wrap the expression inside parentheses, or decompose it\");","        }","","        constexpr auto makeUnaryExpr() const -\u003e UnaryExpr\u003cLhsT\u003e {","            return UnaryExpr\u003cLhsT\u003e{ m_lhs };","        }","    };","","    struct Decomposer {","        template \u003ctypename T,","                  std::enable_if_t\u003c!capture_by_value\u003cDetail::RemoveCVRef_t\u003cT\u003e\u003e::value,","                      int\u003e = 0\u003e","        constexpr friend auto operator \u003c= ( Decomposer \u0026\u0026, T \u0026\u0026 lhs ) -\u003e ExprLhs\u003cT const\u0026\u003e {","            return ExprLhs\u003cconst T\u0026\u003e{ lhs };","        }","","        template \u003ctypename T,","                  std::enable_if_t\u003ccapture_by_value\u003cT\u003e::value, int\u003e = 0\u003e","        constexpr friend auto operator \u003c= ( Decomposer \u0026\u0026, T value ) -\u003e ExprLhs\u003cT\u003e {","            return ExprLhs\u003cT\u003e{ value };","        }","    };","","} // end namespace Catch","","#ifdef _MSC_VER","#pragma warning(pop)","#endif","#ifdef __clang__","#  pragma clang diagnostic pop","#elif defined __GNUC__","#  pragma GCC diagnostic pop","#endif","","#endif // CATCH_DECOMPOSER_HPP_INCLUDED","","#include \u003cstring\u003e","","namespace Catch {","","    struct AssertionReaction {","        bool shouldDebugBreak = false;","        bool shouldThrow = false;","        bool shouldSkip = false;","    };","","    class AssertionHandler {","        AssertionInfo m_assertionInfo;","        AssertionReaction m_reaction;","        bool m_completed = false;","        IResultCapture\u0026 m_resultCapture;","","    public:","        AssertionHandler","            (   StringRef macroName,","                SourceLineInfo const\u0026 lineInfo,","                StringRef capturedExpression,","                ResultDisposition::Flags resultDisposition );","        ~AssertionHandler() {","            if ( !m_completed ) {","                m_resultCapture.handleIncomplete( m_assertionInfo );","            }","        }","","","        template\u003ctypename T\u003e","        constexpr void handleExpr( ExprLhs\u003cT\u003e const\u0026 expr ) {","            handleExpr( expr.makeUnaryExpr() );","        }","        void handleExpr( ITransientExpression const\u0026 expr );","","        void handleMessage(ResultWas::OfType resultType, std::string\u0026\u0026 message);","","        void handleExceptionThrownAsExpected();","        void handleUnexpectedExceptionNotThrown();","        void handleExceptionNotThrownAsExpected();","        void handleThrowingCallSkipped();","        void handleUnexpectedInflightException();","","        void complete();","","        // query","        auto allowThrows() const -\u003e bool;","    };","","    void handleExceptionMatchExpr( AssertionHandler\u0026 handler, std::string const\u0026 str );","","} // namespace Catch","","#endif // CATCH_ASSERTION_HANDLER_HPP_INCLUDED","","","#ifndef CATCH_PREPROCESSOR_INTERNAL_STRINGIFY_HPP_INCLUDED","#define CATCH_PREPROCESSOR_INTERNAL_STRINGIFY_HPP_INCLUDED","","","#if !defined(CATCH_CONFIG_DISABLE_STRINGIFICATION)","  #define CATCH_INTERNAL_STRINGIFY(...) #__VA_ARGS__##_catch_sr","#else","  #define CATCH_INTERNAL_STRINGIFY(...) \"Disabled by CATCH_CONFIG_DISABLE_STRINGIFICATION\"_catch_sr","#endif","","#endif // CATCH_PREPROCESSOR_INTERNAL_STRINGIFY_HPP_INCLUDED","","// We need this suppression to leak, because it took until GCC 10","// for the front end to handle local suppression via _Pragma properly","#if defined(__GNUC__) \u0026\u0026 !defined(__clang__) \u0026\u0026 !defined(__ICC) \u0026\u0026 __GNUC__ \u003c= 9","  #pragma GCC diagnostic ignored \"-Wparentheses\"","#endif","","#if !defined(CATCH_CONFIG_DISABLE)","","#if defined(CATCH_CONFIG_FAST_COMPILE) || defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)","","///////////////////////////////////////////////////////////////////////////////","// Another way to speed-up compilation is to omit local try-catch for REQUIRE*","// macros.","#define INTERNAL_CATCH_TRY","#define INTERNAL_CATCH_CATCH( capturer )","","#else // CATCH_CONFIG_FAST_COMPILE","","#define INTERNAL_CATCH_TRY try","#define INTERNAL_CATCH_CATCH( handler ) catch(...) { (handler).handleUnexpectedInflightException(); }","","#endif","","///////////////////////////////////////////////////////////////////////////////","#define INTERNAL_CATCH_TEST( macroName, resultDisposition, ... ) \\","    do { /* NOLINT(bugprone-infinite-loop) */ \\","        /* The expression should not be evaluated, but warnings should hopefully be checked */ \\","        CATCH_INTERNAL_IGNORE_BUT_WARN(__VA_ARGS__); \\","        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition ); \\","        INTERNAL_CATCH_TRY { \\","            CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","            CATCH_INTERNAL_SUPPRESS_PARENTHESES_WARNINGS \\","            catchAssertionHandler.handleExpr( Catch::Decomposer() \u003c= __VA_ARGS__ ); /* NOLINT(bugprone-chained-comparison) */ \\","            CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\","        } INTERNAL_CATCH_CATCH( catchAssertionHandler ) \\","        catchAssertionHandler.complete(); \\","    } while( (void)0, (false) \u0026\u0026 static_cast\u003cconst bool\u0026\u003e( !!(__VA_ARGS__) ) ) // the expression here is never evaluated at runtime but it forces the compiler to give it a look","    // The double negation silences MSVC's C4800 warning, the static_cast forces short-circuit evaluation if the type has overloaded \u0026\u0026.","","///////////////////////////////////////////////////////////////////////////////","#define INTERNAL_CATCH_IF( macroName, resultDisposition, ... ) \\","    INTERNAL_CATCH_TEST( macroName, resultDisposition, __VA_ARGS__ ); \\","    if( Catch::getResultCapture().lastAssertionPassed() )","","///////////////////////////////////////////////////////////////////////////////","#define INTERNAL_CATCH_ELSE( macroName, resultDisposition, ... ) \\","    INTERNAL_CATCH_TEST( macroName, resultDisposition, __VA_ARGS__ ); \\","    if( !Catch::getResultCapture().lastAssertionPassed() )","","///////////////////////////////////////////////////////////////////////////////","#define INTERNAL_CATCH_NO_THROW( macroName, resultDisposition, ... ) \\","    do { \\","        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition ); \\","        try { \\","            CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","            CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS \\","            static_cast\u003cvoid\u003e(__VA_ARGS__); \\","            CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\","            catchAssertionHandler.handleExceptionNotThrownAsExpected(); \\","        } \\","        catch( ... ) { \\","            catchAssertionHandler.handleUnexpectedInflightException(); \\","        } \\","        catchAssertionHandler.complete(); \\","    } while( false )","","///////////////////////////////////////////////////////////////////////////////","#define INTERNAL_CATCH_THROWS( macroName, resultDisposition, ... ) \\","    do { \\","        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__), resultDisposition); \\","        if( catchAssertionHandler.allowThrows() ) \\","            try { \\","                CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","                CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT \\","                CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS \\","                static_cast\u003cvoid\u003e(__VA_ARGS__); \\","                CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\","                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \\","            } \\","            catch( ... ) { \\","                catchAssertionHandler.handleExceptionThrownAsExpected(); \\","            } \\","        else \\","            catchAssertionHandler.handleThrowingCallSkipped(); \\","        catchAssertionHandler.complete(); \\","    } while( false )","","///////////////////////////////////////////////////////////////////////////////","#define INTERNAL_CATCH_THROWS_AS( macroName, exceptionType, resultDisposition, expr ) \\","    do { \\","        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(expr) \", \" CATCH_INTERNAL_STRINGIFY(exceptionType), resultDisposition ); \\","        if( catchAssertionHandler.allowThrows() ) \\","            try { \\","                CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","                CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT \\","                CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS \\","                static_cast\u003cvoid\u003e(expr); \\","                CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\","                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \\","            } \\","            catch( exceptionType const\u0026 ) { \\","                catchAssertionHandler.handleExceptionThrownAsExpected(); \\","            } \\","            catch( ... ) { \\","                catchAssertionHandler.handleUnexpectedInflightException(); \\","            } \\","        else \\","            catchAssertionHandler.handleThrowingCallSkipped(); \\","        catchAssertionHandler.complete(); \\","    } while( false )","","","","///////////////////////////////////////////////////////////////////////////////","// Although this is matcher-based, it can be used with just a string","#define INTERNAL_CATCH_THROWS_STR_MATCHES( macroName, resultDisposition, matcher, ... ) \\","    do { \\","        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__) \", \" CATCH_INTERNAL_STRINGIFY(matcher), resultDisposition ); \\","        if( catchAssertionHandler.allowThrows() ) \\","            try { \\","                CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","                CATCH_INTERNAL_SUPPRESS_UNUSED_RESULT \\","                CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS \\","                static_cast\u003cvoid\u003e(__VA_ARGS__); \\","                CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\","                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \\","            } \\","            catch( ... ) { \\","                Catch::handleExceptionMatchExpr( catchAssertionHandler, matcher ); \\","            } \\","        else \\","            catchAssertionHandler.handleThrowingCallSkipped(); \\","        catchAssertionHandler.complete(); \\","    } while( false )","","#endif // CATCH_CONFIG_DISABLE","","#endif // CATCH_TEST_MACRO_IMPL_HPP_INCLUDED","","","#ifndef CATCH_SECTION_HPP_INCLUDED","#define CATCH_SECTION_HPP_INCLUDED","","","","","/** \\file"," * Wrapper for the STATIC_ANALYSIS_SUPPORT configuration option"," *"," * Some of Catch2's macros can be defined differently to work better with"," * static analysis tools, like clang-tidy or coverity."," * Currently the main use case is to show that `SECTION`s are executed"," * exclusively, and not all in one run of a `TEST_CASE`."," */","","#ifndef CATCH_CONFIG_STATIC_ANALYSIS_SUPPORT_HPP_INCLUDED","#define CATCH_CONFIG_STATIC_ANALYSIS_SUPPORT_HPP_INCLUDED","","","#if defined(__clang_analyzer__) || defined(__COVERITY__)","    #define CATCH_INTERNAL_CONFIG_STATIC_ANALYSIS_SUPPORT","#endif","","#if defined( CATCH_INTERNAL_CONFIG_STATIC_ANALYSIS_SUPPORT ) \u0026\u0026 \\","    !defined( CATCH_CONFIG_NO_EXPERIMENTAL_STATIC_ANALYSIS_SUPPORT ) \u0026\u0026 \\","    !defined( CATCH_CONFIG_EXPERIMENTAL_STATIC_ANALYSIS_SUPPORT )","#    define CATCH_CONFIG_EXPERIMENTAL_STATIC_ANALYSIS_SUPPORT","#endif","","","#endif // CATCH_CONFIG_STATIC_ANALYSIS_SUPPORT_HPP_INCLUDED","","","#ifndef CATCH_TIMER_HPP_INCLUDED","#define CATCH_TIMER_HPP_INCLUDED","","#include \u003ccstdint\u003e","","namespace Catch {","","    class Timer {","        uint64_t m_nanoseconds = 0;","    public:","        void start();","        auto getElapsedNanoseconds() const -\u003e uint64_t;","        auto getElapsedMicroseconds() const -\u003e uint64_t;","        auto getElapsedMilliseconds() const -\u003e unsigned int;","        auto getElapsedSeconds() const -\u003e double;","    };","","} // namespace Catch","","#endif // CATCH_TIMER_HPP_INCLUDED","","namespace Catch {","","    class Section : Detail::NonCopyable {","    public:","        Section( SectionInfo\u0026\u0026 info );","        Section( SourceLineInfo const\u0026 _lineInfo,","                 StringRef _name,","                 const char* const = nullptr );","        ~Section();","","        // This indicates whether the section should be executed or not","        explicit operator bool() const;","","    private:","        SectionInfo m_info;","","        Counts m_assertions;","        bool m_sectionIncluded;","        Timer m_timer;","    };","","} // end namespace Catch","","#if !defined(CATCH_CONFIG_EXPERIMENTAL_STATIC_ANALYSIS_SUPPORT)","#    define INTERNAL_CATCH_SECTION( ... )                                 \\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION                         \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS                  \\","        if ( Catch::Section const\u0026 INTERNAL_CATCH_UNIQUE_NAME(            \\","                 catch_internal_Section ) =                               \\","                 Catch::Section( CATCH_INTERNAL_LINEINFO, __VA_ARGS__ ) ) \\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION","","#    define INTERNAL_CATCH_DYNAMIC_SECTION( ... )                     \\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION                     \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS              \\","        if ( Catch::Section const\u0026 INTERNAL_CATCH_UNIQUE_NAME(        \\","                 catch_internal_Section ) =                           \\","                 Catch::SectionInfo(                                  \\","                     CATCH_INTERNAL_LINEINFO,                         \\","                     ( Catch::ReusableStringStream() \u003c\u003c __VA_ARGS__ ) \\","                         .str() ) )                                   \\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION","","#else","","// These section definitions imply that at most one section at one level","// will be intered (because only one section's __LINE__ can be equal to","// the dummy `catchInternalSectionHint` variable from `TEST_CASE`).","","namespace Catch {","    namespace Detail {","        // Intentionally without linkage, as it should only be used as a dummy","        // symbol for static analysis.","        // The arguments are used as a dummy for checking warnings in the passed","        // expressions.","        int GetNewSectionHint( StringRef, const char* const = nullptr );","    } // namespace Detail","} // namespace Catch","","","#    define INTERNAL_CATCH_SECTION( ... )                                   \\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION                           \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS                    \\","        CATCH_INTERNAL_SUPPRESS_SHADOW_WARNINGS                             \\","        if ( [[maybe_unused]] const int catchInternalPreviousSectionHint =  \\","                 catchInternalSectionHint,                                  \\","             catchInternalSectionHint =                                     \\","                 Catch::Detail::GetNewSectionHint(__VA_ARGS__);             \\","             catchInternalPreviousSectionHint == __LINE__ )                 \\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION","","#    define INTERNAL_CATCH_DYNAMIC_SECTION( ... )                           \\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION                           \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS                    \\","        CATCH_INTERNAL_SUPPRESS_SHADOW_WARNINGS                             \\","        if ( [[maybe_unused]] const int catchInternalPreviousSectionHint =  \\","                 catchInternalSectionHint,                                  \\","             catchInternalSectionHint = Catch::Detail::GetNewSectionHint(   \\","                ( Catch::ReusableStringStream() \u003c\u003c __VA_ARGS__ ).str());    \\","             catchInternalPreviousSectionHint == __LINE__ )                 \\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION","","#endif","","","#endif // CATCH_SECTION_HPP_INCLUDED","","","#ifndef CATCH_TEST_REGISTRY_HPP_INCLUDED","#define CATCH_TEST_REGISTRY_HPP_INCLUDED","","","","#ifndef CATCH_INTERFACES_TEST_INVOKER_HPP_INCLUDED","#define CATCH_INTERFACES_TEST_INVOKER_HPP_INCLUDED","","namespace Catch {","","    class ITestInvoker {","    public:","        virtual void prepareTestCase();","        virtual void tearDownTestCase();","        virtual void invoke() const = 0;","        virtual ~ITestInvoker(); // = default","    };","","} // namespace Catch","","#endif // CATCH_INTERFACES_TEST_INVOKER_HPP_INCLUDED","","","#ifndef CATCH_PREPROCESSOR_REMOVE_PARENS_HPP_INCLUDED","#define CATCH_PREPROCESSOR_REMOVE_PARENS_HPP_INCLUDED","","#define INTERNAL_CATCH_EXPAND1( param ) INTERNAL_CATCH_EXPAND2( param )","#define INTERNAL_CATCH_EXPAND2( ... ) INTERNAL_CATCH_NO##__VA_ARGS__","#define INTERNAL_CATCH_DEF( ... ) INTERNAL_CATCH_DEF __VA_ARGS__","#define INTERNAL_CATCH_NOINTERNAL_CATCH_DEF","","#define INTERNAL_CATCH_REMOVE_PARENS( ... ) \\","    INTERNAL_CATCH_EXPAND1( INTERNAL_CATCH_DEF __VA_ARGS__ )","","#endif // CATCH_PREPROCESSOR_REMOVE_PARENS_HPP_INCLUDED","","// GCC 5 and older do not properly handle disabling unused-variable warning","// with a _Pragma. This means that we have to leak the suppression to the","// user code as well :-(","#if defined(__GNUC__) \u0026\u0026 !defined(__clang__) \u0026\u0026 __GNUC__ \u003c= 5","#pragma GCC diagnostic ignored \"-Wunused-variable\"","#endif","","","","namespace Catch {","","template\u003ctypename C\u003e","class TestInvokerAsMethod : public ITestInvoker {","    void (C::*m_testAsMethod)();","public:","    constexpr TestInvokerAsMethod( void ( C::*testAsMethod )() ) noexcept:","        m_testAsMethod( testAsMethod ) {}","","    void invoke() const override {","        C obj;","        (obj.*m_testAsMethod)();","    }","};","","Detail::unique_ptr\u003cITestInvoker\u003e makeTestInvoker( void(*testAsFunction)() );","","template\u003ctypename C\u003e","Detail::unique_ptr\u003cITestInvoker\u003e makeTestInvoker( void (C::*testAsMethod)() ) {","    return Detail::make_unique\u003cTestInvokerAsMethod\u003cC\u003e\u003e( testAsMethod );","}","","template \u003ctypename C\u003e","class TestInvokerFixture : public ITestInvoker {","    void ( C::*m_testAsMethod )() const;","    Detail::unique_ptr\u003cC\u003e m_fixture = nullptr;","","public:","    constexpr TestInvokerFixture( void ( C::*testAsMethod )() const ) noexcept:","        m_testAsMethod( testAsMethod ) {}","","    void prepareTestCase() override {","        m_fixture = Detail::make_unique\u003cC\u003e();","    }","","    void tearDownTestCase() override {","        m_fixture.reset();","    }","","    void invoke() const override {","        auto* f = m_fixture.get();","        ( f-\u003e*m_testAsMethod )();","    }","};","","template\u003ctypename C\u003e","Detail::unique_ptr\u003cITestInvoker\u003e makeTestInvokerFixture( void ( C::*testAsMethod )() const ) {","    return Detail::make_unique\u003cTestInvokerFixture\u003cC\u003e\u003e( testAsMethod );","}","","struct NameAndTags {","    constexpr NameAndTags( StringRef name_ = StringRef(),","                           StringRef tags_ = StringRef() ) noexcept:","        name( name_ ), tags( tags_ ) {}","    StringRef name;","    StringRef tags;","};","","struct AutoReg : Detail::NonCopyable {","    AutoReg( Detail::unique_ptr\u003cITestInvoker\u003e invoker, SourceLineInfo const\u0026 lineInfo, StringRef classOrMethod, NameAndTags const\u0026 nameAndTags ) noexcept;","};","","} // end namespace Catch","","#if defined(CATCH_CONFIG_DISABLE)","    #define INTERNAL_CATCH_TESTCASE_NO_REGISTRATION( TestName, ... ) \\","        static inline void TestName()","    #define INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION( TestName, ClassName, ... ) \\","        namespace{                        \\","            struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName) { \\","                void test();              \\","            };                            \\","        }                                 \\","        void TestName::test()","#endif","","","#if !defined(CATCH_CONFIG_EXPERIMENTAL_STATIC_ANALYSIS_SUPPORT)","","    ///////////////////////////////////////////////////////////////////////////////","    #define INTERNAL_CATCH_TESTCASE2( TestName, ... ) \\","        static void TestName(); \\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\","        namespace{ const Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( \u0026TestName ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags{ __VA_ARGS__ } ); } /* NOLINT */ \\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\","        static void TestName()","    #define INTERNAL_CATCH_TESTCASE( ... ) \\","        INTERNAL_CATCH_TESTCASE2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ), __VA_ARGS__ )","","#else  // ^^ !CATCH_CONFIG_EXPERIMENTAL_STATIC_ANALYSIS_SUPPORT | vv CATCH_CONFIG_EXPERIMENTAL_STATIC_ANALYSIS_SUPPORT","","","// Dummy registrator for the dumy test case macros","namespace Catch {","    namespace Detail {","        struct DummyUse {","            DummyUse( void ( * )( int ), Catch::NameAndTags const\u0026 );","        };","    } // namespace Detail","} // namespace Catch","","// Note that both the presence of the argument and its exact name are","// necessary for the section support.","","// We provide a shadowed variable so that a `SECTION` inside non-`TEST_CASE`","// tests can compile. The redefined `TEST_CASE` shadows this with param.","static int catchInternalSectionHint = 0;","","#    define INTERNAL_CATCH_TESTCASE2( fname, ... )                         \\","        static void fname( int );                                          \\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION                          \\","        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS                           \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS                   \\","        static const Catch::Detail::DummyUse INTERNAL_CATCH_UNIQUE_NAME(   \\","            dummyUser )( \u0026(fname), Catch::NameAndTags{ __VA_ARGS__ } );    \\","        CATCH_INTERNAL_SUPPRESS_SHADOW_WARNINGS                            \\","        static void fname( [[maybe_unused]] int catchInternalSectionHint ) \\","            CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION","#    define INTERNAL_CATCH_TESTCASE( ... ) \\","        INTERNAL_CATCH_TESTCASE2( INTERNAL_CATCH_UNIQUE_NAME( dummyFunction ), __VA_ARGS__ )","","","#endif // CATCH_CONFIG_EXPERIMENTAL_STATIC_ANALYSIS_SUPPORT","","    ///////////////////////////////////////////////////////////////////////////////","    #define INTERNAL_CATCH_TEST_CASE_METHOD2( TestName, ClassName, ... )\\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\","        namespace{ \\","            struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName) { \\","                void test(); \\","            }; \\","            const Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( \\","            Catch::makeTestInvoker( \u0026TestName::test ),                    \\","            CATCH_INTERNAL_LINEINFO,                                      \\","            #ClassName##_catch_sr,                                        \\","            Catch::NameAndTags{ __VA_ARGS__ } ); /* NOLINT */ \\","        } \\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\","        void TestName::test()","    #define INTERNAL_CATCH_TEST_CASE_METHOD( ClassName, ... ) \\","        INTERNAL_CATCH_TEST_CASE_METHOD2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ), ClassName, __VA_ARGS__ )","","    ///////////////////////////////////////////////////////////////////////////////","    #define INTERNAL_CATCH_TEST_CASE_PERSISTENT_FIXTURE2( TestName, ClassName, ... )      \\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION                             \\","        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS                              \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS                      \\","        namespace {                                                           \\","            struct TestName : INTERNAL_CATCH_REMOVE_PARENS( ClassName ) {     \\","                void test() const;                                            \\","            };                                                                \\","            const Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( \\","                Catch::makeTestInvokerFixture( \u0026TestName::test ),                    \\","                CATCH_INTERNAL_LINEINFO,                                      \\","                #ClassName##_catch_sr,                                        \\","                Catch::NameAndTags{ __VA_ARGS__ } ); /* NOLINT */             \\","        }                                                                     \\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION                              \\","        void TestName::test() const","    #define INTERNAL_CATCH_TEST_CASE_PERSISTENT_FIXTURE( ClassName, ... )    \\","        INTERNAL_CATCH_TEST_CASE_PERSISTENT_FIXTURE2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ), ClassName, __VA_ARGS__ )","","","    ///////////////////////////////////////////////////////////////////////////////","    #define INTERNAL_CATCH_METHOD_AS_TEST_CASE( QualifiedMethod, ... ) \\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\","        namespace {                                                           \\","        const Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( \\","            Catch::makeTestInvoker( \u0026QualifiedMethod ),                   \\","            CATCH_INTERNAL_LINEINFO,                                      \\","            \"\u0026\" #QualifiedMethod##_catch_sr,                              \\","            Catch::NameAndTags{ __VA_ARGS__ } );                          \\","    } /* NOLINT */ \\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION","","","    ///////////////////////////////////////////////////////////////////////////////","    #define INTERNAL_CATCH_REGISTER_TESTCASE( Function, ... ) \\","        do { \\","            CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","            CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\","            CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\","            Catch::AutoReg INTERNAL_CATCH_UNIQUE_NAME( autoRegistrar )( Catch::makeTestInvoker( Function ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags{ __VA_ARGS__ } ); /* NOLINT */ \\","            CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\","        } while(false)","","","#endif // CATCH_TEST_REGISTRY_HPP_INCLUDED","","","// All of our user-facing macros support configuration toggle, that","// forces them to be defined prefixed with CATCH_. We also like to","// support another toggle that can minimize (disable) their implementation.","// Given this, we have 4 different configuration options below","","#if defined(CATCH_CONFIG_PREFIX_ALL) \u0026\u0026 !defined(CATCH_CONFIG_DISABLE)","","  #define CATCH_REQUIRE( ... ) INTERNAL_CATCH_TEST( \"CATCH_REQUIRE\", Catch::ResultDisposition::Normal, __VA_ARGS__ )","  #define CATCH_REQUIRE_FALSE( ... ) INTERNAL_CATCH_TEST( \"CATCH_REQUIRE_FALSE\", Catch::ResultDisposition::Normal | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )","","  #define CATCH_REQUIRE_THROWS( ... ) INTERNAL_CATCH_THROWS( \"CATCH_REQUIRE_THROWS\", Catch::ResultDisposition::Normal, __VA_ARGS__ )","  #define CATCH_REQUIRE_THROWS_AS( expr, exceptionType ) INTERNAL_CATCH_THROWS_AS( \"CATCH_REQUIRE_THROWS_AS\", exceptionType, Catch::ResultDisposition::Normal, expr )","  #define CATCH_REQUIRE_NOTHROW( ... ) INTERNAL_CATCH_NO_THROW( \"CATCH_REQUIRE_NOTHROW\", Catch::ResultDisposition::Normal, __VA_ARGS__ )","","  #define CATCH_CHECK( ... ) INTERNAL_CATCH_TEST( \"CATCH_CHECK\", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )","  #define CATCH_CHECK_FALSE( ... ) INTERNAL_CATCH_TEST( \"CATCH_CHECK_FALSE\", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )","  #define CATCH_CHECKED_IF( ... ) INTERNAL_CATCH_IF( \"CATCH_CHECKED_IF\", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::SuppressFail, __VA_ARGS__ )","  #define CATCH_CHECKED_ELSE( ... ) INTERNAL_CATCH_ELSE( \"CATCH_CHECKED_ELSE\", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::SuppressFail, __VA_ARGS__ )","  #define CATCH_CHECK_NOFAIL( ... ) INTERNAL_CATCH_TEST( \"CATCH_CHECK_NOFAIL\", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::SuppressFail, __VA_ARGS__ )","","  #define CATCH_CHECK_THROWS( ... )  INTERNAL_CATCH_THROWS( \"CATCH_CHECK_THROWS\", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )","  #define CATCH_CHECK_THROWS_AS( expr, exceptionType ) INTERNAL_CATCH_THROWS_AS( \"CATCH_CHECK_THROWS_AS\", exceptionType, Catch::ResultDisposition::ContinueOnFailure, expr )","  #define CATCH_CHECK_NOTHROW( ... ) INTERNAL_CATCH_NO_THROW( \"CATCH_CHECK_NOTHROW\", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )","","  #define CATCH_TEST_CASE( ... ) INTERNAL_CATCH_TESTCASE( __VA_ARGS__ )","  #define CATCH_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEST_CASE_METHOD( className, __VA_ARGS__ )","  #define CATCH_METHOD_AS_TEST_CASE( method, ... ) INTERNAL_CATCH_METHOD_AS_TEST_CASE( method, __VA_ARGS__ )","  #define CATCH_TEST_CASE_PERSISTENT_FIXTURE( className, ... ) INTERNAL_CATCH_TEST_CASE_PERSISTENT_FIXTURE( className, __VA_ARGS__ )","  #define CATCH_REGISTER_TEST_CASE( Function, ... ) INTERNAL_CATCH_REGISTER_TESTCASE( Function, __VA_ARGS__ )","  #define CATCH_SECTION( ... ) INTERNAL_CATCH_SECTION( __VA_ARGS__ )","  #define CATCH_DYNAMIC_SECTION( ... ) INTERNAL_CATCH_DYNAMIC_SECTION( __VA_ARGS__ )","  #define CATCH_FAIL( ... ) INTERNAL_CATCH_MSG( \"CATCH_FAIL\", Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::Normal, __VA_ARGS__ )","  #define CATCH_FAIL_CHECK( ... ) INTERNAL_CATCH_MSG( \"CATCH_FAIL_CHECK\", Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )","  #define CATCH_SUCCEED( ... ) INTERNAL_CATCH_MSG( \"CATCH_SUCCEED\", Catch::ResultWas::Ok, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )","  #define CATCH_SKIP( ... ) INTERNAL_CATCH_MSG( \"SKIP\", Catch::ResultWas::ExplicitSkip, Catch::ResultDisposition::Normal, __VA_ARGS__ )","","","  #if !defined(CATCH_CONFIG_RUNTIME_STATIC_REQUIRE)","    #define CATCH_STATIC_REQUIRE( ... )       static_assert(   __VA_ARGS__ ,      #__VA_ARGS__ );     CATCH_SUCCEED( #__VA_ARGS__ )","    #define CATCH_STATIC_REQUIRE_FALSE( ... ) static_assert( !(__VA_ARGS__), \"!(\" #__VA_ARGS__ \")\" ); CATCH_SUCCEED( #__VA_ARGS__ )","    #define CATCH_STATIC_CHECK( ... )       static_assert(   __VA_ARGS__ ,      #__VA_ARGS__ );     CATCH_SUCCEED( #__VA_ARGS__ )","    #define CATCH_STATIC_CHECK_FALSE( ... ) static_assert( !(__VA_ARGS__), \"!(\" #__VA_ARGS__ \")\" ); CATCH_SUCCEED( #__VA_ARGS__ )","  #else","    #define CATCH_STATIC_REQUIRE( ... )       CATCH_REQUIRE( __VA_ARGS__ )","    #define CATCH_STATIC_REQUIRE_FALSE( ... ) CATCH_REQUIRE_FALSE( __VA_ARGS__ )","    #define CATCH_STATIC_CHECK( ... )       CATCH_CHECK( __VA_ARGS__ )","    #define CATCH_STATIC_CHECK_FALSE( ... ) CATCH_CHECK_FALSE( __VA_ARGS__ )","  #endif","","","  // \"BDD-style\" convenience wrappers","  #define CATCH_SCENARIO( ... ) CATCH_TEST_CASE( \"Scenario: \" __VA_ARGS__ )","  #define CATCH_SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TEST_CASE_METHOD( className, \"Scenario: \" __VA_ARGS__ )","  #define CATCH_GIVEN( desc )     INTERNAL_CATCH_DYNAMIC_SECTION( \"    Given: \" \u003c\u003c desc )","  #define CATCH_AND_GIVEN( desc ) INTERNAL_CATCH_DYNAMIC_SECTION( \"And given: \" \u003c\u003c desc )","  #define CATCH_WHEN( desc )      INTERNAL_CATCH_DYNAMIC_SECTION( \"     When: \" \u003c\u003c desc )","  #define CATCH_AND_WHEN( desc )  INTERNAL_CATCH_DYNAMIC_SECTION( \" And when: \" \u003c\u003c desc )","  #define CATCH_THEN( desc )      INTERNAL_CATCH_DYNAMIC_SECTION( \"     Then: \" \u003c\u003c desc )","  #define CATCH_AND_THEN( desc )  INTERNAL_CATCH_DYNAMIC_SECTION( \"      And: \" \u003c\u003c desc )","","#elif defined(CATCH_CONFIG_PREFIX_ALL) \u0026\u0026 defined(CATCH_CONFIG_DISABLE) // ^^ prefixed, implemented | vv prefixed, disabled","","  #define CATCH_REQUIRE( ... )        (void)(0)","  #define CATCH_REQUIRE_FALSE( ... )  (void)(0)","","  #define CATCH_REQUIRE_THROWS( ... ) (void)(0)","  #define CATCH_REQUIRE_THROWS_AS( expr, exceptionType ) (void)(0)","  #define CATCH_REQUIRE_NOTHROW( ... ) (void)(0)","","  #define CATCH_CHECK( ... )         (void)(0)","  #define CATCH_CHECK_FALSE( ... )   (void)(0)","  #define CATCH_CHECKED_IF( ... )    if (__VA_ARGS__)","  #define CATCH_CHECKED_ELSE( ... )  if (!(__VA_ARGS__))","  #define CATCH_CHECK_NOFAIL( ... )  (void)(0)","","  #define CATCH_CHECK_THROWS( ... )  (void)(0)","  #define CATCH_CHECK_THROWS_AS( expr, exceptionType ) (void)(0)","  #define CATCH_CHECK_NOTHROW( ... ) (void)(0)","","  #define CATCH_TEST_CASE( ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ))","  #define CATCH_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ))","  #define CATCH_METHOD_AS_TEST_CASE( method, ... )","  #define CATCH_TEST_CASE_PERSISTENT_FIXTURE( className, ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ))","  #define CATCH_REGISTER_TEST_CASE( Function, ... ) (void)(0)","  #define CATCH_SECTION( ... )","  #define CATCH_DYNAMIC_SECTION( ... )","  #define CATCH_FAIL( ... ) (void)(0)","  #define CATCH_FAIL_CHECK( ... ) (void)(0)","  #define CATCH_SUCCEED( ... ) (void)(0)","  #define CATCH_SKIP( ... ) (void)(0)","","  #define CATCH_STATIC_REQUIRE( ... )       (void)(0)","  #define CATCH_STATIC_REQUIRE_FALSE( ... ) (void)(0)","  #define CATCH_STATIC_CHECK( ... )       (void)(0)","  #define CATCH_STATIC_CHECK_FALSE( ... ) (void)(0)","","  // \"BDD-style\" convenience wrappers","  #define CATCH_SCENARIO( ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ))","  #define CATCH_SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ), className )","  #define CATCH_GIVEN( desc )","  #define CATCH_AND_GIVEN( desc )","  #define CATCH_WHEN( desc )","  #define CATCH_AND_WHEN( desc )","  #define CATCH_THEN( desc )","  #define CATCH_AND_THEN( desc )","","#elif !defined(CATCH_CONFIG_PREFIX_ALL) \u0026\u0026 !defined(CATCH_CONFIG_DISABLE) // ^^ prefixed, disabled | vv unprefixed, implemented","","  #define REQUIRE( ... ) INTERNAL_CATCH_TEST( \"REQUIRE\", Catch::ResultDisposition::Normal, __VA_ARGS__  )","  #define REQUIRE_FALSE( ... ) INTERNAL_CATCH_TEST( \"REQUIRE_FALSE\", Catch::ResultDisposition::Normal | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )","","  #define REQUIRE_THROWS( ... ) INTERNAL_CATCH_THROWS( \"REQUIRE_THROWS\", Catch::ResultDisposition::Normal, __VA_ARGS__ )","  #define REQUIRE_THROWS_AS( expr, exceptionType ) INTERNAL_CATCH_THROWS_AS( \"REQUIRE_THROWS_AS\", exceptionType, Catch::ResultDisposition::Normal, expr )","  #define REQUIRE_NOTHROW( ... ) INTERNAL_CATCH_NO_THROW( \"REQUIRE_NOTHROW\", Catch::ResultDisposition::Normal, __VA_ARGS__ )","","  #define CHECK( ... ) INTERNAL_CATCH_TEST( \"CHECK\", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )","  #define CHECK_FALSE( ... ) INTERNAL_CATCH_TEST( \"CHECK_FALSE\", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::FalseTest, __VA_ARGS__ )","  #define CHECKED_IF( ... ) INTERNAL_CATCH_IF( \"CHECKED_IF\", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::SuppressFail, __VA_ARGS__ )","  #define CHECKED_ELSE( ... ) INTERNAL_CATCH_ELSE( \"CHECKED_ELSE\", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::SuppressFail, __VA_ARGS__ )","  #define CHECK_NOFAIL( ... ) INTERNAL_CATCH_TEST( \"CHECK_NOFAIL\", Catch::ResultDisposition::ContinueOnFailure | Catch::ResultDisposition::SuppressFail, __VA_ARGS__ )","","  #define CHECK_THROWS( ... )  INTERNAL_CATCH_THROWS( \"CHECK_THROWS\", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )","  #define CHECK_THROWS_AS( expr, exceptionType ) INTERNAL_CATCH_THROWS_AS( \"CHECK_THROWS_AS\", exceptionType, Catch::ResultDisposition::ContinueOnFailure, expr )","  #define CHECK_NOTHROW( ... ) INTERNAL_CATCH_NO_THROW( \"CHECK_NOTHROW\", Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )","","  #define TEST_CASE( ... ) INTERNAL_CATCH_TESTCASE( __VA_ARGS__ )","  #define TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEST_CASE_METHOD( className, __VA_ARGS__ )","  #define METHOD_AS_TEST_CASE( method, ... ) INTERNAL_CATCH_METHOD_AS_TEST_CASE( method, __VA_ARGS__ )","  #define TEST_CASE_PERSISTENT_FIXTURE( className, ... ) INTERNAL_CATCH_TEST_CASE_PERSISTENT_FIXTURE( className, __VA_ARGS__ )","  #define REGISTER_TEST_CASE( Function, ... ) INTERNAL_CATCH_REGISTER_TESTCASE( Function, __VA_ARGS__ )","  #define SECTION( ... ) INTERNAL_CATCH_SECTION( __VA_ARGS__ )","  #define DYNAMIC_SECTION( ... ) INTERNAL_CATCH_DYNAMIC_SECTION( __VA_ARGS__ )","  #define FAIL( ... ) INTERNAL_CATCH_MSG( \"FAIL\", Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::Normal, __VA_ARGS__ )","  #define FAIL_CHECK( ... ) INTERNAL_CATCH_MSG( \"FAIL_CHECK\", Catch::ResultWas::ExplicitFailure, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )","  #define SUCCEED( ... ) INTERNAL_CATCH_MSG( \"SUCCEED\", Catch::ResultWas::Ok, Catch::ResultDisposition::ContinueOnFailure, __VA_ARGS__ )","  #define SKIP( ... ) INTERNAL_CATCH_MSG( \"SKIP\", Catch::ResultWas::ExplicitSkip, Catch::ResultDisposition::Normal, __VA_ARGS__ )","","","  #if !defined(CATCH_CONFIG_RUNTIME_STATIC_REQUIRE)","    #define STATIC_REQUIRE( ... )       static_assert(   __VA_ARGS__,  #__VA_ARGS__ ); SUCCEED( #__VA_ARGS__ )","    #define STATIC_REQUIRE_FALSE( ... ) static_assert( !(__VA_ARGS__), \"!(\" #__VA_ARGS__ \")\" ); SUCCEED( \"!(\" #__VA_ARGS__ \")\" )","    #define STATIC_CHECK( ... )       static_assert(   __VA_ARGS__,  #__VA_ARGS__ ); SUCCEED( #__VA_ARGS__ )","    #define STATIC_CHECK_FALSE( ... ) static_assert( !(__VA_ARGS__), \"!(\" #__VA_ARGS__ \")\" ); SUCCEED( \"!(\" #__VA_ARGS__ \")\" )","  #else","    #define STATIC_REQUIRE( ... )       REQUIRE( __VA_ARGS__ )","    #define STATIC_REQUIRE_FALSE( ... ) REQUIRE_FALSE( __VA_ARGS__ )","    #define STATIC_CHECK( ... )       CHECK( __VA_ARGS__ )","    #define STATIC_CHECK_FALSE( ... ) CHECK_FALSE( __VA_ARGS__ )","  #endif","","  // \"BDD-style\" convenience wrappers","  #define SCENARIO( ... ) TEST_CASE( \"Scenario: \" __VA_ARGS__ )","  #define SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TEST_CASE_METHOD( className, \"Scenario: \" __VA_ARGS__ )","  #define GIVEN( desc )     INTERNAL_CATCH_DYNAMIC_SECTION( \"    Given: \" \u003c\u003c desc )","  #define AND_GIVEN( desc ) INTERNAL_CATCH_DYNAMIC_SECTION( \"And given: \" \u003c\u003c desc )","  #define WHEN( desc )      INTERNAL_CATCH_DYNAMIC_SECTION( \"     When: \" \u003c\u003c desc )","  #define AND_WHEN( desc )  INTERNAL_CATCH_DYNAMIC_SECTION( \" And when: \" \u003c\u003c desc )","  #define THEN( desc )      INTERNAL_CATCH_DYNAMIC_SECTION( \"     Then: \" \u003c\u003c desc )","  #define AND_THEN( desc )  INTERNAL_CATCH_DYNAMIC_SECTION( \"      And: \" \u003c\u003c desc )","","#elif !defined(CATCH_CONFIG_PREFIX_ALL) \u0026\u0026 defined(CATCH_CONFIG_DISABLE) // ^^ unprefixed, implemented | vv unprefixed, disabled","","  #define REQUIRE( ... )       (void)(0)","  #define REQUIRE_FALSE( ... ) (void)(0)","","  #define REQUIRE_THROWS( ... ) (void)(0)","  #define REQUIRE_THROWS_AS( expr, exceptionType ) (void)(0)","  #define REQUIRE_NOTHROW( ... ) (void)(0)","","  #define CHECK( ... ) (void)(0)","  #define CHECK_FALSE( ... ) (void)(0)","  #define CHECKED_IF( ... ) if (__VA_ARGS__)","  #define CHECKED_ELSE( ... ) if (!(__VA_ARGS__))","  #define CHECK_NOFAIL( ... ) (void)(0)","","  #define CHECK_THROWS( ... )  (void)(0)","  #define CHECK_THROWS_AS( expr, exceptionType ) (void)(0)","  #define CHECK_NOTHROW( ... ) (void)(0)","","  #define TEST_CASE( ... )  INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ), __VA_ARGS__)","  #define TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ))","  #define METHOD_AS_TEST_CASE( method, ... )","  #define TEST_CASE_PERSISTENT_FIXTURE( className, ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ), __VA_ARGS__)","  #define REGISTER_TEST_CASE( Function, ... ) (void)(0)","  #define SECTION( ... )","  #define DYNAMIC_SECTION( ... )","  #define FAIL( ... ) (void)(0)","  #define FAIL_CHECK( ... ) (void)(0)","  #define SUCCEED( ... ) (void)(0)","  #define SKIP( ... ) (void)(0)","","  #define STATIC_REQUIRE( ... )       (void)(0)","  #define STATIC_REQUIRE_FALSE( ... ) (void)(0)","  #define STATIC_CHECK( ... )       (void)(0)","  #define STATIC_CHECK_FALSE( ... ) (void)(0)","","  // \"BDD-style\" convenience wrappers","  #define SCENARIO( ... ) INTERNAL_CATCH_TESTCASE_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ) )","  #define SCENARIO_METHOD( className, ... ) INTERNAL_CATCH_TESTCASE_METHOD_NO_REGISTRATION(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEST_ ), className )","","  #define GIVEN( desc )","  #define AND_GIVEN( desc )","  #define WHEN( desc )","  #define AND_WHEN( desc )","  #define THEN( desc )","  #define AND_THEN( desc )","","#endif // ^^ unprefixed, disabled","","// end of user facing macros","","#endif // CATCH_TEST_MACROS_HPP_INCLUDED","","","#ifndef CATCH_TEMPLATE_TEST_REGISTRY_HPP_INCLUDED","#define CATCH_TEMPLATE_TEST_REGISTRY_HPP_INCLUDED","","","","#ifndef CATCH_PREPROCESSOR_HPP_INCLUDED","#define CATCH_PREPROCESSOR_HPP_INCLUDED","","","#if defined(__GNUC__)","// We need to silence \"empty __VA_ARGS__ warning\", and using just _Pragma does not work","#pragma GCC system_header","#endif","","","#define CATCH_RECURSION_LEVEL0(...) __VA_ARGS__","#define CATCH_RECURSION_LEVEL1(...) CATCH_RECURSION_LEVEL0(CATCH_RECURSION_LEVEL0(CATCH_RECURSION_LEVEL0(__VA_ARGS__)))","#define CATCH_RECURSION_LEVEL2(...) CATCH_RECURSION_LEVEL1(CATCH_RECURSION_LEVEL1(CATCH_RECURSION_LEVEL1(__VA_ARGS__)))","#define CATCH_RECURSION_LEVEL3(...) CATCH_RECURSION_LEVEL2(CATCH_RECURSION_LEVEL2(CATCH_RECURSION_LEVEL2(__VA_ARGS__)))","#define CATCH_RECURSION_LEVEL4(...) CATCH_RECURSION_LEVEL3(CATCH_RECURSION_LEVEL3(CATCH_RECURSION_LEVEL3(__VA_ARGS__)))","#define CATCH_RECURSION_LEVEL5(...) CATCH_RECURSION_LEVEL4(CATCH_RECURSION_LEVEL4(CATCH_RECURSION_LEVEL4(__VA_ARGS__)))","","#ifdef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","#define INTERNAL_CATCH_EXPAND_VARGS(...) __VA_ARGS__","// MSVC needs more evaluations","#define CATCH_RECURSION_LEVEL6(...) CATCH_RECURSION_LEVEL5(CATCH_RECURSION_LEVEL5(CATCH_RECURSION_LEVEL5(__VA_ARGS__)))","#define CATCH_RECURSE(...)  CATCH_RECURSION_LEVEL6(CATCH_RECURSION_LEVEL6(__VA_ARGS__))","#else","#define CATCH_RECURSE(...)  CATCH_RECURSION_LEVEL5(__VA_ARGS__)","#endif","","#define CATCH_REC_END(...)","#define CATCH_REC_OUT","","#define CATCH_EMPTY()","#define CATCH_DEFER(id) id CATCH_EMPTY()","","#define CATCH_REC_GET_END2() 0, CATCH_REC_END","#define CATCH_REC_GET_END1(...) CATCH_REC_GET_END2","#define CATCH_REC_GET_END(...) CATCH_REC_GET_END1","#define CATCH_REC_NEXT0(test, next, ...) next CATCH_REC_OUT","#define CATCH_REC_NEXT1(test, next) CATCH_DEFER ( CATCH_REC_NEXT0 ) ( test, next, 0)","#define CATCH_REC_NEXT(test, next)  CATCH_REC_NEXT1(CATCH_REC_GET_END test, next)","","#define CATCH_REC_LIST0(f, x, peek, ...) , f(x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1) ) ( f, peek, __VA_ARGS__ )","#define CATCH_REC_LIST1(f, x, peek, ...) , f(x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST0) ) ( f, peek, __VA_ARGS__ )","#define CATCH_REC_LIST2(f, x, peek, ...)   f(x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1) ) ( f, peek, __VA_ARGS__ )","","#define CATCH_REC_LIST0_UD(f, userdata, x, peek, ...) , f(userdata, x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1_UD) ) ( f, userdata, peek, __VA_ARGS__ )","#define CATCH_REC_LIST1_UD(f, userdata, x, peek, ...) , f(userdata, x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST0_UD) ) ( f, userdata, peek, __VA_ARGS__ )","#define CATCH_REC_LIST2_UD(f, userdata, x, peek, ...)   f(userdata, x) CATCH_DEFER ( CATCH_REC_NEXT(peek, CATCH_REC_LIST1_UD) ) ( f, userdata, peek, __VA_ARGS__ )","","// Applies the function macro `f` to each of the remaining parameters, inserts commas between the results,","// and passes userdata as the first parameter to each invocation,","// e.g. CATCH_REC_LIST_UD(f, x, a, b, c) evaluates to f(x, a), f(x, b), f(x, c)","#define CATCH_REC_LIST_UD(f, userdata, ...) CATCH_RECURSE(CATCH_REC_LIST2_UD(f, userdata, __VA_ARGS__, ()()(), ()()(), ()()(), 0))","","#define CATCH_REC_LIST(f, ...) CATCH_RECURSE(CATCH_REC_LIST2(f, __VA_ARGS__, ()()(), ()()(), ()()(), 0))","","#define INTERNAL_CATCH_STRINGIZE(...) INTERNAL_CATCH_STRINGIZE2(__VA_ARGS__)","#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","#define INTERNAL_CATCH_STRINGIZE2(...) #__VA_ARGS__","#define INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS(param) INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_REMOVE_PARENS(param))","#else","// MSVC is adding extra space and needs another indirection to expand INTERNAL_CATCH_NOINTERNAL_CATCH_DEF","#define INTERNAL_CATCH_STRINGIZE2(...) INTERNAL_CATCH_STRINGIZE3(__VA_ARGS__)","#define INTERNAL_CATCH_STRINGIZE3(...) #__VA_ARGS__","#define INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS(param) (INTERNAL_CATCH_STRINGIZE(INTERNAL_CATCH_REMOVE_PARENS(param)) + 1)","#endif","","#define INTERNAL_CATCH_MAKE_NAMESPACE2(...) ns_##__VA_ARGS__","#define INTERNAL_CATCH_MAKE_NAMESPACE(name) INTERNAL_CATCH_MAKE_NAMESPACE2(name)","","#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","#define INTERNAL_CATCH_MAKE_TYPE_LIST2(...) decltype(get_wrapper\u003cINTERNAL_CATCH_REMOVE_PARENS_GEN(__VA_ARGS__)\u003e())","#define INTERNAL_CATCH_MAKE_TYPE_LIST(...) INTERNAL_CATCH_MAKE_TYPE_LIST2(INTERNAL_CATCH_REMOVE_PARENS(__VA_ARGS__))","#else","#define INTERNAL_CATCH_MAKE_TYPE_LIST2(...) INTERNAL_CATCH_EXPAND_VARGS(decltype(get_wrapper\u003cINTERNAL_CATCH_REMOVE_PARENS_GEN(__VA_ARGS__)\u003e()))","#define INTERNAL_CATCH_MAKE_TYPE_LIST(...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_MAKE_TYPE_LIST2(INTERNAL_CATCH_REMOVE_PARENS(__VA_ARGS__)))","#endif","","#define INTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(...)\\","    CATCH_REC_LIST(INTERNAL_CATCH_MAKE_TYPE_LIST,__VA_ARGS__)","","#define INTERNAL_CATCH_REMOVE_PARENS_1_ARG(_0) INTERNAL_CATCH_REMOVE_PARENS(_0)","#define INTERNAL_CATCH_REMOVE_PARENS_2_ARG(_0, _1) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_1_ARG(_1)","#define INTERNAL_CATCH_REMOVE_PARENS_3_ARG(_0, _1, _2) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_2_ARG(_1, _2)","#define INTERNAL_CATCH_REMOVE_PARENS_4_ARG(_0, _1, _2, _3) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_3_ARG(_1, _2, _3)","#define INTERNAL_CATCH_REMOVE_PARENS_5_ARG(_0, _1, _2, _3, _4) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_4_ARG(_1, _2, _3, _4)","#define INTERNAL_CATCH_REMOVE_PARENS_6_ARG(_0, _1, _2, _3, _4, _5) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_5_ARG(_1, _2, _3, _4, _5)","#define INTERNAL_CATCH_REMOVE_PARENS_7_ARG(_0, _1, _2, _3, _4, _5, _6) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_6_ARG(_1, _2, _3, _4, _5, _6)","#define INTERNAL_CATCH_REMOVE_PARENS_8_ARG(_0, _1, _2, _3, _4, _5, _6, _7) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_7_ARG(_1, _2, _3, _4, _5, _6, _7)","#define INTERNAL_CATCH_REMOVE_PARENS_9_ARG(_0, _1, _2, _3, _4, _5, _6, _7, _8) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_8_ARG(_1, _2, _3, _4, _5, _6, _7, _8)","#define INTERNAL_CATCH_REMOVE_PARENS_10_ARG(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_9_ARG(_1, _2, _3, _4, _5, _6, _7, _8, _9)","#define INTERNAL_CATCH_REMOVE_PARENS_11_ARG(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10) INTERNAL_CATCH_REMOVE_PARENS(_0), INTERNAL_CATCH_REMOVE_PARENS_10_ARG(_1, _2, _3, _4, _5, _6, _7, _8, _9, _10)","","#define INTERNAL_CATCH_VA_NARGS_IMPL(_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, N, ...) N","","#define INTERNAL_CATCH_TYPE_GEN\\","    template\u003ctypename...\u003e struct TypeList {};\\","    template\u003ctypename...Ts\u003e\\","    constexpr auto get_wrapper() noexcept -\u003e TypeList\u003cTs...\u003e { return {}; }\\","    template\u003ctemplate\u003ctypename...\u003e class...\u003e struct TemplateTypeList{};\\","    template\u003ctemplate\u003ctypename...\u003e class...Cs\u003e\\","    constexpr auto get_wrapper() noexcept -\u003e TemplateTypeList\u003cCs...\u003e { return {}; }\\","    template\u003ctypename...\u003e\\","    struct append;\\","    template\u003ctypename...\u003e\\","    struct rewrap;\\","    template\u003ctemplate\u003ctypename...\u003e class, typename...\u003e\\","    struct create;\\","    template\u003ctemplate\u003ctypename...\u003e class, typename\u003e\\","    struct convert;\\","    \\","    template\u003ctypename T\u003e \\","    struct append\u003cT\u003e { using type = T; };\\","    template\u003c template\u003ctypename...\u003e class L1, typename...E1, template\u003ctypename...\u003e class L2, typename...E2, typename...Rest\u003e\\","    struct append\u003cL1\u003cE1...\u003e, L2\u003cE2...\u003e, Rest...\u003e { using type = typename append\u003cL1\u003cE1...,E2...\u003e, Rest...\u003e::type; };\\","    template\u003c template\u003ctypename...\u003e class L1, typename...E1, typename...Rest\u003e\\","    struct append\u003cL1\u003cE1...\u003e, TypeList\u003cmpl_::na\u003e, Rest...\u003e { using type = L1\u003cE1...\u003e; };\\","    \\","    template\u003c template\u003ctypename...\u003e class Container, template\u003ctypename...\u003e class List, typename...elems\u003e\\","    struct rewrap\u003cTemplateTypeList\u003cContainer\u003e, List\u003celems...\u003e\u003e { using type = TypeList\u003cContainer\u003celems...\u003e\u003e; };\\","    template\u003c template\u003ctypename...\u003e class Container, template\u003ctypename...\u003e class List, class...Elems, typename...Elements\u003e\\","    struct rewrap\u003cTemplateTypeList\u003cContainer\u003e, List\u003cElems...\u003e, Elements...\u003e { using type = typename append\u003cTypeList\u003cContainer\u003cElems...\u003e\u003e, typename rewrap\u003cTemplateTypeList\u003cContainer\u003e, Elements...\u003e::type\u003e::type; };\\","    \\","    template\u003ctemplate \u003ctypename...\u003e class Final, template\u003c typename...\u003e class...Containers, typename...Types\u003e\\","    struct create\u003cFinal, TemplateTypeList\u003cContainers...\u003e, TypeList\u003cTypes...\u003e\u003e { using type = typename append\u003cFinal\u003c\u003e, typename rewrap\u003cTemplateTypeList\u003cContainers\u003e, Types...\u003e::type...\u003e::type; };\\","    template\u003ctemplate \u003ctypename...\u003e class Final, template \u003ctypename...\u003e class List, typename...Ts\u003e\\","    struct convert\u003cFinal, List\u003cTs...\u003e\u003e { using type = typename append\u003cFinal\u003c\u003e,TypeList\u003cTs\u003e...\u003e::type; };","","#define INTERNAL_CATCH_NTTP_1(signature, ...)\\","    template\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e struct Nttp{};\\","    template\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e\\","    constexpr auto get_wrapper() noexcept -\u003e Nttp\u003c__VA_ARGS__\u003e { return {}; } \\","    template\u003ctemplate\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e class...\u003e struct NttpTemplateTypeList{};\\","    template\u003ctemplate\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e class...Cs\u003e\\","    constexpr auto get_wrapper() noexcept -\u003e NttpTemplateTypeList\u003cCs...\u003e { return {}; } \\","    \\","    template\u003c template\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e class Container, template\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e class List, INTERNAL_CATCH_REMOVE_PARENS(signature)\u003e\\","    struct rewrap\u003cNttpTemplateTypeList\u003cContainer\u003e, List\u003c__VA_ARGS__\u003e\u003e { using type = TypeList\u003cContainer\u003c__VA_ARGS__\u003e\u003e; };\\","    template\u003c template\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e class Container, template\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e class List, INTERNAL_CATCH_REMOVE_PARENS(signature), typename...Elements\u003e\\","    struct rewrap\u003cNttpTemplateTypeList\u003cContainer\u003e, List\u003c__VA_ARGS__\u003e, Elements...\u003e { using type = typename append\u003cTypeList\u003cContainer\u003c__VA_ARGS__\u003e\u003e, typename rewrap\u003cNttpTemplateTypeList\u003cContainer\u003e, Elements...\u003e::type\u003e::type; };\\","    template\u003ctemplate \u003ctypename...\u003e class Final, template\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e class...Containers, typename...Types\u003e\\","    struct create\u003cFinal, NttpTemplateTypeList\u003cContainers...\u003e, TypeList\u003cTypes...\u003e\u003e { using type = typename append\u003cFinal\u003c\u003e, typename rewrap\u003cNttpTemplateTypeList\u003cContainers\u003e, Types...\u003e::type...\u003e::type; };","","#define INTERNAL_CATCH_DECLARE_SIG_TEST0(TestName)","#define INTERNAL_CATCH_DECLARE_SIG_TEST1(TestName, signature)\\","    template\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e\\","    static void TestName()","#define INTERNAL_CATCH_DECLARE_SIG_TEST_X(TestName, signature, ...)\\","    template\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e\\","    static void TestName()","","#define INTERNAL_CATCH_DEFINE_SIG_TEST0(TestName)","#define INTERNAL_CATCH_DEFINE_SIG_TEST1(TestName, signature)\\","    template\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e\\","    static void TestName()","#define INTERNAL_CATCH_DEFINE_SIG_TEST_X(TestName, signature,...)\\","    template\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e\\","    static void TestName()","","#define INTERNAL_CATCH_NTTP_REGISTER0(TestFunc, signature)\\","    template\u003ctypename Type\u003e\\","    void reg_test(TypeList\u003cType\u003e, Catch::NameAndTags nameAndTags)\\","    {\\","        Catch::AutoReg( Catch::makeTestInvoker(\u0026TestFunc\u003cType\u003e), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), nameAndTags);\\","    }","","#define INTERNAL_CATCH_NTTP_REGISTER(TestFunc, signature, ...)\\","    template\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e\\","    void reg_test(Nttp\u003c__VA_ARGS__\u003e, Catch::NameAndTags nameAndTags)\\","    {\\","        Catch::AutoReg( Catch::makeTestInvoker(\u0026TestFunc\u003c__VA_ARGS__\u003e), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), nameAndTags);\\","    }","","#define INTERNAL_CATCH_NTTP_REGISTER_METHOD0(TestName, signature, ...)\\","    template\u003ctypename Type\u003e\\","    void reg_test(TypeList\u003cType\u003e, Catch::StringRef className, Catch::NameAndTags nameAndTags)\\","    {\\","        Catch::AutoReg( Catch::makeTestInvoker(\u0026TestName\u003cType\u003e::test), CATCH_INTERNAL_LINEINFO, className, nameAndTags);\\","    }","","#define INTERNAL_CATCH_NTTP_REGISTER_METHOD(TestName, signature, ...)\\","    template\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e\\","    void reg_test(Nttp\u003c__VA_ARGS__\u003e, Catch::StringRef className, Catch::NameAndTags nameAndTags)\\","    {\\","        Catch::AutoReg( Catch::makeTestInvoker(\u0026TestName\u003c__VA_ARGS__\u003e::test), CATCH_INTERNAL_LINEINFO, className, nameAndTags);\\","    }","","#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0(TestName, ClassName)","#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1(TestName, ClassName, signature)\\","    template\u003ctypename TestType\u003e \\","    struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName)\u003cTestType\u003e { \\","        void test();\\","    }","","#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X(TestName, ClassName, signature, ...)\\","    template\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e \\","    struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName)\u003c__VA_ARGS__\u003e { \\","        void test();\\","    }","","#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0(TestName)","#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1(TestName, signature)\\","    template\u003ctypename TestType\u003e \\","    void INTERNAL_CATCH_MAKE_NAMESPACE(TestName)::TestName\u003cTestType\u003e::test()","#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X(TestName, signature, ...)\\","    template\u003cINTERNAL_CATCH_REMOVE_PARENS(signature)\u003e \\","    void INTERNAL_CATCH_MAKE_NAMESPACE(TestName)::TestName\u003c__VA_ARGS__\u003e::test()","","#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","#define INTERNAL_CATCH_NTTP_0","#define INTERNAL_CATCH_NTTP_GEN(...) INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__, INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1(__VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_1( __VA_ARGS__),INTERNAL_CATCH_NTTP_1( __VA_ARGS__), INTERNAL_CATCH_NTTP_0)","#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName, ...) INTERNAL_CATCH_VA_NARGS_IMPL( \"dummy\", __VA_ARGS__, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0)(TestName, __VA_ARGS__)","#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName, ClassName, ...) INTERNAL_CATCH_VA_NARGS_IMPL( \"dummy\", __VA_ARGS__, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0)(TestName, ClassName, __VA_ARGS__)","#define INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName, ...) INTERNAL_CATCH_VA_NARGS_IMPL( \"dummy\", __VA_ARGS__, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD0, INTERNAL_CATCH_NTTP_REGISTER_METHOD0)(TestName, __VA_ARGS__)","#define INTERNAL_CATCH_NTTP_REG_GEN(TestFunc, ...) INTERNAL_CATCH_VA_NARGS_IMPL( \"dummy\", __VA_ARGS__, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER0, INTERNAL_CATCH_NTTP_REGISTER0)(TestFunc, __VA_ARGS__)","#define INTERNAL_CATCH_DEFINE_SIG_TEST(TestName, ...) INTERNAL_CATCH_VA_NARGS_IMPL( \"dummy\", __VA_ARGS__, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST1, INTERNAL_CATCH_DEFINE_SIG_TEST0)(TestName, __VA_ARGS__)","#define INTERNAL_CATCH_DECLARE_SIG_TEST(TestName, ...) INTERNAL_CATCH_VA_NARGS_IMPL( \"dummy\", __VA_ARGS__, INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST1, INTERNAL_CATCH_DECLARE_SIG_TEST0)(TestName, __VA_ARGS__)","#define INTERNAL_CATCH_REMOVE_PARENS_GEN(...) INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__, INTERNAL_CATCH_REMOVE_PARENS_11_ARG,INTERNAL_CATCH_REMOVE_PARENS_10_ARG,INTERNAL_CATCH_REMOVE_PARENS_9_ARG,INTERNAL_CATCH_REMOVE_PARENS_8_ARG,INTERNAL_CATCH_REMOVE_PARENS_7_ARG,INTERNAL_CATCH_REMOVE_PARENS_6_ARG,INTERNAL_CATCH_REMOVE_PARENS_5_ARG,INTERNAL_CATCH_REMOVE_PARENS_4_ARG,INTERNAL_CATCH_REMOVE_PARENS_3_ARG,INTERNAL_CATCH_REMOVE_PARENS_2_ARG,INTERNAL_CATCH_REMOVE_PARENS_1_ARG)(__VA_ARGS__)","#else","#define INTERNAL_CATCH_NTTP_0(signature)","#define INTERNAL_CATCH_NTTP_GEN(...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_1,INTERNAL_CATCH_NTTP_1, INTERNAL_CATCH_NTTP_0)( __VA_ARGS__))","#define INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName, ...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL( \"dummy\", __VA_ARGS__, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD1, INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD0)(TestName, __VA_ARGS__))","#define INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName, ClassName, ...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL( \"dummy\", __VA_ARGS__, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X,INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD_X, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD1, INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD0)(TestName, ClassName, __VA_ARGS__))","#define INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName, ...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL( \"dummy\", __VA_ARGS__, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD, INTERNAL_CATCH_NTTP_REGISTER_METHOD0, INTERNAL_CATCH_NTTP_REGISTER_METHOD0)(TestName, __VA_ARGS__))","#define INTERNAL_CATCH_NTTP_REG_GEN(TestFunc, ...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL( \"dummy\", __VA_ARGS__, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER, INTERNAL_CATCH_NTTP_REGISTER0, INTERNAL_CATCH_NTTP_REGISTER0)(TestFunc, __VA_ARGS__))","#define INTERNAL_CATCH_DEFINE_SIG_TEST(TestName, ...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL( \"dummy\", __VA_ARGS__, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DEFINE_SIG_TEST1, INTERNAL_CATCH_DEFINE_SIG_TEST0)(TestName, __VA_ARGS__))","#define INTERNAL_CATCH_DECLARE_SIG_TEST(TestName, ...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL( \"dummy\", __VA_ARGS__, INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DEFINE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X,INTERNAL_CATCH_DECLARE_SIG_TEST_X, INTERNAL_CATCH_DECLARE_SIG_TEST1, INTERNAL_CATCH_DECLARE_SIG_TEST0)(TestName, __VA_ARGS__))","#define INTERNAL_CATCH_REMOVE_PARENS_GEN(...) INTERNAL_CATCH_EXPAND_VARGS(INTERNAL_CATCH_VA_NARGS_IMPL(__VA_ARGS__, INTERNAL_CATCH_REMOVE_PARENS_11_ARG,INTERNAL_CATCH_REMOVE_PARENS_10_ARG,INTERNAL_CATCH_REMOVE_PARENS_9_ARG,INTERNAL_CATCH_REMOVE_PARENS_8_ARG,INTERNAL_CATCH_REMOVE_PARENS_7_ARG,INTERNAL_CATCH_REMOVE_PARENS_6_ARG,INTERNAL_CATCH_REMOVE_PARENS_5_ARG,INTERNAL_CATCH_REMOVE_PARENS_4_ARG,INTERNAL_CATCH_REMOVE_PARENS_3_ARG,INTERNAL_CATCH_REMOVE_PARENS_2_ARG,INTERNAL_CATCH_REMOVE_PARENS_1_ARG)(__VA_ARGS__))","#endif","","#endif // CATCH_PREPROCESSOR_HPP_INCLUDED","","","// GCC 5 and older do not properly handle disabling unused-variable warning","// with a _Pragma. This means that we have to leak the suppression to the","// user code as well :-(","#if defined(__GNUC__) \u0026\u0026 !defined(__clang__) \u0026\u0026 __GNUC__ \u003c= 5","#pragma GCC diagnostic ignored \"-Wunused-variable\"","#endif","","#if defined(CATCH_CONFIG_DISABLE)","    #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2( TestName, TestFunc, Name, Tags, Signature, ... )  \\","        INTERNAL_CATCH_DEFINE_SIG_TEST(TestFunc, INTERNAL_CATCH_REMOVE_PARENS(Signature))","    #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2( TestNameClass, TestName, ClassName, Name, Tags, Signature, ... )    \\","        namespace{                                                                                  \\","            namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName) {                                      \\","            INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName, ClassName, INTERNAL_CATCH_REMOVE_PARENS(Signature));\\","        }                                                                                           \\","        }                                                                                           \\","        INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName, INTERNAL_CATCH_REMOVE_PARENS(Signature))","","    #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","        #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(Name, Tags, ...) \\","            INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, typename TestType, __VA_ARGS__ )","    #else","        #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(Name, Tags, ...) \\","            INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, typename TestType, __VA_ARGS__ ) )","    #endif","","    #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","        #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(Name, Tags, Signature, ...) \\","            INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, Signature, __VA_ARGS__ )","    #else","        #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(Name, Tags, Signature, ...) \\","            INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, Signature, __VA_ARGS__ ) )","    #endif","","    #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","        #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION( ClassName, Name, Tags,... ) \\","            INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_CLASS_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ) , ClassName, Name, Tags, typename T, __VA_ARGS__ )","    #else","        #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION( ClassName, Name, Tags,... ) \\","            INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_CLASS_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ) , ClassName, Name, Tags, typename T, __VA_ARGS__ ) )","    #endif","","    #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","        #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION( ClassName, Name, Tags, Signature, ... ) \\","            INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_CLASS_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ) , ClassName, Name, Tags, Signature, __VA_ARGS__ )","    #else","        #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION( ClassName, Name, Tags, Signature, ... ) \\","            INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_CLASS_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ) , ClassName, Name, Tags, Signature, __VA_ARGS__ ) )","    #endif","#endif","","","    ///////////////////////////////////////////////////////////////////////////////","    #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_2(TestName, TestFunc, Name, Tags, Signature, ... )\\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS \\","        INTERNAL_CATCH_DECLARE_SIG_TEST(TestFunc, INTERNAL_CATCH_REMOVE_PARENS(Signature));\\","        namespace {\\","        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName){\\","            INTERNAL_CATCH_TYPE_GEN\\","            INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\\","            INTERNAL_CATCH_NTTP_REG_GEN(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))\\","            template\u003ctypename...Types\u003e \\","            struct TestName{\\","                TestName(){\\","                    size_t index = 0;                                    \\","                    constexpr char const* tmpl_types[] = {CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, __VA_ARGS__)}; /* NOLINT(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays,hicpp-avoid-c-arrays) */\\","                    using expander = size_t[]; /* NOLINT(cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays,hicpp-avoid-c-arrays) */\\","                    (void)expander{(reg_test(Types{}, Catch::NameAndTags{ Name \" - \" + std::string(tmpl_types[index]), Tags } ), index++)... };/* NOLINT */ \\","                }\\","            };\\","            static const int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){\\","            TestName\u003cINTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)\u003e();\\","            return 0;\\","        }();\\","        }\\","        }\\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\","        INTERNAL_CATCH_DEFINE_SIG_TEST(TestFunc,INTERNAL_CATCH_REMOVE_PARENS(Signature))","","#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","    #define INTERNAL_CATCH_TEMPLATE_TEST_CASE(Name, Tags, ...) \\","        INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, typename TestType, __VA_ARGS__ )","#else","    #define INTERNAL_CATCH_TEMPLATE_TEST_CASE(Name, Tags, ...) \\","        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, typename TestType, __VA_ARGS__ ) )","#endif","","#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","    #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(Name, Tags, Signature, ...) \\","        INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, Signature, __VA_ARGS__ )","#else","    #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG(Name, Tags, Signature, ...) \\","        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, Signature, __VA_ARGS__ ) )","#endif","","    #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(TestName, TestFuncName, Name, Tags, Signature, TmplTypes, TypesList) \\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION                      \\","        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS                      \\","        CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS                \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS       \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS \\","        template\u003ctypename TestType\u003e static void TestFuncName();       \\","        namespace {\\","        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName) {                                     \\","            INTERNAL_CATCH_TYPE_GEN                                                  \\","            INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))         \\","            template\u003ctypename... Types\u003e                               \\","            struct TestName {                                         \\","                void reg_tests() {                                          \\","                    size_t index = 0;                                    \\","                    using expander = size_t[];                           \\","                    constexpr char const* tmpl_types[] = {CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, INTERNAL_CATCH_REMOVE_PARENS(TmplTypes))};\\","                    constexpr char const* types_list[] = {CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, INTERNAL_CATCH_REMOVE_PARENS(TypesList))};\\","                    constexpr auto num_types = sizeof(types_list) / sizeof(types_list[0]);\\","                    (void)expander{(Catch::AutoReg( Catch::makeTestInvoker( \u0026TestFuncName\u003cTypes\u003e ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags{ Name \" - \" + std::string(tmpl_types[index / num_types]) + '\u003c' + std::string(types_list[index % num_types]) + '\u003e', Tags } ), index++)... };/* NOLINT */\\","                }                                                     \\","            };                                                        \\","            static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){ \\","                using TestInit = typename create\u003cTestName, decltype(get_wrapper\u003cINTERNAL_CATCH_REMOVE_PARENS(TmplTypes)\u003e()), TypeList\u003cINTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(INTERNAL_CATCH_REMOVE_PARENS(TypesList))\u003e\u003e::type; \\","                TestInit t;                                           \\","                t.reg_tests();                                        \\","                return 0;                                             \\","            }();                                                      \\","        }                                                             \\","        }                                                             \\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION                       \\","        template\u003ctypename TestType\u003e                                   \\","        static void TestFuncName()","","#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","    #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(Name, Tags, ...)\\","        INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, typename T,__VA_ARGS__)","#else","    #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE(Name, Tags, ...)\\","        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, typename T, __VA_ARGS__ ) )","#endif","","#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","    #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(Name, Tags, Signature, ...)\\","        INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2(INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, Signature, __VA_ARGS__)","#else","    #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG(Name, Tags, Signature, ...)\\","        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, Signature, __VA_ARGS__ ) )","#endif","","    #define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2(TestName, TestFunc, Name, Tags, TmplList)\\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS \\","        template\u003ctypename TestType\u003e static void TestFunc();       \\","        namespace {\\","        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName){\\","        INTERNAL_CATCH_TYPE_GEN\\","        template\u003ctypename... Types\u003e                               \\","        struct TestName {                                         \\","            void reg_tests() {                                          \\","                size_t index = 0;                                    \\","                using expander = size_t[];                           \\","                (void)expander{(Catch::AutoReg( Catch::makeTestInvoker( \u0026TestFunc\u003cTypes\u003e ), CATCH_INTERNAL_LINEINFO, Catch::StringRef(), Catch::NameAndTags{ Name \" - \" INTERNAL_CATCH_STRINGIZE(TmplList) \" - \" + std::to_string(index), Tags } ), index++)... };/* NOLINT */\\","            }                                                     \\","        };\\","        static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){ \\","                using TestInit = typename convert\u003cTestName, TmplList\u003e::type; \\","                TestInit t;                                           \\","                t.reg_tests();                                        \\","                return 0;                                             \\","            }();                                                      \\","        }}\\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION                       \\","        template\u003ctypename TestType\u003e                                   \\","        static void TestFunc()","","    #define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE(Name, Tags, TmplList) \\","        INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), Name, Tags, TmplList )","","","    #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( TestNameClass, TestName, ClassName, Name, Tags, Signature, ... ) \\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\","        namespace {\\","        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName){ \\","            INTERNAL_CATCH_TYPE_GEN\\","            INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\\","            INTERNAL_CATCH_DECLARE_SIG_TEST_METHOD(TestName, ClassName, INTERNAL_CATCH_REMOVE_PARENS(Signature));\\","            INTERNAL_CATCH_NTTP_REG_METHOD_GEN(TestName, INTERNAL_CATCH_REMOVE_PARENS(Signature))\\","            template\u003ctypename...Types\u003e \\","            struct TestNameClass{\\","                TestNameClass(){\\","                    size_t index = 0;                                    \\","                    constexpr char const* tmpl_types[] = {CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, __VA_ARGS__)};\\","                    using expander = size_t[];\\","                    (void)expander{(reg_test(Types{}, #ClassName, Catch::NameAndTags{ Name \" - \" + std::string(tmpl_types[index]), Tags } ), index++)... };/* NOLINT */ \\","                }\\","            };\\","            static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){\\","                TestNameClass\u003cINTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(__VA_ARGS__)\u003e();\\","                return 0;\\","        }();\\","        }\\","        }\\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\","        INTERNAL_CATCH_DEFINE_SIG_TEST_METHOD(TestName, INTERNAL_CATCH_REMOVE_PARENS(Signature))","","#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","    #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( ClassName, Name, Tags,... ) \\","        INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_CLASS_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ) , ClassName, Name, Tags, typename T, __VA_ARGS__ )","#else","    #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( ClassName, Name, Tags,... ) \\","        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_CLASS_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ) , ClassName, Name, Tags, typename T, __VA_ARGS__ ) )","#endif","","#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","    #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( ClassName, Name, Tags, Signature, ... ) \\","        INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_CLASS_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ) , ClassName, Name, Tags, Signature, __VA_ARGS__ )","#else","    #define INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( ClassName, Name, Tags, Signature, ... ) \\","        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_CLASS_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ) , ClassName, Name, Tags, Signature, __VA_ARGS__ ) )","#endif","","    #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2(TestNameClass, TestName, ClassName, Name, Tags, Signature, TmplTypes, TypesList)\\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_ZERO_VARIADIC_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\","        template\u003ctypename TestType\u003e \\","            struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName \u003cTestType\u003e) { \\","                void test();\\","            };\\","        namespace {\\","        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestNameClass) {\\","            INTERNAL_CATCH_TYPE_GEN                  \\","            INTERNAL_CATCH_NTTP_GEN(INTERNAL_CATCH_REMOVE_PARENS(Signature))\\","            template\u003ctypename...Types\u003e\\","            struct TestNameClass{\\","                void reg_tests(){\\","                    std::size_t index = 0;\\","                    using expander = std::size_t[];\\","                    constexpr char const* tmpl_types[] = {CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, INTERNAL_CATCH_REMOVE_PARENS(TmplTypes))};\\","                    constexpr char const* types_list[] = {CATCH_REC_LIST(INTERNAL_CATCH_STRINGIZE_WITHOUT_PARENS, INTERNAL_CATCH_REMOVE_PARENS(TypesList))};\\","                    constexpr auto num_types = sizeof(types_list) / sizeof(types_list[0]);\\","                    (void)expander{(Catch::AutoReg( Catch::makeTestInvoker( \u0026TestName\u003cTypes\u003e::test ), CATCH_INTERNAL_LINEINFO, #ClassName, Catch::NameAndTags{ Name \" - \" + std::string(tmpl_types[index / num_types]) + '\u003c' + std::string(types_list[index % num_types]) + '\u003e', Tags } ), index++)... };/* NOLINT */ \\","                }\\","            };\\","            static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){\\","                using TestInit = typename create\u003cTestNameClass, decltype(get_wrapper\u003cINTERNAL_CATCH_REMOVE_PARENS(TmplTypes)\u003e()), TypeList\u003cINTERNAL_CATCH_MAKE_TYPE_LISTS_FROM_TYPES(INTERNAL_CATCH_REMOVE_PARENS(TypesList))\u003e\u003e::type;\\","                TestInit t;\\","                t.reg_tests();\\","                return 0;\\","            }(); \\","        }\\","        }\\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\","        template\u003ctypename TestType\u003e \\","        void TestName\u003cTestType\u003e::test()","","#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","    #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( ClassName, Name, Tags, ... )\\","        INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), ClassName, Name, Tags, typename T, __VA_ARGS__ )","#else","    #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( ClassName, Name, Tags, ... )\\","        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), ClassName, Name, Tags, typename T,__VA_ARGS__ ) )","#endif","","#ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","    #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( ClassName, Name, Tags, Signature, ... )\\","        INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), ClassName, Name, Tags, Signature, __VA_ARGS__ )","#else","    #define INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( ClassName, Name, Tags, Signature, ... )\\","        INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), ClassName, Name, Tags, Signature,__VA_ARGS__ ) )","#endif","","    #define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2( TestNameClass, TestName, ClassName, Name, Tags, TmplList) \\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_TEMPLATE_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_UNUSED_VARIABLE_WARNINGS \\","        CATCH_INTERNAL_SUPPRESS_COMMA_WARNINGS \\","        template\u003ctypename TestType\u003e \\","        struct TestName : INTERNAL_CATCH_REMOVE_PARENS(ClassName \u003cTestType\u003e) { \\","            void test();\\","        };\\","        namespace {\\","        namespace INTERNAL_CATCH_MAKE_NAMESPACE(TestName){ \\","            INTERNAL_CATCH_TYPE_GEN\\","            template\u003ctypename...Types\u003e\\","            struct TestNameClass{\\","                void reg_tests(){\\","                    size_t index = 0;\\","                    using expander = size_t[];\\","                    (void)expander{(Catch::AutoReg( Catch::makeTestInvoker( \u0026TestName\u003cTypes\u003e::test ), CATCH_INTERNAL_LINEINFO, #ClassName##_catch_sr, Catch::NameAndTags{ Name \" - \" INTERNAL_CATCH_STRINGIZE(TmplList) \" - \" + std::to_string(index), Tags } ), index++)... };/* NOLINT */ \\","                }\\","            };\\","            static int INTERNAL_CATCH_UNIQUE_NAME( globalRegistrar ) = [](){\\","                using TestInit = typename convert\u003cTestNameClass, TmplList\u003e::type;\\","                TestInit t;\\","                t.reg_tests();\\","                return 0;\\","            }(); \\","        }}\\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\","        template\u003ctypename TestType\u003e \\","        void TestName\u003cTestType\u003e::test()","","#define INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD(ClassName, Name, Tags, TmplList) \\","        INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD_2( INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), INTERNAL_CATCH_UNIQUE_NAME( CATCH2_INTERNAL_TEMPLATE_TEST_ ), ClassName, Name, Tags, TmplList )","","","#endif // CATCH_TEMPLATE_TEST_REGISTRY_HPP_INCLUDED","","","#if defined(CATCH_CONFIG_PREFIX_ALL) \u0026\u0026 !defined(CATCH_CONFIG_DISABLE)","","  #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","    #define CATCH_TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ )","    #define CATCH_TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG( __VA_ARGS__ )","    #define CATCH_TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )","    #define CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ )","    #define CATCH_TEMPLATE_PRODUCT_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE( __VA_ARGS__ )","    #define CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( __VA_ARGS__ )","    #define CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, __VA_ARGS__ )","    #define CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ )","    #define CATCH_TEMPLATE_LIST_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE(__VA_ARGS__)","    #define CATCH_TEMPLATE_LIST_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD( className, __VA_ARGS__ )","  #else","    #define CATCH_TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ ) )","    #define CATCH_TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG( __VA_ARGS__ ) )","    #define CATCH_TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ ) )","    #define CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ ) )","    #define CATCH_TEMPLATE_PRODUCT_TEST_CASE( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE( __VA_ARGS__ ) )","    #define CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( __VA_ARGS__ ) )","    #define CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, __VA_ARGS__ ) )","    #define CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ ) )","    #define CATCH_TEMPLATE_LIST_TEST_CASE( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE( __VA_ARGS__ ) )","    #define CATCH_TEMPLATE_LIST_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD( className, __VA_ARGS__ ) )","  #endif","","#elif defined(CATCH_CONFIG_PREFIX_ALL) \u0026\u0026 defined(CATCH_CONFIG_DISABLE)","","  #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","    #define CATCH_TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__)","    #define CATCH_TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__)","    #define CATCH_TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className, __VA_ARGS__)","    #define CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className, __VA_ARGS__ )","  #else","    #define CATCH_TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__) )","    #define CATCH_TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__) )","    #define CATCH_TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className, __VA_ARGS__ ) )","    #define CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className, __VA_ARGS__ ) )","  #endif","","  // When disabled, these can be shared between proper preprocessor and MSVC preprocessor","  #define CATCH_TEMPLATE_PRODUCT_TEST_CASE( ... ) CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ )","  #define CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( ... ) CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ )","  #define CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, ... ) CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )","  #define CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, ... ) CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )","  #define CATCH_TEMPLATE_LIST_TEST_CASE( ... ) CATCH_TEMPLATE_TEST_CASE(__VA_ARGS__)","  #define CATCH_TEMPLATE_LIST_TEST_CASE_METHOD( className, ... ) CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )","","#elif !defined(CATCH_CONFIG_PREFIX_ALL) \u0026\u0026 !defined(CATCH_CONFIG_DISABLE)","","  #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","    #define TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ )","    #define TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG( __VA_ARGS__ )","    #define TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )","    #define TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ )","    #define TEMPLATE_PRODUCT_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE( __VA_ARGS__ )","    #define TEMPLATE_PRODUCT_TEST_CASE_SIG( ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( __VA_ARGS__ )","    #define TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, __VA_ARGS__ )","    #define TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ )","    #define TEMPLATE_LIST_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE(__VA_ARGS__)","    #define TEMPLATE_LIST_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD( className, __VA_ARGS__ )","  #else","    #define TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE( __VA_ARGS__ ) )","    #define TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG( __VA_ARGS__ ) )","    #define TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ ) )","    #define TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ ) )","    #define TEMPLATE_PRODUCT_TEST_CASE( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE( __VA_ARGS__ ) )","    #define TEMPLATE_PRODUCT_TEST_CASE_SIG( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_SIG( __VA_ARGS__ ) )","    #define TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, __VA_ARGS__ ) )","    #define TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, __VA_ARGS__ ) )","    #define TEMPLATE_LIST_TEST_CASE( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE( __VA_ARGS__ ) )","    #define TEMPLATE_LIST_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_LIST_TEST_CASE_METHOD( className, __VA_ARGS__ ) )","  #endif","","#elif !defined(CATCH_CONFIG_PREFIX_ALL) \u0026\u0026 defined(CATCH_CONFIG_DISABLE)","","  #ifndef CATCH_CONFIG_TRADITIONAL_MSVC_PREPROCESSOR","    #define TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__)","    #define TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__)","    #define TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className, __VA_ARGS__)","    #define TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className, __VA_ARGS__ )","  #else","    #define TEMPLATE_TEST_CASE( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_NO_REGISTRATION(__VA_ARGS__) )","    #define TEMPLATE_TEST_CASE_SIG( ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_SIG_NO_REGISTRATION(__VA_ARGS__) )","    #define TEMPLATE_TEST_CASE_METHOD( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_NO_REGISTRATION(className, __VA_ARGS__ ) )","    #define TEMPLATE_TEST_CASE_METHOD_SIG( className, ... ) INTERNAL_CATCH_EXPAND_VARGS( INTERNAL_CATCH_TEMPLATE_TEST_CASE_METHOD_SIG_NO_REGISTRATION(className, __VA_ARGS__ ) )","  #endif","","  // When disabled, these can be shared between proper preprocessor and MSVC preprocessor","  #define TEMPLATE_PRODUCT_TEST_CASE( ... ) TEMPLATE_TEST_CASE( __VA_ARGS__ )","  #define TEMPLATE_PRODUCT_TEST_CASE_SIG( ... ) TEMPLATE_TEST_CASE( __VA_ARGS__ )","  #define TEMPLATE_PRODUCT_TEST_CASE_METHOD( className, ... ) TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )","  #define TEMPLATE_PRODUCT_TEST_CASE_METHOD_SIG( className, ... ) TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )","  #define TEMPLATE_LIST_TEST_CASE( ... ) TEMPLATE_TEST_CASE(__VA_ARGS__)","  #define TEMPLATE_LIST_TEST_CASE_METHOD( className, ... ) TEMPLATE_TEST_CASE_METHOD( className, __VA_ARGS__ )","","#endif // end of user facing macro declarations","","","#endif // CATCH_TEMPLATE_TEST_MACROS_HPP_INCLUDED","","","#ifndef CATCH_TEST_CASE_INFO_HPP_INCLUDED","#define CATCH_TEST_CASE_INFO_HPP_INCLUDED","","","","#include \u003ccstdint\u003e","#include \u003cstring\u003e","#include \u003cvector\u003e","","#ifdef __clang__","#pragma clang diagnostic push","#pragma clang diagnostic ignored \"-Wpadded\"","#endif","","namespace Catch {","","    /**","     * A **view** of a tag string that provides case insensitive comparisons","     *","     * Note that in Catch2 internals, the square brackets around tags are","     * not a part of tag's representation, so e.g. \"[cool-tag]\" is represented","     * as \"cool-tag\" internally.","     */","    struct Tag {","        constexpr Tag(StringRef original_):","            original(original_)","        {}","        StringRef original;","","        friend bool operator\u003c ( Tag const\u0026 lhs, Tag const\u0026 rhs );","        friend bool operator==( Tag const\u0026 lhs, Tag const\u0026 rhs );","    };","","    class ITestInvoker;","    struct NameAndTags;","","    enum class TestCaseProperties : uint8_t {","        None = 0,","        IsHidden = 1 \u003c\u003c 1,","        ShouldFail = 1 \u003c\u003c 2,","        MayFail = 1 \u003c\u003c 3,","        Throws = 1 \u003c\u003c 4,","        NonPortable = 1 \u003c\u003c 5,","        Benchmark = 1 \u003c\u003c 6","    };","","    /**","     * Various metadata about the test case.","     *","     * A test case is uniquely identified by its (class)name and tags","     * combination, with source location being ignored, and other properties","     * being determined from tags.","     *","     * Tags are kept sorted.","     */","    struct TestCaseInfo : Detail::NonCopyable {","","        TestCaseInfo(StringRef _className,","                     NameAndTags const\u0026 _nameAndTags,","                     SourceLineInfo const\u0026 _lineInfo);","","        bool isHidden() const;","        bool throws() const;","        bool okToFail() const;","        bool expectedToFail() const;","","        // Adds the tag(s) with test's filename (for the -# flag)","        void addFilenameTag();","","        //! Orders by name, classname and tags","        friend bool operator\u003c( TestCaseInfo const\u0026 lhs,","                               TestCaseInfo const\u0026 rhs );","","","        std::string tagsAsString() const;","","        std::string name;","        StringRef className;","    private:","        std::string backingTags;","        // Internally we copy tags to the backing storage and then add","        // refs to this storage to the tags vector.","        void internalAppendTag(StringRef tagString);","    public:","        std::vector\u003cTag\u003e tags;","        SourceLineInfo lineInfo;","        TestCaseProperties properties = TestCaseProperties::None;","    };","","    /**","     * Wrapper over the test case information and the test case invoker","     *","     * Does not own either, and is specifically made to be cheap","     * to copy around.","     */","    class TestCaseHandle {","        TestCaseInfo* m_info;","        ITestInvoker* m_invoker;","    public:","        constexpr TestCaseHandle(TestCaseInfo* info, ITestInvoker* invoker) :","            m_info(info), m_invoker(invoker) {}","","        void prepareTestCase() const {","            m_invoker-\u003eprepareTestCase();","        }","","        void tearDownTestCase() const {","            m_invoker-\u003etearDownTestCase();","        }","","        void invoke() const {","            m_invoker-\u003einvoke();","        }","","        constexpr TestCaseInfo const\u0026 getTestCaseInfo() const {","            return *m_info;","        }","    };","","    Detail::unique_ptr\u003cTestCaseInfo\u003e","    makeTestCaseInfo( StringRef className,","                      NameAndTags const\u0026 nameAndTags,","                      SourceLineInfo const\u0026 lineInfo );","}","","#ifdef __clang__","#pragma clang diagnostic pop","#endif","","#endif // CATCH_TEST_CASE_INFO_HPP_INCLUDED","","","#ifndef CATCH_TRANSLATE_EXCEPTION_HPP_INCLUDED","#define CATCH_TRANSLATE_EXCEPTION_HPP_INCLUDED","","","","#ifndef CATCH_INTERFACES_EXCEPTION_HPP_INCLUDED","#define CATCH_INTERFACES_EXCEPTION_HPP_INCLUDED","","","#include \u003cstring\u003e","#include \u003cvector\u003e","","namespace Catch {","    using exceptionTranslateFunction = std::string(*)();","","    class IExceptionTranslator;","    using ExceptionTranslators = std::vector\u003cDetail::unique_ptr\u003cIExceptionTranslator const\u003e\u003e;","","    class IExceptionTranslator {","    public:","        virtual ~IExceptionTranslator(); // = default","        virtual std::string translate( ExceptionTranslators::const_iterator it, ExceptionTranslators::const_iterator itEnd ) const = 0;","    };","","    class IExceptionTranslatorRegistry {","    public:","        virtual ~IExceptionTranslatorRegistry(); // = default","        virtual std::string translateActiveException() const = 0;","    };","","} // namespace Catch","","#endif // CATCH_INTERFACES_EXCEPTION_HPP_INCLUDED","","#include \u003cexception\u003e","","namespace Catch {","    namespace Detail {","        void registerTranslatorImpl(","            Detail::unique_ptr\u003cIExceptionTranslator\u003e\u0026\u0026 translator );","    }","","    class ExceptionTranslatorRegistrar {","        template\u003ctypename T\u003e","        class ExceptionTranslator : public IExceptionTranslator {","        public:","","            constexpr ExceptionTranslator( std::string(*translateFunction)( T const\u0026 ) )","            : m_translateFunction( translateFunction )","            {}","","            std::string translate( ExceptionTranslators::const_iterator it, ExceptionTranslators::const_iterator itEnd ) const override {","#if !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)","                try {","                    if( it == itEnd )","                        std::rethrow_exception(std::current_exception());","                    else","                        return (*it)-\u003etranslate( it+1, itEnd );","                }","                catch( T const\u0026 ex ) {","                    return m_translateFunction( ex );","                }","#else","                return \"You should never get here!\";","#endif","            }","","        protected:","            std::string(*m_translateFunction)( T const\u0026 );","        };","","    public:","        template\u003ctypename T\u003e","        ExceptionTranslatorRegistrar( std::string(*translateFunction)( T const\u0026 ) ) {","            Detail::registerTranslatorImpl(","                Detail::make_unique\u003cExceptionTranslator\u003cT\u003e\u003e(","                    translateFunction ) );","        }","    };","","} // namespace Catch","","///////////////////////////////////////////////////////////////////////////////","#define INTERNAL_CATCH_TRANSLATE_EXCEPTION2( translatorName, signature ) \\","    static std::string translatorName( signature ); \\","    CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS \\","    namespace{ Catch::ExceptionTranslatorRegistrar INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionRegistrar )( \u0026translatorName ); } \\","    CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\","    static std::string translatorName( signature )","","#define INTERNAL_CATCH_TRANSLATE_EXCEPTION( signature ) INTERNAL_CATCH_TRANSLATE_EXCEPTION2( INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionTranslator ), signature )","","#if defined(CATCH_CONFIG_DISABLE)","    #define INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG( translatorName, signature) \\","            static std::string translatorName( signature )","#endif","","","// This macro is always prefixed","#if !defined(CATCH_CONFIG_DISABLE)","#define CATCH_TRANSLATE_EXCEPTION( signature ) INTERNAL_CATCH_TRANSLATE_EXCEPTION( signature )","#else","#define CATCH_TRANSLATE_EXCEPTION( signature ) INTERNAL_CATCH_TRANSLATE_EXCEPTION_NO_REG( INTERNAL_CATCH_UNIQUE_NAME( catch_internal_ExceptionTranslator ), signature )","#endif","","","#endif // CATCH_TRANSLATE_EXCEPTION_HPP_INCLUDED","","","#ifndef CATCH_VERSION_HPP_INCLUDED","#define CATCH_VERSION_HPP_INCLUDED","","#include \u003ciosfwd\u003e","","namespace Catch {","","    // Versioning information","    struct Version {","        Version( Version const\u0026 ) = delete;","        Version\u0026 operator=( Version const\u0026 ) = delete;","        Version(    unsigned int _majorVersion,","                    unsigned int _minorVersion,","                    unsigned int _patchNumber,","                    char const * const _branchName,","                    unsigned int _buildNumber );","","        unsigned int const majorVersion;","        unsigned int const minorVersion;","        unsigned int const patchNumber;","","        // buildNumber is only used if branchName is not null","        char const * const branchName;","        unsigned int const buildNumber;","","        friend std::ostream\u0026 operator \u003c\u003c ( std::ostream\u0026 os, Version const\u0026 version );","    };","","    Version const\u0026 libraryVersion();","}","","#endif // CATCH_VERSION_HPP_INCLUDED","","","#ifndef CATCH_VERSION_MACROS_HPP_INCLUDED","#define CATCH_VERSION_MACROS_HPP_INCLUDED","","#define CATCH_VERSION_MAJOR 3","#define CATCH_VERSION_MINOR 8","#define CATCH_VERSION_PATCH 1","","#endif // CATCH_VERSION_MACROS_HPP_INCLUDED","","","/** \\file"," * This is a convenience header for Catch2's Generator support. It includes"," * **all** of Catch2 headers related to generators."," *"," * Generally the Catch2 users should use specific includes they need,"," * but this header can be used instead for ease-of-experimentation, or"," * just plain convenience, at the cost of (significantly) increased"," * compilation times."," *"," * When a new header is added to either the `generators` folder,"," * or to the corresponding internal subfolder, it should be added here."," */","","#ifndef CATCH_GENERATORS_ALL_HPP_INCLUDED","#define CATCH_GENERATORS_ALL_HPP_INCLUDED","","","","#ifndef CATCH_GENERATOR_EXCEPTION_HPP_INCLUDED","#define CATCH_GENERATOR_EXCEPTION_HPP_INCLUDED","","#include \u003cexception\u003e","","namespace Catch {","","    // Exception type to be thrown when a Generator runs into an error,","    // e.g. it cannot initialize the first return value based on","    // runtime information","    class GeneratorException : public std::exception {","        const char* const m_msg = \"\";","","    public:","        GeneratorException(const char* msg):","            m_msg(msg)","        {}","","        const char* what() const noexcept override final;","    };","","} // end namespace Catch","","#endif // CATCH_GENERATOR_EXCEPTION_HPP_INCLUDED","","","#ifndef CATCH_GENERATORS_HPP_INCLUDED","#define CATCH_GENERATORS_HPP_INCLUDED","","","","#ifndef CATCH_INTERFACES_GENERATORTRACKER_HPP_INCLUDED","#define CATCH_INTERFACES_GENERATORTRACKER_HPP_INCLUDED","","","#include \u003cstring\u003e","","namespace Catch {","","    namespace Generators {","        class GeneratorUntypedBase {","            // Caches result from `toStringImpl`, assume that when it is an","            // empty string, the cache is invalidated.","            mutable std::string m_stringReprCache;","","            // Counts based on `next` returning true","            std::size_t m_currentElementIndex = 0;","","            /**","             * Attempts to move the generator to the next element","             *","             * Returns true iff the move succeeded (and a valid element","             * can be retrieved).","             */","            virtual bool next() = 0;","","            //! Customization point for `currentElementAsString`","            virtual std::string stringifyImpl() const = 0;","","        public:","            GeneratorUntypedBase() = default;","            // Generation of copy ops is deprecated (and Clang will complain)","            // if there is a user destructor defined","            GeneratorUntypedBase(GeneratorUntypedBase const\u0026) = default;","            GeneratorUntypedBase\u0026 operator=(GeneratorUntypedBase const\u0026) = default;","","            virtual ~GeneratorUntypedBase(); // = default;","","            /**","             * Attempts to move the generator to the next element","             *","             * Serves as a non-virtual interface to `next`, so that the","             * top level interface can provide sanity checking and shared","             * features.","             *","             * As with `next`, returns true iff the move succeeded and","             * the generator has new valid element to provide.","             */","            bool countedNext();","","            std::size_t currentElementIndex() const { return m_currentElementIndex; }","","            /**","             * Returns generator's current element as user-friendly string.","             *","             * By default returns string equivalent to calling","             * `Catch::Detail::stringify` on the current element, but generators","             * can customize their implementation as needed.","             *","             * Not thread-safe due to internal caching.","             *","             * The returned ref is valid only until the generator instance","             * is destructed, or it moves onto the next element, whichever","             * comes first.","             */","            StringRef currentElementAsString() const;","        };","        using GeneratorBasePtr = Catch::Detail::unique_ptr\u003cGeneratorUntypedBase\u003e;","","    } // namespace Generators","","    class IGeneratorTracker {","    public:","        virtual ~IGeneratorTracker(); // = default;","        virtual auto hasGenerator() const -\u003e bool = 0;","        virtual auto getGenerator() const -\u003e Generators::GeneratorBasePtr const\u0026 = 0;","        virtual void setGenerator( Generators::GeneratorBasePtr\u0026\u0026 generator ) = 0;","    };","","} // namespace Catch","","#endif // CATCH_INTERFACES_GENERATORTRACKER_HPP_INCLUDED","","#include \u003cvector\u003e","#include \u003ctuple\u003e","","namespace Catch {","","namespace Generators {","","namespace Detail {","","    //! Throws GeneratorException with the provided message","    [[noreturn]]","    void throw_generator_exception(char const * msg);","","} // end namespace detail","","    template\u003ctypename T\u003e","    class IGenerator : public GeneratorUntypedBase {","        std::string stringifyImpl() const override {","            return ::Catch::Detail::stringify( get() );","        }","","    public:","        // Returns the current element of the generator","        //","        // \\Precondition The generator is either freshly constructed,","        // or the last call to `next()` returned true","        virtual T const\u0026 get() const = 0;","        using type = T;","    };","","    template \u003ctypename T\u003e","    using GeneratorPtr = Catch::Detail::unique_ptr\u003cIGenerator\u003cT\u003e\u003e;","","    template \u003ctypename T\u003e","    class GeneratorWrapper final {","        GeneratorPtr\u003cT\u003e m_generator;","    public:","        //! Takes ownership of the passed pointer.","        GeneratorWrapper(IGenerator\u003cT\u003e* generator):","            m_generator(generator) {}","        GeneratorWrapper(GeneratorPtr\u003cT\u003e generator):","            m_generator(CATCH_MOVE(generator)) {}","","        T const\u0026 get() const {","            return m_generator-\u003eget();","        }","        bool next() {","            return m_generator-\u003ecountedNext();","        }","    };","","","    template\u003ctypename T\u003e","    class SingleValueGenerator final : public IGenerator\u003cT\u003e {","        T m_value;","    public:","        SingleValueGenerator(T const\u0026 value) :","            m_value(value)","        {}","        SingleValueGenerator(T\u0026\u0026 value):","            m_value(CATCH_MOVE(value))","        {}","","        T const\u0026 get() const override {","            return m_value;","        }","        bool next() override {","            return false;","        }","    };","","    template\u003ctypename T\u003e","    class FixedValuesGenerator final : public IGenerator\u003cT\u003e {","        static_assert(!std::is_same\u003cT, bool\u003e::value,","            \"FixedValuesGenerator does not support bools because of std::vector\u003cbool\u003e\"","            \"specialization, use SingleValue Generator instead.\");","        std::vector\u003cT\u003e m_values;","        size_t m_idx = 0;","    public:","        FixedValuesGenerator( std::initializer_list\u003cT\u003e values ) : m_values( values ) {}","","        T const\u0026 get() const override {","            return m_values[m_idx];","        }","        bool next() override {","            ++m_idx;","            return m_idx \u003c m_values.size();","        }","    };","","    template \u003ctypename T, typename DecayedT = std::decay_t\u003cT\u003e\u003e","    GeneratorWrapper\u003cDecayedT\u003e value( T\u0026\u0026 value ) {","        return GeneratorWrapper\u003cDecayedT\u003e(","            Catch::Detail::make_unique\u003cSingleValueGenerator\u003cDecayedT\u003e\u003e(","                CATCH_FORWARD( value ) ) );","    }","    template \u003ctypename T\u003e","    GeneratorWrapper\u003cT\u003e values(std::initializer_list\u003cT\u003e values) {","        return GeneratorWrapper\u003cT\u003e(Catch::Detail::make_unique\u003cFixedValuesGenerator\u003cT\u003e\u003e(values));","    }","","    template\u003ctypename T\u003e","    class Generators : public IGenerator\u003cT\u003e {","        std::vector\u003cGeneratorWrapper\u003cT\u003e\u003e m_generators;","        size_t m_current = 0;","","        void add_generator( GeneratorWrapper\u003cT\u003e\u0026\u0026 generator ) {","            m_generators.emplace_back( CATCH_MOVE( generator ) );","        }","        void add_generator( T const\u0026 val ) {","            m_generators.emplace_back( value( val ) );","        }","        void add_generator( T\u0026\u0026 val ) {","            m_generators.emplace_back( value( CATCH_MOVE( val ) ) );","        }","        template \u003ctypename U\u003e","        std::enable_if_t\u003c!std::is_same\u003cstd::decay_t\u003cU\u003e, T\u003e::value\u003e","        add_generator( U\u0026\u0026 val ) {","            add_generator( T( CATCH_FORWARD( val ) ) );","        }","","        template \u003ctypename U\u003e void add_generators( U\u0026\u0026 valueOrGenerator ) {","            add_generator( CATCH_FORWARD( valueOrGenerator ) );","        }","","        template \u003ctypename U, typename... Gs\u003e","        void add_generators( U\u0026\u0026 valueOrGenerator, Gs\u0026\u0026... moreGenerators ) {","            add_generator( CATCH_FORWARD( valueOrGenerator ) );","            add_generators( CATCH_FORWARD( moreGenerators )... );","        }","","    public:","        template \u003ctypename... Gs\u003e","        Generators(Gs \u0026\u0026... moreGenerators) {","            m_generators.reserve(sizeof...(Gs));","            add_generators(CATCH_FORWARD(moreGenerators)...);","        }","","        T const\u0026 get() const override {","            return m_generators[m_current].get();","        }","","        bool next() override {","            if (m_current \u003e= m_generators.size()) {","                return false;","            }","            const bool current_status = m_generators[m_current].next();","            if (!current_status) {","                ++m_current;","            }","            return m_current \u003c m_generators.size();","        }","    };","","","    template \u003ctypename... Ts\u003e","    GeneratorWrapper\u003cstd::tuple\u003cstd::decay_t\u003cTs\u003e...\u003e\u003e","    table( std::initializer_list\u003cstd::tuple\u003cstd::decay_t\u003cTs\u003e...\u003e\u003e tuples ) {","        return values\u003cstd::tuple\u003cTs...\u003e\u003e( tuples );","    }","","    // Tag type to signal that a generator sequence should convert arguments to a specific type","    template \u003ctypename T\u003e","    struct as {};","","    template\u003ctypename T, typename... Gs\u003e","    auto makeGenerators( GeneratorWrapper\u003cT\u003e\u0026\u0026 generator, Gs \u0026\u0026... moreGenerators ) -\u003e Generators\u003cT\u003e {","        return Generators\u003cT\u003e(CATCH_MOVE(generator), CATCH_FORWARD(moreGenerators)...);","    }","    template\u003ctypename T\u003e","    auto makeGenerators( GeneratorWrapper\u003cT\u003e\u0026\u0026 generator ) -\u003e Generators\u003cT\u003e {","        return Generators\u003cT\u003e(CATCH_MOVE(generator));","    }","    template\u003ctypename T, typename... Gs\u003e","    auto makeGenerators( T\u0026\u0026 val, Gs \u0026\u0026... moreGenerators ) -\u003e Generators\u003cstd::decay_t\u003cT\u003e\u003e {","        return makeGenerators( value( CATCH_FORWARD( val ) ), CATCH_FORWARD( moreGenerators )... );","    }","    template\u003ctypename T, typename U, typename... Gs\u003e","    auto makeGenerators( as\u003cT\u003e, U\u0026\u0026 val, Gs \u0026\u0026... moreGenerators ) -\u003e Generators\u003cT\u003e {","        return makeGenerators( value( T( CATCH_FORWARD( val ) ) ), CATCH_FORWARD( moreGenerators )... );","    }","","    IGeneratorTracker* acquireGeneratorTracker( StringRef generatorName,","                                                SourceLineInfo const\u0026 lineInfo );","    IGeneratorTracker* createGeneratorTracker( StringRef generatorName,","                                               SourceLineInfo lineInfo,","                                               GeneratorBasePtr\u0026\u0026 generator );","","    template\u003ctypename L\u003e","    auto generate( StringRef generatorName, SourceLineInfo const\u0026 lineInfo, L const\u0026 generatorExpression ) -\u003e typename decltype(generatorExpression())::type {","        using UnderlyingType = typename decltype(generatorExpression())::type;","","        IGeneratorTracker* tracker = acquireGeneratorTracker( generatorName, lineInfo );","        // Creation of tracker is delayed after generator creation, so","        // that constructing generator can fail without breaking everything.","        if (!tracker) {","            tracker = createGeneratorTracker(","                generatorName,","                lineInfo,","                Catch::Detail::make_unique\u003cGenerators\u003cUnderlyingType\u003e\u003e(","                    generatorExpression() ) );","        }","","        auto const\u0026 generator = static_cast\u003cIGenerator\u003cUnderlyingType\u003e const\u0026\u003e( *tracker-\u003egetGenerator() );","        return generator.get();","    }","","} // namespace Generators","} // namespace Catch","","#define CATCH_INTERNAL_GENERATOR_STRINGIZE_IMPL( ... ) #__VA_ARGS__##_catch_sr","#define CATCH_INTERNAL_GENERATOR_STRINGIZE(...) CATCH_INTERNAL_GENERATOR_STRINGIZE_IMPL(__VA_ARGS__)","","#define GENERATE( ... ) \\","    Catch::Generators::generate( CATCH_INTERNAL_GENERATOR_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)), \\","                                 CATCH_INTERNAL_LINEINFO, \\","                                 [ ]{ using namespace Catch::Generators; return makeGenerators( __VA_ARGS__ ); } ) //NOLINT(google-build-using-namespace)","#define GENERATE_COPY( ... ) \\","    Catch::Generators::generate( CATCH_INTERNAL_GENERATOR_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)), \\","                                 CATCH_INTERNAL_LINEINFO, \\","                                 [=]{ using namespace Catch::Generators; return makeGenerators( __VA_ARGS__ ); } ) //NOLINT(google-build-using-namespace)","#define GENERATE_REF( ... ) \\","    Catch::Generators::generate( CATCH_INTERNAL_GENERATOR_STRINGIZE(INTERNAL_CATCH_UNIQUE_NAME(generator)), \\","                                 CATCH_INTERNAL_LINEINFO, \\","                                 [\u0026]{ using namespace Catch::Generators; return makeGenerators( __VA_ARGS__ ); } ) //NOLINT(google-build-using-namespace)","","#endif // CATCH_GENERATORS_HPP_INCLUDED","","","#ifndef CATCH_GENERATORS_ADAPTERS_HPP_INCLUDED","#define CATCH_GENERATORS_ADAPTERS_HPP_INCLUDED","","","#include \u003ccassert\u003e","","namespace Catch {","namespace Generators {","","    template \u003ctypename T\u003e","    class TakeGenerator final : public IGenerator\u003cT\u003e {","        GeneratorWrapper\u003cT\u003e m_generator;","        size_t m_returned = 0;","        size_t m_target;","    public:","        TakeGenerator(size_t target, GeneratorWrapper\u003cT\u003e\u0026\u0026 generator):","            m_generator(CATCH_MOVE(generator)),","            m_target(target)","        {","            assert(target != 0 \u0026\u0026 \"Empty generators are not allowed\");","        }","        T const\u0026 get() const override {","            return m_generator.get();","        }","        bool next() override {","            ++m_returned;","            if (m_returned \u003e= m_target) {","                return false;","            }","","            const auto success = m_generator.next();","            // If the underlying generator does not contain enough values","            // then we cut short as well","            if (!success) {","                m_returned = m_target;","            }","            return success;","        }","    };","","    template \u003ctypename T\u003e","    GeneratorWrapper\u003cT\u003e take(size_t target, GeneratorWrapper\u003cT\u003e\u0026\u0026 generator) {","        return GeneratorWrapper\u003cT\u003e(Catch::Detail::make_unique\u003cTakeGenerator\u003cT\u003e\u003e(target, CATCH_MOVE(generator)));","    }","","","    template \u003ctypename T, typename Predicate\u003e","    class FilterGenerator final : public IGenerator\u003cT\u003e {","        GeneratorWrapper\u003cT\u003e m_generator;","        Predicate m_predicate;","    public:","        template \u003ctypename P = Predicate\u003e","        FilterGenerator(P\u0026\u0026 pred, GeneratorWrapper\u003cT\u003e\u0026\u0026 generator):","            m_generator(CATCH_MOVE(generator)),","            m_predicate(CATCH_FORWARD(pred))","        {","            if (!m_predicate(m_generator.get())) {","                // It might happen that there are no values that pass the","                // filter. In that case we throw an exception.","                auto has_initial_value = next();","                if (!has_initial_value) {","                    Detail::throw_generator_exception(\"No valid value found in filtered generator\");","                }","            }","        }","","        T const\u0026 get() const override {","            return m_generator.get();","        }","","        bool next() override {","            bool success = m_generator.next();","            if (!success) {","                return false;","            }","            while (!m_predicate(m_generator.get()) \u0026\u0026 (success = m_generator.next()) == true);","            return success;","        }","    };","","","    template \u003ctypename T, typename Predicate\u003e","    GeneratorWrapper\u003cT\u003e filter(Predicate\u0026\u0026 pred, GeneratorWrapper\u003cT\u003e\u0026\u0026 generator) {","        return GeneratorWrapper\u003cT\u003e(Catch::Detail::make_unique\u003cFilterGenerator\u003cT, Predicate\u003e\u003e(CATCH_FORWARD(pred), CATCH_MOVE(generator)));","    }","","    template \u003ctypename T\u003e","    class RepeatGenerator final : public IGenerator\u003cT\u003e {","        static_assert(!std::is_same\u003cT, bool\u003e::value,","            \"RepeatGenerator currently does not support bools\"","            \"because of std::vector\u003cbool\u003e specialization\");","        GeneratorWrapper\u003cT\u003e m_generator;","        mutable std::vector\u003cT\u003e m_returned;","        size_t m_target_repeats;","        size_t m_current_repeat = 0;","        size_t m_repeat_index = 0;","    public:","        RepeatGenerator(size_t repeats, GeneratorWrapper\u003cT\u003e\u0026\u0026 generator):","            m_generator(CATCH_MOVE(generator)),","            m_target_repeats(repeats)","        {","            assert(m_target_repeats \u003e 0 \u0026\u0026 \"Repeat generator must repeat at least once\");","        }","","        T const\u0026 get() const override {","            if (m_current_repeat == 0) {","                m_returned.push_back(m_generator.get());","                return m_returned.back();","            }","            return m_returned[m_repeat_index];","        }","","        bool next() override {","            // There are 2 basic cases:","            // 1) We are still reading the generator","            // 2) We are reading our own cache","","            // In the first case, we need to poke the underlying generator.","            // If it happily moves, we are left in that state, otherwise it is time to start reading from our cache","            if (m_current_repeat == 0) {","                const auto success = m_generator.next();","                if (!success) {","                    ++m_current_repeat;","                }","                return m_current_repeat \u003c m_target_repeats;","            }","","            // In the second case, we need to move indices forward and check that we haven't run up against the end","            ++m_repeat_index;","            if (m_repeat_index == m_returned.size()) {","                m_repeat_index = 0;","                ++m_current_repeat;","            }","            return m_current_repeat \u003c m_target_repeats;","        }","    };","","    template \u003ctypename T\u003e","    GeneratorWrapper\u003cT\u003e repeat(size_t repeats, GeneratorWrapper\u003cT\u003e\u0026\u0026 generator) {","        return GeneratorWrapper\u003cT\u003e(Catch::Detail::make_unique\u003cRepeatGenerator\u003cT\u003e\u003e(repeats, CATCH_MOVE(generator)));","    }","","    template \u003ctypename T, typename U, typename Func\u003e","    class MapGenerator final : public IGenerator\u003cT\u003e {","        // TBD: provide static assert for mapping function, for friendly error message","        GeneratorWrapper\u003cU\u003e m_generator;","        Func m_function;","        // To avoid returning dangling reference, we have to save the values","        T m_cache;","    public:","        template \u003ctypename F2 = Func\u003e","        MapGenerator(F2\u0026\u0026 function, GeneratorWrapper\u003cU\u003e\u0026\u0026 generator) :","            m_generator(CATCH_MOVE(generator)),","            m_function(CATCH_FORWARD(function)),","            m_cache(m_function(m_generator.get()))","        {}","","        T const\u0026 get() const override {","            return m_cache;","        }","        bool next() override {","            const auto success = m_generator.next();","            if (success) {","                m_cache = m_function(m_generator.get());","            }","            return success;","        }","    };","","    template \u003ctypename Func, typename U, typename T = FunctionReturnType\u003cFunc, U\u003e\u003e","    GeneratorWrapper\u003cT\u003e map(Func\u0026\u0026 function, GeneratorWrapper\u003cU\u003e\u0026\u0026 generator) {","        return GeneratorWrapper\u003cT\u003e(","            Catch::Detail::make_unique\u003cMapGenerator\u003cT, U, Func\u003e\u003e(CATCH_FORWARD(function), CATCH_MOVE(generator))","        );","    }","","    template \u003ctypename T, typename U, typename Func\u003e","    GeneratorWrapper\u003cT\u003e map(Func\u0026\u0026 function, GeneratorWrapper\u003cU\u003e\u0026\u0026 generator) {","        return GeneratorWrapper\u003cT\u003e(","            Catch::Detail::make_unique\u003cMapGenerator\u003cT, U, Func\u003e\u003e(CATCH_FORWARD(function), CATCH_MOVE(generator))","        );","    }","","    template \u003ctypename T\u003e","    class ChunkGenerator final : public IGenerator\u003cstd::vector\u003cT\u003e\u003e {","        std::vector\u003cT\u003e m_chunk;","        size_t m_chunk_size;","        GeneratorWrapper\u003cT\u003e m_generator;","        bool m_used_up = false;","    public:","        ChunkGenerator(size_t size, GeneratorWrapper\u003cT\u003e generator) :","            m_chunk_size(size), m_generator(CATCH_MOVE(generator))","        {","            m_chunk.reserve(m_chunk_size);","            if (m_chunk_size != 0) {","                m_chunk.push_back(m_generator.get());","                for (size_t i = 1; i \u003c m_chunk_size; ++i) {","                    if (!m_generator.next()) {","                        Detail::throw_generator_exception(\"Not enough values to initialize the first chunk\");","                    }","                    m_chunk.push_back(m_generator.get());","                }","            }","        }","        std::vector\u003cT\u003e const\u0026 get() const override {","            return m_chunk;","        }","        bool next() override {","            m_chunk.clear();","            for (size_t idx = 0; idx \u003c m_chunk_size; ++idx) {","                if (!m_generator.next()) {","                    return false;","                }","                m_chunk.push_back(m_generator.get());","            }","            return true;","        }","    };","","    template \u003ctypename T\u003e","    GeneratorWrapper\u003cstd::vector\u003cT\u003e\u003e chunk(size_t size, GeneratorWrapper\u003cT\u003e\u0026\u0026 generator) {","        return GeneratorWrapper\u003cstd::vector\u003cT\u003e\u003e(","            Catch::Detail::make_unique\u003cChunkGenerator\u003cT\u003e\u003e(size, CATCH_MOVE(generator))","        );","    }","","} // namespace Generators","} // namespace Catch","","","#endif // CATCH_GENERATORS_ADAPTERS_HPP_INCLUDED","","","#ifndef CATCH_GENERATORS_RANDOM_HPP_INCLUDED","#define CATCH_GENERATORS_RANDOM_HPP_INCLUDED","","","","#ifndef CATCH_RANDOM_NUMBER_GENERATOR_HPP_INCLUDED","#define CATCH_RANDOM_NUMBER_GENERATOR_HPP_INCLUDED","","#include \u003ccstdint\u003e","","namespace Catch {","","    // This is a simple implementation of C++11 Uniform Random Number","    // Generator. It does not provide all operators, because Catch2","    // does not use it, but it should behave as expected inside stdlib's","    // distributions.","    // The implementation is based on the PCG family (http://pcg-random.org)","    class SimplePcg32 {","        using state_type = std::uint64_t;","    public:","        using result_type = std::uint32_t;","        static constexpr result_type (min)() {","            return 0;","        }","        static constexpr result_type (max)() {","            return static_cast\u003cresult_type\u003e(-1);","        }","","        // Provide some default initial state for the default constructor","        SimplePcg32():SimplePcg32(0xed743cc4U) {}","","        explicit SimplePcg32(result_type seed_);","","        void seed(result_type seed_);","        void discard(uint64_t skip);","","        result_type operator()();","","    private:","        friend bool operator==(SimplePcg32 const\u0026 lhs, SimplePcg32 const\u0026 rhs);","        friend bool operator!=(SimplePcg32 const\u0026 lhs, SimplePcg32 const\u0026 rhs);","","        // In theory we also need operator\u003c\u003c and operator\u003e\u003e","        // In practice we do not use them, so we will skip them for now","","","        std::uint64_t m_state;","        // This part of the state determines which \"stream\" of the numbers","        // is chosen -- we take it as a constant for Catch2, so we only","        // need to deal with seeding the main state.","        // Picked by reading 8 bytes from `/dev/random` :-)","        static const std::uint64_t s_inc = (0x13ed0cc53f939476ULL \u003c\u003c 1ULL) | 1ULL;","    };","","} // end namespace Catch","","#endif // CATCH_RANDOM_NUMBER_GENERATOR_HPP_INCLUDED","","","","#ifndef CATCH_UNIFORM_INTEGER_DISTRIBUTION_HPP_INCLUDED","#define CATCH_UNIFORM_INTEGER_DISTRIBUTION_HPP_INCLUDED","","","","","#ifndef CATCH_RANDOM_INTEGER_HELPERS_HPP_INCLUDED","#define CATCH_RANDOM_INTEGER_HELPERS_HPP_INCLUDED","","#include \u003cclimits\u003e","#include \u003ccstddef\u003e","#include \u003ccstdint\u003e","#include \u003ctype_traits\u003e","","// Note: We use the usual enable-disable-autodetect dance here even though","//       we do not support these in CMake configuration options (yet?).","//       It is highly unlikely that we will need to make these actually","//       user-configurable, but this will make it simpler if weend up needing","//       it, and it provides an escape hatch to the users who need it.","#if defined( __SIZEOF_INT128__ )","#    define CATCH_CONFIG_INTERNAL_UINT128","// Unlike GCC, MSVC does not polyfill umul as mulh + mul pair on ARM machines.","// Currently we do not bother doing this ourselves, but we could if it became","// important for perf.","#elif defined( _MSC_VER ) \u0026\u0026 defined( _M_X64 )","#    define CATCH_CONFIG_INTERNAL_MSVC_UMUL128","#endif","","#if defined( CATCH_CONFIG_INTERNAL_UINT128 ) \u0026\u0026 \\","    !defined( CATCH_CONFIG_NO_UINT128 ) \u0026\u0026      \\","    !defined( CATCH_CONFIG_UINT128 )","#define CATCH_CONFIG_UINT128","#endif","","#if defined( CATCH_CONFIG_INTERNAL_MSVC_UMUL128 ) \u0026\u0026 \\","    !defined( CATCH_CONFIG_NO_MSVC_UMUL128 ) \u0026\u0026      \\","    !defined( CATCH_CONFIG_MSVC_UMUL128 )","#    define CATCH_CONFIG_MSVC_UMUL128","#    include \u003cintrin.h\u003e","#endif","","","namespace Catch {","    namespace Detail {","","        template \u003cstd::size_t\u003e","        struct SizedUnsignedType;","#define SizedUnsignedTypeHelper( TYPE )        \\","    template \u003c\u003e                                \\","    struct SizedUnsignedType\u003csizeof( TYPE )\u003e { \\","        using type = TYPE;                     \\","    }","","        SizedUnsignedTypeHelper( std::uint8_t );","        SizedUnsignedTypeHelper( std::uint16_t );","        SizedUnsignedTypeHelper( std::uint32_t );","        SizedUnsignedTypeHelper( std::uint64_t );","#undef SizedUnsignedTypeHelper","","        template \u003cstd::size_t sz\u003e","        using SizedUnsignedType_t = typename SizedUnsignedType\u003csz\u003e::type;","","        template \u003ctypename T\u003e","        using DoubleWidthUnsignedType_t = SizedUnsignedType_t\u003c2 * sizeof( T )\u003e;","","        template \u003ctypename T\u003e","        struct ExtendedMultResult {","            T upper;","            T lower;","            constexpr bool operator==( ExtendedMultResult const\u0026 rhs ) const {","                return upper == rhs.upper \u0026\u0026 lower == rhs.lower;","            }","        };","","        /**","         * Returns 128 bit result of lhs * rhs using portable C++ code","         *","         * This implementation is almost twice as fast as naive long multiplication,","         * and unlike intrinsic-based approach, it supports constexpr evaluation.","         */","        constexpr ExtendedMultResult\u003cstd::uint64_t\u003e","        extendedMultPortable(std::uint64_t lhs, std::uint64_t rhs) {","#define CarryBits( x ) ( x \u003e\u003e 32 )","#define Digits( x ) ( x \u0026 0xFF'FF'FF'FF )","            std::uint64_t lhs_low = Digits( lhs );","            std::uint64_t rhs_low = Digits( rhs );","            std::uint64_t low_low = ( lhs_low * rhs_low );","            std::uint64_t high_high = CarryBits( lhs ) * CarryBits( rhs );","","            // We add in carry bits from low-low already","            std::uint64_t high_low =","                ( CarryBits( lhs ) * rhs_low ) + CarryBits( low_low );","            // Note that we can add only low bits from high_low, to avoid","            // overflow with large inputs","            std::uint64_t low_high =","                ( lhs_low * CarryBits( rhs ) ) + Digits( high_low );","","            return { high_high + CarryBits( high_low ) + CarryBits( low_high ),","                     ( low_high \u003c\u003c 32 ) | Digits( low_low ) };","#undef CarryBits","#undef Digits","        }","","        //! Returns 128 bit result of lhs * rhs","        inline ExtendedMultResult\u003cstd::uint64_t\u003e","        extendedMult( std::uint64_t lhs, std::uint64_t rhs ) {","#if defined( CATCH_CONFIG_UINT128 )","            auto result = __uint128_t( lhs ) * __uint128_t( rhs );","            return { static_cast\u003cstd::uint64_t\u003e( result \u003e\u003e 64 ),","                     static_cast\u003cstd::uint64_t\u003e( result ) };","#elif defined( CATCH_CONFIG_MSVC_UMUL128 )","            std::uint64_t high;","            std::uint64_t low = _umul128( lhs, rhs, \u0026high );","            return { high, low };","#else","            return extendedMultPortable( lhs, rhs );","#endif","        }","","","        template \u003ctypename UInt\u003e","        constexpr ExtendedMultResult\u003cUInt\u003e extendedMult( UInt lhs, UInt rhs ) {","            static_assert( std::is_unsigned\u003cUInt\u003e::value,","                           \"extendedMult can only handle unsigned integers\" );","            static_assert( sizeof( UInt ) \u003c sizeof( std::uint64_t ),","                           \"Generic extendedMult can only handle types smaller \"","                           \"than uint64_t\" );","            using WideType = DoubleWidthUnsignedType_t\u003cUInt\u003e;","","            auto result = WideType( lhs ) * WideType( rhs );","            return {","                static_cast\u003cUInt\u003e( result \u003e\u003e ( CHAR_BIT * sizeof( UInt ) ) ),","                static_cast\u003cUInt\u003e( result \u0026 UInt( -1 ) ) };","        }","","","        template \u003ctypename TargetType,","                  typename Generator\u003e","            std::enable_if_t\u003csizeof(typename Generator::result_type) \u003e= sizeof(TargetType),","            TargetType\u003e fillBitsFrom(Generator\u0026 gen) {","            using gresult_type = typename Generator::result_type;","            static_assert( std::is_unsigned\u003cTargetType\u003e::value, \"Only unsigned integers are supported\" );","            static_assert( Generator::min() == 0 \u0026\u0026","                           Generator::max() == static_cast\u003cgresult_type\u003e( -1 ),","                           \"Generator must be able to output all numbers in its result type (effectively it must be a random bit generator)\" );","","            // We want to return the top bits from a generator, as they are","            // usually considered higher quality.","            constexpr auto generated_bits = sizeof( gresult_type ) * CHAR_BIT;","            constexpr auto return_bits = sizeof( TargetType ) * CHAR_BIT;","","            return static_cast\u003cTargetType\u003e( gen() \u003e\u003e","                                            ( generated_bits - return_bits) );","        }","","        template \u003ctypename TargetType,","                  typename Generator\u003e","            std::enable_if_t\u003csizeof(typename Generator::result_type) \u003c sizeof(TargetType),","            TargetType\u003e fillBitsFrom(Generator\u0026 gen) {","            using gresult_type = typename Generator::result_type;","            static_assert( std::is_unsigned\u003cTargetType\u003e::value,","                           \"Only unsigned integers are supported\" );","            static_assert( Generator::min() == 0 \u0026\u0026","                           Generator::max() == static_cast\u003cgresult_type\u003e( -1 ),","                           \"Generator must be able to output all numbers in its result type (effectively it must be a random bit generator)\" );","","            constexpr auto generated_bits = sizeof( gresult_type ) * CHAR_BIT;","            constexpr auto return_bits = sizeof( TargetType ) * CHAR_BIT;","            std::size_t filled_bits = 0;","            TargetType ret = 0;","            do {","                ret \u003c\u003c= generated_bits;","                ret |= gen();","                filled_bits += generated_bits;","            } while ( filled_bits \u003c return_bits );","","            return ret;","        }","","        /*","         * Transposes numbers into unsigned type while keeping their ordering","         *","         * This means that signed types are changed so that the ordering is","         * [INT_MIN, ..., -1, 0, ..., INT_MAX], rather than order we would","         * get by simple casting ([0, ..., INT_MAX, INT_MIN, ..., -1])","         */","        template \u003ctypename OriginalType, typename UnsignedType\u003e","        constexpr","        std::enable_if_t\u003cstd::is_signed\u003cOriginalType\u003e::value, UnsignedType\u003e","        transposeToNaturalOrder( UnsignedType in ) {","            static_assert(","                sizeof( OriginalType ) == sizeof( UnsignedType ),","                \"reordering requires the same sized types on both sides\" );","            static_assert( std::is_unsigned\u003cUnsignedType\u003e::value,","                           \"Input type must be unsigned\" );","            // Assuming 2s complement (standardized in current C++), the","            // positive and negative numbers are already internally ordered,","            // and their difference is in the top bit. Swapping it orders","            // them the desired way.","            constexpr auto highest_bit =","                UnsignedType( 1 ) \u003c\u003c ( sizeof( UnsignedType ) * CHAR_BIT - 1 );","            return static_cast\u003cUnsignedType\u003e( in ^ highest_bit );","        }","","","","        template \u003ctypename OriginalType,","                  typename UnsignedType\u003e","        constexpr","        std::enable_if_t\u003cstd::is_unsigned\u003cOriginalType\u003e::value, UnsignedType\u003e","            transposeToNaturalOrder(UnsignedType in) {","            static_assert(","                sizeof( OriginalType ) == sizeof( UnsignedType ),","                \"reordering requires the same sized types on both sides\" );","            static_assert( std::is_unsigned\u003cUnsignedType\u003e::value, \"Input type must be unsigned\" );","            // No reordering is needed for unsigned -\u003e unsigned","            return in;","        }","    } // namespace Detail","} // namespace Catch","","#endif // CATCH_RANDOM_INTEGER_HELPERS_HPP_INCLUDED","","namespace Catch {","","/**"," * Implementation of uniform distribution on integers."," *"," * Unlike `std::uniform_int_distribution`, this implementation supports"," * various 1 byte integral types, including bool (but you should not"," * actually use it for bools)."," *"," * The underlying algorithm is based on the one described in \"Fast Random"," * Integer Generation in an Interval\" by Daniel Lemire, but has been"," * optimized under the assumption of reuse of the same distribution object."," */","template \u003ctypename IntegerType\u003e","class uniform_integer_distribution {","    static_assert(std::is_integral\u003cIntegerType\u003e::value, \"...\");","","    using UnsignedIntegerType = Detail::SizedUnsignedType_t\u003csizeof(IntegerType)\u003e;","","    // Only the left bound is stored, and we store it converted to its","    // unsigned image. This avoids having to do the conversions inside","    // the operator(), at the cost of having to do the conversion in","    // the a() getter. The right bound is only needed in the b() getter,","    // so we recompute it there from other stored data.","    UnsignedIntegerType m_a;","","    // How many different values are there in [a, b]. a == b =\u003e 1, can be 0 for distribution over all values in the type.","    UnsignedIntegerType m_ab_distance;","","    // We hoisted this out of the main generation function. Technically,","    // this means that using this distribution will be slower than Lemire's","    // algorithm if this distribution instance will be used only few times,","    // but it will be faster if it is used many times. Since Catch2 uses","    // distributions only to implement random generators, we assume that each","    // distribution will be reused many times and this is an optimization.","    UnsignedIntegerType m_rejection_threshold = 0;","","    static constexpr UnsignedIntegerType computeDistance(IntegerType a, IntegerType b) {","        // This overflows and returns 0 if a == 0 and b == TYPE_MAX.","        // We handle that later when generating the number.","        return transposeTo(b) - transposeTo(a) + 1;","    }","","    static constexpr UnsignedIntegerType computeRejectionThreshold(UnsignedIntegerType ab_distance) {","        // distance == 0 means that we will return all possible values from","        // the type's range, and that we shouldn't reject anything.","        if ( ab_distance == 0 ) { return 0; }","        return ( ~ab_distance + 1 ) % ab_distance;","    }","","    static constexpr UnsignedIntegerType transposeTo(IntegerType in) {","        return Detail::transposeToNaturalOrder\u003cIntegerType\u003e(","            static_cast\u003cUnsignedIntegerType\u003e( in ) );","    }","    static constexpr IntegerType transposeBack(UnsignedIntegerType in) {","        return static_cast\u003cIntegerType\u003e(","            Detail::transposeToNaturalOrder\u003cIntegerType\u003e(in) );","    }","","public:","    using result_type = IntegerType;","","    constexpr uniform_integer_distribution( IntegerType a, IntegerType b ):","        m_a( transposeTo(a) ),","        m_ab_distance( computeDistance(a, b) ),","        m_rejection_threshold( computeRejectionThreshold(m_ab_distance) ) {","        assert( a \u003c= b );","    }","","    template \u003ctypename Generator\u003e","    constexpr result_type operator()( Generator\u0026 g ) {","        // All possible values of result_type are valid.","        if ( m_ab_distance == 0 ) {","            return transposeBack( Detail::fillBitsFrom\u003cUnsignedIntegerType\u003e( g ) );","        }","","        auto random_number = Detail::fillBitsFrom\u003cUnsignedIntegerType\u003e( g );","        auto emul = Detail::extendedMult( random_number, m_ab_distance );","        // Unlike Lemire's algorithm we skip the ab_distance check, since","        // we precomputed the rejection threshold, which is always tighter.","        while (emul.lower \u003c m_rejection_threshold) {","            random_number = Detail::fillBitsFrom\u003cUnsignedIntegerType\u003e( g );","            emul = Detail::extendedMult( random_number, m_ab_distance );","        }","","        return transposeBack(m_a + emul.upper);","    }","","    constexpr result_type a() const { return transposeBack(m_a); }","    constexpr result_type b() const { return transposeBack(m_ab_distance + m_a - 1); }","};","","} // end namespace Catch","","#endif // CATCH_UNIFORM_INTEGER_DISTRIBUTION_HPP_INCLUDED","","","","#ifndef CATCH_UNIFORM_FLOATING_POINT_DISTRIBUTION_HPP_INCLUDED","#define CATCH_UNIFORM_FLOATING_POINT_DISTRIBUTION_HPP_INCLUDED","","","","","#ifndef CATCH_RANDOM_FLOATING_POINT_HELPERS_HPP_INCLUDED","#define CATCH_RANDOM_FLOATING_POINT_HELPERS_HPP_INCLUDED","","","","#ifndef CATCH_POLYFILLS_HPP_INCLUDED","#define CATCH_POLYFILLS_HPP_INCLUDED","","namespace Catch {","","    bool isnan(float f);","    bool isnan(double d);","","    float nextafter(float x, float y);","    double nextafter(double x, double y);","","}","","#endif // CATCH_POLYFILLS_HPP_INCLUDED","","#include \u003ccassert\u003e","#include \u003ccmath\u003e","#include \u003ccstdint\u003e","#include \u003climits\u003e","#include \u003ctype_traits\u003e","","namespace Catch {","","    namespace Detail {","        /**","         * Returns the largest magnitude of 1-ULP distance inside the [a, b] range.","         *","         * Assumes `a \u003c b`.","         */","        template \u003ctypename FloatType\u003e","        FloatType gamma(FloatType a, FloatType b) {","            static_assert( std::is_floating_point\u003cFloatType\u003e::value,","                           \"gamma returns the largest ULP magnitude within \"","                           \"floating point range [a, b]. This only makes sense \"","                           \"for floating point types\" );","            assert( a \u003c= b );","","            const auto gamma_up = Catch::nextafter( a, std::numeric_limits\u003cFloatType\u003e::infinity() ) - a;","            const auto gamma_down = b - Catch::nextafter( b, -std::numeric_limits\u003cFloatType\u003e::infinity() );","","            return gamma_up \u003c gamma_down ? gamma_down : gamma_up;","        }","","        template \u003ctypename FloatingPoint\u003e","        struct DistanceTypePicker;","        template \u003c\u003e","        struct DistanceTypePicker\u003cfloat\u003e {","            using type = std::uint32_t;","        };","        template \u003c\u003e","        struct DistanceTypePicker\u003cdouble\u003e {","            using type = std::uint64_t;","        };","","        template \u003ctypename T\u003e","        using DistanceType = typename DistanceTypePicker\u003cT\u003e::type;","","#if defined( __GNUC__ ) || defined( __clang__ )","#    pragma GCC diagnostic push","#    pragma GCC diagnostic ignored \"-Wfloat-equal\"","#endif","        /**","         * Computes the number of equi-distant floats in [a, b]","         *","         * Since not every range can be split into equidistant floats","         * exactly, we actually compute ceil(b/distance - a/distance),","         * because in those cases we want to overcount.","         *","         * Uses modified Dekker's FastTwoSum algorithm to handle rounding.","         */","        template \u003ctypename FloatType\u003e","        DistanceType\u003cFloatType\u003e","        count_equidistant_floats( FloatType a, FloatType b, FloatType distance ) {","            assert( a \u003c= b );","            // We get distance as gamma for our uniform float distribution,","            // so this will round perfectly.","            const auto ag = a / distance;","            const auto bg = b / distance;","","            const auto s = bg - ag;","            const auto err = ( std::fabs( a ) \u003c= std::fabs( b ) )","                                 ? -ag - ( s - bg )","                                 : bg - ( s + ag );","            const auto ceil_s = static_cast\u003cDistanceType\u003cFloatType\u003e\u003e( std::ceil( s ) );","","            return ( ceil_s != s ) ? ceil_s : ceil_s + ( err \u003e 0 );","        }","#if defined( __GNUC__ ) || defined( __clang__ )","#    pragma GCC diagnostic pop","#endif","","    }","","} // end namespace Catch","","#endif // CATCH_RANDOM_FLOATING_POINT_HELPERS_HPP_INCLUDED","","#include \u003ccmath\u003e","#include \u003ctype_traits\u003e","","namespace Catch {","","    namespace Detail {","#if defined( __GNUC__ ) || defined( __clang__ )","#    pragma GCC diagnostic push","#    pragma GCC diagnostic ignored \"-Wfloat-equal\"","#endif","        // The issue with overflow only happens with maximal ULP and HUGE","        // distance, e.g. when generating numbers in [-inf, inf] for given","        // type. So we only check for the largest possible ULP in the","        // type, and return something that does not overflow to inf in 1 mult.","        constexpr std::uint64_t calculate_max_steps_in_one_go(double gamma) {","            if ( gamma == 1.99584030953472e+292 ) { return 9007199254740991; }","            return static_cast\u003cstd::uint64_t\u003e( -1 );","        }","        constexpr std::uint32_t calculate_max_steps_in_one_go(float gamma) {","            if ( gamma == 2.028241e+31f ) { return 16777215; }","            return static_cast\u003cstd::uint32_t\u003e( -1 );","        }","#if defined( __GNUC__ ) || defined( __clang__ )","#    pragma GCC diagnostic pop","#endif","    }","","/**"," * Implementation of uniform distribution on floating point numbers."," *"," * Note that we support only `float` and `double` types, because these"," * usually mean the same thing across different platform. `long double`"," * varies wildly by platform and thus we cannot provide reproducible"," * implementation. Also note that we don't implement all parts of"," * distribution per standard: this distribution is not serializable, nor"," * can the range be arbitrarily reset."," *"," * The implementation also uses different approach than the one taken by"," * `std::uniform_real_distribution`, where instead of generating a number"," * between [0, 1) and then multiplying the range bounds with it, we first"," * split the [a, b] range into a set of equidistributed floating point"," * numbers, and then use uniform int distribution to pick which one to"," * return."," *"," * This has the advantage of guaranteeing uniformity (the multiplication"," * method loses uniformity due to rounding when multiplying floats), except"," * for small non-uniformity at one side of the interval, where we have"," * to deal with the fact that not every interval is splittable into"," * equidistributed floats."," *"," * Based on \"Drawing random floating-point numbers from an interval\" by"," * Frederic Goualard."," */","template \u003ctypename FloatType\u003e","class uniform_floating_point_distribution {","    static_assert(std::is_floating_point\u003cFloatType\u003e::value, \"...\");","    static_assert(!std::is_same\u003cFloatType, long double\u003e::value,","                  \"We do not support long double due to inconsistent behaviour between platforms\");","","    using WidthType = Detail::DistanceType\u003cFloatType\u003e;","","    FloatType m_a, m_b;","    FloatType m_ulp_magnitude;","    WidthType m_floats_in_range;","    uniform_integer_distribution\u003cWidthType\u003e m_int_dist;","","    // In specific cases, we can overflow into `inf` when computing the","    // `steps * g` offset. To avoid this, we don't offset by more than this","    // in one multiply + addition.","    WidthType m_max_steps_in_one_go;","    // We don't want to do the magnitude check every call to `operator()`","    bool m_a_has_leq_magnitude;","","public:","    using result_type = FloatType;","","    uniform_floating_point_distribution( FloatType a, FloatType b ):","        m_a( a ),","        m_b( b ),","        m_ulp_magnitude( Detail::gamma( m_a, m_b ) ),","        m_floats_in_range( Detail::count_equidistant_floats( m_a, m_b, m_ulp_magnitude ) ),","        m_int_dist(0, m_floats_in_range),","        m_max_steps_in_one_go( Detail::calculate_max_steps_in_one_go(m_ulp_magnitude)),","        m_a_has_leq_magnitude(std::fabs(m_a) \u003c= std::fabs(m_b))","    {","        assert( a \u003c= b );","    }","","    template \u003ctypename Generator\u003e","    result_type operator()( Generator\u0026 g ) {","        WidthType steps = m_int_dist( g );","        if ( m_a_has_leq_magnitude ) {","            if ( steps == m_floats_in_range ) { return m_a; }","            auto b = m_b;","            while (steps \u003e m_max_steps_in_one_go) {","                b -= m_max_steps_in_one_go * m_ulp_magnitude;","                steps -= m_max_steps_in_one_go;","            }","            return b - steps * m_ulp_magnitude;","        } else {","            if ( steps == m_floats_in_range ) { return m_b; }","            auto a = m_a;","            while (steps \u003e m_max_steps_in_one_go) {","                a += m_max_steps_in_one_go * m_ulp_magnitude;","                steps -= m_max_steps_in_one_go;","            }","            return a + steps * m_ulp_magnitude;","        }","    }","","    result_type a() const { return m_a; }","    result_type b() const { return m_b; }","};","","} // end namespace Catch","","#endif // CATCH_UNIFORM_FLOATING_POINT_DISTRIBUTION_HPP_INCLUDED","","namespace Catch {","namespace Generators {","namespace Detail {","    // Returns a suitable seed for a random floating generator based off","    // the primary internal rng. It does so by taking current value from","    // the rng and returning it as the seed.","    std::uint32_t getSeed();","}","","template \u003ctypename Float\u003e","class RandomFloatingGenerator final : public IGenerator\u003cFloat\u003e {","    Catch::SimplePcg32 m_rng;","    Catch::uniform_floating_point_distribution\u003cFloat\u003e m_dist;","    Float m_current_number;","public:","    RandomFloatingGenerator( Float a, Float b, std::uint32_t seed ):","        m_rng(seed),","        m_dist(a, b) {","        static_cast\u003cvoid\u003e(next());","    }","","    Float const\u0026 get() const override {","        return m_current_number;","    }","    bool next() override {","        m_current_number = m_dist(m_rng);","        return true;","    }","};","","template \u003c\u003e","class RandomFloatingGenerator\u003clong double\u003e final : public IGenerator\u003clong double\u003e {","    // We still rely on \u003crandom\u003e for this specialization, but we don't","    // want to drag it into the header.","    struct PImpl;","    Catch::Detail::unique_ptr\u003cPImpl\u003e m_pimpl;","    long double m_current_number;","","public:","    RandomFloatingGenerator( long double a, long double b, std::uint32_t seed );","","    long double const\u0026 get() const override { return m_current_number; }","    bool next() override;","","    ~RandomFloatingGenerator() override; // = default","};","","template \u003ctypename Integer\u003e","class RandomIntegerGenerator final : public IGenerator\u003cInteger\u003e {","    Catch::SimplePcg32 m_rng;","    Catch::uniform_integer_distribution\u003cInteger\u003e m_dist;","    Integer m_current_number;","public:","    RandomIntegerGenerator( Integer a, Integer b, std::uint32_t seed ):","        m_rng(seed),","        m_dist(a, b) {","        static_cast\u003cvoid\u003e(next());","    }","","    Integer const\u0026 get() const override {","        return m_current_number;","    }","    bool next() override {","        m_current_number = m_dist(m_rng);","        return true;","    }","};","","template \u003ctypename T\u003e","std::enable_if_t\u003cstd::is_integral\u003cT\u003e::value, GeneratorWrapper\u003cT\u003e\u003e","random(T a, T b) {","    return GeneratorWrapper\u003cT\u003e(","        Catch::Detail::make_unique\u003cRandomIntegerGenerator\u003cT\u003e\u003e(a, b, Detail::getSeed())","    );","}","","template \u003ctypename T\u003e","std::enable_if_t\u003cstd::is_floating_point\u003cT\u003e::value,","GeneratorWrapper\u003cT\u003e\u003e","random(T a, T b) {","    return GeneratorWrapper\u003cT\u003e(","        Catch::Detail::make_unique\u003cRandomFloatingGenerator\u003cT\u003e\u003e(a, b, Detail::getSeed())","    );","}","","","} // namespace Generators","} // namespace Catch","","","#endif // CATCH_GENERATORS_RANDOM_HPP_INCLUDED","","","#ifndef CATCH_GENERATORS_RANGE_HPP_INCLUDED","#define CATCH_GENERATORS_RANGE_HPP_INCLUDED","","","#include \u003citerator\u003e","#include \u003ctype_traits\u003e","","namespace Catch {","namespace Generators {","","","template \u003ctypename T\u003e","class RangeGenerator final : public IGenerator\u003cT\u003e {","    T m_current;","    T m_end;","    T m_step;","    bool m_positive;","","public:","    RangeGenerator(T const\u0026 start, T const\u0026 end, T const\u0026 step):","        m_current(start),","        m_end(end),","        m_step(step),","        m_positive(m_step \u003e T(0))","    {","        assert(m_current != m_end \u0026\u0026 \"Range start and end cannot be equal\");","        assert(m_step != T(0) \u0026\u0026 \"Step size cannot be zero\");","        assert(((m_positive \u0026\u0026 m_current \u003c= m_end) || (!m_positive \u0026\u0026 m_current \u003e= m_end)) \u0026\u0026 \"Step moves away from end\");","    }","","    RangeGenerator(T const\u0026 start, T const\u0026 end):","        RangeGenerator(start, end, (start \u003c end) ? T(1) : T(-1))","    {}","","    T const\u0026 get() const override {","        return m_current;","    }","","    bool next() override {","        m_current += m_step;","        return (m_positive) ? (m_current \u003c m_end) : (m_current \u003e m_end);","    }","};","","template \u003ctypename T\u003e","GeneratorWrapper\u003cT\u003e range(T const\u0026 start, T const\u0026 end, T const\u0026 step) {","    static_assert(std::is_arithmetic\u003cT\u003e::value \u0026\u0026 !std::is_same\u003cT, bool\u003e::value, \"Type must be numeric\");","    return GeneratorWrapper\u003cT\u003e(Catch::Detail::make_unique\u003cRangeGenerator\u003cT\u003e\u003e(start, end, step));","}","","template \u003ctypename T\u003e","GeneratorWrapper\u003cT\u003e range(T const\u0026 start, T const\u0026 end) {","    static_assert(std::is_integral\u003cT\u003e::value \u0026\u0026 !std::is_same\u003cT, bool\u003e::value, \"Type must be an integer\");","    return GeneratorWrapper\u003cT\u003e(Catch::Detail::make_unique\u003cRangeGenerator\u003cT\u003e\u003e(start, end));","}","","","template \u003ctypename T\u003e","class IteratorGenerator final : public IGenerator\u003cT\u003e {","    static_assert(!std::is_same\u003cT, bool\u003e::value,","        \"IteratorGenerator currently does not support bools\"","        \"because of std::vector\u003cbool\u003e specialization\");","","    std::vector\u003cT\u003e m_elems;","    size_t m_current = 0;","public:","    template \u003ctypename InputIterator, typename InputSentinel\u003e","    IteratorGenerator(InputIterator first, InputSentinel last):m_elems(first, last) {","        if (m_elems.empty()) {","            Detail::throw_generator_exception(\"IteratorGenerator received no valid values\");","        }","    }","","    T const\u0026 get() const override {","        return m_elems[m_current];","    }","","    bool next() override {","        ++m_current;","        return m_current != m_elems.size();","    }","};","","template \u003ctypename InputIterator,","          typename InputSentinel,","          typename ResultType = std::remove_const_t\u003ctypename std::iterator_traits\u003cInputIterator\u003e::value_type\u003e\u003e","GeneratorWrapper\u003cResultType\u003e from_range(InputIterator from, InputSentinel to) {","    return GeneratorWrapper\u003cResultType\u003e(Catch::Detail::make_unique\u003cIteratorGenerator\u003cResultType\u003e\u003e(from, to));","}","","template \u003ctypename Container\u003e","auto from_range(Container const\u0026 cnt) {","    using std::begin;","    using std::end;","    return from_range( begin( cnt ), end( cnt ) );","}","","","} // namespace Generators","} // namespace Catch","","","#endif // CATCH_GENERATORS_RANGE_HPP_INCLUDED","","#endif // CATCH_GENERATORS_ALL_HPP_INCLUDED","","","/** \\file"," * This is a convenience header for Catch2's interfaces. It includes"," * **all** of Catch2 headers related to interfaces."," *"," * Generally the Catch2 users should use specific includes they need,"," * but this header can be used instead for ease-of-experimentation, or"," * just plain convenience, at the cost of somewhat increased compilation"," * times."," *"," * When a new header is added to either the `interfaces` folder, or to"," * the corresponding internal subfolder, it should be added here."," */","","","#ifndef CATCH_INTERFACES_ALL_HPP_INCLUDED","#define CATCH_INTERFACES_ALL_HPP_INCLUDED","","","","#ifndef CATCH_INTERFACES_REPORTER_HPP_INCLUDED","#define CATCH_INTERFACES_REPORTER_HPP_INCLUDED","","","","#ifndef CATCH_TEST_RUN_INFO_HPP_INCLUDED","#define CATCH_TEST_RUN_INFO_HPP_INCLUDED","","","namespace Catch {","","    struct TestRunInfo {","        constexpr TestRunInfo(StringRef _name) : name(_name) {}","        StringRef name;","    };","","} // end namespace Catch","","#endif // CATCH_TEST_RUN_INFO_HPP_INCLUDED","","#include \u003cmap\u003e","#include \u003cstring\u003e","#include \u003cvector\u003e","#include \u003ciosfwd\u003e","","namespace Catch {","","    struct ReporterDescription;","    struct ListenerDescription;","    struct TagInfo;","    struct TestCaseInfo;","    class TestCaseHandle;","    class IConfig;","    class IStream;","    enum class ColourMode : std::uint8_t;","","    struct ReporterConfig {","        ReporterConfig( IConfig const* _fullConfig,","                        Detail::unique_ptr\u003cIStream\u003e _stream,","                        ColourMode colourMode,","                        std::map\u003cstd::string, std::string\u003e customOptions );","","        ReporterConfig( ReporterConfig\u0026\u0026 ) = default;","        ReporterConfig\u0026 operator=( ReporterConfig\u0026\u0026 ) = default;","        ~ReporterConfig(); // = default","","        Detail::unique_ptr\u003cIStream\u003e takeStream() \u0026\u0026;","        IConfig const* fullConfig() const;","        ColourMode colourMode() const;","        std::map\u003cstd::string, std::string\u003e const\u0026 customOptions() const;","","    private:","        Detail::unique_ptr\u003cIStream\u003e m_stream;","        IConfig const* m_fullConfig;","        ColourMode m_colourMode;","        std::map\u003cstd::string, std::string\u003e m_customOptions;","    };","","    struct AssertionStats {","        AssertionStats( AssertionResult const\u0026 _assertionResult,","                        std::vector\u003cMessageInfo\u003e const\u0026 _infoMessages,","                        Totals const\u0026 _totals );","","        AssertionStats( AssertionStats const\u0026 )              = default;","        AssertionStats( AssertionStats \u0026\u0026 )                  = default;","        AssertionStats\u0026 operator = ( AssertionStats const\u0026 ) = delete;","        AssertionStats\u0026 operator = ( AssertionStats \u0026\u0026 )     = delete;","","        AssertionResult assertionResult;","        std::vector\u003cMessageInfo\u003e infoMessages;","        Totals totals;","    };","","    struct SectionStats {","        SectionStats(   SectionInfo\u0026\u0026 _sectionInfo,","                        Counts const\u0026 _assertions,","                        double _durationInSeconds,","                        bool _missingAssertions );","","        SectionInfo sectionInfo;","        Counts assertions;","        double durationInSeconds;","        bool missingAssertions;","    };","","    struct TestCaseStats {","        TestCaseStats(  TestCaseInfo const\u0026 _testInfo,","                        Totals const\u0026 _totals,","                        std::string\u0026\u0026 _stdOut,","                        std::string\u0026\u0026 _stdErr,","                        bool _aborting );","","        TestCaseInfo const * testInfo;","        Totals totals;","        std::string stdOut;","        std::string stdErr;","        bool aborting;","    };","","    struct TestRunStats {","        TestRunStats(   TestRunInfo const\u0026 _runInfo,","                        Totals const\u0026 _totals,","                        bool _aborting );","","        TestRunInfo runInfo;","        Totals totals;","        bool aborting;","    };","","    //! By setting up its preferences, a reporter can modify Catch2's behaviour","    //! in some regards, e.g. it can request Catch2 to capture writes to","    //! stdout/stderr during test execution, and pass them to the reporter.","    struct ReporterPreferences {","        //! Catch2 should redirect writes to stdout and pass them to the","        //! reporter","        bool shouldRedirectStdOut = false;","        //! Catch2 should call `Reporter::assertionEnded` even for passing","        //! assertions","        bool shouldReportAllAssertions = false;","    };","","    /**","     * The common base for all reporters and event listeners","     *","     * Implementing classes must also implement:","     *","     *     //! User-friendly description of the reporter/listener type","     *     static std::string getDescription()","     *","     * Generally shouldn't be derived from by users of Catch2 directly,","     * instead they should derive from one of the utility bases that","     * derive from this class.","     */","    class IEventListener {","    protected:","        //! Derived classes can set up their preferences here","        ReporterPreferences m_preferences;","        //! The test run's config as filled in from CLI and defaults","        IConfig const* m_config;","","    public:","        IEventListener( IConfig const* config ): m_config( config ) {}","","        virtual ~IEventListener(); // = default;","","        // Implementing class must also provide the following static methods:","        // static std::string getDescription();","","        ReporterPreferences const\u0026 getPreferences() const {","            return m_preferences;","        }","","        //! Called when no test cases match provided test spec","        virtual void noMatchingTestCases( StringRef unmatchedSpec ) = 0;","        //! Called for all invalid test specs from the cli","        virtual void reportInvalidTestSpec( StringRef invalidArgument ) = 0;","","        /**","         * Called once in a testing run before tests are started","         *","         * Not called if tests won't be run (e.g. only listing will happen)","         */","        virtual void testRunStarting( TestRunInfo const\u0026 testRunInfo ) = 0;","","        //! Called _once_ for each TEST_CASE, no matter how many times it is entered","        virtual void testCaseStarting( TestCaseInfo const\u0026 testInfo ) = 0;","        //! Called _every time_ a TEST_CASE is entered, including repeats (due to sections)","        virtual void testCasePartialStarting( TestCaseInfo const\u0026 testInfo, uint64_t partNumber ) = 0;","        //! Called when a `SECTION` is being entered. Not called for skipped sections","        virtual void sectionStarting( SectionInfo const\u0026 sectionInfo ) = 0;","","        //! Called when user-code is being probed before the actual benchmark runs","        virtual void benchmarkPreparing( StringRef benchmarkName ) = 0;","        //! Called after probe but before the user-code is being benchmarked","        virtual void benchmarkStarting( BenchmarkInfo const\u0026 benchmarkInfo ) = 0;","        //! Called with the benchmark results if benchmark successfully finishes","        virtual void benchmarkEnded( BenchmarkStats\u003c\u003e const\u0026 benchmarkStats ) = 0;","        //! Called if running the benchmarks fails for any reason","        virtual void benchmarkFailed( StringRef benchmarkName ) = 0;","","        //! Called before assertion success/failure is evaluated","        virtual void assertionStarting( AssertionInfo const\u0026 assertionInfo ) = 0;","","        //! Called after assertion was fully evaluated","        virtual void assertionEnded( AssertionStats const\u0026 assertionStats ) = 0;","","        //! Called after a `SECTION` has finished running","        virtual void sectionEnded( SectionStats const\u0026 sectionStats ) = 0;","        //! Called _every time_ a TEST_CASE is entered, including repeats (due to sections)","        virtual void testCasePartialEnded(TestCaseStats const\u0026 testCaseStats, uint64_t partNumber ) = 0;","        //! Called _once_ for each TEST_CASE, no matter how many times it is entered","        virtual void testCaseEnded( TestCaseStats const\u0026 testCaseStats ) = 0;","        /**","         * Called once after all tests in a testing run are finished","         *","         * Not called if tests weren't run (e.g. only listings happened)","         */","        virtual void testRunEnded( TestRunStats const\u0026 testRunStats ) = 0;","","        /**","         * Called with test cases that are skipped due to the test run aborting.","         * NOT called for test cases that are explicitly skipped using the `SKIP` macro.","         *","         * Deprecated - will be removed in the next major release.","         */","        virtual void skipTest( TestCaseInfo const\u0026 testInfo ) = 0;","","        //! Called if a fatal error (signal/structured exception) occurred","        virtual void fatalErrorEncountered( StringRef error ) = 0;","","        //! Writes out information about provided reporters using reporter-specific format","        virtual void listReporters(std::vector\u003cReporterDescription\u003e const\u0026 descriptions) = 0;","        //! Writes out the provided listeners descriptions using reporter-specific format","        virtual void listListeners(std::vector\u003cListenerDescription\u003e const\u0026 descriptions) = 0;","        //! Writes out information about provided tests using reporter-specific format","        virtual void listTests(std::vector\u003cTestCaseHandle\u003e const\u0026 tests) = 0;","        //! Writes out information about the provided tags using reporter-specific format","        virtual void listTags(std::vector\u003cTagInfo\u003e const\u0026 tags) = 0;","    };","    using IEventListenerPtr = Detail::unique_ptr\u003cIEventListener\u003e;","","} // end namespace Catch","","#endif // CATCH_INTERFACES_REPORTER_HPP_INCLUDED","","","#ifndef CATCH_INTERFACES_REPORTER_FACTORY_HPP_INCLUDED","#define CATCH_INTERFACES_REPORTER_FACTORY_HPP_INCLUDED","","","#include \u003cstring\u003e","","namespace Catch {","","    struct ReporterConfig;","    class IConfig;","    class IEventListener;","    using IEventListenerPtr = Detail::unique_ptr\u003cIEventListener\u003e;","","","    class IReporterFactory {","    public:","        virtual ~IReporterFactory(); // = default","","        virtual IEventListenerPtr","        create( ReporterConfig\u0026\u0026 config ) const = 0;","        virtual std::string getDescription() const = 0;","    };","    using IReporterFactoryPtr = Detail::unique_ptr\u003cIReporterFactory\u003e;","","    class EventListenerFactory {","    public:","        virtual ~EventListenerFactory(); // = default","        virtual IEventListenerPtr create( IConfig const* config ) const = 0;","        //! Return a meaningful name for the listener, e.g. its type name","        virtual StringRef getName() const = 0;","        //! Return listener's description if available","        virtual std::string getDescription() const = 0;","    };","} // namespace Catch","","#endif // CATCH_INTERFACES_REPORTER_FACTORY_HPP_INCLUDED","","","#ifndef CATCH_INTERFACES_TAG_ALIAS_REGISTRY_HPP_INCLUDED","#define CATCH_INTERFACES_TAG_ALIAS_REGISTRY_HPP_INCLUDED","","#include \u003cstring\u003e","","namespace Catch {","","    struct TagAlias;","","    class ITagAliasRegistry {","    public:","        virtual ~ITagAliasRegistry(); // = default","        // Nullptr if not present","        virtual TagAlias const* find( std::string const\u0026 alias ) const = 0;","        virtual std::string expandAliases( std::string const\u0026 unexpandedTestSpec ) const = 0;","","        static ITagAliasRegistry const\u0026 get();","    };","","} // end namespace Catch","","#endif // CATCH_INTERFACES_TAG_ALIAS_REGISTRY_HPP_INCLUDED","","","#ifndef CATCH_INTERFACES_TESTCASE_HPP_INCLUDED","#define CATCH_INTERFACES_TESTCASE_HPP_INCLUDED","","#include \u003cvector\u003e","","namespace Catch {","","    struct TestCaseInfo;","    class TestCaseHandle;","    class IConfig;","","    class ITestCaseRegistry {","    public:","        virtual ~ITestCaseRegistry(); // = default","        // TODO: this exists only for adding filenames to test cases -- let's expose this in a saner way later","        virtual std::vector\u003cTestCaseInfo* \u003e const\u0026 getAllInfos() const = 0;","        virtual std::vector\u003cTestCaseHandle\u003e const\u0026 getAllTests() const = 0;","        virtual std::vector\u003cTestCaseHandle\u003e const\u0026 getAllTestsSorted( IConfig const\u0026 config ) const = 0;","    };","","}","","#endif // CATCH_INTERFACES_TESTCASE_HPP_INCLUDED","","#endif // CATCH_INTERFACES_ALL_HPP_INCLUDED","","","#ifndef CATCH_CASE_INSENSITIVE_COMPARISONS_HPP_INCLUDED","#define CATCH_CASE_INSENSITIVE_COMPARISONS_HPP_INCLUDED","","","namespace Catch {","    namespace Detail {","        //! Provides case-insensitive `op\u003c` semantics when called","        struct CaseInsensitiveLess {","            bool operator()( StringRef lhs,","                             StringRef rhs ) const;","        };","","        //! Provides case-insensitive `op==` semantics when called","        struct CaseInsensitiveEqualTo {","            bool operator()( StringRef lhs,","                             StringRef rhs ) const;","        };","","    } // namespace Detail","} // namespace Catch","","#endif // CATCH_CASE_INSENSITIVE_COMPARISONS_HPP_INCLUDED","","","","/** \\file"," * Wrapper for ANDROID_LOGWRITE configuration option"," *"," * We want to default to enabling it when compiled for android, but"," * users of the library should also be able to disable it if they want"," * to."," */","","#ifndef CATCH_CONFIG_ANDROID_LOGWRITE_HPP_INCLUDED","#define CATCH_CONFIG_ANDROID_LOGWRITE_HPP_INCLUDED","","","#if defined(__ANDROID__)","#    define CATCH_INTERNAL_CONFIG_ANDROID_LOGWRITE","#endif","","","#if defined( CATCH_INTERNAL_CONFIG_ANDROID_LOGWRITE ) \u0026\u0026 \\","    !defined( CATCH_CONFIG_NO_ANDROID_LOGWRITE ) \u0026\u0026      \\","    !defined( CATCH_CONFIG_ANDROID_LOGWRITE )","#    define CATCH_CONFIG_ANDROID_LOGWRITE","#endif","","#endif // CATCH_CONFIG_ANDROID_LOGWRITE_HPP_INCLUDED","","","","/** \\file"," * Wrapper for UNCAUGHT_EXCEPTIONS configuration option"," *"," * For some functionality, Catch2 requires to know whether there is"," * an active exception. Because `std::uncaught_exception` is deprecated"," * in C++17, we want to use `std::uncaught_exceptions` if possible."," */","","#ifndef CATCH_CONFIG_UNCAUGHT_EXCEPTIONS_HPP_INCLUDED","#define CATCH_CONFIG_UNCAUGHT_EXCEPTIONS_HPP_INCLUDED","","","#if defined(_MSC_VER)","#  if _MSC_VER \u003e= 1900 // Visual Studio 2015 or newer","#    define CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS","#  endif","#endif","","","#include \u003cexception\u003e","","#if defined(__cpp_lib_uncaught_exceptions) \\","    \u0026\u0026 !defined(CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)","","#  define CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS","#endif // __cpp_lib_uncaught_exceptions","","","#if defined(CATCH_INTERNAL_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS) \\","    \u0026\u0026 !defined(CATCH_CONFIG_NO_CPP17_UNCAUGHT_EXCEPTIONS) \\","    \u0026\u0026 !defined(CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)","","#  define CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS","#endif","","","#endif // CATCH_CONFIG_UNCAUGHT_EXCEPTIONS_HPP_INCLUDED","","","#ifndef CATCH_CONSOLE_COLOUR_HPP_INCLUDED","#define CATCH_CONSOLE_COLOUR_HPP_INCLUDED","","","#include \u003ciosfwd\u003e","#include \u003ccstdint\u003e","","namespace Catch {","","    enum class ColourMode : std::uint8_t;","    class IStream;","","    struct Colour {","        enum Code {","            None = 0,","","            White,","            Red,","            Green,","            Blue,","            Cyan,","            Yellow,","            Grey,","","            Bright = 0x10,","","            BrightRed = Bright | Red,","            BrightGreen = Bright | Green,","            LightGrey = Bright | Grey,","            BrightWhite = Bright | White,","            BrightYellow = Bright | Yellow,","","            // By intention","            FileName = LightGrey,","            Warning = BrightYellow,","            ResultError = BrightRed,","            ResultSuccess = BrightGreen,","            ResultExpectedFailure = Warning,","","            Error = BrightRed,","            Success = Green,","            Skip = LightGrey,","","            OriginalExpression = Cyan,","            ReconstructedExpression = BrightYellow,","","            SecondaryText = LightGrey,","            Headers = White","        };","    };","","    class ColourImpl {","    protected:","        //! The associated stream of this ColourImpl instance","        IStream* m_stream;","    public:","        ColourImpl( IStream* stream ): m_stream( stream ) {}","","        //! RAII wrapper around writing specific colour of text using specific","        //! colour impl into a stream.","        class ColourGuard {","            ColourImpl const* m_colourImpl;","            Colour::Code m_code;","            bool m_engaged = false;","","        public:","            //! Does **not** engage the guard/start the colour","            ColourGuard( Colour::Code code,","                         ColourImpl const* colour );","","            ColourGuard( ColourGuard const\u0026 rhs ) = delete;","            ColourGuard\u0026 operator=( ColourGuard const\u0026 rhs ) = delete;","","            ColourGuard( ColourGuard\u0026\u0026 rhs ) noexcept;","            ColourGuard\u0026 operator=( ColourGuard\u0026\u0026 rhs ) noexcept;","","            //! Removes colour _if_ the guard was engaged","            ~ColourGuard();","","            /**","             * Explicitly engages colour for given stream.","             *","             * The API based on operator\u003c\u003c should be preferred.","             */","            ColourGuard\u0026 engage( std::ostream\u0026 stream ) \u0026;","            /**","             * Explicitly engages colour for given stream.","             *","             * The API based on operator\u003c\u003c should be preferred.","             */","            ColourGuard\u0026\u0026 engage( std::ostream\u0026 stream ) \u0026\u0026;","","        private:","            //! Engages the guard and starts using colour","            friend std::ostream\u0026 operator\u003c\u003c( std::ostream\u0026 lhs,","                                             ColourGuard\u0026 guard ) {","                guard.engageImpl( lhs );","                return lhs;","            }","            //! Engages the guard and starts using colour","            friend std::ostream\u0026 operator\u003c\u003c( std::ostream\u0026 lhs,","                                            ColourGuard\u0026\u0026 guard) {","                guard.engageImpl( lhs );","                return lhs;","            }","","            void engageImpl( std::ostream\u0026 stream );","","        };","","        virtual ~ColourImpl(); // = default","        /**","         * Creates a guard object for given colour and this colour impl","         *","         * **Important:**","         * the guard starts disengaged, and has to be engaged explicitly.","         */","        ColourGuard guardColour( Colour::Code colourCode );","","    private:","        virtual void use( Colour::Code colourCode ) const = 0;","    };","","    //! Provides ColourImpl based on global config and target compilation platform","    Detail::unique_ptr\u003cColourImpl\u003e makeColourImpl( ColourMode colourSelection,","                                                   IStream* stream );","","    //! Checks if specific colour impl has been compiled into the binary","    bool isColourImplAvailable( ColourMode colourSelection );","","} // end namespace Catch","","#endif // CATCH_CONSOLE_COLOUR_HPP_INCLUDED","","","#ifndef CATCH_CONSOLE_WIDTH_HPP_INCLUDED","#define CATCH_CONSOLE_WIDTH_HPP_INCLUDED","","// This include must be kept so that user's configured value for CONSOLE_WIDTH","// is used before we attempt to provide a default value","","#ifndef CATCH_CONFIG_CONSOLE_WIDTH","#define CATCH_CONFIG_CONSOLE_WIDTH 80","#endif","","#endif // CATCH_CONSOLE_WIDTH_HPP_INCLUDED","","","#ifndef CATCH_CONTAINER_NONMEMBERS_HPP_INCLUDED","#define CATCH_CONTAINER_NONMEMBERS_HPP_INCLUDED","","","#include \u003ccstddef\u003e","#include \u003cinitializer_list\u003e","","// We want a simple polyfill over `std::empty`, `std::size` and so on","// for C++14 or C++ libraries with incomplete support.","// We also have to handle that MSVC std lib will happily provide these","// under older standards.","#if defined(CATCH_CPP17_OR_GREATER) || defined(_MSC_VER)","","// We are already using this header either way, so there shouldn't","// be much additional overhead in including it to get the feature","// test macros","#include \u003cstring\u003e","","#  if !defined(__cpp_lib_nonmember_container_access)","#      define CATCH_CONFIG_POLYFILL_NONMEMBER_CONTAINER_ACCESS","#  endif","","#else","#define CATCH_CONFIG_POLYFILL_NONMEMBER_CONTAINER_ACCESS","#endif","","","","namespace Catch {","namespace Detail {","","#if defined(CATCH_CONFIG_POLYFILL_NONMEMBER_CONTAINER_ACCESS)","    template \u003ctypename Container\u003e","    constexpr auto empty(Container const\u0026 cont) -\u003e decltype(cont.empty()) {","        return cont.empty();","    }","    template \u003ctypename T, std::size_t N\u003e","    constexpr bool empty(const T (\u0026)[N]) noexcept {","        // GCC \u003c 7 does not support the const T(\u0026)[] parameter syntax","        // so we have to ignore the length explicitly","        (void)N;","        return false;","    }","    template \u003ctypename T\u003e","    constexpr bool empty(std::initializer_list\u003cT\u003e list) noexcept {","        return list.size() \u003e 0;","    }","","","    template \u003ctypename Container\u003e","    constexpr auto size(Container const\u0026 cont) -\u003e decltype(cont.size()) {","        return cont.size();","    }","    template \u003ctypename T, std::size_t N\u003e","    constexpr std::size_t size(const T(\u0026)[N]) noexcept {","        return N;","    }","#endif // CATCH_CONFIG_POLYFILL_NONMEMBER_CONTAINER_ACCESS","","} // end namespace Detail","} // end namespace Catch","","","","#endif // CATCH_CONTAINER_NONMEMBERS_HPP_INCLUDED","","","#ifndef CATCH_DEBUG_CONSOLE_HPP_INCLUDED","#define CATCH_DEBUG_CONSOLE_HPP_INCLUDED","","#include \u003cstring\u003e","","namespace Catch {","    void writeToDebugConsole( std::string const\u0026 text );","}","","#endif // CATCH_DEBUG_CONSOLE_HPP_INCLUDED","","","#ifndef CATCH_DEBUGGER_HPP_INCLUDED","#define CATCH_DEBUGGER_HPP_INCLUDED","","","namespace Catch {","    bool isDebuggerActive();","}","","#ifdef CATCH_PLATFORM_MAC","","    #if defined(__i386__) || defined(__x86_64__)","        #define CATCH_TRAP() __asm__(\"int $3\\n\" : : ) /* NOLINT */","    #elif defined(__aarch64__)","        #define CATCH_TRAP() __asm__(\".inst 0xd43e0000\")","    #elif defined(__POWERPC__)","        #define CATCH_TRAP() __asm__(\"li r0, 20\\nsc\\nnop\\nli r0, 37\\nli r4, 2\\nsc\\nnop\\n\" \\","        : : : \"memory\",\"r0\",\"r3\",\"r4\" ) /* NOLINT */","    #endif","","#elif defined(CATCH_PLATFORM_IPHONE)","","    // use inline assembler","    #if defined(__i386__) || defined(__x86_64__)","        #define CATCH_TRAP()  __asm__(\"int $3\")","    #elif defined(__aarch64__)","        #define CATCH_TRAP()  __asm__(\".inst 0xd4200000\")","    #elif defined(__arm__) \u0026\u0026 !defined(__thumb__)","        #define CATCH_TRAP()  __asm__(\".inst 0xe7f001f0\")","    #elif defined(__arm__) \u0026\u0026  defined(__thumb__)","        #define CATCH_TRAP()  __asm__(\".inst 0xde01\")","    #endif","","#elif defined(CATCH_PLATFORM_LINUX)","    // If we can use inline assembler, do it because this allows us to break","    // directly at the location of the failing check instead of breaking inside","    // raise() called from it, i.e. one stack frame below.","    #if defined(__GNUC__) \u0026\u0026 (defined(__i386) || defined(__x86_64))","        #define CATCH_TRAP() asm volatile (\"int $3\") /* NOLINT */","    #else // Fall back to the generic way.","        #include \u003csignal.h\u003e","","        #define CATCH_TRAP() raise(SIGTRAP)","    #endif","#elif defined(_MSC_VER)","    #define CATCH_TRAP() __debugbreak()","#elif defined(__MINGW32__)","    extern \"C\" __declspec(dllimport) void __stdcall DebugBreak();","    #define CATCH_TRAP() DebugBreak()","#endif","","#ifndef CATCH_BREAK_INTO_DEBUGGER","    #ifdef CATCH_TRAP","        #define CATCH_BREAK_INTO_DEBUGGER() []{ if( Catch::isDebuggerActive() ) { CATCH_TRAP(); } }()","    #else","        #define CATCH_BREAK_INTO_DEBUGGER() []{}()","    #endif","#endif","","#endif // CATCH_DEBUGGER_HPP_INCLUDED","","","#ifndef CATCH_ENFORCE_HPP_INCLUDED","#define CATCH_ENFORCE_HPP_INCLUDED","","","#include \u003cexception\u003e","","namespace Catch {","#if !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)","    template \u003ctypename Ex\u003e","    [[noreturn]]","    void throw_exception(Ex const\u0026 e) {","        throw e;","    }","#else // ^^ Exceptions are enabled //  Exceptions are disabled vv","    [[noreturn]]","    void throw_exception(std::exception const\u0026 e);","#endif","","    [[noreturn]]","    void throw_logic_error(std::string const\u0026 msg);","    [[noreturn]]","    void throw_domain_error(std::string const\u0026 msg);","    [[noreturn]]","    void throw_runtime_error(std::string const\u0026 msg);","","} // namespace Catch;","","#define CATCH_MAKE_MSG(...) \\","    (Catch::ReusableStringStream() \u003c\u003c __VA_ARGS__).str()","","#define CATCH_INTERNAL_ERROR(...) \\","    Catch::throw_logic_error(CATCH_MAKE_MSG( CATCH_INTERNAL_LINEINFO \u003c\u003c \": Internal Catch2 error: \" \u003c\u003c __VA_ARGS__))","","#define CATCH_ERROR(...) \\","    Catch::throw_domain_error(CATCH_MAKE_MSG( __VA_ARGS__ ))","","#define CATCH_RUNTIME_ERROR(...) \\","    Catch::throw_runtime_error(CATCH_MAKE_MSG( __VA_ARGS__ ))","","#define CATCH_ENFORCE( condition, ... ) \\","    do{ if( !(condition) ) CATCH_ERROR( __VA_ARGS__ ); } while(false)","","","#endif // CATCH_ENFORCE_HPP_INCLUDED","","","#ifndef CATCH_ENUM_VALUES_REGISTRY_HPP_INCLUDED","#define CATCH_ENUM_VALUES_REGISTRY_HPP_INCLUDED","","","#include \u003cvector\u003e","","namespace Catch {","","    namespace Detail {","","        Catch::Detail::unique_ptr\u003cEnumInfo\u003e makeEnumInfo( StringRef enumName, StringRef allValueNames, std::vector\u003cint\u003e const\u0026 values );","","        class EnumValuesRegistry : public IMutableEnumValuesRegistry {","","            std::vector\u003cCatch::Detail::unique_ptr\u003cEnumInfo\u003e\u003e m_enumInfos;","","            EnumInfo const\u0026 registerEnum( StringRef enumName, StringRef allValueNames, std::vector\u003cint\u003e const\u0026 values) override;","        };","","        std::vector\u003cStringRef\u003e parseEnums( StringRef enums );","","    } // Detail","","} // Catch","","#endif // CATCH_ENUM_VALUES_REGISTRY_HPP_INCLUDED","","","#ifndef CATCH_ERRNO_GUARD_HPP_INCLUDED","#define CATCH_ERRNO_GUARD_HPP_INCLUDED","","namespace Catch {","","    //! Simple RAII class that stores the value of `errno`","    //! at construction and restores it at destruction.","    class ErrnoGuard {","    public:","        // Keep these outlined to avoid dragging in macros from \u003ccerrno\u003e","","        ErrnoGuard();","        ~ErrnoGuard();","    private:","        int m_oldErrno;","    };","","}","","#endif // CATCH_ERRNO_GUARD_HPP_INCLUDED","","","#ifndef CATCH_EXCEPTION_TRANSLATOR_REGISTRY_HPP_INCLUDED","#define CATCH_EXCEPTION_TRANSLATOR_REGISTRY_HPP_INCLUDED","","","#include \u003cvector\u003e","#include \u003cstring\u003e","","namespace Catch {","","    class ExceptionTranslatorRegistry : public IExceptionTranslatorRegistry {","    public:","        ~ExceptionTranslatorRegistry() override;","        void registerTranslator( Detail::unique_ptr\u003cIExceptionTranslator\u003e\u0026\u0026 translator );","        std::string translateActiveException() const override;","","    private:","        ExceptionTranslators m_translators;","    };","}","","#endif // CATCH_EXCEPTION_TRANSLATOR_REGISTRY_HPP_INCLUDED","","","#ifndef CATCH_FATAL_CONDITION_HANDLER_HPP_INCLUDED","#define CATCH_FATAL_CONDITION_HANDLER_HPP_INCLUDED","","#include \u003ccassert\u003e","","namespace Catch {","","    /**","     * Wrapper for platform-specific fatal error (signals/SEH) handlers","     *","     * Tries to be cooperative with other handlers, and not step over","     * other handlers. This means that unknown structured exceptions","     * are passed on, previous signal handlers are called, and so on.","     *","     * Can only be instantiated once, and assumes that once a signal","     * is caught, the binary will end up terminating. Thus, there","     */","    class FatalConditionHandler {","        bool m_started = false;","","        // Install/disengage implementation for specific platform.","        // Should be if-defed to work on current platform, can assume","        // engage-disengage 1:1 pairing.","        void engage_platform();","        void disengage_platform() noexcept;","    public:","        // Should also have platform-specific implementations as needed","        FatalConditionHandler();","        ~FatalConditionHandler();","","        void engage() {","            assert(!m_started \u0026\u0026 \"Handler cannot be installed twice.\");","            m_started = true;","            engage_platform();","        }","","        void disengage() noexcept {","            assert(m_started \u0026\u0026 \"Handler cannot be uninstalled without being installed first\");","            m_started = false;","            disengage_platform();","        }","    };","","    //! Simple RAII guard for (dis)engaging the FatalConditionHandler","    class FatalConditionHandlerGuard {","        FatalConditionHandler* m_handler;","    public:","        FatalConditionHandlerGuard(FatalConditionHandler* handler):","            m_handler(handler) {","            m_handler-\u003eengage();","        }","        ~FatalConditionHandlerGuard() {","            m_handler-\u003edisengage();","        }","    };","","} // end namespace Catch","","#endif // CATCH_FATAL_CONDITION_HANDLER_HPP_INCLUDED","","","#ifndef CATCH_FLOATING_POINT_HELPERS_HPP_INCLUDED","#define CATCH_FLOATING_POINT_HELPERS_HPP_INCLUDED","","","#include \u003ccassert\u003e","#include \u003ccmath\u003e","#include \u003ccstdint\u003e","#include \u003cutility\u003e","#include \u003climits\u003e","","namespace Catch {","    namespace Detail {","","        uint32_t convertToBits(float f);","        uint64_t convertToBits(double d);","","        // Used when we know we want == comparison of two doubles","        // to centralize warning suppression","        bool directCompare( float lhs, float rhs );","        bool directCompare( double lhs, double rhs );","","    } // end namespace Detail","","","","#if defined( __GNUC__ ) || defined( __clang__ )","#    pragma GCC diagnostic push","    // We do a bunch of direct compensations of floating point numbers,","    // because we know what we are doing and actually do want the direct","    // comparison behaviour.","#    pragma GCC diagnostic ignored \"-Wfloat-equal\"","#endif","","    /**","     * Calculates the ULP distance between two floating point numbers","     *","     * The ULP distance of two floating point numbers is the count of","     * valid floating point numbers representable between them.","     *","     * There are some exceptions between how this function counts the","     * distance, and the interpretation of the standard as implemented.","     * by e.g. `nextafter`. For this function it always holds that:","     * * `(x == y) =\u003e ulpDistance(x, y) == 0` (so `ulpDistance(-0, 0) == 0`)","     * * `ulpDistance(maxFinite, INF) == 1`","     * * `ulpDistance(x, -x) == 2 * ulpDistance(x, 0)`","     *","     * \\pre `!isnan( lhs )`","     * \\pre `!isnan( rhs )`","     * \\pre floating point numbers are represented in IEEE-754 format","     */","    template \u003ctypename FP\u003e","    uint64_t ulpDistance( FP lhs, FP rhs ) {","        assert( std::numeric_limits\u003cFP\u003e::is_iec559 \u0026\u0026","            \"ulpDistance assumes IEEE-754 format for floating point types\" );","        assert( !Catch::isnan( lhs ) \u0026\u0026","                \"Distance between NaN and number is not meaningful\" );","        assert( !Catch::isnan( rhs ) \u0026\u0026","                \"Distance between NaN and number is not meaningful\" );","","        // We want X == Y to imply 0 ULP distance even if X and Y aren't","        // bit-equal (-0 and 0), or X - Y != 0 (same sign infinities).","        if ( lhs == rhs ) { return 0; }","","        // We need a properly typed positive zero for type inference.","        static constexpr FP positive_zero{};","","        // We want to ensure that +/- 0 is always represented as positive zero","        if ( lhs == positive_zero ) { lhs = positive_zero; }","        if ( rhs == positive_zero ) { rhs = positive_zero; }","","        // If arguments have different signs, we can handle them by summing","        // how far are they from 0 each.","        if ( std::signbit( lhs ) != std::signbit( rhs ) ) {","            return ulpDistance( std::abs( lhs ), positive_zero ) +","                   ulpDistance( std::abs( rhs ), positive_zero );","        }","","        // When both lhs and rhs are of the same sign, we can just","        // read the numbers bitwise as integers, and then subtract them","        // (assuming IEEE).","        uint64_t lc = Detail::convertToBits( lhs );","        uint64_t rc = Detail::convertToBits( rhs );","","        // The ulp distance between two numbers is symmetric, so to avoid","        // dealing with overflows we want the bigger converted number on the lhs","        if ( lc \u003c rc ) {","            std::swap( lc, rc );","        }","","        return lc - rc;","    }","","#if defined( __GNUC__ ) || defined( __clang__ )","#    pragma GCC diagnostic pop","#endif","","","} // end namespace Catch","","#endif // CATCH_FLOATING_POINT_HELPERS_HPP_INCLUDED","","","#ifndef CATCH_GETENV_HPP_INCLUDED","#define CATCH_GETENV_HPP_INCLUDED","","namespace Catch {","namespace Detail {","","    //! Wrapper over `std::getenv` that compiles on UWP (and always returns nullptr there)","    char const* getEnv(char const* varName);","","}","}","","#endif // CATCH_GETENV_HPP_INCLUDED","","","#ifndef CATCH_IS_PERMUTATION_HPP_INCLUDED","#define CATCH_IS_PERMUTATION_HPP_INCLUDED","","#include \u003calgorithm\u003e","#include \u003citerator\u003e","","namespace Catch {","    namespace Detail {","","        template \u003ctypename ForwardIter,","                  typename Sentinel,","                  typename T,","                  typename Comparator\u003e","        constexpr","        ForwardIter find_sentinel( ForwardIter start,","                                   Sentinel sentinel,","                                   T const\u0026 value,","                                   Comparator cmp ) {","            while ( start != sentinel ) {","                if ( cmp( *start, value ) ) { break; }","                ++start;","            }","            return start;","        }","","        template \u003ctypename ForwardIter,","                  typename Sentinel,","                  typename T,","                  typename Comparator\u003e","        constexpr","        std::ptrdiff_t count_sentinel( ForwardIter start,","                                       Sentinel sentinel,","                                       T const\u0026 value,","                                       Comparator cmp ) {","            std::ptrdiff_t count = 0;","            while ( start != sentinel ) {","                if ( cmp( *start, value ) ) { ++count; }","                ++start;","            }","            return count;","        }","","        template \u003ctypename ForwardIter, typename Sentinel\u003e","        constexpr","        std::enable_if_t\u003c!std::is_same\u003cForwardIter, Sentinel\u003e::value,","                         std::ptrdiff_t\u003e","        sentinel_distance( ForwardIter iter, const Sentinel sentinel ) {","            std::ptrdiff_t dist = 0;","            while ( iter != sentinel ) {","                ++iter;","                ++dist;","            }","            return dist;","        }","","        template \u003ctypename ForwardIter\u003e","        constexpr std::ptrdiff_t sentinel_distance( ForwardIter first,","                                                    ForwardIter last ) {","            return std::distance( first, last );","        }","","        template \u003ctypename ForwardIter1,","                  typename Sentinel1,","                  typename ForwardIter2,","                  typename Sentinel2,","                  typename Comparator\u003e","        constexpr bool check_element_counts( ForwardIter1 first_1,","                                             const Sentinel1 end_1,","                                             ForwardIter2 first_2,","                                             const Sentinel2 end_2,","                                             Comparator cmp ) {","            auto cursor = first_1;","            while ( cursor != end_1 ) {","                if ( find_sentinel( first_1, cursor, *cursor, cmp ) ==","                     cursor ) {","                    // we haven't checked this element yet","                    const auto count_in_range_2 =","                        count_sentinel( first_2, end_2, *cursor, cmp );","                    // Not a single instance in 2nd range, so it cannot be a","                    // permutation of 1st range","                    if ( count_in_range_2 == 0 ) { return false; }","","                    const auto count_in_range_1 =","                        count_sentinel( cursor, end_1, *cursor, cmp );","                    if ( count_in_range_1 != count_in_range_2 ) {","                        return false;","                    }","                }","","                ++cursor;","            }","","            return true;","        }","","        template \u003ctypename ForwardIter1,","                  typename Sentinel1,","                  typename ForwardIter2,","                  typename Sentinel2,","                  typename Comparator\u003e","        constexpr bool is_permutation( ForwardIter1 first_1,","                                       const Sentinel1 end_1,","                                       ForwardIter2 first_2,","                                       const Sentinel2 end_2,","                                       Comparator cmp ) {","            // TODO: no optimization for stronger iterators, because we would also have to constrain on sentinel vs not sentinel types","            // TODO: Comparator has to be \"both sides\", e.g. a == b =\u003e b == a","            // This skips shared prefix of the two ranges","            while (first_1 != end_1 \u0026\u0026 first_2 != end_2 \u0026\u0026 cmp(*first_1, *first_2)) {","                ++first_1;","                ++first_2;","            }","","            // We need to handle case where at least one of the ranges has no more elements","            if (first_1 == end_1 || first_2 == end_2) {","                return first_1 == end_1 \u0026\u0026 first_2 == end_2;","            }","","            // pair counting is n**2, so we pay linear walk to compare the sizes first","            auto dist_1 = sentinel_distance( first_1, end_1 );","            auto dist_2 = sentinel_distance( first_2, end_2 );","","            if (dist_1 != dist_2) { return false; }","","            // Since we do not try to handle stronger iterators pair (e.g.","            // bidir) optimally, the only thing left to do is to check counts in","            // the remaining ranges.","            return check_element_counts( first_1, end_1, first_2, end_2, cmp );","        }","","    } // namespace Detail","} // namespace Catch","","#endif // CATCH_IS_PERMUTATION_HPP_INCLUDED","","","#ifndef CATCH_ISTREAM_HPP_INCLUDED","#define CATCH_ISTREAM_HPP_INCLUDED","","","#include \u003ciosfwd\u003e","#include \u003ccstddef\u003e","#include \u003costream\u003e","#include \u003cstring\u003e","","namespace Catch {","","    class IStream {","    public:","        virtual ~IStream(); // = default","        virtual std::ostream\u0026 stream() = 0;","        /**","         * Best guess on whether the instance is writing to a console (e.g. via stdout/stderr)","         *","         * This is useful for e.g. Win32 colour support, because the Win32","         * API manipulates console directly, unlike POSIX escape codes,","         * that can be written anywhere.","         *","         * Due to variety of ways to change where the stdout/stderr is","         * _actually_ being written, users should always assume that","         * the answer might be wrong.","         */","        virtual bool isConsole() const { return false; }","    };","","    /**","     * Creates a stream wrapper that writes to specific file.","     *","     * Also recognizes 4 special filenames","     * * `-` for stdout","     * * `%stdout` for stdout","     * * `%stderr` for stderr","     * * `%debug` for platform specific debugging output","     *","     * \\throws if passed an unrecognized %-prefixed stream","     */","    auto makeStream( std::string const\u0026 filename ) -\u003e Detail::unique_ptr\u003cIStream\u003e;","","}","","#endif // CATCH_STREAM_HPP_INCLUDED","","","#ifndef CATCH_JSONWRITER_HPP_INCLUDED","#define CATCH_JSONWRITER_HPP_INCLUDED","","","#include \u003ccstdint\u003e","#include \u003csstream\u003e","","namespace Catch {","    class JsonObjectWriter;","    class JsonArrayWriter;","","    struct JsonUtils {","        static void indent( std::ostream\u0026 os, std::uint64_t level );","        static void appendCommaNewline( std::ostream\u0026 os,","                                        bool\u0026 should_comma,","                                        std::uint64_t level );","    };","","    class JsonValueWriter {","    public:","        JsonValueWriter( std::ostream\u0026 os );","        JsonValueWriter( std::ostream\u0026 os, std::uint64_t indent_level );","","        JsonObjectWriter writeObject() \u0026\u0026;","        JsonArrayWriter writeArray() \u0026\u0026;","","        template \u003ctypename T\u003e","        void write( T const\u0026 value ) \u0026\u0026 {","            writeImpl( value, !std::is_arithmetic\u003cT\u003e::value );","        }","        void write( StringRef value ) \u0026\u0026;","        void write( bool value ) \u0026\u0026;","","    private:","        void writeImpl( StringRef value, bool quote );","","        // Without this SFINAE, this overload is a better match","        // for `std::string`, `char const*`, `char const[N]` args.","        // While it would still work, it would cause code bloat","        // and multiple iteration over the strings","        template \u003ctypename T,","                  typename = typename std::enable_if_t\u003c","                      !std::is_convertible\u003cT, StringRef\u003e::value\u003e\u003e","        void writeImpl( T const\u0026 value, bool quote_value ) {","            m_sstream \u003c\u003c value;","            writeImpl( m_sstream.str(), quote_value );","        }","","        std::ostream\u0026 m_os;","        std::stringstream m_sstream;","        std::uint64_t m_indent_level;","    };","","    class JsonObjectWriter {","    public:","        JsonObjectWriter( std::ostream\u0026 os );","        JsonObjectWriter( std::ostream\u0026 os, std::uint64_t indent_level );","","        JsonObjectWriter( JsonObjectWriter\u0026\u0026 source ) noexcept;","        JsonObjectWriter\u0026 operator=( JsonObjectWriter\u0026\u0026 source ) = delete;","","        ~JsonObjectWriter();","","        JsonValueWriter write( StringRef key );","","    private:","        std::ostream\u0026 m_os;","        std::uint64_t m_indent_level;","        bool m_should_comma = false;","        bool m_active = true;","    };","","    class JsonArrayWriter {","    public:","        JsonArrayWriter( std::ostream\u0026 os );","        JsonArrayWriter( std::ostream\u0026 os, std::uint64_t indent_level );","","        JsonArrayWriter( JsonArrayWriter\u0026\u0026 source ) noexcept;","        JsonArrayWriter\u0026 operator=( JsonArrayWriter\u0026\u0026 source ) = delete;","","        ~JsonArrayWriter();","","        JsonObjectWriter writeObject();","        JsonArrayWriter writeArray();","","        template \u003ctypename T\u003e","        JsonArrayWriter\u0026 write( T const\u0026 value ) {","            return writeImpl( value );","        }","","        JsonArrayWriter\u0026 write( bool value );","","    private:","        template \u003ctypename T\u003e","        JsonArrayWriter\u0026 writeImpl( T const\u0026 value ) {","            JsonUtils::appendCommaNewline(","                m_os, m_should_comma, m_indent_level + 1 );","            JsonValueWriter{ m_os }.write( value );","","            return *this;","        }","","        std::ostream\u0026 m_os;","        std::uint64_t m_indent_level;","        bool m_should_comma = false;","        bool m_active = true;","    };","","} // namespace Catch","","#endif // CATCH_JSONWRITER_HPP_INCLUDED","","","#ifndef CATCH_LEAK_DETECTOR_HPP_INCLUDED","#define CATCH_LEAK_DETECTOR_HPP_INCLUDED","","namespace Catch {","","    struct LeakDetector {","        LeakDetector();","        ~LeakDetector();","    };","","}","#endif // CATCH_LEAK_DETECTOR_HPP_INCLUDED","","","#ifndef CATCH_LIST_HPP_INCLUDED","#define CATCH_LIST_HPP_INCLUDED","","","#include \u003cset\u003e","#include \u003cstring\u003e","","","namespace Catch {","","    class IEventListener;","    class Config;","","","    struct ReporterDescription {","        std::string name, description;","    };","    struct ListenerDescription {","        StringRef name;","        std::string description;","    };","","    struct TagInfo {","        void add(StringRef spelling);","        std::string all() const;","","        std::set\u003cStringRef\u003e spellings;","        std::size_t count = 0;","    };","","    bool list( IEventListener\u0026 reporter, Config const\u0026 config );","","} // end namespace Catch","","#endif // CATCH_LIST_HPP_INCLUDED","","","#ifndef CATCH_OUTPUT_REDIRECT_HPP_INCLUDED","#define CATCH_OUTPUT_REDIRECT_HPP_INCLUDED","","","#include \u003ccassert\u003e","#include \u003cstring\u003e","","namespace Catch {","","    class OutputRedirect {","        bool m_redirectActive = false;","        virtual void activateImpl() = 0;","        virtual void deactivateImpl() = 0;","    public:","        enum Kind {","            //! No redirect (noop implementation)","            None,","            //! Redirect std::cout/std::cerr/std::clog streams internally","            Streams,","            //! Redirect the stdout/stderr file descriptors into files","            FileDescriptors,","        };","","        virtual ~OutputRedirect(); // = default;","","        // TODO: Do we want to check that redirect is not active before retrieving the output?","        virtual std::string getStdout() = 0;","        virtual std::string getStderr() = 0;","        virtual void clearBuffers() = 0;","        bool isActive() const { return m_redirectActive; }","        void activate() {","            assert( !m_redirectActive \u0026\u0026 \"redirect is already active\" );","            activateImpl();","            m_redirectActive = true;","        }","        void deactivate() {","            assert( m_redirectActive \u0026\u0026 \"redirect is not active\" );","            deactivateImpl();","            m_redirectActive = false;","        }","    };","","    bool isRedirectAvailable( OutputRedirect::Kind kind);","    Detail::unique_ptr\u003cOutputRedirect\u003e makeOutputRedirect( bool actual );","","    class RedirectGuard {","        OutputRedirect* m_redirect;","        bool m_activate;","        bool m_previouslyActive;","        bool m_moved = false;","","    public:","        RedirectGuard( bool activate, OutputRedirect\u0026 redirectImpl );","        ~RedirectGuard() noexcept( false );","","        RedirectGuard( RedirectGuard const\u0026 ) = delete;","        RedirectGuard\u0026 operator=( RedirectGuard const\u0026 ) = delete;","","        // C++14 needs move-able guards to return them from functions","        RedirectGuard( RedirectGuard\u0026\u0026 rhs ) noexcept;","        RedirectGuard\u0026 operator=( RedirectGuard\u0026\u0026 rhs ) noexcept;","    };","","    RedirectGuard scopedActivate( OutputRedirect\u0026 redirectImpl );","    RedirectGuard scopedDeactivate( OutputRedirect\u0026 redirectImpl );","","} // end namespace Catch","","#endif // CATCH_OUTPUT_REDIRECT_HPP_INCLUDED","","","#ifndef CATCH_PARSE_NUMBERS_HPP_INCLUDED","#define CATCH_PARSE_NUMBERS_HPP_INCLUDED","","","#include \u003cstring\u003e","","namespace Catch {","","    /**","     * Parses unsigned int from the input, using provided base","     *","     * Effectively a wrapper around std::stoul but with better error checking","     * e.g. \"-1\" is rejected, instead of being parsed as UINT_MAX.","     */","    Optional\u003cunsigned int\u003e parseUInt(std::string const\u0026 input, int base = 10);","}","","#endif // CATCH_PARSE_NUMBERS_HPP_INCLUDED","","","#ifndef CATCH_REPORTER_REGISTRY_HPP_INCLUDED","#define CATCH_REPORTER_REGISTRY_HPP_INCLUDED","","","#include \u003cmap\u003e","#include \u003cstring\u003e","#include \u003cvector\u003e","","namespace Catch {","","    class IEventListener;","    using IEventListenerPtr = Detail::unique_ptr\u003cIEventListener\u003e;","    class IReporterFactory;","    using IReporterFactoryPtr = Detail::unique_ptr\u003cIReporterFactory\u003e;","    struct ReporterConfig;","    class EventListenerFactory;","","    class ReporterRegistry {","        struct ReporterRegistryImpl;","        Detail::unique_ptr\u003cReporterRegistryImpl\u003e m_impl;","","    public:","        ReporterRegistry();","        ~ReporterRegistry(); // = default;","","        IEventListenerPtr create( std::string const\u0026 name,","                                  ReporterConfig\u0026\u0026 config ) const;","","        void registerReporter( std::string const\u0026 name,","                               IReporterFactoryPtr factory );","","        void","        registerListener( Detail::unique_ptr\u003cEventListenerFactory\u003e factory );","","        std::map\u003cstd::string,","                 IReporterFactoryPtr,","                 Detail::CaseInsensitiveLess\u003e const\u0026","        getFactories() const;","","        std::vector\u003cDetail::unique_ptr\u003cEventListenerFactory\u003e\u003e const\u0026","        getListeners() const;","    };","","} // end namespace Catch","","#endif // CATCH_REPORTER_REGISTRY_HPP_INCLUDED","","","#ifndef CATCH_RUN_CONTEXT_HPP_INCLUDED","#define CATCH_RUN_CONTEXT_HPP_INCLUDED","","","","#ifndef CATCH_TEST_CASE_TRACKER_HPP_INCLUDED","#define CATCH_TEST_CASE_TRACKER_HPP_INCLUDED","","","#include \u003cstring\u003e","#include \u003cvector\u003e","","namespace Catch {","namespace TestCaseTracking {","","    struct NameAndLocation {","        std::string name;","        SourceLineInfo location;","","        NameAndLocation( std::string\u0026\u0026 _name, SourceLineInfo const\u0026 _location );","        friend bool operator==(NameAndLocation const\u0026 lhs, NameAndLocation const\u0026 rhs) {","            // This is a very cheap check that should have a very high hit rate.","            // If we get to SourceLineInfo::operator==, we will redo it, but the","            // cost of repeating is trivial at that point (we will be paying","            // multiple strcmp/memcmps at that point).","            if ( lhs.location.line != rhs.location.line ) { return false; }","            return lhs.name == rhs.name \u0026\u0026 lhs.location == rhs.location;","        }","        friend bool operator!=(NameAndLocation const\u0026 lhs,","                               NameAndLocation const\u0026 rhs) {","            return !( lhs == rhs );","        }","    };","","    /**","     * This is a variant of `NameAndLocation` that does not own the name string","     *","     * This avoids extra allocations when trying to locate a tracker by its","     * name and location, as long as we make sure that trackers only keep","     * around the owning variant.","     */","    struct NameAndLocationRef {","        StringRef name;","        SourceLineInfo location;","","        constexpr NameAndLocationRef( StringRef name_,","                                      SourceLineInfo location_ ):","            name( name_ ), location( location_ ) {}","","        friend bool operator==( NameAndLocation const\u0026 lhs,","                                NameAndLocationRef const\u0026 rhs ) {","            // This is a very cheap check that should have a very high hit rate.","            // If we get to SourceLineInfo::operator==, we will redo it, but the","            // cost of repeating is trivial at that point (we will be paying","            // multiple strcmp/memcmps at that point).","            if ( lhs.location.line != rhs.location.line ) { return false; }","            return StringRef( lhs.name ) == rhs.name \u0026\u0026","                   lhs.location == rhs.location;","        }","        friend bool operator==( NameAndLocationRef const\u0026 lhs,","                                NameAndLocation const\u0026 rhs ) {","            return rhs == lhs;","        }","    };","","    class ITracker;","","    using ITrackerPtr = Catch::Detail::unique_ptr\u003cITracker\u003e;","","    class ITracker {","        NameAndLocation m_nameAndLocation;","","        using Children = std::vector\u003cITrackerPtr\u003e;","","    protected:","        enum CycleState {","            NotStarted,","            Executing,","            ExecutingChildren,","            NeedsAnotherRun,","            CompletedSuccessfully,","            Failed","        };","","        ITracker* m_parent = nullptr;","        Children m_children;","        CycleState m_runState = NotStarted;","","    public:","        ITracker( NameAndLocation\u0026\u0026 nameAndLoc, ITracker* parent ):","            m_nameAndLocation( CATCH_MOVE(nameAndLoc) ),","            m_parent( parent )","        {}","","","        // static queries","        NameAndLocation const\u0026 nameAndLocation() const {","            return m_nameAndLocation;","        }","        ITracker* parent() const {","            return m_parent;","        }","","        virtual ~ITracker(); // = default","","","        // dynamic queries","","        //! Returns true if tracker run to completion (successfully or not)","        virtual bool isComplete() const = 0;","        //! Returns true if tracker run to completion successfully","        bool isSuccessfullyCompleted() const {","            return m_runState == CompletedSuccessfully;","        }","        //! Returns true if tracker has started but hasn't been completed","        bool isOpen() const;","        //! Returns true iff tracker has started","        bool hasStarted() const;","","        // actions","        virtual void close() = 0; // Successfully complete","        virtual void fail() = 0;","        void markAsNeedingAnotherRun();","","        //! Register a nested ITracker","        void addChild( ITrackerPtr\u0026\u0026 child );","        /**","         * Returns ptr to specific child if register with this tracker.","         *","         * Returns nullptr if not found.","         */","        ITracker* findChild( NameAndLocationRef const\u0026 nameAndLocation );","        //! Have any children been added?","        bool hasChildren() const {","            return !m_children.empty();","        }","","","        //! Marks tracker as executing a child, doing se recursively up the tree","        void openChild();","","        /**","         * Returns true if the instance is a section tracker","         *","         * Subclasses should override to true if they are, replaces RTTI","         * for internal debug checks.","         */","        virtual bool isSectionTracker() const;","        /**","         * Returns true if the instance is a generator tracker","         *","         * Subclasses should override to true if they are, replaces RTTI","         * for internal debug checks.","         */","        virtual bool isGeneratorTracker() const;","    };","","    class TrackerContext {","","        enum RunState {","            NotStarted,","            Executing,","            CompletedCycle","        };","","        ITrackerPtr m_rootTracker;","        ITracker* m_currentTracker = nullptr;","        RunState m_runState = NotStarted;","","    public:","","        ITracker\u0026 startRun();","","        void startCycle() {","            m_currentTracker = m_rootTracker.get();","            m_runState = Executing;","        }","        void completeCycle();","","        bool completedCycle() const;","        ITracker\u0026 currentTracker() { return *m_currentTracker; }","        void setCurrentTracker( ITracker* tracker );","    };","","    class TrackerBase : public ITracker {","    protected:","","        TrackerContext\u0026 m_ctx;","","    public:","        TrackerBase( NameAndLocation\u0026\u0026 nameAndLocation, TrackerContext\u0026 ctx, ITracker* parent );","","        bool isComplete() const override;","","        void open();","","        void close() override;","        void fail() override;","","    private:","        void moveToParent();","        void moveToThis();","    };","","    class SectionTracker : public TrackerBase {","        std::vector\u003cStringRef\u003e m_filters;","        // Note that lifetime-wise we piggy back off the name stored in the `ITracker` parent`.","        // Currently it allocates owns the name, so this is safe. If it is later refactored","        // to not own the name, the name still has to outlive the `ITracker` parent, so","        // this should still be safe.","        StringRef m_trimmed_name;","    public:","        SectionTracker( NameAndLocation\u0026\u0026 nameAndLocation, TrackerContext\u0026 ctx, ITracker* parent );","","        bool isSectionTracker() const override;","","        bool isComplete() const override;","","        static SectionTracker\u0026 acquire( TrackerContext\u0026 ctx, NameAndLocationRef const\u0026 nameAndLocation );","","        void tryOpen();","","        void addInitialFilters( std::vector\u003cstd::string\u003e const\u0026 filters );","        void addNextFilters( std::vector\u003cStringRef\u003e const\u0026 filters );","        //! Returns filters active in this tracker","        std::vector\u003cStringRef\u003e const\u0026 getFilters() const { return m_filters; }","        //! Returns whitespace-trimmed name of the tracked section","        StringRef trimmedName() const;","    };","","} // namespace TestCaseTracking","","using TestCaseTracking::ITracker;","using TestCaseTracking::TrackerContext;","using TestCaseTracking::SectionTracker;","","} // namespace Catch","","#endif // CATCH_TEST_CASE_TRACKER_HPP_INCLUDED","","#include \u003cstring\u003e","","namespace Catch {","","    class IGeneratorTracker;","    class IConfig;","    class IEventListener;","    using IEventListenerPtr = Detail::unique_ptr\u003cIEventListener\u003e;","    class OutputRedirect;","","    ///////////////////////////////////////////////////////////////////////////","","    class RunContext final : public IResultCapture {","","    public:","        RunContext( RunContext const\u0026 ) = delete;","        RunContext\u0026 operator =( RunContext const\u0026 ) = delete;","","        explicit RunContext( IConfig const* _config, IEventListenerPtr\u0026\u0026 reporter );","","        ~RunContext() override;","","        Totals runTest(TestCaseHandle const\u0026 testCase);","","    public: // IResultCapture","","        // Assertion handlers","        void handleExpr","                (   AssertionInfo const\u0026 info,","                    ITransientExpression const\u0026 expr,","                    AssertionReaction\u0026 reaction ) override;","        void handleMessage","                (   AssertionInfo const\u0026 info,","                    ResultWas::OfType resultType,","                    std::string\u0026\u0026 message,","                    AssertionReaction\u0026 reaction ) override;","        void handleUnexpectedExceptionNotThrown","                (   AssertionInfo const\u0026 info,","                    AssertionReaction\u0026 reaction ) override;","        void handleUnexpectedInflightException","                (   AssertionInfo const\u0026 info,","                    std::string\u0026\u0026 message,","                    AssertionReaction\u0026 reaction ) override;","        void handleIncomplete","                (   AssertionInfo const\u0026 info ) override;","        void handleNonExpr","                (   AssertionInfo const \u0026info,","                    ResultWas::OfType resultType,","                    AssertionReaction \u0026reaction ) override;","","        void notifyAssertionStarted( AssertionInfo const\u0026 info ) override;","        bool sectionStarted( StringRef sectionName,","                             SourceLineInfo const\u0026 sectionLineInfo,","                             Counts\u0026 assertions ) override;","","        void sectionEnded( SectionEndInfo\u0026\u0026 endInfo ) override;","        void sectionEndedEarly( SectionEndInfo\u0026\u0026 endInfo ) override;","","        IGeneratorTracker*","        acquireGeneratorTracker( StringRef generatorName,","                                 SourceLineInfo const\u0026 lineInfo ) override;","        IGeneratorTracker* createGeneratorTracker(","            StringRef generatorName,","            SourceLineInfo lineInfo,","            Generators::GeneratorBasePtr\u0026\u0026 generator ) override;","","","        void benchmarkPreparing( StringRef name ) override;","        void benchmarkStarting( BenchmarkInfo const\u0026 info ) override;","        void benchmarkEnded( BenchmarkStats\u003c\u003e const\u0026 stats ) override;","        void benchmarkFailed( StringRef error ) override;","","        void pushScopedMessage( MessageInfo const\u0026 message ) override;","        void popScopedMessage( MessageInfo const\u0026 message ) override;","","        void emplaceUnscopedMessage( MessageBuilder\u0026\u0026 builder ) override;","","        std::string getCurrentTestName() const override;","","        const AssertionResult* getLastResult() const override;","","        void exceptionEarlyReported() override;","","        void handleFatalErrorCondition( StringRef message ) override;","","        bool lastAssertionPassed() override;","","        void assertionPassed() override;","","    public:","        // !TBD We need to do this another way!","        bool aborting() const;","","    private:","","        void runCurrentTest();","        void invokeActiveTestCase();","","        void resetAssertionInfo();","        bool testForMissingAssertions( Counts\u0026 assertions );","","        void assertionEnded( AssertionResult\u0026\u0026 result );","        void reportExpr","                (   AssertionInfo const \u0026info,","                    ResultWas::OfType resultType,","                    ITransientExpression const *expr,","                    bool negated );","","        void populateReaction( AssertionReaction\u0026 reaction );","","    private:","","        void handleUnfinishedSections();","","        TestRunInfo m_runInfo;","        TestCaseHandle const* m_activeTestCase = nullptr;","        ITracker* m_testCaseTracker = nullptr;","        Optional\u003cAssertionResult\u003e m_lastResult;","","        IConfig const* m_config;","        Totals m_totals;","        IEventListenerPtr m_reporter;","        std::vector\u003cMessageInfo\u003e m_messages;","        std::vector\u003cScopedMessage\u003e m_messageScopes; /* Keeps owners of so-called unscoped messages. */","        AssertionInfo m_lastAssertionInfo;","        std::vector\u003cSectionEndInfo\u003e m_unfinishedSections;","        std::vector\u003cITracker*\u003e m_activeSections;","        TrackerContext m_trackerContext;","        Detail::unique_ptr\u003cOutputRedirect\u003e m_outputRedirect;","        FatalConditionHandler m_fatalConditionhandler;","        bool m_lastAssertionPassed = false;","        bool m_shouldReportUnexpected = true;","        bool m_includeSuccessfulResults;","    };","","    void seedRng(IConfig const\u0026 config);","    unsigned int rngSeed();","} // end namespace Catch","","#endif // CATCH_RUN_CONTEXT_HPP_INCLUDED","","","#ifndef CATCH_SHARDING_HPP_INCLUDED","#define CATCH_SHARDING_HPP_INCLUDED","","#include \u003ccassert\u003e","#include \u003ccmath\u003e","#include \u003calgorithm\u003e","","namespace Catch {","","    template\u003ctypename Container\u003e","    Container createShard(Container const\u0026 container, std::size_t const shardCount, std::size_t const shardIndex) {","        assert(shardCount \u003e shardIndex);","","        if (shardCount == 1) {","            return container;","        }","","        const std::size_t totalTestCount = container.size();","","        const std::size_t shardSize = totalTestCount / shardCount;","        const std::size_t leftoverTests = totalTestCount % shardCount;","","        const std::size_t startIndex = shardIndex * shardSize + (std::min)(shardIndex, leftoverTests);","        const std::size_t endIndex = (shardIndex + 1) * shardSize + (std::min)(shardIndex + 1, leftoverTests);","","        auto startIterator = std::next(container.begin(), static_cast\u003cstd::ptrdiff_t\u003e(startIndex));","        auto endIterator = std::next(container.begin(), static_cast\u003cstd::ptrdiff_t\u003e(endIndex));","","        return Container(startIterator, endIterator);","    }","","}","","#endif // CATCH_SHARDING_HPP_INCLUDED","","","#ifndef CATCH_SINGLETONS_HPP_INCLUDED","#define CATCH_SINGLETONS_HPP_INCLUDED","","namespace Catch {","","    struct ISingleton {","        virtual ~ISingleton(); // = default","    };","","","    void addSingleton( ISingleton* singleton );","    void cleanupSingletons();","","","    template\u003ctypename SingletonImplT, typename InterfaceT = SingletonImplT, typename MutableInterfaceT = InterfaceT\u003e","    class Singleton : SingletonImplT, public ISingleton {","","        static auto getInternal() -\u003e Singleton* {","            static Singleton* s_instance = nullptr;","            if( !s_instance ) {","                s_instance = new Singleton;","                addSingleton( s_instance );","            }","            return s_instance;","        }","","    public:","        static auto get() -\u003e InterfaceT const\u0026 {","            return *getInternal();","        }","        static auto getMutable() -\u003e MutableInterfaceT\u0026 {","            return *getInternal();","        }","    };","","} // namespace Catch","","#endif // CATCH_SINGLETONS_HPP_INCLUDED","","","#ifndef CATCH_STARTUP_EXCEPTION_REGISTRY_HPP_INCLUDED","#define CATCH_STARTUP_EXCEPTION_REGISTRY_HPP_INCLUDED","","","#include \u003cvector\u003e","#include \u003cexception\u003e","","namespace Catch {","","    class StartupExceptionRegistry {","#if !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)","    public:","        void add(std::exception_ptr const\u0026 exception) noexcept;","        std::vector\u003cstd::exception_ptr\u003e const\u0026 getExceptions() const noexcept;","    private:","        std::vector\u003cstd::exception_ptr\u003e m_exceptions;","#endif","    };","","} // end namespace Catch","","#endif // CATCH_STARTUP_EXCEPTION_REGISTRY_HPP_INCLUDED","","","","#ifndef CATCH_STDSTREAMS_HPP_INCLUDED","#define CATCH_STDSTREAMS_HPP_INCLUDED","","#include \u003ciosfwd\u003e","","namespace Catch {","","    std::ostream\u0026 cout();","    std::ostream\u0026 cerr();","    std::ostream\u0026 clog();","","} // namespace Catch","","#endif","","","#ifndef CATCH_STRING_MANIP_HPP_INCLUDED","#define CATCH_STRING_MANIP_HPP_INCLUDED","","","#include \u003ccstdint\u003e","#include \u003cstring\u003e","#include \u003ciosfwd\u003e","#include \u003cvector\u003e","","namespace Catch {","","    bool startsWith( std::string const\u0026 s, std::string const\u0026 prefix );","    bool startsWith( StringRef s, char prefix );","    bool endsWith( std::string const\u0026 s, std::string const\u0026 suffix );","    bool endsWith( std::string const\u0026 s, char suffix );","    bool contains( std::string const\u0026 s, std::string const\u0026 infix );","    void toLowerInPlace( std::string\u0026 s );","    std::string toLower( std::string const\u0026 s );","    char toLower( char c );","    //! Returns a new string without whitespace at the start/end","    std::string trim( std::string const\u0026 str );","    //! Returns a substring of the original ref without whitespace. Beware lifetimes!","    StringRef trim(StringRef ref);","","    // !!! Be aware, returns refs into original string - make sure original string outlives them","    std::vector\u003cStringRef\u003e splitStringRef( StringRef str, char delimiter );","    bool replaceInPlace( std::string\u0026 str, std::string const\u0026 replaceThis, std::string const\u0026 withThis );","","    /**","     * Helper for streaming a \"count [maybe-plural-of-label]\" human-friendly string","     *","     * Usage example:","     * ```cpp","     * std::cout \u003c\u003c \"Found \" \u003c\u003c pluralise(count, \"error\") \u003c\u003c '\\n';","     * ```","     *","     * **Important:** The provided string must outlive the instance","     */","    class pluralise {","        std::uint64_t m_count;","        StringRef m_label;","","    public:","        constexpr pluralise(std::uint64_t count, StringRef label):","            m_count(count),","            m_label(label)","        {}","","        friend std::ostream\u0026 operator \u003c\u003c ( std::ostream\u0026 os, pluralise const\u0026 pluraliser );","    };","}","","#endif // CATCH_STRING_MANIP_HPP_INCLUDED","","","#ifndef CATCH_TAG_ALIAS_REGISTRY_HPP_INCLUDED","#define CATCH_TAG_ALIAS_REGISTRY_HPP_INCLUDED","","","#include \u003cmap\u003e","#include \u003cstring\u003e","","namespace Catch {","    struct SourceLineInfo;","","    class TagAliasRegistry : public ITagAliasRegistry {","    public:","        ~TagAliasRegistry() override;","        TagAlias const* find( std::string const\u0026 alias ) const override;","        std::string expandAliases( std::string const\u0026 unexpandedTestSpec ) const override;","        void add( std::string const\u0026 alias, std::string const\u0026 tag, SourceLineInfo const\u0026 lineInfo );","","    private:","        std::map\u003cstd::string, TagAlias\u003e m_registry;","    };","","} // end namespace Catch","","#endif // CATCH_TAG_ALIAS_REGISTRY_HPP_INCLUDED","","","#ifndef CATCH_TEST_CASE_INFO_HASHER_HPP_INCLUDED","#define CATCH_TEST_CASE_INFO_HASHER_HPP_INCLUDED","","#include \u003ccstdint\u003e","","namespace Catch {","","    struct TestCaseInfo;","","    class TestCaseInfoHasher {","    public:","        using hash_t = std::uint64_t;","        TestCaseInfoHasher( hash_t seed );","        uint32_t operator()( TestCaseInfo const\u0026 t ) const;","","    private:","        hash_t m_seed;","    };","","} // namespace Catch","","#endif /* CATCH_TEST_CASE_INFO_HASHER_HPP_INCLUDED */","","","#ifndef CATCH_TEST_CASE_REGISTRY_IMPL_HPP_INCLUDED","#define CATCH_TEST_CASE_REGISTRY_IMPL_HPP_INCLUDED","","","#include \u003cvector\u003e","","namespace Catch {","","    class IConfig;","    class ITestInvoker;","    class TestCaseHandle;","    class TestSpec;","","    std::vector\u003cTestCaseHandle\u003e sortTests( IConfig const\u0026 config, std::vector\u003cTestCaseHandle\u003e const\u0026 unsortedTestCases );","","    bool isThrowSafe( TestCaseHandle const\u0026 testCase, IConfig const\u0026 config );","","    std::vector\u003cTestCaseHandle\u003e filterTests( std::vector\u003cTestCaseHandle\u003e const\u0026 testCases, TestSpec const\u0026 testSpec, IConfig const\u0026 config );","    std::vector\u003cTestCaseHandle\u003e const\u0026 getAllTestCasesSorted( IConfig const\u0026 config );","","    class TestRegistry : public ITestCaseRegistry {","    public:","        void registerTest( Detail::unique_ptr\u003cTestCaseInfo\u003e testInfo, Detail::unique_ptr\u003cITestInvoker\u003e testInvoker );","","        std::vector\u003cTestCaseInfo*\u003e const\u0026 getAllInfos() const override;","        std::vector\u003cTestCaseHandle\u003e const\u0026 getAllTests() const override;","        std::vector\u003cTestCaseHandle\u003e const\u0026 getAllTestsSorted( IConfig const\u0026 config ) const override;","","        ~TestRegistry() override; // = default","","    private:","        std::vector\u003cDetail::unique_ptr\u003cTestCaseInfo\u003e\u003e m_owned_test_infos;","        // Keeps a materialized vector for `getAllInfos`.","        // We should get rid of that eventually (see interface note)","        std::vector\u003cTestCaseInfo*\u003e m_viewed_test_infos;","","        std::vector\u003cDetail::unique_ptr\u003cITestInvoker\u003e\u003e m_invokers;","        std::vector\u003cTestCaseHandle\u003e m_handles;","        mutable TestRunOrder m_currentSortOrder = TestRunOrder::Declared;","        mutable std::vector\u003cTestCaseHandle\u003e m_sortedFunctions;","    };","","    ///////////////////////////////////////////////////////////////////////////","","","} // end namespace Catch","","","#endif // CATCH_TEST_CASE_REGISTRY_IMPL_HPP_INCLUDED","","","#ifndef CATCH_TEST_SPEC_PARSER_HPP_INCLUDED","#define CATCH_TEST_SPEC_PARSER_HPP_INCLUDED","","#ifdef __clang__","#pragma clang diagnostic push","#pragma clang diagnostic ignored \"-Wpadded\"","#endif","","","#include \u003cvector\u003e","#include \u003cstring\u003e","","namespace Catch {","","    class ITagAliasRegistry;","","    class TestSpecParser {","        enum Mode{ None, Name, QuotedName, Tag, EscapedName };","        Mode m_mode = None;","        Mode lastMode = None;","        bool m_exclusion = false;","        std::size_t m_pos = 0;","        std::size_t m_realPatternPos = 0;","        std::string m_arg;","        std::string m_substring;","        std::string m_patternName;","        std::vector\u003cstd::size_t\u003e m_escapeChars;","        TestSpec::Filter m_currentFilter;","        TestSpec m_testSpec;","        ITagAliasRegistry const* m_tagAliases = nullptr;","","    public:","        TestSpecParser( ITagAliasRegistry const\u0026 tagAliases );","","        TestSpecParser\u0026 parse( std::string const\u0026 arg );","        TestSpec testSpec();","","    private:","        bool visitChar( char c );","        void startNewMode( Mode mode );","        bool processNoneChar( char c );","        void processNameChar( char c );","        bool processOtherChar( char c );","        void endMode();","        void escape();","        bool isControlChar( char c ) const;","        void saveLastMode();","        void revertBackToLastMode();","        void addFilter();","        bool separate();","","        // Handles common preprocessing of the pattern for name/tag patterns","        std::string preprocessPattern();","        // Adds the current pattern as a test name","        void addNamePattern();","        // Adds the current pattern as a tag","        void addTagPattern();","","        inline void addCharToPattern(char c) {","            m_substring += c;","            m_patternName += c;","            m_realPatternPos++;","        }","","    };","","} // namespace Catch","","#ifdef __clang__","#pragma clang diagnostic pop","#endif","","#endif // CATCH_TEST_SPEC_PARSER_HPP_INCLUDED","","","#ifndef CATCH_TEXTFLOW_HPP_INCLUDED","#define CATCH_TEXTFLOW_HPP_INCLUDED","","","#include \u003ccassert\u003e","#include \u003cstring\u003e","#include \u003cvector\u003e","","namespace Catch {","    namespace TextFlow {","","        class Columns;","","        /**","         * Abstraction for a string with ansi escape sequences that","         * automatically skips over escapes when iterating. Only graphical","         * escape sequences are considered.","         *","         * Internal representation:","         * An escape sequence looks like \\033[39;49m","         * We need bidirectional iteration and the unbound length of escape","         * sequences poses a problem for operator-- To make this work we'll","         * replace the last `m` with a 0xff (this is a codepoint that won't have","         * any utf-8 meaning).","         */","        class AnsiSkippingString {","            std::string m_string;","            std::size_t m_size = 0;","","            // perform 0xff replacement and calculate m_size","            void preprocessString();","","        public:","            class const_iterator;","            using iterator = const_iterator;","            // note: must be u-suffixed or this will cause a \"truncation of","            // constant value\" warning on MSVC","            static constexpr char sentinel = static_cast\u003cchar\u003e( 0xffu );","","            explicit AnsiSkippingString( std::string const\u0026 text );","            explicit AnsiSkippingString( std::string\u0026\u0026 text );","","            const_iterator begin() const;","            const_iterator end() const;","","            size_t size() const { return m_size; }","","            std::string substring( const_iterator begin,","                                   const_iterator end ) const;","        };","","        class AnsiSkippingString::const_iterator {","            friend AnsiSkippingString;","            struct EndTag {};","","            const std::string* m_string;","            std::string::const_iterator m_it;","","            explicit const_iterator( const std::string\u0026 string, EndTag ):","                m_string( \u0026string ), m_it( string.end() ) {}","","            void tryParseAnsiEscapes();","            void advance();","            void unadvance();","","        public:","            using difference_type = std::ptrdiff_t;","            using value_type = char;","            using pointer = value_type*;","            using reference = value_type\u0026;","            using iterator_category = std::bidirectional_iterator_tag;","","            explicit const_iterator( const std::string\u0026 string ):","                m_string( \u0026string ), m_it( string.begin() ) {","                tryParseAnsiEscapes();","            }","","            char operator*() const { return *m_it; }","","            const_iterator\u0026 operator++() {","                advance();","                return *this;","            }","            const_iterator operator++( int ) {","                iterator prev( *this );","                operator++();","                return prev;","            }","            const_iterator\u0026 operator--() {","                unadvance();","                return *this;","            }","            const_iterator operator--( int ) {","                iterator prev( *this );","                operator--();","                return prev;","            }","","            bool operator==( const_iterator const\u0026 other ) const {","                return m_it == other.m_it;","            }","            bool operator!=( const_iterator const\u0026 other ) const {","                return !operator==( other );","            }","            bool operator\u003c=( const_iterator const\u0026 other ) const {","                return m_it \u003c= other.m_it;","            }","","            const_iterator oneBefore() const {","                auto it = *this;","                return --it;","            }","        };","","        /**","         * Represents a column of text with specific width and indentation","         *","         * When written out to a stream, it will perform linebreaking","         * of the provided text so that the written lines fit within","         * target width.","         */","        class Column {","            // String to be written out","            AnsiSkippingString m_string;","            // Width of the column for linebreaking","            size_t m_width = CATCH_CONFIG_CONSOLE_WIDTH - 1;","            // Indentation of other lines (including first if initial indent is","            // unset)","            size_t m_indent = 0;","            // Indentation of the first line","            size_t m_initialIndent = std::string::npos;","","        public:","            /**","             * Iterates \"lines\" in `Column` and returns them","             */","            class const_iterator {","                friend Column;","                struct EndTag {};","","                Column const\u0026 m_column;","                // Where does the current line start?","                AnsiSkippingString::const_iterator m_lineStart;","                // How long should the current line be?","                AnsiSkippingString::const_iterator m_lineEnd;","                // How far have we checked the string to iterate?","                AnsiSkippingString::const_iterator m_parsedTo;","                // Should a '-' be appended to the line?","                bool m_addHyphen = false;","","                const_iterator( Column const\u0026 column, EndTag ):","                    m_column( column ),","                    m_lineStart( m_column.m_string.end() ),","                    m_lineEnd( column.m_string.end() ),","                    m_parsedTo( column.m_string.end() ) {}","","                // Calculates the length of the current line","                void calcLength();","","                // Returns current indentation width","                size_t indentSize() const;","","                // Creates an indented and (optionally) suffixed string from","                // current iterator position, indentation and length.","                std::string addIndentAndSuffix(","                    AnsiSkippingString::const_iterator start,","                    AnsiSkippingString::const_iterator end ) const;","","            public:","                using difference_type = std::ptrdiff_t;","                using value_type = std::string;","                using pointer = value_type*;","                using reference = value_type\u0026;","                using iterator_category = std::forward_iterator_tag;","","                explicit const_iterator( Column const\u0026 column );","","                std::string operator*() const;","","                const_iterator\u0026 operator++();","                const_iterator operator++( int );","","                bool operator==( const_iterator const\u0026 other ) const {","                    return m_lineStart == other.m_lineStart \u0026\u0026","                           \u0026m_column == \u0026other.m_column;","                }","                bool operator!=( const_iterator const\u0026 other ) const {","                    return !operator==( other );","                }","            };","            using iterator = const_iterator;","","            explicit Column( std::string const\u0026 text ): m_string( text ) {}","            explicit Column( std::string\u0026\u0026 text ):","                m_string( CATCH_MOVE( text ) ) {}","","            Column\u0026 width( size_t newWidth ) \u0026 {","                assert( newWidth \u003e 0 );","                m_width = newWidth;","                return *this;","            }","            Column\u0026\u0026 width( size_t newWidth ) \u0026\u0026 {","                assert( newWidth \u003e 0 );","                m_width = newWidth;","                return CATCH_MOVE( *this );","            }","            Column\u0026 indent( size_t newIndent ) \u0026 {","                m_indent = newIndent;","                return *this;","            }","            Column\u0026\u0026 indent( size_t newIndent ) \u0026\u0026 {","                m_indent = newIndent;","                return CATCH_MOVE( *this );","            }","            Column\u0026 initialIndent( size_t newIndent ) \u0026 {","                m_initialIndent = newIndent;","                return *this;","            }","            Column\u0026\u0026 initialIndent( size_t newIndent ) \u0026\u0026 {","                m_initialIndent = newIndent;","                return CATCH_MOVE( *this );","            }","","            size_t width() const { return m_width; }","            const_iterator begin() const { return const_iterator( *this ); }","            const_iterator end() const {","                return { *this, const_iterator::EndTag{} };","            }","","            friend std::ostream\u0026 operator\u003c\u003c( std::ostream\u0026 os,","                                             Column const\u0026 col );","","            friend Columns operator+( Column const\u0026 lhs, Column const\u0026 rhs );","            friend Columns operator+( Column\u0026\u0026 lhs, Column\u0026\u0026 rhs );","        };","","        //! Creates a column that serves as an empty space of specific width","        Column Spacer( size_t spaceWidth );","","        class Columns {","            std::vector\u003cColumn\u003e m_columns;","","        public:","            class iterator {","                friend Columns;","                struct EndTag {};","","                std::vector\u003cColumn\u003e const\u0026 m_columns;","                std::vector\u003cColumn::const_iterator\u003e m_iterators;","                size_t m_activeIterators;","","                iterator( Columns const\u0026 columns, EndTag );","","            public:","                using difference_type = std::ptrdiff_t;","                using value_type = std::string;","                using pointer = value_type*;","                using reference = value_type\u0026;","                using iterator_category = std::forward_iterator_tag;","","                explicit iterator( Columns const\u0026 columns );","","                auto operator==( iterator const\u0026 other ) const -\u003e bool {","                    return m_iterators == other.m_iterators;","                }","                auto operator!=( iterator const\u0026 other ) const -\u003e bool {","                    return m_iterators != other.m_iterators;","                }","                std::string operator*() const;","                iterator\u0026 operator++();","                iterator operator++( int );","            };","            using const_iterator = iterator;","","            iterator begin() const { return iterator( *this ); }","            iterator end() const { return { *this, iterator::EndTag() }; }","","            friend Columns\u0026 operator+=( Columns\u0026 lhs, Column const\u0026 rhs );","            friend Columns\u0026 operator+=( Columns\u0026 lhs, Column\u0026\u0026 rhs );","            friend Columns operator+( Columns const\u0026 lhs, Column const\u0026 rhs );","            friend Columns operator+( Columns\u0026\u0026 lhs, Column\u0026\u0026 rhs );","","            friend std::ostream\u0026 operator\u003c\u003c( std::ostream\u0026 os,","                                             Columns const\u0026 cols );","        };","","    } // namespace TextFlow","} // namespace Catch","#endif // CATCH_TEXTFLOW_HPP_INCLUDED","","","#ifndef CATCH_TO_STRING_HPP_INCLUDED","#define CATCH_TO_STRING_HPP_INCLUDED","","#include \u003cstring\u003e","","","namespace Catch {","    template \u003ctypename T\u003e","    std::string to_string(T const\u0026 t) {","#if defined(CATCH_CONFIG_CPP11_TO_STRING)","        return std::to_string(t);","#else","        ReusableStringStream rss;","        rss \u003c\u003c t;","        return rss.str();","#endif","    }","} // end namespace Catch","","#endif // CATCH_TO_STRING_HPP_INCLUDED","","","#ifndef CATCH_UNCAUGHT_EXCEPTIONS_HPP_INCLUDED","#define CATCH_UNCAUGHT_EXCEPTIONS_HPP_INCLUDED","","namespace Catch {","    bool uncaught_exceptions();","} // end namespace Catch","","#endif // CATCH_UNCAUGHT_EXCEPTIONS_HPP_INCLUDED","","","#ifndef CATCH_XMLWRITER_HPP_INCLUDED","#define CATCH_XMLWRITER_HPP_INCLUDED","","","#include \u003ciosfwd\u003e","#include \u003cvector\u003e","#include \u003ccstdint\u003e","","namespace Catch {","    enum class XmlFormatting : std::uint8_t {","        None = 0x00,","        Indent = 0x01,","        Newline = 0x02,","    };","","    constexpr XmlFormatting operator|( XmlFormatting lhs, XmlFormatting rhs ) {","        return static_cast\u003cXmlFormatting\u003e( static_cast\u003cstd::uint8_t\u003e( lhs ) |","                                           static_cast\u003cstd::uint8_t\u003e( rhs ) );","    }","","    constexpr XmlFormatting operator\u0026( XmlFormatting lhs, XmlFormatting rhs ) {","        return static_cast\u003cXmlFormatting\u003e( static_cast\u003cstd::uint8_t\u003e( lhs ) \u0026","                                           static_cast\u003cstd::uint8_t\u003e( rhs ) );","    }","","","    /**","     * Helper for XML-encoding text (escaping angle brackets, quotes, etc)","     *","     * Note: doesn't take ownership of passed strings, and thus the","     *       encoded string must outlive the encoding instance.","     */","    class XmlEncode {","    public:","        enum ForWhat { ForTextNodes, ForAttributes };","","        constexpr XmlEncode( StringRef str, ForWhat forWhat = ForTextNodes ):","            m_str( str ), m_forWhat( forWhat ) {}","","","        void encodeTo( std::ostream\u0026 os ) const;","","        friend std::ostream\u0026 operator \u003c\u003c ( std::ostream\u0026 os, XmlEncode const\u0026 xmlEncode );","","    private:","        StringRef m_str;","        ForWhat m_forWhat;","    };","","    class XmlWriter {","    public:","","        class ScopedElement {","        public:","            ScopedElement( XmlWriter* writer, XmlFormatting fmt );","","            ScopedElement( ScopedElement\u0026\u0026 other ) noexcept;","            ScopedElement\u0026 operator=( ScopedElement\u0026\u0026 other ) noexcept;","","            ~ScopedElement();","","            ScopedElement\u0026","            writeText( StringRef text,","                       XmlFormatting fmt = XmlFormatting::Newline |","                                           XmlFormatting::Indent );","","            ScopedElement\u0026 writeAttribute( StringRef name,","                                           StringRef attribute );","            template \u003ctypename T,","                      // Without this SFINAE, this overload is a better match","                      // for `std::string`, `char const*`, `char const[N]` args.","                      // While it would still work, it would cause code bloat","                      // and multiple iteration over the strings","                      typename = typename std::enable_if_t\u003c","                          !std::is_convertible\u003cT, StringRef\u003e::value\u003e\u003e","            ScopedElement\u0026 writeAttribute( StringRef name,","                                           T const\u0026 attribute ) {","                m_writer-\u003ewriteAttribute( name, attribute );","                return *this;","            }","","        private:","            XmlWriter* m_writer = nullptr;","            XmlFormatting m_fmt;","        };","","        XmlWriter( std::ostream\u0026 os );","        ~XmlWriter();","","        XmlWriter( XmlWriter const\u0026 ) = delete;","        XmlWriter\u0026 operator=( XmlWriter const\u0026 ) = delete;","","        XmlWriter\u0026 startElement( std::string const\u0026 name, XmlFormatting fmt = XmlFormatting::Newline | XmlFormatting::Indent);","","        ScopedElement scopedElement( std::string const\u0026 name, XmlFormatting fmt = XmlFormatting::Newline | XmlFormatting::Indent);","","        XmlWriter\u0026 endElement(XmlFormatting fmt = XmlFormatting::Newline | XmlFormatting::Indent);","","        //! The attribute content is XML-encoded","        XmlWriter\u0026 writeAttribute( StringRef name, StringRef attribute );","","        //! Writes the attribute as \"true/false\"","        XmlWriter\u0026 writeAttribute( StringRef name, bool attribute );","","        //! The attribute content is XML-encoded","        XmlWriter\u0026 writeAttribute( StringRef name, char const* attribute );","","        //! The attribute value must provide op\u003c\u003c(ostream\u0026, T). The resulting","        //! serialization is XML-encoded","        template \u003ctypename T,","                  // Without this SFINAE, this overload is a better match","                  // for `std::string`, `char const*`, `char const[N]` args.","                  // While it would still work, it would cause code bloat","                  // and multiple iteration over the strings","                  typename = typename std::enable_if_t\u003c","                      !std::is_convertible\u003cT, StringRef\u003e::value\u003e\u003e","        XmlWriter\u0026 writeAttribute( StringRef name, T const\u0026 attribute ) {","            ReusableStringStream rss;","            rss \u003c\u003c attribute;","            return writeAttribute( name, rss.str() );","        }","","        //! Writes escaped `text` in a element","        XmlWriter\u0026 writeText( StringRef text,","                              XmlFormatting fmt = XmlFormatting::Newline |","                                                  XmlFormatting::Indent );","","        //! Writes XML comment as \"\u003c!-- text --\u003e\"","        XmlWriter\u0026 writeComment( StringRef text,","                                 XmlFormatting fmt = XmlFormatting::Newline |","                                                     XmlFormatting::Indent );","","        void writeStylesheetRef( StringRef url );","","        void ensureTagClosed();","","    private:","","        void applyFormatting(XmlFormatting fmt);","","        void writeDeclaration();","","        void newlineIfNecessary();","","        bool m_tagIsOpen = false;","        bool m_needsNewline = false;","        std::vector\u003cstd::string\u003e m_tags;","        std::string m_indent;","        std::ostream\u0026 m_os;","    };","","}","","#endif // CATCH_XMLWRITER_HPP_INCLUDED","","","/** \\file"," * This is a convenience header for Catch2's Matcher support. It includes"," * **all** of Catch2 headers related to matchers."," *"," * Generally the Catch2 users should use specific includes they need,"," * but this header can be used instead for ease-of-experimentation, or"," * just plain convenience, at the cost of increased compilation times."," *"," * When a new header is added to either the `matchers` folder, or to"," * the corresponding internal subfolder, it should be added here."," */","","#ifndef CATCH_MATCHERS_ALL_HPP_INCLUDED","#define CATCH_MATCHERS_ALL_HPP_INCLUDED","","","","#ifndef CATCH_MATCHERS_HPP_INCLUDED","#define CATCH_MATCHERS_HPP_INCLUDED","","","","#ifndef CATCH_MATCHERS_IMPL_HPP_INCLUDED","#define CATCH_MATCHERS_IMPL_HPP_INCLUDED","","","#include \u003cstring\u003e","","namespace Catch {","","#ifdef __clang__","#    pragma clang diagnostic push","#    pragma clang diagnostic ignored \"-Wsign-compare\"","#    pragma clang diagnostic ignored \"-Wnon-virtual-dtor\"","#elif defined __GNUC__","#    pragma GCC diagnostic push","#    pragma GCC diagnostic ignored \"-Wsign-compare\"","#    pragma GCC diagnostic ignored \"-Wnon-virtual-dtor\"","#endif","","    template\u003ctypename ArgT, typename MatcherT\u003e","    class MatchExpr : public ITransientExpression {","        ArgT \u0026\u0026 m_arg;","        MatcherT const\u0026 m_matcher;","    public:","        constexpr MatchExpr( ArgT \u0026\u0026 arg, MatcherT const\u0026 matcher )","        :   ITransientExpression{ true, matcher.match( arg ) }, // not forwarding arg here on purpose","            m_arg( CATCH_FORWARD(arg) ),","            m_matcher( matcher )","        {}","","        void streamReconstructedExpression( std::ostream\u0026 os ) const override {","            os \u003c\u003c Catch::Detail::stringify( m_arg )","               \u003c\u003c ' '","               \u003c\u003c m_matcher.toString();","        }","    };","","#ifdef __clang__","#    pragma clang diagnostic pop","#elif defined __GNUC__","#    pragma GCC diagnostic pop","#endif","","","    namespace Matchers {","        template \u003ctypename ArgT\u003e","        class MatcherBase;","    }","","    using StringMatcher = Matchers::MatcherBase\u003cstd::string\u003e;","","    void handleExceptionMatchExpr( AssertionHandler\u0026 handler, StringMatcher const\u0026 matcher );","","    template\u003ctypename ArgT, typename MatcherT\u003e","    constexpr MatchExpr\u003cArgT, MatcherT\u003e","    makeMatchExpr( ArgT\u0026\u0026 arg, MatcherT const\u0026 matcher ) {","        return MatchExpr\u003cArgT, MatcherT\u003e( CATCH_FORWARD(arg), matcher );","    }","","} // namespace Catch","","","///////////////////////////////////////////////////////////////////////////////","#define INTERNAL_CHECK_THAT( macroName, matcher, resultDisposition, arg ) \\","    do { \\","        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(arg) \", \" CATCH_INTERNAL_STRINGIFY(matcher), resultDisposition ); \\","        INTERNAL_CATCH_TRY { \\","            catchAssertionHandler.handleExpr( Catch::makeMatchExpr( arg, matcher ) ); \\","        } INTERNAL_CATCH_CATCH( catchAssertionHandler ) \\","        catchAssertionHandler.complete(); \\","    } while( false )","","","///////////////////////////////////////////////////////////////////////////////","#define INTERNAL_CATCH_THROWS_MATCHES( macroName, exceptionType, resultDisposition, matcher, ... ) \\","    do { \\","        Catch::AssertionHandler catchAssertionHandler( macroName##_catch_sr, CATCH_INTERNAL_LINEINFO, CATCH_INTERNAL_STRINGIFY(__VA_ARGS__) \", \" CATCH_INTERNAL_STRINGIFY(exceptionType) \", \" CATCH_INTERNAL_STRINGIFY(matcher), resultDisposition ); \\","        if( catchAssertionHandler.allowThrows() ) \\","            try { \\","                CATCH_INTERNAL_START_WARNINGS_SUPPRESSION \\","                CATCH_INTERNAL_SUPPRESS_USELESS_CAST_WARNINGS \\","                static_cast\u003cvoid\u003e(__VA_ARGS__ ); \\","                CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION \\","                catchAssertionHandler.handleUnexpectedExceptionNotThrown(); \\","            } \\","            catch( exceptionType const\u0026 ex ) { \\","                catchAssertionHandler.handleExpr( Catch::makeMatchExpr( ex, matcher ) ); \\","            } \\","            catch( ... ) { \\","                catchAssertionHandler.handleUnexpectedInflightException(); \\","            } \\","        else \\","            catchAssertionHandler.handleThrowingCallSkipped(); \\","        catchAssertionHandler.complete(); \\","    } while( false )","","","#endif // CATCH_MATCHERS_IMPL_HPP_INCLUDED","","#include \u003cstring\u003e","#include \u003cvector\u003e","","namespace Catch {","namespace Matchers {","","    class MatcherUntypedBase {","    public:","        MatcherUntypedBase() = default;","","        MatcherUntypedBase(MatcherUntypedBase const\u0026) = default;","        MatcherUntypedBase(MatcherUntypedBase\u0026\u0026) = default;","","        MatcherUntypedBase\u0026 operator = (MatcherUntypedBase const\u0026) = delete;","        MatcherUntypedBase\u0026 operator = (MatcherUntypedBase\u0026\u0026) = delete;","","        std::string toString() const;","","    protected:","        virtual ~MatcherUntypedBase(); // = default;","        virtual std::string describe() const = 0;","        mutable std::string m_cachedToString;","    };","","","    template\u003ctypename T\u003e","    class MatcherBase : public MatcherUntypedBase {","    public:","        virtual bool match( T const\u0026 arg ) const = 0;","    };","","    namespace Detail {","","        template\u003ctypename ArgT\u003e","        class MatchAllOf final : public MatcherBase\u003cArgT\u003e {","            std::vector\u003cMatcherBase\u003cArgT\u003e const*\u003e m_matchers;","","        public:","            MatchAllOf() = default;","            MatchAllOf(MatchAllOf const\u0026) = delete;","            MatchAllOf\u0026 operator=(MatchAllOf const\u0026) = delete;","            MatchAllOf(MatchAllOf\u0026\u0026) = default;","            MatchAllOf\u0026 operator=(MatchAllOf\u0026\u0026) = default;","","","            bool match( ArgT const\u0026 arg ) const override {","                for( auto matcher : m_matchers ) {","                    if (!matcher-\u003ematch(arg))","                        return false;","                }","                return true;","            }","            std::string describe() const override {","                std::string description;","                description.reserve( 4 + m_matchers.size()*32 );","                description += \"( \";","                bool first = true;","                for( auto matcher : m_matchers ) {","                    if( first )","                        first = false;","                    else","                        description += \" and \";","                    description += matcher-\u003etoString();","                }","                description += \" )\";","                return description;","            }","","            friend MatchAllOf operator\u0026\u0026 (MatchAllOf\u0026\u0026 lhs, MatcherBase\u003cArgT\u003e const\u0026 rhs) {","                lhs.m_matchers.push_back(\u0026rhs);","                return CATCH_MOVE(lhs);","            }","            friend MatchAllOf operator\u0026\u0026 (MatcherBase\u003cArgT\u003e const\u0026 lhs, MatchAllOf\u0026\u0026 rhs) {","                rhs.m_matchers.insert(rhs.m_matchers.begin(), \u0026lhs);","                return CATCH_MOVE(rhs);","            }","        };","","        //! lvalue overload is intentionally deleted, users should","        //! not be trying to compose stored composition matchers","        template\u003ctypename ArgT\u003e","        MatchAllOf\u003cArgT\u003e operator\u0026\u0026 (MatchAllOf\u003cArgT\u003e const\u0026 lhs, MatcherBase\u003cArgT\u003e const\u0026 rhs) = delete;","        //! lvalue overload is intentionally deleted, users should","        //! not be trying to compose stored composition matchers","        template\u003ctypename ArgT\u003e","        MatchAllOf\u003cArgT\u003e operator\u0026\u0026 (MatcherBase\u003cArgT\u003e const\u0026 lhs, MatchAllOf\u003cArgT\u003e const\u0026 rhs) = delete;","","        template\u003ctypename ArgT\u003e","        class MatchAnyOf final : public MatcherBase\u003cArgT\u003e {","            std::vector\u003cMatcherBase\u003cArgT\u003e const*\u003e m_matchers;","        public:","            MatchAnyOf() = default;","            MatchAnyOf(MatchAnyOf const\u0026) = delete;","            MatchAnyOf\u0026 operator=(MatchAnyOf const\u0026) = delete;","            MatchAnyOf(MatchAnyOf\u0026\u0026) = default;","            MatchAnyOf\u0026 operator=(MatchAnyOf\u0026\u0026) = default;","","            bool match( ArgT const\u0026 arg ) const override {","                for( auto matcher : m_matchers ) {","                    if (matcher-\u003ematch(arg))","                        return true;","                }","                return false;","            }","            std::string describe() const override {","                std::string description;","                description.reserve( 4 + m_matchers.size()*32 );","                description += \"( \";","                bool first = true;","                for( auto matcher : m_matchers ) {","                    if( first )","                        first = false;","                    else","                        description += \" or \";","                    description += matcher-\u003etoString();","                }","                description += \" )\";","                return description;","            }","","            friend MatchAnyOf operator|| (MatchAnyOf\u0026\u0026 lhs, MatcherBase\u003cArgT\u003e const\u0026 rhs) {","                lhs.m_matchers.push_back(\u0026rhs);","                return CATCH_MOVE(lhs);","            }","            friend MatchAnyOf operator|| (MatcherBase\u003cArgT\u003e const\u0026 lhs, MatchAnyOf\u0026\u0026 rhs) {","                rhs.m_matchers.insert(rhs.m_matchers.begin(), \u0026lhs);","                return CATCH_MOVE(rhs);","            }","        };","","        //! lvalue overload is intentionally deleted, users should","        //! not be trying to compose stored composition matchers","        template\u003ctypename ArgT\u003e","        MatchAnyOf\u003cArgT\u003e operator|| (MatchAnyOf\u003cArgT\u003e const\u0026 lhs, MatcherBase\u003cArgT\u003e const\u0026 rhs) = delete;","        //! lvalue overload is intentionally deleted, users should","        //! not be trying to compose stored composition matchers","        template\u003ctypename ArgT\u003e","        MatchAnyOf\u003cArgT\u003e operator|| (MatcherBase\u003cArgT\u003e const\u0026 lhs, MatchAnyOf\u003cArgT\u003e const\u0026 rhs) = delete;","","        template\u003ctypename ArgT\u003e","        class MatchNotOf final : public MatcherBase\u003cArgT\u003e {","            MatcherBase\u003cArgT\u003e const\u0026 m_underlyingMatcher;","","        public:","            explicit MatchNotOf( MatcherBase\u003cArgT\u003e const\u0026 underlyingMatcher ):","                m_underlyingMatcher( underlyingMatcher )","            {}","","            bool match( ArgT const\u0026 arg ) const override {","                return !m_underlyingMatcher.match( arg );","            }","","            std::string describe() const override {","                return \"not \" + m_underlyingMatcher.toString();","            }","        };","","    } // namespace Detail","","    template \u003ctypename T\u003e","    Detail::MatchAllOf\u003cT\u003e operator\u0026\u0026 (MatcherBase\u003cT\u003e const\u0026 lhs, MatcherBase\u003cT\u003e const\u0026 rhs) {","        return Detail::MatchAllOf\u003cT\u003e{} \u0026\u0026 lhs \u0026\u0026 rhs;","    }","    template \u003ctypename T\u003e","    Detail::MatchAnyOf\u003cT\u003e operator|| (MatcherBase\u003cT\u003e const\u0026 lhs, MatcherBase\u003cT\u003e const\u0026 rhs) {","        return Detail::MatchAnyOf\u003cT\u003e{} || lhs || rhs;","    }","","    template \u003ctypename T\u003e","    Detail::MatchNotOf\u003cT\u003e operator! (MatcherBase\u003cT\u003e const\u0026 matcher) {","        return Detail::MatchNotOf\u003cT\u003e{ matcher };","    }","","","} // namespace Matchers","} // namespace Catch","","","#if defined(CATCH_CONFIG_PREFIX_ALL) \u0026\u0026 !defined(CATCH_CONFIG_DISABLE)","  #define CATCH_REQUIRE_THROWS_WITH( expr, matcher ) INTERNAL_CATCH_THROWS_STR_MATCHES( \"CATCH_REQUIRE_THROWS_WITH\", Catch::ResultDisposition::Normal, matcher, expr )","  #define CATCH_REQUIRE_THROWS_MATCHES( expr, exceptionType, matcher ) INTERNAL_CATCH_THROWS_MATCHES( \"CATCH_REQUIRE_THROWS_MATCHES\", exceptionType, Catch::ResultDisposition::Normal, matcher, expr )","","  #define CATCH_CHECK_THROWS_WITH( expr, matcher ) INTERNAL_CATCH_THROWS_STR_MATCHES( \"CATCH_CHECK_THROWS_WITH\", Catch::ResultDisposition::ContinueOnFailure, matcher, expr )","  #define CATCH_CHECK_THROWS_MATCHES( expr, exceptionType, matcher ) INTERNAL_CATCH_THROWS_MATCHES( \"CATCH_CHECK_THROWS_MATCHES\", exceptionType, Catch::ResultDisposition::ContinueOnFailure, matcher, expr )","","  #define CATCH_CHECK_THAT( arg, matcher ) INTERNAL_CHECK_THAT( \"CATCH_CHECK_THAT\", matcher, Catch::ResultDisposition::ContinueOnFailure, arg )","  #define CATCH_REQUIRE_THAT( arg, matcher ) INTERNAL_CHECK_THAT( \"CATCH_REQUIRE_THAT\", matcher, Catch::ResultDisposition::Normal, arg )","","#elif defined(CATCH_CONFIG_PREFIX_ALL) \u0026\u0026 defined(CATCH_CONFIG_DISABLE)","","  #define CATCH_REQUIRE_THROWS_WITH( expr, matcher )                   (void)(0)","  #define CATCH_REQUIRE_THROWS_MATCHES( expr, exceptionType, matcher ) (void)(0)","","  #define CATCH_CHECK_THROWS_WITH( expr, matcher )                     (void)(0)","  #define CATCH_CHECK_THROWS_MATCHES( expr, exceptionType, matcher )   (void)(0)","","  #define CATCH_CHECK_THAT( arg, matcher )                             (void)(0)","  #define CATCH_REQUIRE_THAT( arg, matcher )                           (void)(0)","","#elif !defined(CATCH_CONFIG_PREFIX_ALL) \u0026\u0026 !defined(CATCH_CONFIG_DISABLE)","","  #define REQUIRE_THROWS_WITH( expr, matcher ) INTERNAL_CATCH_THROWS_STR_MATCHES( \"REQUIRE_THROWS_WITH\", Catch::ResultDisposition::Normal, matcher, expr )","  #define REQUIRE_THROWS_MATCHES( expr, exceptionType, matcher ) INTERNAL_CATCH_THROWS_MATCHES( \"REQUIRE_THROWS_MATCHES\", exceptionType, Catch::ResultDisposition::Normal, matcher, expr )","","  #define CHECK_THROWS_WITH( expr, matcher ) INTERNAL_CATCH_THROWS_STR_MATCHES( \"CHECK_THROWS_WITH\", Catch::ResultDisposition::ContinueOnFailure, matcher, expr )","  #define CHECK_THROWS_MATCHES( expr, exceptionType, matcher ) INTERNAL_CATCH_THROWS_MATCHES( \"CHECK_THROWS_MATCHES\", exceptionType, Catch::ResultDisposition::ContinueOnFailure, matcher, expr )","","  #define CHECK_THAT( arg, matcher ) INTERNAL_CHECK_THAT( \"CHECK_THAT\", matcher, Catch::ResultDisposition::ContinueOnFailure, arg )","  #define REQUIRE_THAT( arg, matcher ) INTERNAL_CHECK_THAT( \"REQUIRE_THAT\", matcher, Catch::ResultDisposition::Normal, arg )","","#elif !defined(CATCH_CONFIG_PREFIX_ALL) \u0026\u0026 defined(CATCH_CONFIG_DISABLE)","","  #define REQUIRE_THROWS_WITH( expr, matcher )                   (void)(0)","  #define REQUIRE_THROWS_MATCHES( expr, exceptionType, matcher ) (void)(0)","","  #define CHECK_THROWS_WITH( expr, matcher )                     (void)(0)","  #define CHECK_THROWS_MATCHES( expr, exceptionType, matcher )   (void)(0)","","  #define CHECK_THAT( arg, matcher )                             (void)(0)","  #define REQUIRE_THAT( arg, matcher )                           (void)(0)","","#endif // end of user facing macro declarations","","#endif // CATCH_MATCHERS_HPP_INCLUDED","","","#ifndef CATCH_MATCHERS_CONTAINER_PROPERTIES_HPP_INCLUDED","#define CATCH_MATCHERS_CONTAINER_PROPERTIES_HPP_INCLUDED","","","","#ifndef CATCH_MATCHERS_TEMPLATED_HPP_INCLUDED","#define CATCH_MATCHERS_TEMPLATED_HPP_INCLUDED","","","#include \u003carray\u003e","#include \u003calgorithm\u003e","#include \u003cstring\u003e","#include \u003ctype_traits\u003e","","namespace Catch {","namespace Matchers {","    class MatcherGenericBase : public MatcherUntypedBase {","    public:","        MatcherGenericBase() = default;","        ~MatcherGenericBase() override; // = default;","","        MatcherGenericBase(MatcherGenericBase const\u0026) = default;","        MatcherGenericBase(MatcherGenericBase\u0026\u0026) = default;","","        MatcherGenericBase\u0026 operator=(MatcherGenericBase const\u0026) = delete;","        MatcherGenericBase\u0026 operator=(MatcherGenericBase\u0026\u0026) = delete;","    };","","","    namespace Detail {","        template\u003cstd::size_t N, std::size_t M\u003e","        std::array\u003cvoid const*, N + M\u003e array_cat(std::array\u003cvoid const*, N\u003e \u0026\u0026 lhs, std::array\u003cvoid const*, M\u003e \u0026\u0026 rhs) {","            std::array\u003cvoid const*, N + M\u003e arr{};","            std::copy_n(lhs.begin(), N, arr.begin());","            std::copy_n(rhs.begin(), M, arr.begin() + N);","            return arr;","        }","","        template\u003cstd::size_t N\u003e","        std::array\u003cvoid const*, N+1\u003e array_cat(std::array\u003cvoid const*, N\u003e \u0026\u0026 lhs, void const* rhs) {","            std::array\u003cvoid const*, N+1\u003e arr{};","            std::copy_n(lhs.begin(), N, arr.begin());","            arr[N] = rhs;","            return arr;","        }","","        template\u003cstd::size_t N\u003e","        std::array\u003cvoid const*, N+1\u003e array_cat(void const* lhs, std::array\u003cvoid const*, N\u003e \u0026\u0026 rhs) {","            std::array\u003cvoid const*, N + 1\u003e arr{ {lhs} };","            std::copy_n(rhs.begin(), N, arr.begin() + 1);","            return arr;","        }","","        template\u003ctypename T\u003e","        using is_generic_matcher = std::is_base_of\u003c","            Catch::Matchers::MatcherGenericBase,","            std::remove_cv_t\u003cstd::remove_reference_t\u003cT\u003e\u003e","        \u003e;","","        template\u003ctypename... Ts\u003e","        using are_generic_matchers = Catch::Detail::conjunction\u003cis_generic_matcher\u003cTs\u003e...\u003e;","","        template\u003ctypename T\u003e","        using is_matcher = std::is_base_of\u003c","            Catch::Matchers::MatcherUntypedBase,","            std::remove_cv_t\u003cstd::remove_reference_t\u003cT\u003e\u003e","        \u003e;","","","        template\u003cstd::size_t N, typename Arg\u003e","        bool match_all_of(Arg\u0026\u0026, std::array\u003cvoid const*, N\u003e const\u0026, std::index_sequence\u003c\u003e) {","            return true;","        }","","        template\u003ctypename T, typename... MatcherTs, std::size_t N, typename Arg, std::size_t Idx, std::size_t... Indices\u003e","        bool match_all_of(Arg\u0026\u0026 arg, std::array\u003cvoid const*, N\u003e const\u0026 matchers, std::index_sequence\u003cIdx, Indices...\u003e) {","            return static_cast\u003cT const*\u003e(matchers[Idx])-\u003ematch(arg) \u0026\u0026 match_all_of\u003cMatcherTs...\u003e(arg, matchers, std::index_sequence\u003cIndices...\u003e{});","        }","","","        template\u003cstd::size_t N, typename Arg\u003e","        bool match_any_of(Arg\u0026\u0026, std::array\u003cvoid const*, N\u003e const\u0026, std::index_sequence\u003c\u003e) {","            return false;","        }","","        template\u003ctypename T, typename... MatcherTs, std::size_t N, typename Arg, std::size_t Idx, std::size_t... Indices\u003e","        bool match_any_of(Arg\u0026\u0026 arg, std::array\u003cvoid const*, N\u003e const\u0026 matchers, std::index_sequence\u003cIdx, Indices...\u003e) {","            return static_cast\u003cT const*\u003e(matchers[Idx])-\u003ematch(arg) || match_any_of\u003cMatcherTs...\u003e(arg, matchers, std::index_sequence\u003cIndices...\u003e{});","        }","","        std::string describe_multi_matcher(StringRef combine, std::string const* descriptions_begin, std::string const* descriptions_end);","","        template\u003ctypename... MatcherTs, std::size_t... Idx\u003e","        std::string describe_multi_matcher(StringRef combine, std::array\u003cvoid const*, sizeof...(MatcherTs)\u003e const\u0026 matchers, std::index_sequence\u003cIdx...\u003e) {","            std::array\u003cstd::string, sizeof...(MatcherTs)\u003e descriptions {{","                static_cast\u003cMatcherTs const*\u003e(matchers[Idx])-\u003etoString()...","            }};","","            return describe_multi_matcher(combine, descriptions.data(), descriptions.data() + descriptions.size());","        }","","","        template\u003ctypename... MatcherTs\u003e","        class MatchAllOfGeneric final : public MatcherGenericBase {","        public:","            MatchAllOfGeneric(MatchAllOfGeneric const\u0026) = delete;","            MatchAllOfGeneric\u0026 operator=(MatchAllOfGeneric const\u0026) = delete;","            MatchAllOfGeneric(MatchAllOfGeneric\u0026\u0026) = default;","            MatchAllOfGeneric\u0026 operator=(MatchAllOfGeneric\u0026\u0026) = default;","","            MatchAllOfGeneric(MatcherTs const\u0026... matchers) : m_matchers{ {std::addressof(matchers)...} } {}","            explicit MatchAllOfGeneric(std::array\u003cvoid const*, sizeof...(MatcherTs)\u003e matchers) : m_matchers{matchers} {}","","            template\u003ctypename Arg\u003e","            bool match(Arg\u0026\u0026 arg) const {","                return match_all_of\u003cMatcherTs...\u003e(arg, m_matchers, std::index_sequence_for\u003cMatcherTs...\u003e{});","            }","","            std::string describe() const override {","                return describe_multi_matcher\u003cMatcherTs...\u003e(\" and \"_sr, m_matchers, std::index_sequence_for\u003cMatcherTs...\u003e{});","            }","","            // Has to be public to enable the concatenating operators","            // below, because they are not friend of the RHS, only LHS,","            // and thus cannot access private fields of RHS","            std::array\u003cvoid const*, sizeof...( MatcherTs )\u003e m_matchers;","","","            //! Avoids type nesting for `GenericAllOf \u0026\u0026 GenericAllOf` case","            template\u003ctypename... MatchersRHS\u003e","            friend","            MatchAllOfGeneric\u003cMatcherTs..., MatchersRHS...\u003e operator \u0026\u0026 (","                    MatchAllOfGeneric\u003cMatcherTs...\u003e\u0026\u0026 lhs,","                    MatchAllOfGeneric\u003cMatchersRHS...\u003e\u0026\u0026 rhs) {","                return MatchAllOfGeneric\u003cMatcherTs..., MatchersRHS...\u003e{array_cat(CATCH_MOVE(lhs.m_matchers), CATCH_MOVE(rhs.m_matchers))};","            }","","            //! Avoids type nesting for `GenericAllOf \u0026\u0026 some matcher` case","            template\u003ctypename MatcherRHS\u003e","            friend std::enable_if_t\u003cis_matcher\u003cMatcherRHS\u003e::value,","            MatchAllOfGeneric\u003cMatcherTs..., MatcherRHS\u003e\u003e operator \u0026\u0026 (","                    MatchAllOfGeneric\u003cMatcherTs...\u003e\u0026\u0026 lhs,","                    MatcherRHS const\u0026 rhs) {","                return MatchAllOfGeneric\u003cMatcherTs..., MatcherRHS\u003e{array_cat(CATCH_MOVE(lhs.m_matchers), static_cast\u003cvoid const*\u003e(\u0026rhs))};","            }","","            //! Avoids type nesting for `some matcher \u0026\u0026 GenericAllOf` case","            template\u003ctypename MatcherLHS\u003e","            friend std::enable_if_t\u003cis_matcher\u003cMatcherLHS\u003e::value,","            MatchAllOfGeneric\u003cMatcherLHS, MatcherTs...\u003e\u003e operator \u0026\u0026 (","                    MatcherLHS const\u0026 lhs,","                    MatchAllOfGeneric\u003cMatcherTs...\u003e\u0026\u0026 rhs) {","                return MatchAllOfGeneric\u003cMatcherLHS, MatcherTs...\u003e{array_cat(static_cast\u003cvoid const*\u003e(std::addressof(lhs)), CATCH_MOVE(rhs.m_matchers))};","            }","        };","","","        template\u003ctypename... MatcherTs\u003e","        class MatchAnyOfGeneric final : public MatcherGenericBase {","        public:","            MatchAnyOfGeneric(MatchAnyOfGeneric const\u0026) = delete;","            MatchAnyOfGeneric\u0026 operator=(MatchAnyOfGeneric const\u0026) = delete;","            MatchAnyOfGeneric(MatchAnyOfGeneric\u0026\u0026) = default;","            MatchAnyOfGeneric\u0026 operator=(MatchAnyOfGeneric\u0026\u0026) = default;","","            MatchAnyOfGeneric(MatcherTs const\u0026... matchers) : m_matchers{ {std::addressof(matchers)...} } {}","            explicit MatchAnyOfGeneric(std::array\u003cvoid const*, sizeof...(MatcherTs)\u003e matchers) : m_matchers{matchers} {}","","            template\u003ctypename Arg\u003e","            bool match(Arg\u0026\u0026 arg) const {","                return match_any_of\u003cMatcherTs...\u003e(arg, m_matchers, std::index_sequence_for\u003cMatcherTs...\u003e{});","            }","","            std::string describe() const override {","                return describe_multi_matcher\u003cMatcherTs...\u003e(\" or \"_sr, m_matchers, std::index_sequence_for\u003cMatcherTs...\u003e{});","            }","","","            // Has to be public to enable the concatenating operators","            // below, because they are not friend of the RHS, only LHS,","            // and thus cannot access private fields of RHS","            std::array\u003cvoid const*, sizeof...( MatcherTs )\u003e m_matchers;","","            //! Avoids type nesting for `GenericAnyOf || GenericAnyOf` case","            template\u003ctypename... MatchersRHS\u003e","            friend MatchAnyOfGeneric\u003cMatcherTs..., MatchersRHS...\u003e operator || (","                    MatchAnyOfGeneric\u003cMatcherTs...\u003e\u0026\u0026 lhs,","                    MatchAnyOfGeneric\u003cMatchersRHS...\u003e\u0026\u0026 rhs) {","                return MatchAnyOfGeneric\u003cMatcherTs..., MatchersRHS...\u003e{array_cat(CATCH_MOVE(lhs.m_matchers), CATCH_MOVE(rhs.m_matchers))};","            }","","            //! Avoids type nesting for `GenericAnyOf || some matcher` case","            template\u003ctypename MatcherRHS\u003e","            friend std::enable_if_t\u003cis_matcher\u003cMatcherRHS\u003e::value,","            MatchAnyOfGeneric\u003cMatcherTs..., MatcherRHS\u003e\u003e operator || (","                    MatchAnyOfGeneric\u003cMatcherTs...\u003e\u0026\u0026 lhs,","                    MatcherRHS const\u0026 rhs) {","                return MatchAnyOfGeneric\u003cMatcherTs..., MatcherRHS\u003e{array_cat(CATCH_MOVE(lhs.m_matchers), static_cast\u003cvoid const*\u003e(std::addressof(rhs)))};","            }","","            //! Avoids type nesting for `some matcher || GenericAnyOf` case","            template\u003ctypename MatcherLHS\u003e","            friend std::enable_if_t\u003cis_matcher\u003cMatcherLHS\u003e::value,","            MatchAnyOfGeneric\u003cMatcherLHS, MatcherTs...\u003e\u003e operator || (","                MatcherLHS const\u0026 lhs,","                MatchAnyOfGeneric\u003cMatcherTs...\u003e\u0026\u0026 rhs) {","                return MatchAnyOfGeneric\u003cMatcherLHS, MatcherTs...\u003e{array_cat(static_cast\u003cvoid const*\u003e(std::addressof(lhs)), CATCH_MOVE(rhs.m_matchers))};","            }","        };","","","        template\u003ctypename MatcherT\u003e","        class MatchNotOfGeneric final : public MatcherGenericBase {","            MatcherT const\u0026 m_matcher;","","        public:","            MatchNotOfGeneric(MatchNotOfGeneric const\u0026) = delete;","            MatchNotOfGeneric\u0026 operator=(MatchNotOfGeneric const\u0026) = delete;","            MatchNotOfGeneric(MatchNotOfGeneric\u0026\u0026) = default;","            MatchNotOfGeneric\u0026 operator=(MatchNotOfGeneric\u0026\u0026) = default;","","            explicit MatchNotOfGeneric(MatcherT const\u0026 matcher) : m_matcher{matcher} {}","","            template\u003ctypename Arg\u003e","            bool match(Arg\u0026\u0026 arg) const {","                return !m_matcher.match(arg);","            }","","            std::string describe() const override {","                return \"not \" + m_matcher.toString();","            }","","            //! Negating negation can just unwrap and return underlying matcher","            friend MatcherT const\u0026 operator ! (MatchNotOfGeneric\u003cMatcherT\u003e const\u0026 matcher) {","                return matcher.m_matcher;","            }","        };","    } // namespace Detail","","","    // compose only generic matchers","    template\u003ctypename MatcherLHS, typename MatcherRHS\u003e","    std::enable_if_t\u003cDetail::are_generic_matchers\u003cMatcherLHS, MatcherRHS\u003e::value, Detail::MatchAllOfGeneric\u003cMatcherLHS, MatcherRHS\u003e\u003e","        operator \u0026\u0026 (MatcherLHS const\u0026 lhs, MatcherRHS const\u0026 rhs) {","        return { lhs, rhs };","    }","","    template\u003ctypename MatcherLHS, typename MatcherRHS\u003e","    std::enable_if_t\u003cDetail::are_generic_matchers\u003cMatcherLHS, MatcherRHS\u003e::value, Detail::MatchAnyOfGeneric\u003cMatcherLHS, MatcherRHS\u003e\u003e","        operator || (MatcherLHS const\u0026 lhs, MatcherRHS const\u0026 rhs) {","        return { lhs, rhs };","    }","","    //! Wrap provided generic matcher in generic negator","    template\u003ctypename MatcherT\u003e","    std::enable_if_t\u003cDetail::is_generic_matcher\u003cMatcherT\u003e::value, Detail::MatchNotOfGeneric\u003cMatcherT\u003e\u003e","        operator ! (MatcherT const\u0026 matcher) {","        return Detail::MatchNotOfGeneric\u003cMatcherT\u003e{matcher};","    }","","","    // compose mixed generic and non-generic matchers","    template\u003ctypename MatcherLHS, typename ArgRHS\u003e","    std::enable_if_t\u003cDetail::is_generic_matcher\u003cMatcherLHS\u003e::value, Detail::MatchAllOfGeneric\u003cMatcherLHS, MatcherBase\u003cArgRHS\u003e\u003e\u003e","        operator \u0026\u0026 (MatcherLHS const\u0026 lhs, MatcherBase\u003cArgRHS\u003e const\u0026 rhs) {","        return { lhs, rhs };","    }","","    template\u003ctypename ArgLHS, typename MatcherRHS\u003e","    std::enable_if_t\u003cDetail::is_generic_matcher\u003cMatcherRHS\u003e::value, Detail::MatchAllOfGeneric\u003cMatcherBase\u003cArgLHS\u003e, MatcherRHS\u003e\u003e","        operator \u0026\u0026 (MatcherBase\u003cArgLHS\u003e const\u0026 lhs, MatcherRHS const\u0026 rhs) {","        return { lhs, rhs };","    }","","    template\u003ctypename MatcherLHS, typename ArgRHS\u003e","    std::enable_if_t\u003cDetail::is_generic_matcher\u003cMatcherLHS\u003e::value, Detail::MatchAnyOfGeneric\u003cMatcherLHS, MatcherBase\u003cArgRHS\u003e\u003e\u003e","        operator || (MatcherLHS const\u0026 lhs, MatcherBase\u003cArgRHS\u003e const\u0026 rhs) {","        return { lhs, rhs };","    }","","    template\u003ctypename ArgLHS, typename MatcherRHS\u003e","    std::enable_if_t\u003cDetail::is_generic_matcher\u003cMatcherRHS\u003e::value, Detail::MatchAnyOfGeneric\u003cMatcherBase\u003cArgLHS\u003e, MatcherRHS\u003e\u003e","        operator || (MatcherBase\u003cArgLHS\u003e const\u0026 lhs, MatcherRHS const\u0026 rhs) {","        return { lhs, rhs };","    }","","} // namespace Matchers","} // namespace Catch","","#endif // CATCH_MATCHERS_TEMPLATED_HPP_INCLUDED","","namespace Catch {","    namespace Matchers {","","        class IsEmptyMatcher final : public MatcherGenericBase {","        public:","            template \u003ctypename RangeLike\u003e","            bool match(RangeLike\u0026\u0026 rng) const {","#if defined(CATCH_CONFIG_POLYFILL_NONMEMBER_CONTAINER_ACCESS)","                using Catch::Detail::empty;","#else","                using std::empty;","#endif","                return empty(rng);","            }","","            std::string describe() const override;","        };","","        class HasSizeMatcher final : public MatcherGenericBase {","            std::size_t m_target_size;","        public:","            explicit HasSizeMatcher(std::size_t target_size):","                m_target_size(target_size)","            {}","","            template \u003ctypename RangeLike\u003e","            bool match(RangeLike\u0026\u0026 rng) const {","#if defined(CATCH_CONFIG_POLYFILL_NONMEMBER_CONTAINER_ACCESS)","                using Catch::Detail::size;","#else","                using std::size;","#endif","                return size(rng) == m_target_size;","            }","","            std::string describe() const override;","        };","","        template \u003ctypename Matcher\u003e","        class SizeMatchesMatcher final : public MatcherGenericBase {","            Matcher m_matcher;","        public:","            explicit SizeMatchesMatcher(Matcher m):","                m_matcher(CATCH_MOVE(m))","            {}","","            template \u003ctypename RangeLike\u003e","            bool match(RangeLike\u0026\u0026 rng) const {","#if defined(CATCH_CONFIG_POLYFILL_NONMEMBER_CONTAINER_ACCESS)","                using Catch::Detail::size;","#else","                using std::size;","#endif","                return m_matcher.match(size(rng));","            }","","            std::string describe() const override {","                return \"size matches \" + m_matcher.describe();","            }","        };","","","        //! Creates a matcher that accepts empty ranges/containers","        IsEmptyMatcher IsEmpty();","        //! Creates a matcher that accepts ranges/containers with specific size","        HasSizeMatcher SizeIs(std::size_t sz);","        template \u003ctypename Matcher\u003e","        std::enable_if_t\u003cDetail::is_matcher\u003cMatcher\u003e::value,","        SizeMatchesMatcher\u003cMatcher\u003e\u003e SizeIs(Matcher\u0026\u0026 m) {","            return SizeMatchesMatcher\u003cMatcher\u003e{CATCH_FORWARD(m)};","        }","","    } // end namespace Matchers","} // end namespace Catch","","#endif // CATCH_MATCHERS_CONTAINER_PROPERTIES_HPP_INCLUDED","","","#ifndef CATCH_MATCHERS_CONTAINS_HPP_INCLUDED","#define CATCH_MATCHERS_CONTAINS_HPP_INCLUDED","","","#include \u003calgorithm\u003e","#include \u003cfunctional\u003e","","namespace Catch {","    namespace Matchers {","        //! Matcher for checking that an element in range is equal to specific element","        template \u003ctypename T, typename Equality\u003e","        class ContainsElementMatcher final : public MatcherGenericBase {","            T m_desired;","            Equality m_eq;","        public:","            template \u003ctypename T2, typename Equality2\u003e","            ContainsElementMatcher(T2\u0026\u0026 target, Equality2\u0026\u0026 predicate):","                m_desired(CATCH_FORWARD(target)),","                m_eq(CATCH_FORWARD(predicate))","            {}","","            std::string describe() const override {","                return \"contains element \" + Catch::Detail::stringify(m_desired);","            }","","            template \u003ctypename RangeLike\u003e","            bool match( RangeLike\u0026\u0026 rng ) const {","                for ( auto\u0026\u0026 elem : rng ) {","                    if ( m_eq( elem, m_desired ) ) { return true; }","                }","                return false;","            }","        };","","        //! Meta-matcher for checking that an element in a range matches a specific matcher","        template \u003ctypename Matcher\u003e","        class ContainsMatcherMatcher final : public MatcherGenericBase {","            Matcher m_matcher;","        public:","            // Note that we do a copy+move to avoid having to SFINAE this","            // constructor (and also avoid some perfect forwarding failure","            // cases)","            ContainsMatcherMatcher(Matcher matcher):","                m_matcher(CATCH_MOVE(matcher))","            {}","","            template \u003ctypename RangeLike\u003e","            bool match(RangeLike\u0026\u0026 rng) const {","                for (auto\u0026\u0026 elem : rng) {","                    if (m_matcher.match(elem)) {","                        return true;","                    }","                }","                return false;","            }","","            std::string describe() const override {","                return \"contains element matching \" + m_matcher.describe();","            }","        };","","        /**","         * Creates a matcher that checks whether a range contains a specific element.","         *","         * Uses `std::equal_to` to do the comparison","         */","        template \u003ctypename T\u003e","        std::enable_if_t\u003c!Detail::is_matcher\u003cT\u003e::value,","        ContainsElementMatcher\u003cT, std::equal_to\u003c\u003e\u003e\u003e Contains(T\u0026\u0026 elem) {","            return { CATCH_FORWARD(elem), std::equal_to\u003c\u003e{} };","        }","","        //! Creates a matcher that checks whether a range contains element matching a matcher","        template \u003ctypename Matcher\u003e","        std::enable_if_t\u003cDetail::is_matcher\u003cMatcher\u003e::value,","        ContainsMatcherMatcher\u003cMatcher\u003e\u003e Contains(Matcher\u0026\u0026 matcher) {","            return { CATCH_FORWARD(matcher) };","        }","","        /**","         * Creates a matcher that checks whether a range contains a specific element.","         *","         * Uses `eq` to do the comparisons, the element is provided on the rhs","         */","        template \u003ctypename T, typename Equality\u003e","        ContainsElementMatcher\u003cT, Equality\u003e Contains(T\u0026\u0026 elem, Equality\u0026\u0026 eq) {","            return { CATCH_FORWARD(elem), CATCH_FORWARD(eq) };","        }","","    }","}","","#endif // CATCH_MATCHERS_CONTAINS_HPP_INCLUDED","","","#ifndef CATCH_MATCHERS_EXCEPTION_HPP_INCLUDED","#define CATCH_MATCHERS_EXCEPTION_HPP_INCLUDED","","","namespace Catch {","namespace Matchers {","","class ExceptionMessageMatcher final : public MatcherBase\u003cstd::exception\u003e {","    std::string m_message;","public:","","    ExceptionMessageMatcher(std::string const\u0026 message):","        m_message(message)","    {}","","    bool match(std::exception const\u0026 ex) const override;","","    std::string describe() const override;","};","","//! Creates a matcher that checks whether a std derived exception has the provided message","ExceptionMessageMatcher Message(std::string const\u0026 message);","","template \u003ctypename StringMatcherType\u003e","class ExceptionMessageMatchesMatcher final","    : public MatcherBase\u003cstd::exception\u003e {","    StringMatcherType m_matcher;","","public:","    ExceptionMessageMatchesMatcher( StringMatcherType matcher ):","        m_matcher( CATCH_MOVE( matcher ) ) {}","","    bool match( std::exception const\u0026 ex ) const override {","        return m_matcher.match( ex.what() );","    }","","    std::string describe() const override {","        return \" matches \\\"\" + m_matcher.describe() + '\"';","    }","};","","//! Creates a matcher that checks whether a message from an std derived","//! exception matches a provided matcher","template \u003ctypename StringMatcherType\u003e","ExceptionMessageMatchesMatcher\u003cStringMatcherType\u003e","MessageMatches( StringMatcherType\u0026\u0026 matcher ) {","    return { CATCH_FORWARD( matcher ) };","}","","} // namespace Matchers","} // namespace Catch","","#endif // CATCH_MATCHERS_EXCEPTION_HPP_INCLUDED","","","#ifndef CATCH_MATCHERS_FLOATING_POINT_HPP_INCLUDED","#define CATCH_MATCHERS_FLOATING_POINT_HPP_INCLUDED","","","namespace Catch {","namespace Matchers {","","    namespace Detail {","        enum class FloatingPointKind : uint8_t;","    }","","    class  WithinAbsMatcher final : public MatcherBase\u003cdouble\u003e {","    public:","        WithinAbsMatcher(double target, double margin);","        bool match(double const\u0026 matchee) const override;","        std::string describe() const override;","    private:","        double m_target;","        double m_margin;","    };","","    //! Creates a matcher that accepts numbers within certain range of target","    WithinAbsMatcher WithinAbs( double target, double margin );","","","","    class WithinUlpsMatcher final : public MatcherBase\u003cdouble\u003e {","    public:","        WithinUlpsMatcher( double target,","                           uint64_t ulps,","                           Detail::FloatingPointKind baseType );","        bool match(double const\u0026 matchee) const override;","        std::string describe() const override;","    private:","        double m_target;","        uint64_t m_ulps;","        Detail::FloatingPointKind m_type;","    };","","    //! Creates a matcher that accepts doubles within certain ULP range of target","    WithinUlpsMatcher WithinULP(double target, uint64_t maxUlpDiff);","    //! Creates a matcher that accepts floats within certain ULP range of target","    WithinUlpsMatcher WithinULP(float target, uint64_t maxUlpDiff);","","","","    // Given IEEE-754 format for floats and doubles, we can assume","    // that float -\u003e double promotion is lossless. Given this, we can","    // assume that if we do the standard relative comparison of","    // |lhs - rhs| \u003c= epsilon * max(fabs(lhs), fabs(rhs)), then we get","    // the same result if we do this for floats, as if we do this for","    // doubles that were promoted from floats.","    class WithinRelMatcher final : public MatcherBase\u003cdouble\u003e {","    public:","        WithinRelMatcher( double target, double epsilon );","        bool match(double const\u0026 matchee) const override;","        std::string describe() const override;","    private:","        double m_target;","        double m_epsilon;","    };","","    //! Creates a matcher that accepts doubles within certain relative range of target","    WithinRelMatcher WithinRel(double target, double eps);","    //! Creates a matcher that accepts doubles within 100*DBL_EPS relative range of target","    WithinRelMatcher WithinRel(double target);","    //! Creates a matcher that accepts doubles within certain relative range of target","    WithinRelMatcher WithinRel(float target, float eps);","    //! Creates a matcher that accepts floats within 100*FLT_EPS relative range of target","    WithinRelMatcher WithinRel(float target);","","","","    class IsNaNMatcher final : public MatcherBase\u003cdouble\u003e {","    public:","        IsNaNMatcher() = default;","        bool match( double const\u0026 matchee ) const override;","        std::string describe() const override;","    };","","    IsNaNMatcher IsNaN();","","} // namespace Matchers","} // namespace Catch","","#endif // CATCH_MATCHERS_FLOATING_POINT_HPP_INCLUDED","","","#ifndef CATCH_MATCHERS_PREDICATE_HPP_INCLUDED","#define CATCH_MATCHERS_PREDICATE_HPP_INCLUDED","","","#include \u003cstring\u003e","","namespace Catch {","namespace Matchers {","","namespace Detail {","    std::string finalizeDescription(const std::string\u0026 desc);","} // namespace Detail","","template \u003ctypename T, typename Predicate\u003e","class PredicateMatcher final : public MatcherBase\u003cT\u003e {","    Predicate m_predicate;","    std::string m_description;","public:","","    PredicateMatcher(Predicate\u0026\u0026 elem, std::string const\u0026 descr)","        :m_predicate(CATCH_FORWARD(elem)),","        m_description(Detail::finalizeDescription(descr))","    {}","","    bool match( T const\u0026 item ) const override {","        return m_predicate(item);","    }","","    std::string describe() const override {","        return m_description;","    }","};","","    /**","     * Creates a matcher that calls delegates `match` to the provided predicate.","     *","     * The user has to explicitly specify the argument type to the matcher","     */","    template\u003ctypename T, typename Pred\u003e","    PredicateMatcher\u003cT, Pred\u003e Predicate(Pred\u0026\u0026 predicate, std::string const\u0026 description = \"\") {","        static_assert(is_callable\u003cPred(T)\u003e::value, \"Predicate not callable with argument T\");","        static_assert(std::is_same\u003cbool, FunctionReturnType\u003cPred, T\u003e\u003e::value, \"Predicate does not return bool\");","        return PredicateMatcher\u003cT, Pred\u003e(CATCH_FORWARD(predicate), description);","    }","","} // namespace Matchers","} // namespace Catch","","#endif // CATCH_MATCHERS_PREDICATE_HPP_INCLUDED","","","#ifndef CATCH_MATCHERS_QUANTIFIERS_HPP_INCLUDED","#define CATCH_MATCHERS_QUANTIFIERS_HPP_INCLUDED","","","namespace Catch {","    namespace Matchers {","        // Matcher for checking that all elements in range matches a given matcher.","        template \u003ctypename Matcher\u003e","        class AllMatchMatcher final : public MatcherGenericBase {","            Matcher m_matcher;","        public:","            AllMatchMatcher(Matcher matcher):","                m_matcher(CATCH_MOVE(matcher))","            {}","","            std::string describe() const override {","                return \"all match \" + m_matcher.describe();","            }","","            template \u003ctypename RangeLike\u003e","            bool match(RangeLike\u0026\u0026 rng) const {","                for (auto\u0026\u0026 elem : rng) {","                    if (!m_matcher.match(elem)) {","                        return false;","                    }","                }","                return true;","            }","        };","","        // Matcher for checking that no element in range matches a given matcher.","        template \u003ctypename Matcher\u003e","        class NoneMatchMatcher final : public MatcherGenericBase {","            Matcher m_matcher;","        public:","            NoneMatchMatcher(Matcher matcher):","                m_matcher(CATCH_MOVE(matcher))","            {}","","            std::string describe() const override {","                return \"none match \" + m_matcher.describe();","            }","","            template \u003ctypename RangeLike\u003e","            bool match(RangeLike\u0026\u0026 rng) const {","                for (auto\u0026\u0026 elem : rng) {","                    if (m_matcher.match(elem)) {","                        return false;","                    }","                }","                return true;","            }","        };","","        // Matcher for checking that at least one element in range matches a given matcher.","        template \u003ctypename Matcher\u003e","        class AnyMatchMatcher final : public MatcherGenericBase {","            Matcher m_matcher;","        public:","            AnyMatchMatcher(Matcher matcher):","                m_matcher(CATCH_MOVE(matcher))","            {}","","            std::string describe() const override {","                return \"any match \" + m_matcher.describe();","            }","","            template \u003ctypename RangeLike\u003e","            bool match(RangeLike\u0026\u0026 rng) const {","                for (auto\u0026\u0026 elem : rng) {","                    if (m_matcher.match(elem)) {","                        return true;","                    }","                }","                return false;","            }","        };","","        // Matcher for checking that all elements in range are true.","        class AllTrueMatcher final : public MatcherGenericBase {","        public:","            std::string describe() const override;","","            template \u003ctypename RangeLike\u003e","            bool match(RangeLike\u0026\u0026 rng) const {","                for (auto\u0026\u0026 elem : rng) {","                    if (!elem) {","                        return false;","                    }","                }","                return true;","            }","        };","","        // Matcher for checking that no element in range is true.","        class NoneTrueMatcher final : public MatcherGenericBase {","        public:","            std::string describe() const override;","","            template \u003ctypename RangeLike\u003e","            bool match(RangeLike\u0026\u0026 rng) const {","                for (auto\u0026\u0026 elem : rng) {","                    if (elem) {","                        return false;","                    }","                }","                return true;","            }","        };","","        // Matcher for checking that any element in range is true.","        class AnyTrueMatcher final : public MatcherGenericBase {","        public:","            std::string describe() const override;","","            template \u003ctypename RangeLike\u003e","            bool match(RangeLike\u0026\u0026 rng) const {","                for (auto\u0026\u0026 elem : rng) {","                    if (elem) {","                        return true;","                    }","                }","                return false;","            }","        };","","        // Creates a matcher that checks whether all elements in a range match a matcher","        template \u003ctypename Matcher\u003e","        AllMatchMatcher\u003cMatcher\u003e AllMatch(Matcher\u0026\u0026 matcher) {","            return { CATCH_FORWARD(matcher) };","        }","","        // Creates a matcher that checks whether no element in a range matches a matcher.","        template \u003ctypename Matcher\u003e","        NoneMatchMatcher\u003cMatcher\u003e NoneMatch(Matcher\u0026\u0026 matcher) {","            return { CATCH_FORWARD(matcher) };","        }","","        // Creates a matcher that checks whether any element in a range matches a matcher.","        template \u003ctypename Matcher\u003e","        AnyMatchMatcher\u003cMatcher\u003e AnyMatch(Matcher\u0026\u0026 matcher) {","            return { CATCH_FORWARD(matcher) };","        }","","        // Creates a matcher that checks whether all elements in a range are true","        AllTrueMatcher AllTrue();","","        // Creates a matcher that checks whether no element in a range is true","        NoneTrueMatcher NoneTrue();","","        // Creates a matcher that checks whether any element in a range is true","        AnyTrueMatcher AnyTrue();","    }","}","","#endif // CATCH_MATCHERS_QUANTIFIERS_HPP_INCLUDED","","","#ifndef CATCH_MATCHERS_RANGE_EQUALS_HPP_INCLUDED","#define CATCH_MATCHERS_RANGE_EQUALS_HPP_INCLUDED","","","#include \u003calgorithm\u003e","#include \u003cutility\u003e","","namespace Catch {","    namespace Matchers {","","        /**","         * Matcher for checking that an element contains the same","         * elements in the same order","         */","        template \u003ctypename TargetRangeLike, typename Equality\u003e","        class RangeEqualsMatcher final : public MatcherGenericBase {","            TargetRangeLike m_desired;","            Equality m_predicate;","","        public:","            template \u003ctypename TargetRangeLike2, typename Equality2\u003e","            constexpr","            RangeEqualsMatcher( TargetRangeLike2\u0026\u0026 range,","                                Equality2\u0026\u0026 predicate ):","                m_desired( CATCH_FORWARD( range ) ),","                m_predicate( CATCH_FORWARD( predicate ) ) {}","","            template \u003ctypename RangeLike\u003e","            constexpr","            bool match( RangeLike\u0026\u0026 rng ) const {","                auto rng_start = begin( rng );","                const auto rng_end = end( rng );","                auto target_start = begin( m_desired );","                const auto target_end = end( m_desired );","","                while (rng_start != rng_end \u0026\u0026 target_start != target_end) {","                    if (!m_predicate(*rng_start, *target_start)) {","                        return false;","                    }","                    ++rng_start;","                    ++target_start;","                }","                return rng_start == rng_end \u0026\u0026 target_start == target_end;","            }","","            std::string describe() const override {","                return \"elements are \" + Catch::Detail::stringify( m_desired );","            }","        };","","        /**","         * Matcher for checking that an element contains the same","         * elements (but not necessarily in the same order)","         */","        template \u003ctypename TargetRangeLike, typename Equality\u003e","        class UnorderedRangeEqualsMatcher final : public MatcherGenericBase {","            TargetRangeLike m_desired;","            Equality m_predicate;","","        public:","            template \u003ctypename TargetRangeLike2, typename Equality2\u003e","            constexpr","            UnorderedRangeEqualsMatcher( TargetRangeLike2\u0026\u0026 range,","                                         Equality2\u0026\u0026 predicate ):","                m_desired( CATCH_FORWARD( range ) ),","                m_predicate( CATCH_FORWARD( predicate ) ) {}","","            template \u003ctypename RangeLike\u003e","            constexpr","            bool match( RangeLike\u0026\u0026 rng ) const {","                using std::begin;","                using std::end;","                return Catch::Detail::is_permutation( begin( m_desired ),","                                                      end( m_desired ),","                                                      begin( rng ),","                                                      end( rng ),","                                                      m_predicate );","            }","","            std::string describe() const override {","                return \"unordered elements are \" +","                       ::Catch::Detail::stringify( m_desired );","            }","        };","","        /**","         * Creates a matcher that checks if all elements in a range are equal","         * to all elements in another range.","         *","         * Uses the provided predicate `predicate` to do the comparisons","         * (defaulting to `std::equal_to`)","         */","        template \u003ctypename RangeLike,","                  typename Equality = decltype( std::equal_to\u003c\u003e{} )\u003e","        constexpr","        RangeEqualsMatcher\u003cRangeLike, Equality\u003e","        RangeEquals( RangeLike\u0026\u0026 range,","                     Equality\u0026\u0026 predicate = std::equal_to\u003c\u003e{} ) {","            return { CATCH_FORWARD( range ), CATCH_FORWARD( predicate ) };","        }","","        /**","         * Creates a matcher that checks if all elements in a range are equal","         * to all elements in an initializer list.","         *","         * Uses the provided predicate `predicate` to do the comparisons","         * (defaulting to `std::equal_to`)","         */","        template \u003ctypename T,","                  typename Equality = decltype( std::equal_to\u003c\u003e{} )\u003e","        constexpr","        RangeEqualsMatcher\u003cstd::initializer_list\u003cT\u003e, Equality\u003e","        RangeEquals( std::initializer_list\u003cT\u003e range,","                     Equality\u0026\u0026 predicate = std::equal_to\u003c\u003e{} ) {","            return { range, CATCH_FORWARD( predicate ) };","        }","","        /**","         * Creates a matcher that checks if all elements in a range are equal","         * to all elements in another range, in some permutation.","         *","         * Uses the provided predicate `predicate` to do the comparisons","         * (defaulting to `std::equal_to`)","         */","        template \u003ctypename RangeLike,","                  typename Equality = decltype( std::equal_to\u003c\u003e{} )\u003e","        constexpr","        UnorderedRangeEqualsMatcher\u003cRangeLike, Equality\u003e","        UnorderedRangeEquals( RangeLike\u0026\u0026 range,","                              Equality\u0026\u0026 predicate = std::equal_to\u003c\u003e{} ) {","            return { CATCH_FORWARD( range ), CATCH_FORWARD( predicate ) };","        }","","        /**","         * Creates a matcher that checks if all elements in a range are equal","         * to all elements in an initializer list, in some permutation.","         *","         * Uses the provided predicate `predicate` to do the comparisons","         * (defaulting to `std::equal_to`)","         */","        template \u003ctypename T,","                  typename Equality = decltype( std::equal_to\u003c\u003e{} )\u003e","        constexpr","        UnorderedRangeEqualsMatcher\u003cstd::initializer_list\u003cT\u003e, Equality\u003e","        UnorderedRangeEquals( std::initializer_list\u003cT\u003e range,","                              Equality\u0026\u0026 predicate = std::equal_to\u003c\u003e{} ) {","            return { range, CATCH_FORWARD( predicate ) };","        }","    } // namespace Matchers","} // namespace Catch","","#endif // CATCH_MATCHERS_RANGE_EQUALS_HPP_INCLUDED","","","#ifndef CATCH_MATCHERS_STRING_HPP_INCLUDED","#define CATCH_MATCHERS_STRING_HPP_INCLUDED","","","#include \u003cstring\u003e","","namespace Catch {","namespace Matchers {","","    struct CasedString {","        CasedString( std::string const\u0026 str, CaseSensitive caseSensitivity );","        std::string adjustString( std::string const\u0026 str ) const;","        StringRef caseSensitivitySuffix() const;","","        CaseSensitive m_caseSensitivity;","        std::string m_str;","    };","","    class StringMatcherBase : public MatcherBase\u003cstd::string\u003e {","    protected:","        CasedString m_comparator;","        StringRef m_operation;","","    public:","        StringMatcherBase( StringRef operation,","                           CasedString const\u0026 comparator );","        std::string describe() const override;","    };","","    class StringEqualsMatcher final : public StringMatcherBase {","    public:","        StringEqualsMatcher( CasedString const\u0026 comparator );","        bool match( std::string const\u0026 source ) const override;","    };","    class StringContainsMatcher final : public StringMatcherBase {","    public:","        StringContainsMatcher( CasedString const\u0026 comparator );","        bool match( std::string const\u0026 source ) const override;","    };","    class StartsWithMatcher final : public StringMatcherBase {","    public:","        StartsWithMatcher( CasedString const\u0026 comparator );","        bool match( std::string const\u0026 source ) const override;","    };","    class EndsWithMatcher final : public StringMatcherBase {","    public:","        EndsWithMatcher( CasedString const\u0026 comparator );","        bool match( std::string const\u0026 source ) const override;","    };","","    class RegexMatcher final : public MatcherBase\u003cstd::string\u003e {","        std::string m_regex;","        CaseSensitive m_caseSensitivity;","","    public:","        RegexMatcher( std::string regex, CaseSensitive caseSensitivity );","        bool match( std::string const\u0026 matchee ) const override;","        std::string describe() const override;","    };","","    //! Creates matcher that accepts strings that are exactly equal to `str`","    StringEqualsMatcher Equals( std::string const\u0026 str, CaseSensitive caseSensitivity = CaseSensitive::Yes );","    //! Creates matcher that accepts strings that contain `str`","    StringContainsMatcher ContainsSubstring( std::string const\u0026 str, CaseSensitive caseSensitivity = CaseSensitive::Yes );","    //! Creates matcher that accepts strings that _end_ with `str`","    EndsWithMatcher EndsWith( std::string const\u0026 str, CaseSensitive caseSensitivity = CaseSensitive::Yes );","    //! Creates matcher that accepts strings that _start_ with `str`","    StartsWithMatcher StartsWith( std::string const\u0026 str, CaseSensitive caseSensitivity = CaseSensitive::Yes );","    //! Creates matcher that accepts strings matching `regex`","    RegexMatcher Matches( std::string const\u0026 regex, CaseSensitive caseSensitivity = CaseSensitive::Yes );","","} // namespace Matchers","} // namespace Catch","","#endif // CATCH_MATCHERS_STRING_HPP_INCLUDED","","","#ifndef CATCH_MATCHERS_VECTOR_HPP_INCLUDED","#define CATCH_MATCHERS_VECTOR_HPP_INCLUDED","","","#include \u003calgorithm\u003e","","namespace Catch {","namespace Matchers {","","    template\u003ctypename T, typename Alloc\u003e","    class VectorContainsElementMatcher final : public MatcherBase\u003cstd::vector\u003cT, Alloc\u003e\u003e {","        T const\u0026 m_comparator;","","    public:","        VectorContainsElementMatcher(T const\u0026 comparator):","            m_comparator(comparator)","        {}","","        bool match(std::vector\u003cT, Alloc\u003e const\u0026 v) const override {","            for (auto const\u0026 el : v) {","                if (el == m_comparator) {","                    return true;","                }","            }","            return false;","        }","","        std::string describe() const override {","            return \"Contains: \" + ::Catch::Detail::stringify( m_comparator );","        }","    };","","    template\u003ctypename T, typename AllocComp, typename AllocMatch\u003e","    class ContainsMatcher final : public MatcherBase\u003cstd::vector\u003cT, AllocMatch\u003e\u003e {","        std::vector\u003cT, AllocComp\u003e const\u0026 m_comparator;","","    public:","        ContainsMatcher(std::vector\u003cT, AllocComp\u003e const\u0026 comparator):","            m_comparator( comparator )","        {}","","        bool match(std::vector\u003cT, AllocMatch\u003e const\u0026 v) const override {","            // !TBD: see note in EqualsMatcher","            if (m_comparator.size() \u003e v.size())","                return false;","            for (auto const\u0026 comparator : m_comparator) {","                auto present = false;","                for (const auto\u0026 el : v) {","                    if (el == comparator) {","                        present = true;","                        break;","                    }","                }","                if (!present) {","                    return false;","                }","            }","            return true;","        }","        std::string describe() const override {","            return \"Contains: \" + ::Catch::Detail::stringify( m_comparator );","        }","    };","","    template\u003ctypename T, typename AllocComp, typename AllocMatch\u003e","    class EqualsMatcher final : public MatcherBase\u003cstd::vector\u003cT, AllocMatch\u003e\u003e {","        std::vector\u003cT, AllocComp\u003e const\u0026 m_comparator;","","    public:","        EqualsMatcher(std::vector\u003cT, AllocComp\u003e const\u0026 comparator):","            m_comparator( comparator )","        {}","","        bool match(std::vector\u003cT, AllocMatch\u003e const\u0026 v) const override {","            // !TBD: This currently works if all elements can be compared using !=","            // - a more general approach would be via a compare template that defaults","            // to using !=. but could be specialised for, e.g. std::vector\u003cT\u003e etc","            // - then just call that directly","            if ( m_comparator.size() != v.size() ) { return false; }","            for ( std::size_t i = 0; i \u003c v.size(); ++i ) {","                if ( !( m_comparator[i] == v[i] ) ) { return false; }","            }","            return true;","        }","        std::string describe() const override {","            return \"Equals: \" + ::Catch::Detail::stringify( m_comparator );","        }","    };","","    template\u003ctypename T, typename AllocComp, typename AllocMatch\u003e","    class ApproxMatcher final : public MatcherBase\u003cstd::vector\u003cT, AllocMatch\u003e\u003e {","        std::vector\u003cT, AllocComp\u003e const\u0026 m_comparator;","        mutable Catch::Approx approx = Catch::Approx::custom();","","    public:","        ApproxMatcher(std::vector\u003cT, AllocComp\u003e const\u0026 comparator):","            m_comparator( comparator )","        {}","","        bool match(std::vector\u003cT, AllocMatch\u003e const\u0026 v) const override {","            if (m_comparator.size() != v.size())","                return false;","            for (std::size_t i = 0; i \u003c v.size(); ++i)","                if (m_comparator[i] != approx(v[i]))","                    return false;","            return true;","        }","        std::string describe() const override {","            return \"is approx: \" + ::Catch::Detail::stringify( m_comparator );","        }","        template \u003ctypename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        ApproxMatcher\u0026 epsilon( T const\u0026 newEpsilon ) {","            approx.epsilon(static_cast\u003cdouble\u003e(newEpsilon));","            return *this;","        }","        template \u003ctypename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        ApproxMatcher\u0026 margin( T const\u0026 newMargin ) {","            approx.margin(static_cast\u003cdouble\u003e(newMargin));","            return *this;","        }","        template \u003ctypename = std::enable_if_t\u003cstd::is_constructible\u003cdouble, T\u003e::value\u003e\u003e","        ApproxMatcher\u0026 scale( T const\u0026 newScale ) {","            approx.scale(static_cast\u003cdouble\u003e(newScale));","            return *this;","        }","    };","","    template\u003ctypename T, typename AllocComp, typename AllocMatch\u003e","    class UnorderedEqualsMatcher final : public MatcherBase\u003cstd::vector\u003cT, AllocMatch\u003e\u003e {","        std::vector\u003cT, AllocComp\u003e const\u0026 m_target;","","    public:","        UnorderedEqualsMatcher(std::vector\u003cT, AllocComp\u003e const\u0026 target):","            m_target(target)","        {}","        bool match(std::vector\u003cT, AllocMatch\u003e const\u0026 vec) const override {","            if (m_target.size() != vec.size()) {","                return false;","            }","            return std::is_permutation(m_target.begin(), m_target.end(), vec.begin());","        }","","        std::string describe() const override {","            return \"UnorderedEquals: \" + ::Catch::Detail::stringify(m_target);","        }","    };","","","    // The following functions create the actual matcher objects.","    // This allows the types to be inferred","","    //! Creates a matcher that matches vectors that contain all elements in `comparator`","    template\u003ctypename T, typename AllocComp = std::allocator\u003cT\u003e, typename AllocMatch = AllocComp\u003e","    ContainsMatcher\u003cT, AllocComp, AllocMatch\u003e Contains( std::vector\u003cT, AllocComp\u003e const\u0026 comparator ) {","        return ContainsMatcher\u003cT, AllocComp, AllocMatch\u003e(comparator);","    }","","    //! Creates a matcher that matches vectors that contain `comparator` as an element","    template\u003ctypename T, typename Alloc = std::allocator\u003cT\u003e\u003e","    VectorContainsElementMatcher\u003cT, Alloc\u003e VectorContains( T const\u0026 comparator ) {","        return VectorContainsElementMatcher\u003cT, Alloc\u003e(comparator);","    }","","    //! Creates a matcher that matches vectors that are exactly equal to `comparator`","    template\u003ctypename T, typename AllocComp = std::allocator\u003cT\u003e, typename AllocMatch = AllocComp\u003e","    EqualsMatcher\u003cT, AllocComp, AllocMatch\u003e Equals( std::vector\u003cT, AllocComp\u003e const\u0026 comparator ) {","        return EqualsMatcher\u003cT, AllocComp, AllocMatch\u003e(comparator);","    }","","    //! Creates a matcher that matches vectors that `comparator` as an element","    template\u003ctypename T, typename AllocComp = std::allocator\u003cT\u003e, typename AllocMatch = AllocComp\u003e","    ApproxMatcher\u003cT, AllocComp, AllocMatch\u003e Approx( std::vector\u003cT, AllocComp\u003e const\u0026 comparator ) {","        return ApproxMatcher\u003cT, AllocComp, AllocMatch\u003e(comparator);","    }","","    //! Creates a matcher that matches vectors that is equal to `target` modulo permutation","    template\u003ctypename T, typename AllocComp = std::allocator\u003cT\u003e, typename AllocMatch = AllocComp\u003e","    UnorderedEqualsMatcher\u003cT, AllocComp, AllocMatch\u003e UnorderedEquals(std::vector\u003cT, AllocComp\u003e const\u0026 target) {","        return UnorderedEqualsMatcher\u003cT, AllocComp, AllocMatch\u003e(target);","    }","","} // namespace Matchers","} // namespace Catch","","#endif // CATCH_MATCHERS_VECTOR_HPP_INCLUDED","","#endif // CATCH_MATCHERS_ALL_HPP_INCLUDED","","","/** \\file"," * This is a convenience header for Catch2's Reporter support. It includes"," * **all** of Catch2 headers related to reporters, including all reporters."," *"," * Generally the Catch2 users should use specific includes they need,"," * but this header can be used instead for ease-of-experimentation, or"," * just plain convenience, at the cost of (significantly) increased"," * compilation times."," *"," * When a new header (reporter) is added to either the `reporter` folder,"," * or to the corresponding internal subfolder, it should be added here."," */","","#ifndef CATCH_REPORTERS_ALL_HPP_INCLUDED","#define CATCH_REPORTERS_ALL_HPP_INCLUDED","","","","#ifndef CATCH_REPORTER_AUTOMAKE_HPP_INCLUDED","#define CATCH_REPORTER_AUTOMAKE_HPP_INCLUDED","","","","#ifndef CATCH_REPORTER_STREAMING_BASE_HPP_INCLUDED","#define CATCH_REPORTER_STREAMING_BASE_HPP_INCLUDED","","","","#ifndef CATCH_REPORTER_COMMON_BASE_HPP_INCLUDED","#define CATCH_REPORTER_COMMON_BASE_HPP_INCLUDED","","","#include \u003cmap\u003e","#include \u003cstring\u003e","","namespace Catch {","    class ColourImpl;","","    /**","     * This is the base class for all reporters.","     *","     * If are writing a reporter, you must derive from this type, or one","     * of the helper reporter bases that are derived from this type.","     *","     * ReporterBase centralizes handling of various common tasks in reporters,","     * like storing the right stream for the reporters to write to, and","     * providing the default implementation of the different listing events.","     */","    class ReporterBase : public IEventListener {","    protected:","        //! The stream wrapper as passed to us by outside code","        Detail::unique_ptr\u003cIStream\u003e m_wrapped_stream;","        //! Cached output stream from `m_wrapped_stream` to reduce","        //! number of indirect calls needed to write output.","        std::ostream\u0026 m_stream;","        //! Colour implementation this reporter was configured for","        Detail::unique_ptr\u003cColourImpl\u003e m_colour;","        //! The custom reporter options user passed down to the reporter","        std::map\u003cstd::string, std::string\u003e m_customOptions;","","    public:","        ReporterBase( ReporterConfig\u0026\u0026 config );","        ~ReporterBase() override; // = default;","","        /**","         * Provides a simple default listing of reporters.","         *","         * Should look roughly like the reporter listing in v2 and earlier","         * versions of Catch2.","         */","        void listReporters(","            std::vector\u003cReporterDescription\u003e const\u0026 descriptions ) override;","        /**","         * Provides a simple default listing of listeners","         *","         * Looks similarly to listing of reporters, but with listener type","         * instead of reporter name.","         */","        void listListeners(","            std::vector\u003cListenerDescription\u003e const\u0026 descriptions ) override;","        /**","         * Provides a simple default listing of tests.","         *","         * Should look roughly like the test listing in v2 and earlier versions","         * of Catch2. Especially supports low-verbosity listing that mimics the","         * old `--list-test-names-only` output.","         */","        void listTests( std::vector\u003cTestCaseHandle\u003e const\u0026 tests ) override;","        /**","         * Provides a simple default listing of tags.","         *","         * Should look roughly like the tag listing in v2 and earlier versions","         * of Catch2.","         */","        void listTags( std::vector\u003cTagInfo\u003e const\u0026 tags ) override;","    };","} // namespace Catch","","#endif // CATCH_REPORTER_COMMON_BASE_HPP_INCLUDED","","#include \u003cvector\u003e","","namespace Catch {","","    class StreamingReporterBase : public ReporterBase {","    public:","        // GCC5 compat: we cannot use inherited constructor, because it","        //              doesn't implement backport of P0136","        StreamingReporterBase(ReporterConfig\u0026\u0026 _config):","            ReporterBase(CATCH_MOVE(_config))","        {}","        ~StreamingReporterBase() override;","","        void benchmarkPreparing( StringRef ) override {}","        void benchmarkStarting( BenchmarkInfo const\u0026 ) override {}","        void benchmarkEnded( BenchmarkStats\u003c\u003e const\u0026 ) override {}","        void benchmarkFailed( StringRef ) override {}","","        void fatalErrorEncountered( StringRef /*error*/ ) override {}","        void noMatchingTestCases( StringRef /*unmatchedSpec*/ ) override {}","        void reportInvalidTestSpec( StringRef /*invalidArgument*/ ) override {}","","        void testRunStarting( TestRunInfo const\u0026 _testRunInfo ) override;","","        void testCaseStarting(TestCaseInfo const\u0026 _testInfo) override  {","            currentTestCaseInfo = \u0026_testInfo;","        }","        void testCasePartialStarting( TestCaseInfo const\u0026, uint64_t ) override {}","        void sectionStarting(SectionInfo const\u0026 _sectionInfo) override {","            m_sectionStack.push_back(_sectionInfo);","        }","","        void assertionStarting( AssertionInfo const\u0026 ) override {}","        void assertionEnded( AssertionStats const\u0026 ) override {}","","        void sectionEnded(SectionStats const\u0026 /* _sectionStats */) override {","            m_sectionStack.pop_back();","        }","        void testCasePartialEnded( TestCaseStats const\u0026, uint64_t ) override {}","        void testCaseEnded(TestCaseStats const\u0026 /* _testCaseStats */) override {","            currentTestCaseInfo = nullptr;","        }","        void testRunEnded( TestRunStats const\u0026 /* _testRunStats */ ) override;","","        void skipTest(TestCaseInfo const\u0026) override {","            // Don't do anything with this by default.","            // It can optionally be overridden in the derived class.","        }","","    protected:","        TestRunInfo currentTestRunInfo{ \"test run has not started yet\"_sr };","        TestCaseInfo const* currentTestCaseInfo = nullptr;","","        //! Stack of all _active_ sections in the _current_ test case","        std::vector\u003cSectionInfo\u003e m_sectionStack;","    };","","} // end namespace Catch","","#endif // CATCH_REPORTER_STREAMING_BASE_HPP_INCLUDED","","#include \u003cstring\u003e","","namespace Catch {","","    class AutomakeReporter final : public StreamingReporterBase {","    public:","        // GCC5 compat: we cannot use inherited constructor, because it","        //              doesn't implement backport of P0136","        AutomakeReporter(ReporterConfig\u0026\u0026 _config):","            StreamingReporterBase(CATCH_MOVE(_config))","        {}","        ~AutomakeReporter() override;","","        static std::string getDescription() {","            using namespace std::string_literals;","            return \"Reports test results in the format of Automake .trs files\"s;","        }","","        void testCaseEnded(TestCaseStats const\u0026 _testCaseStats) override;","        void skipTest(TestCaseInfo const\u0026 testInfo) override;","    };","","} // end namespace Catch","","#endif // CATCH_REPORTER_AUTOMAKE_HPP_INCLUDED","","","#ifndef CATCH_REPORTER_COMPACT_HPP_INCLUDED","#define CATCH_REPORTER_COMPACT_HPP_INCLUDED","","","","","namespace Catch {","","    class CompactReporter final : public StreamingReporterBase {","    public:","        using StreamingReporterBase::StreamingReporterBase;","","        ~CompactReporter() override;","","        static std::string getDescription();","","        void noMatchingTestCases( StringRef unmatchedSpec ) override;","","        void testRunStarting( TestRunInfo const\u0026 _testInfo ) override;","","        void assertionEnded(AssertionStats const\u0026 _assertionStats) override;","","        void sectionEnded(SectionStats const\u0026 _sectionStats) override;","","        void testRunEnded(TestRunStats const\u0026 _testRunStats) override;","","    };","","} // end namespace Catch","","#endif // CATCH_REPORTER_COMPACT_HPP_INCLUDED","","","#ifndef CATCH_REPORTER_CONSOLE_HPP_INCLUDED","#define CATCH_REPORTER_CONSOLE_HPP_INCLUDED","","","namespace Catch {","    // Fwd decls","    class TablePrinter;","","    class ConsoleReporter final : public StreamingReporterBase {","        Detail::unique_ptr\u003cTablePrinter\u003e m_tablePrinter;","","    public:","        ConsoleReporter(ReporterConfig\u0026\u0026 config);","        ~ConsoleReporter() override;","        static std::string getDescription();","","        void noMatchingTestCases( StringRef unmatchedSpec ) override;","        void reportInvalidTestSpec( StringRef arg ) override;","","        void assertionStarting(AssertionInfo const\u0026) override;","","        void assertionEnded(AssertionStats const\u0026 _assertionStats) override;","","        void sectionStarting(SectionInfo const\u0026 _sectionInfo) override;","        void sectionEnded(SectionStats const\u0026 _sectionStats) override;","","        void benchmarkPreparing( StringRef name ) override;","        void benchmarkStarting(BenchmarkInfo const\u0026 info) override;","        void benchmarkEnded(BenchmarkStats\u003c\u003e const\u0026 stats) override;","        void benchmarkFailed( StringRef error ) override;","","        void testCaseEnded(TestCaseStats const\u0026 _testCaseStats) override;","        void testRunEnded(TestRunStats const\u0026 _testRunStats) override;","        void testRunStarting(TestRunInfo const\u0026 _testRunInfo) override;","","    private:","        void lazyPrint();","","        void lazyPrintWithoutClosingBenchmarkTable();","        void lazyPrintRunInfo();","        void printTestCaseAndSectionHeader();","","        void printClosedHeader(std::string const\u0026 _name);","        void printOpenHeader(std::string const\u0026 _name);","","        // if string has a : in first line will set indent to follow it on","        // subsequent lines","        void printHeaderString(std::string const\u0026 _string, std::size_t indent = 0);","","        void printTotalsDivider(Totals const\u0026 totals);","","        bool m_headerPrinted = false;","        bool m_testRunInfoPrinted = false;","    };","","} // end namespace Catch","","#endif // CATCH_REPORTER_CONSOLE_HPP_INCLUDED","","","#ifndef CATCH_REPORTER_CUMULATIVE_BASE_HPP_INCLUDED","#define CATCH_REPORTER_CUMULATIVE_BASE_HPP_INCLUDED","","","#include \u003cstring\u003e","#include \u003cvector\u003e","","namespace Catch {","","    namespace Detail {","","        //! Represents either an assertion or a benchmark result to be handled by cumulative reporter later","        class AssertionOrBenchmarkResult {","            // This should really be a variant, but this is much faster","            // to write and the data layout here is already terrible","            // enough that we do not have to care about the object size.","            Optional\u003cAssertionStats\u003e m_assertion;","            Optional\u003cBenchmarkStats\u003c\u003e\u003e m_benchmark;","        public:","            AssertionOrBenchmarkResult(AssertionStats const\u0026 assertion);","            AssertionOrBenchmarkResult(BenchmarkStats\u003c\u003e const\u0026 benchmark);","","            bool isAssertion() const;","            bool isBenchmark() const;","","            AssertionStats const\u0026 asAssertion() const;","            BenchmarkStats\u003c\u003e const\u0026 asBenchmark() const;","        };","    }","","    /**","     * Utility base for reporters that need to handle all results at once","     *","     * It stores tree of all test cases, sections and assertions, and after the","     * test run is finished, calls into `testRunEndedCumulative` to pass the","     * control to the deriving class.","     *","     * If you are deriving from this class and override any testing related","     * member functions, you should first call into the base's implementation to","     * avoid breaking the tree construction.","     *","     * Due to the way this base functions, it has to expand assertions up-front,","     * even if they are later unused (e.g. because the deriving reporter does","     * not report successful assertions, or because the deriving reporter does","     * not use assertion expansion at all). Derived classes can use two","     * customization points, `m_shouldStoreSuccesfulAssertions` and","     * `m_shouldStoreFailedAssertions`, to disable the expansion and gain extra","     * performance. **Accessing the assertion expansions if it wasn't stored is","     * UB.**","     */","    class CumulativeReporterBase : public ReporterBase {","    public:","        template\u003ctypename T, typename ChildNodeT\u003e","        struct Node {","            explicit Node( T const\u0026 _value ) : value( _value ) {}","","            using ChildNodes = std::vector\u003cDetail::unique_ptr\u003cChildNodeT\u003e\u003e;","            T value;","            ChildNodes children;","        };","        struct SectionNode {","            explicit SectionNode(SectionStats const\u0026 _stats) : stats(_stats) {}","","            bool operator == (SectionNode const\u0026 other) const {","                return stats.sectionInfo.lineInfo == other.stats.sectionInfo.lineInfo;","            }","","            bool hasAnyAssertions() const;","","            SectionStats stats;","            std::vector\u003cDetail::unique_ptr\u003cSectionNode\u003e\u003e childSections;","            std::vector\u003cDetail::AssertionOrBenchmarkResult\u003e assertionsAndBenchmarks;","            std::string stdOut;","            std::string stdErr;","        };","","","        using TestCaseNode = Node\u003cTestCaseStats, SectionNode\u003e;","        using TestRunNode = Node\u003cTestRunStats, TestCaseNode\u003e;","","        // GCC5 compat: we cannot use inherited constructor, because it","        //              doesn't implement backport of P0136","        CumulativeReporterBase(ReporterConfig\u0026\u0026 _config):","            ReporterBase(CATCH_MOVE(_config))","        {}","        ~CumulativeReporterBase() override;","","        void benchmarkPreparing( StringRef ) override {}","        void benchmarkStarting( BenchmarkInfo const\u0026 ) override {}","        void benchmarkEnded( BenchmarkStats\u003c\u003e const\u0026 benchmarkStats ) override;","        void benchmarkFailed( StringRef ) override {}","","        void noMatchingTestCases( StringRef ) override {}","        void reportInvalidTestSpec( StringRef ) override {}","        void fatalErrorEncountered( StringRef /*error*/ ) override {}","","        void testRunStarting( TestRunInfo const\u0026 ) override {}","","        void testCaseStarting( TestCaseInfo const\u0026 ) override {}","        void testCasePartialStarting( TestCaseInfo const\u0026, uint64_t ) override {}","        void sectionStarting( SectionInfo const\u0026 sectionInfo ) override;","","        void assertionStarting( AssertionInfo const\u0026 ) override {}","","        void assertionEnded( AssertionStats const\u0026 assertionStats ) override;","        void sectionEnded( SectionStats const\u0026 sectionStats ) override;","        void testCasePartialEnded( TestCaseStats const\u0026, uint64_t ) override {}","        void testCaseEnded( TestCaseStats const\u0026 testCaseStats ) override;","        void testRunEnded( TestRunStats const\u0026 testRunStats ) override;","        //! Customization point: called after last test finishes (testRunEnded has been handled)","        virtual void testRunEndedCumulative() = 0;","","        void skipTest(TestCaseInfo const\u0026) override {}","","    protected:","        //! Should the cumulative base store the assertion expansion for successful assertions?","        bool m_shouldStoreSuccesfulAssertions = true;","        //! Should the cumulative base store the assertion expansion for failed assertions?","        bool m_shouldStoreFailedAssertions = true;","","        // We need lazy construction here. We should probably refactor it","        // later, after the events are redone.","        //! The root node of the test run tree.","        Detail::unique_ptr\u003cTestRunNode\u003e m_testRun;","","    private:","        // Note: We rely on pointer identity being stable, which is why","        //       we store pointers to the nodes rather than the values.","        std::vector\u003cDetail::unique_ptr\u003cTestCaseNode\u003e\u003e m_testCases;","        // Root section of the _current_ test case","        Detail::unique_ptr\u003cSectionNode\u003e m_rootSection;","        // Deepest section of the _current_ test case","        SectionNode* m_deepestSection = nullptr;","        // Stack of _active_ sections in the _current_ test case","        std::vector\u003cSectionNode*\u003e m_sectionStack;","    };","","} // end namespace Catch","","#endif // CATCH_REPORTER_CUMULATIVE_BASE_HPP_INCLUDED","","","#ifndef CATCH_REPORTER_EVENT_LISTENER_HPP_INCLUDED","#define CATCH_REPORTER_EVENT_LISTENER_HPP_INCLUDED","","","namespace Catch {","","    /**","     * Base class to simplify implementing listeners.","     *","     * Provides empty default implementation for all IEventListener member","     * functions, so that a listener implementation can pick which","     * member functions it actually cares about.","     */","    class EventListenerBase : public IEventListener {","    public:","        using IEventListener::IEventListener;","","        void reportInvalidTestSpec( StringRef unmatchedSpec ) override;","        void fatalErrorEncountered( StringRef error ) override;","","        void benchmarkPreparing( StringRef name ) override;","        void benchmarkStarting( BenchmarkInfo const\u0026 benchmarkInfo ) override;","        void benchmarkEnded( BenchmarkStats\u003c\u003e const\u0026 benchmarkStats ) override;","        void benchmarkFailed( StringRef error ) override;","","        void assertionStarting( AssertionInfo const\u0026 assertionInfo ) override;","        void assertionEnded( AssertionStats const\u0026 assertionStats ) override;","","        void listReporters(","            std::vector\u003cReporterDescription\u003e const\u0026 descriptions ) override;","        void listListeners(","            std::vector\u003cListenerDescription\u003e const\u0026 descriptions ) override;","        void listTests( std::vector\u003cTestCaseHandle\u003e const\u0026 tests ) override;","        void listTags( std::vector\u003cTagInfo\u003e const\u0026 tagInfos ) override;","","        void noMatchingTestCases( StringRef unmatchedSpec ) override;","        void testRunStarting( TestRunInfo const\u0026 testRunInfo ) override;","        void testCaseStarting( TestCaseInfo const\u0026 testInfo ) override;","        void testCasePartialStarting( TestCaseInfo const\u0026 testInfo,","                                      uint64_t partNumber ) override;","        void sectionStarting( SectionInfo const\u0026 sectionInfo ) override;","        void sectionEnded( SectionStats const\u0026 sectionStats ) override;","        void testCasePartialEnded( TestCaseStats const\u0026 testCaseStats,","                                   uint64_t partNumber ) override;","        void testCaseEnded( TestCaseStats const\u0026 testCaseStats ) override;","        void testRunEnded( TestRunStats const\u0026 testRunStats ) override;","        void skipTest( TestCaseInfo const\u0026 testInfo ) override;","    };","","} // end namespace Catch","","#endif // CATCH_REPORTER_EVENT_LISTENER_HPP_INCLUDED","","","#ifndef CATCH_REPORTER_HELPERS_HPP_INCLUDED","#define CATCH_REPORTER_HELPERS_HPP_INCLUDED","","#include \u003ciosfwd\u003e","#include \u003cstring\u003e","#include \u003cvector\u003e","","","namespace Catch {","","    class IConfig;","    class TestCaseHandle;","    class ColourImpl;","","    // Returns double formatted as %.3f (format expected on output)","    std::string getFormattedDuration( double duration );","","    //! Should the reporter show duration of test given current configuration?","    bool shouldShowDuration( IConfig const\u0026 config, double duration );","","    std::string serializeFilters( std::vector\u003cstd::string\u003e const\u0026 filters );","","    struct lineOfChars {","        char c;","        constexpr lineOfChars( char c_ ): c( c_ ) {}","","        friend std::ostream\u0026 operator\u003c\u003c( std::ostream\u0026 out, lineOfChars value );","    };","","    /**","     * Lists reporter descriptions to the provided stream in user-friendly","     * format","     *","     * Used as the default listing implementation by the first party reporter","     * bases. The output should be backwards compatible with the output of","     * Catch2 v2 binaries.","     */","    void","    defaultListReporters( std::ostream\u0026 out,","                          std::vector\u003cReporterDescription\u003e const\u0026 descriptions,","                          Verbosity verbosity );","","    /**","     * Lists listeners descriptions to the provided stream in user-friendly","     * format","     */","    void defaultListListeners( std::ostream\u0026 out,","                               std::vector\u003cListenerDescription\u003e const\u0026 descriptions );","","    /**","     * Lists tag information to the provided stream in user-friendly format","     *","     * Used as the default listing implementation by the first party reporter","     * bases. The output should be backwards compatible with the output of","     * Catch2 v2 binaries.","     */","    void defaultListTags( std::ostream\u0026 out, std::vector\u003cTagInfo\u003e const\u0026 tags, bool isFiltered );","","    /**","     * Lists test case information to the provided stream in user-friendly","     * format","     *","     * Used as the default listing implementation by the first party reporter","     * bases. The output is backwards compatible with the output of Catch2","     * v2 binaries, and also supports the format specific to the old","     * `--list-test-names-only` option, for people who used it in integrations.","     */","    void defaultListTests( std::ostream\u0026 out,","                           ColourImpl* streamColour,","                           std::vector\u003cTestCaseHandle\u003e const\u0026 tests,","                           bool isFiltered,","                           Verbosity verbosity );","","    /**","     * Prints test run totals to the provided stream in user-friendly format","     *","     * Used by the console and compact reporters.","     */","    void printTestRunTotals( std::ostream\u0026 stream,","                      ColourImpl\u0026 streamColour,","                      Totals const\u0026 totals );","","} // end namespace Catch","","#endif // CATCH_REPORTER_HELPERS_HPP_INCLUDED","","","","#ifndef CATCH_REPORTER_JSON_HPP_INCLUDED","#define CATCH_REPORTER_JSON_HPP_INCLUDED","","","#include \u003cstack\u003e","","namespace Catch {","    class JsonReporter : public StreamingReporterBase {","    public:","        JsonReporter( ReporterConfig\u0026\u0026 config );","","        ~JsonReporter() override;","","        static std::string getDescription();","","    public: // StreamingReporterBase","        void testRunStarting( TestRunInfo const\u0026 runInfo ) override;","        void testRunEnded( TestRunStats const\u0026 runStats ) override;","","        void testCaseStarting( TestCaseInfo const\u0026 tcInfo ) override;","        void testCaseEnded( TestCaseStats const\u0026 tcStats ) override;","","        void testCasePartialStarting( TestCaseInfo const\u0026 tcInfo,","                                      uint64_t index ) override;","        void testCasePartialEnded( TestCaseStats const\u0026 tcStats,","                                   uint64_t index ) override;","","        void sectionStarting( SectionInfo const\u0026 sectionInfo ) override;","        void sectionEnded( SectionStats const\u0026 sectionStats ) override;","","        void assertionStarting( AssertionInfo const\u0026 assertionInfo ) override;","        void assertionEnded( AssertionStats const\u0026 assertionStats ) override;","","        //void testRunEndedCumulative() override;","","        void benchmarkPreparing( StringRef name ) override;","        void benchmarkStarting( BenchmarkInfo const\u0026 ) override;","        void benchmarkEnded( BenchmarkStats\u003c\u003e const\u0026 ) override;","        void benchmarkFailed( StringRef error ) override;","","        void listReporters(","            std::vector\u003cReporterDescription\u003e const\u0026 descriptions ) override;","        void listListeners(","            std::vector\u003cListenerDescription\u003e const\u0026 descriptions ) override;","        void listTests( std::vector\u003cTestCaseHandle\u003e const\u0026 tests ) override;","        void listTags( std::vector\u003cTagInfo\u003e const\u0026 tags ) override;","","    private:","        Timer m_testCaseTimer;","        enum class Writer {","            Object,","            Array","        };","","        JsonArrayWriter\u0026 startArray();","        JsonArrayWriter\u0026 startArray( StringRef key );","","        JsonObjectWriter\u0026 startObject();","        JsonObjectWriter\u0026 startObject( StringRef key );","","        void endObject();","        void endArray();","","        bool isInside( Writer writer );","","        void startListing();","        void endListing();","","        // Invariant:","        // When m_writers is not empty and its top element is","        // - Writer::Object, then m_objectWriters is not be empty","        // - Writer::Array,  then m_arrayWriters shall not be empty","        std::stack\u003cJsonObjectWriter\u003e m_objectWriters{};","        std::stack\u003cJsonArrayWriter\u003e m_arrayWriters{};","        std::stack\u003cWriter\u003e m_writers{};","","        bool m_startedListing = false;","","        // std::size_t m_sectionDepth = 0;","        // std::size_t m_sectionStarted = 0;","    };","} // namespace Catch","","#endif // CATCH_REPORTER_JSON_HPP_INCLUDED","","","#ifndef CATCH_REPORTER_JUNIT_HPP_INCLUDED","#define CATCH_REPORTER_JUNIT_HPP_INCLUDED","","","","namespace Catch {","","    class JunitReporter final : public CumulativeReporterBase {","    public:","        JunitReporter(ReporterConfig\u0026\u0026 _config);","","        static std::string getDescription();","","        void testRunStarting(TestRunInfo const\u0026 runInfo) override;","","        void testCaseStarting(TestCaseInfo const\u0026 testCaseInfo) override;","        void assertionEnded(AssertionStats const\u0026 assertionStats) override;","","        void testCaseEnded(TestCaseStats const\u0026 testCaseStats) override;","","        void testRunEndedCumulative() override;","","    private:","        void writeRun(TestRunNode const\u0026 testRunNode, double suiteTime);","","        void writeTestCase(TestCaseNode const\u0026 testCaseNode);","","        void writeSection( std::string const\u0026 className,","                           std::string const\u0026 rootName,","                           SectionNode const\u0026 sectionNode,","                           bool testOkToFail );","","        void writeAssertions(SectionNode const\u0026 sectionNode);","        void writeAssertion(AssertionStats const\u0026 stats);","","        XmlWriter xml;","        Timer suiteTimer;","        std::string stdOutForSuite;","        std::string stdErrForSuite;","        unsigned int unexpectedExceptions = 0;","        bool m_okToFail = false;","    };","","} // end namespace Catch","","#endif // CATCH_REPORTER_JUNIT_HPP_INCLUDED","","","#ifndef CATCH_REPORTER_MULTI_HPP_INCLUDED","#define CATCH_REPORTER_MULTI_HPP_INCLUDED","","","namespace Catch {","","    class MultiReporter final : public IEventListener {","        /*","         * Stores all added reporters and listeners","         *","         * All Listeners are stored before all reporters, and individual","         * listeners/reporters are stored in order of insertion.","         */","        std::vector\u003cIEventListenerPtr\u003e m_reporterLikes;","        bool m_haveNoncapturingReporters = false;","","        // Keep track of how many listeners we have already inserted,","        // so that we can insert them into the main vector at the right place","        size_t m_insertedListeners = 0;","","        void updatePreferences(IEventListener const\u0026 reporterish);","","    public:","        using IEventListener::IEventListener;","","        void addListener( IEventListenerPtr\u0026\u0026 listener );","        void addReporter( IEventListenerPtr\u0026\u0026 reporter );","","    public: // IEventListener","","        void noMatchingTestCases( StringRef unmatchedSpec ) override;","        void fatalErrorEncountered( StringRef error ) override;","        void reportInvalidTestSpec( StringRef arg ) override;","","        void benchmarkPreparing( StringRef name ) override;","        void benchmarkStarting( BenchmarkInfo const\u0026 benchmarkInfo ) override;","        void benchmarkEnded( BenchmarkStats\u003c\u003e const\u0026 benchmarkStats ) override;","        void benchmarkFailed( StringRef error ) override;","","        void testRunStarting( TestRunInfo const\u0026 testRunInfo ) override;","        void testCaseStarting( TestCaseInfo const\u0026 testInfo ) override;","        void testCasePartialStarting(TestCaseInfo const\u0026 testInfo, uint64_t partNumber) override;","        void sectionStarting( SectionInfo const\u0026 sectionInfo ) override;","        void assertionStarting( AssertionInfo const\u0026 assertionInfo ) override;","","        void assertionEnded( AssertionStats const\u0026 assertionStats ) override;","        void sectionEnded( SectionStats const\u0026 sectionStats ) override;","        void testCasePartialEnded(TestCaseStats const\u0026 testStats, uint64_t partNumber) override;","        void testCaseEnded( TestCaseStats const\u0026 testCaseStats ) override;","        void testRunEnded( TestRunStats const\u0026 testRunStats ) override;","","        void skipTest( TestCaseInfo const\u0026 testInfo ) override;","","        void listReporters(std::vector\u003cReporterDescription\u003e const\u0026 descriptions) override;","        void listListeners(std::vector\u003cListenerDescription\u003e const\u0026 descriptions) override;","        void listTests(std::vector\u003cTestCaseHandle\u003e const\u0026 tests) override;","        void listTags(std::vector\u003cTagInfo\u003e const\u0026 tags) override;","","","    };","","} // end namespace Catch","","#endif // CATCH_REPORTER_MULTI_HPP_INCLUDED","","","#ifndef CATCH_REPORTER_REGISTRARS_HPP_INCLUDED","#define CATCH_REPORTER_REGISTRARS_HPP_INCLUDED","","","#include \u003ctype_traits\u003e","","namespace Catch {","","    namespace Detail {","","        template \u003ctypename T, typename = void\u003e","        struct has_description : std::false_type {};","","        template \u003ctypename T\u003e","        struct has_description\u003c","            T,","            void_t\u003cdecltype( T::getDescription() )\u003e\u003e","            : std::true_type {};","","        //! Indirection for reporter registration, so that the error handling is","        //! independent on the reporter's concrete type","        void registerReporterImpl( std::string const\u0026 name,","                                   IReporterFactoryPtr reporterPtr );","        //! Actually registers the factory, independent on listener's concrete type","        void registerListenerImpl( Detail::unique_ptr\u003cEventListenerFactory\u003e listenerFactory );","    } // namespace Detail","","    class IEventListener;","    using IEventListenerPtr = Detail::unique_ptr\u003cIEventListener\u003e;","","    template \u003ctypename T\u003e","    class ReporterFactory : public IReporterFactory {","","        IEventListenerPtr create( ReporterConfig\u0026\u0026 config ) const override {","            return Detail::make_unique\u003cT\u003e( CATCH_MOVE(config) );","        }","","        std::string getDescription() const override {","            return T::getDescription();","        }","    };","","","    template\u003ctypename T\u003e","    class ReporterRegistrar {","    public:","        explicit ReporterRegistrar( std::string const\u0026 name ) {","            registerReporterImpl( name,","                                  Detail::make_unique\u003cReporterFactory\u003cT\u003e\u003e() );","        }","    };","","    template\u003ctypename T\u003e","    class ListenerRegistrar {","","        class TypedListenerFactory : public EventListenerFactory {","            StringRef m_listenerName;","","            std::string getDescriptionImpl( std::true_type ) const {","                return T::getDescription();","            }","","            std::string getDescriptionImpl( std::false_type ) const {","                return \"(No description provided)\";","            }","","        public:","            TypedListenerFactory( StringRef listenerName ):","                m_listenerName( listenerName ) {}","","            IEventListenerPtr create( IConfig const* config ) const override {","                return Detail::make_unique\u003cT\u003e( config );","            }","","            StringRef getName() const override {","                return m_listenerName;","            }","","            std::string getDescription() const override {","                return getDescriptionImpl( Detail::has_description\u003cT\u003e{} );","            }","        };","","    public:","        ListenerRegistrar(StringRef listenerName) {","            registerListenerImpl( Detail::make_unique\u003cTypedListenerFactory\u003e(listenerName) );","        }","    };","}","","#if !defined(CATCH_CONFIG_DISABLE)","","#    define CATCH_REGISTER_REPORTER( name, reporterType )                      \\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION                              \\","        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS                               \\","        namespace {                                                            \\","            Catch::ReporterRegistrar\u003creporterType\u003e INTERNAL_CATCH_UNIQUE_NAME( \\","                catch_internal_RegistrarFor )( name );                         \\","        }                                                                      \\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION","","#    define CATCH_REGISTER_LISTENER( listenerType )                            \\","        CATCH_INTERNAL_START_WARNINGS_SUPPRESSION                              \\","        CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS                               \\","        namespace {                                                            \\","            Catch::ListenerRegistrar\u003clistenerType\u003e INTERNAL_CATCH_UNIQUE_NAME( \\","                catch_internal_RegistrarFor )( #listenerType##_catch_sr );     \\","        }                                                                      \\","        CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION","","#else // CATCH_CONFIG_DISABLE","","#define CATCH_REGISTER_REPORTER(name, reporterType)","#define CATCH_REGISTER_LISTENER(listenerType)","","#endif // CATCH_CONFIG_DISABLE","","#endif // CATCH_REPORTER_REGISTRARS_HPP_INCLUDED","","","#ifndef CATCH_REPORTER_SONARQUBE_HPP_INCLUDED","#define CATCH_REPORTER_SONARQUBE_HPP_INCLUDED","","","","namespace Catch {","","    class SonarQubeReporter final : public CumulativeReporterBase {","    public:","        SonarQubeReporter(ReporterConfig\u0026\u0026 config)","        : CumulativeReporterBase(CATCH_MOVE(config))","        , xml(m_stream) {","            m_preferences.shouldRedirectStdOut = true;","            m_preferences.shouldReportAllAssertions = false;","            m_shouldStoreSuccesfulAssertions = false;","        }","","        static std::string getDescription() {","            using namespace std::string_literals;","            return \"Reports test results in the Generic Test Data SonarQube XML format\"s;","        }","","        void testRunStarting( TestRunInfo const\u0026 testRunInfo ) override;","","        void testRunEndedCumulative() override {","            writeRun( *m_testRun );","            xml.endElement();","        }","","        void writeRun( TestRunNode const\u0026 runNode );","","        void writeTestFile(StringRef filename, std::vector\u003cTestCaseNode const*\u003e const\u0026 testCaseNodes);","","        void writeTestCase(TestCaseNode const\u0026 testCaseNode);","","        void writeSection(std::string const\u0026 rootName, SectionNode const\u0026 sectionNode, bool okToFail);","","        void writeAssertions(SectionNode const\u0026 sectionNode, bool okToFail);","","        void writeAssertion(AssertionStats const\u0026 stats, bool okToFail);","","    private:","        XmlWriter xml;","    };","","","} // end namespace Catch","","#endif // CATCH_REPORTER_SONARQUBE_HPP_INCLUDED","","","#ifndef CATCH_REPORTER_TAP_HPP_INCLUDED","#define CATCH_REPORTER_TAP_HPP_INCLUDED","","","namespace Catch {","","    class TAPReporter final : public StreamingReporterBase {","    public:","        TAPReporter( ReporterConfig\u0026\u0026 config ):","            StreamingReporterBase( CATCH_MOVE(config) ) {","            m_preferences.shouldReportAllAssertions = true;","        }","","        static std::string getDescription() {","            using namespace std::string_literals;","            return \"Reports test results in TAP format, suitable for test harnesses\"s;","        }","","        void testRunStarting( TestRunInfo const\u0026 testInfo ) override;","","        void noMatchingTestCases( StringRef unmatchedSpec ) override;","","        void assertionEnded(AssertionStats const\u0026 _assertionStats) override;","","        void testRunEnded(TestRunStats const\u0026 _testRunStats) override;","","    private:","        std::size_t counter = 0;","    };","","} // end namespace Catch","","#endif // CATCH_REPORTER_TAP_HPP_INCLUDED","","","#ifndef CATCH_REPORTER_TEAMCITY_HPP_INCLUDED","#define CATCH_REPORTER_TEAMCITY_HPP_INCLUDED","","","#include \u003ccstring\u003e","","#ifdef __clang__","#   pragma clang diagnostic push","#   pragma clang diagnostic ignored \"-Wpadded\"","#endif","","namespace Catch {","","    class TeamCityReporter final : public StreamingReporterBase {","    public:","        TeamCityReporter( ReporterConfig\u0026\u0026 _config )","        :   StreamingReporterBase( CATCH_MOVE(_config) )","        {","            m_preferences.shouldRedirectStdOut = true;","        }","","        ~TeamCityReporter() override;","","        static std::string getDescription() {","            using namespace std::string_literals;","            return \"Reports test results as TeamCity service messages\"s;","        }","","        void testRunStarting( TestRunInfo const\u0026 runInfo ) override;","        void testRunEnded( TestRunStats const\u0026 runStats ) override;","","","        void assertionEnded(AssertionStats const\u0026 assertionStats) override;","","        void sectionStarting(SectionInfo const\u0026 sectionInfo) override {","            m_headerPrintedForThisSection = false;","            StreamingReporterBase::sectionStarting( sectionInfo );","        }","","        void testCaseStarting(TestCaseInfo const\u0026 testInfo) override;","","        void testCaseEnded(TestCaseStats const\u0026 testCaseStats) override;","","    private:","        void printSectionHeader(std::ostream\u0026 os);","","        bool m_headerPrintedForThisSection = false;","        Timer m_testTimer;","    };","","} // end namespace Catch","","#ifdef __clang__","#   pragma clang diagnostic pop","#endif","","#endif // CATCH_REPORTER_TEAMCITY_HPP_INCLUDED","","","#ifndef CATCH_REPORTER_XML_HPP_INCLUDED","#define CATCH_REPORTER_XML_HPP_INCLUDED","","","","","namespace Catch {","    class XmlReporter : public StreamingReporterBase {","    public:","        XmlReporter(ReporterConfig\u0026\u0026 _config);","","        ~XmlReporter() override;","","        static std::string getDescription();","","        virtual std::string getStylesheetRef() const;","","        void writeSourceInfo(SourceLineInfo const\u0026 sourceInfo);","","    public: // StreamingReporterBase","","        void testRunStarting(TestRunInfo const\u0026 testInfo) override;","","        void testCaseStarting(TestCaseInfo const\u0026 testInfo) override;","","        void sectionStarting(SectionInfo const\u0026 sectionInfo) override;","","        void assertionStarting(AssertionInfo const\u0026) override;","","        void assertionEnded(AssertionStats const\u0026 assertionStats) override;","","        void sectionEnded(SectionStats const\u0026 sectionStats) override;","","        void testCaseEnded(TestCaseStats const\u0026 testCaseStats) override;","","        void testRunEnded(TestRunStats const\u0026 testRunStats) override;","","        void benchmarkPreparing( StringRef name ) override;","        void benchmarkStarting(BenchmarkInfo const\u0026) override;","        void benchmarkEnded(BenchmarkStats\u003c\u003e const\u0026) override;","        void benchmarkFailed( StringRef error ) override;","","        void listReporters(std::vector\u003cReporterDescription\u003e const\u0026 descriptions) override;","        void listListeners(std::vector\u003cListenerDescription\u003e const\u0026 descriptions) override;","        void listTests(std::vector\u003cTestCaseHandle\u003e const\u0026 tests) override;","        void listTags(std::vector\u003cTagInfo\u003e const\u0026 tags) override;","","    private:","        Timer m_testCaseTimer;","        XmlWriter m_xml;","        int m_sectionDepth = 0;","    };","","} // end namespace Catch","","#endif // CATCH_REPORTER_XML_HPP_INCLUDED","","#endif // CATCH_REPORTERS_ALL_HPP_INCLUDED","","#endif // CATCH_ALL_HPP_INCLUDED","#endif // CATCH_AMALGAMATED_HPP_INCLUDED"],"stylingDirectives":null,"colorizedLines":null,"csv":null,"csvError":null,"dependabotInfo":{"showConfigurationBanner":false,"configFilePath":null,"networkDependabotPath":"/catchorg/Catch2/network/updates","dismissConfigurationNoticePath":"/settings/dismiss-notice/dependabot_configuration_notice","configurationNoticeDismissed":null},"displayName":"catch_amalgamated.hpp","displayUrl":"https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.hpp?raw=true","headerInfo":{"blobSize":"514 KB","deleteTooltip":"You must be signed in to make or propose changes","editTooltip":"You must be signed in to make or propose changes","ghDesktopPath":"https://desktop.github.com","isGitLfs":false,"onBranch":true,"shortPath":"7703e95","siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fcatchorg%2FCatch2%2Fblob%2Fdevel%2Fextras%2Fcatch_amalgamated.hpp","isCSV":false,"isRichtext":false,"toc":null,"lineInfo":{"truncatedLoc":"14135","truncatedSloc":"11079"},"mode":"file"},"image":false,"isCodeownersFile":null,"isPlain":false,"isValidLegacyIssueTemplate":false,"issueTemplate":null,"discussionTemplate":null,"language":"C++","languageID":43,"large":false,"planSupportInfo":{"repoIsFork":null,"repoOwnedByCurrentUser":null,"requestFullPath":"/catchorg/Catch2/blob/devel/extras/catch_amalgamated.hpp","showFreeOrgGatedFeatureMessage":null,"showPlanSupportBanner":null,"upgradeDataAttributes":null,"upgradePath":null},"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_dockerfile","releasePath":"/catchorg/Catch2/releases/new?marketplace=true","showPublishActionBanner":false},"rawBlobUrl":"https://github.com/catchorg/Catch2/raw/refs/heads/devel/extras/catch_amalgamated.hpp","renderImageOrRaw":false,"richText":null,"renderedFileInfo":null,"shortPath":null,"symbolsEnabled":true,"tabSize":8,"topBannersInfo":{"overridingGlobalFundingFile":false,"globalPreferredFundingPath":null,"showInvalidCitationWarning":false,"citationHelpUrl":"https://docs.github.com/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-citation-files","actionsOnboardingTip":null},"truncated":false,"viewable":true,"workflowRedirectUrl":null,"symbols":{"timed_out":true,"not_analyzed":false,"symbols":[{"name":"IResultCapture","kind":"class","ident_start":22033,"ident_end":22047,"extent_start":22027,"extent_end":22047,"fully_qualified_name":"IResultCapture","ident_utf16":{"start":{"line_number":559,"utf16_col":10},"end":{"line_number":559,"utf16_col":24}},"extent_utf16":{"start":{"line_number":559,"utf16_col":4},"end":{"line_number":559,"utf16_col":24}}},{"name":"IConfig","kind":"class","ident_start":22059,"ident_end":22066,"extent_start":22053,"extent_end":22066,"fully_qualified_name":"IConfig","ident_utf16":{"start":{"line_number":560,"utf16_col":10},"end":{"line_number":560,"utf16_col":17}},"extent_utf16":{"start":{"line_number":560,"utf16_col":4},"end":{"line_number":560,"utf16_col":17}}},{"name":"Context","kind":"class","ident_start":22079,"ident_end":22086,"extent_start":22073,"extent_end":22824,"fully_qualified_name":"Context","ident_utf16":{"start":{"line_number":562,"utf16_col":10},"end":{"line_number":562,"utf16_col":17}},"extent_utf16":{"start":{"line_number":562,"utf16_col":4},"end":{"line_number":582,"utf16_col":5}}},{"name":"createContext","kind":"method","ident_start":22360,"ident_end":22373,"extent_start":22348,"extent_end":22376,"fully_qualified_name":"Context::createContext","ident_utf16":{"start":{"line_number":569,"utf16_col":20},"end":{"line_number":569,"utf16_col":33}},"extent_utf16":{"start":{"line_number":569,"utf16_col":8},"end":{"line_number":569,"utf16_col":36}}},{"name":"setResultCapture","kind":"function","ident_start":22630,"ident_end":22646,"extent_start":22615,"extent_end":22736,"fully_qualified_name":"Context::setResultCapture","ident_utf16":{"start":{"line_number":577,"utf16_col":23},"end":{"line_number":577,"utf16_col":39}},"extent_utf16":{"start":{"line_number":577,"utf16_col":8},"end":{"line_number":579,"utf16_col":9}}},{"name":"setConfig","kind":"function","ident_start":22760,"ident_end":22769,"extent_start":22745,"extent_end":22817,"fully_qualified_name":"Context::setConfig","ident_utf16":{"start":{"line_number":580,"utf16_col":23},"end":{"line_number":580,"utf16_col":32}},"extent_utf16":{"start":{"line_number":580,"utf16_col":8},"end":{"line_number":580,"utf16_col":80}}},{"name":"SimplePcg32","kind":"class","ident_start":23278,"ident_end":23289,"extent_start":23272,"extent_end":23289,"fully_qualified_name":"SimplePcg32","ident_utf16":{"start":{"line_number":596,"utf16_col":10},"end":{"line_number":596,"utf16_col":21}},"extent_utf16":{"start":{"line_number":596,"utf16_col":4},"end":{"line_number":596,"utf16_col":21}}},{"name":"TestFailureException","kind":"class","ident_start":24024,"ident_end":24044,"extent_start":24017,"extent_end":24046,"fully_qualified_name":"TestFailureException","ident_utf16":{"start":{"line_number":623,"utf16_col":11},"end":{"line_number":623,"utf16_col":31}},"extent_utf16":{"start":{"line_number":623,"utf16_col":4},"end":{"line_number":623,"utf16_col":33}}},{"name":"TestSkipException","kind":"class","ident_start":24129,"ident_end":24146,"extent_start":24122,"extent_end":24149,"fully_qualified_name":"TestSkipException","ident_utf16":{"start":{"line_number":625,"utf16_col":11},"end":{"line_number":625,"utf16_col":28}},"extent_utf16":{"start":{"line_number":625,"utf16_col":4},"end":{"line_number":625,"utf16_col":31}}},{"name":"StringRef","kind":"class","ident_start":26406,"ident_end":26415,"extent_start":26400,"extent_end":29389,"fully_qualified_name":"StringRef","ident_utf16":{"start":{"line_number":710,"utf16_col":10},"end":{"line_number":710,"utf16_col":19}},"extent_utf16":{"start":{"line_number":710,"utf16_col":4},"end":{"line_number":798,"utf16_col":5}}},{"name":"StringRef","kind":"function","ident_start":26775,"ident_end":26784,"extent_start":26765,"extent_end":26806,"fully_qualified_name":"StringRef::StringRef","ident_utf16":{"start":{"line_number":724,"utf16_col":18},"end":{"line_number":724,"utf16_col":27}},"extent_utf16":{"start":{"line_number":724,"utf16_col":8},"end":{"line_number":724,"utf16_col":49}}},{"name":"StringRef","kind":"function","ident_start":26879,"ident_end":26888,"extent_start":26869,"extent_end":27008,"fully_qualified_name":"StringRef::StringRef","ident_utf16":{"start":{"line_number":728,"utf16_col":18},"end":{"line_number":728,"utf16_col":27}},"extent_utf16":{"start":{"line_number":728,"utf16_col":8},"end":{"line_number":731,"utf16_col":10}}},{"name":"StringRef","kind":"function","ident_start":27018,"ident_end":27027,"extent_start":27018,"extent_end":27160,"fully_qualified_name":"StringRef::StringRef","ident_utf16":{"start":{"line_number":733,"utf16_col":8},"end":{"line_number":733,"utf16_col":17}},"extent_utf16":{"start":{"line_number":733,"utf16_col":8},"end":{"line_number":736,"utf16_col":10}}},{"name":"empty","kind":"function","ident_start":27875,"ident_end":27880,"extent_start":27860,"extent_end":27949,"fully_qualified_name":"StringRef::empty","ident_utf16":{"start":{"line_number":759,"utf16_col":23},"end":{"line_number":759,"utf16_col":28}},"extent_utf16":{"start":{"line_number":759,"utf16_col":8},"end":{"line_number":761,"utf16_col":9}}},{"name":"size","kind":"function","ident_start":27973,"ident_end":27977,"extent_start":27958,"extent_end":28046,"fully_qualified_name":"StringRef::size","ident_utf16":{"start":{"line_number":762,"utf16_col":23},"end":{"line_number":762,"utf16_col":27}},"extent_utf16":{"start":{"line_number":762,"utf16_col":8},"end":{"line_number":764,"utf16_col":9}}},{"name":"substr","kind":"function","ident_start":28272,"ident_end":28278,"extent_start":28252,"extent_end":28609,"fully_qualified_name":"StringRef::substr","ident_utf16":{"start":{"line_number":769,"utf16_col":28},"end":{"line_number":769,"utf16_col":34}},"extent_utf16":{"start":{"line_number":769,"utf16_col":8},"end":{"line_number":776,"utf16_col":9}}},{"name":"begin","kind":"function","ident_start":28811,"ident_end":28816,"extent_start":28786,"extent_end":28844,"fully_qualified_name":"StringRef::begin","ident_utf16":{"start":{"line_number":783,"utf16_col":33},"end":{"line_number":783,"utf16_col":38}},"extent_utf16":{"start":{"line_number":783,"utf16_col":8},"end":{"line_number":783,"utf16_col":66}}},{"name":"end","kind":"function","ident_start":28878,"ident_end":28881,"extent_start":28853,"extent_end":28918,"fully_qualified_name":"StringRef::end","ident_utf16":{"start":{"line_number":784,"utf16_col":33},"end":{"line_number":784,"utf16_col":36}},"extent_utf16":{"start":{"line_number":784,"utf16_col":8},"end":{"line_number":784,"utf16_col":73}}},{"name":"compare","kind":"method","ident_start":29352,"ident_end":29359,"extent_start":29348,"extent_end":29383,"fully_qualified_name":"StringRef::compare","ident_utf16":{"start":{"line_number":797,"utf16_col":12},"end":{"line_number":797,"utf16_col":19}},"extent_utf16":{"start":{"line_number":797,"utf16_col":8},"end":{"line_number":797,"utf16_col":43}}},{"name":"ResultWas","kind":"class","ident_start":29904,"ident_end":29913,"extent_start":29897,"extent_end":30444,"fully_qualified_name":"ResultWas","ident_utf16":{"start":{"line_number":819,"utf16_col":11},"end":{"line_number":819,"utf16_col":20}},"extent_utf16":{"start":{"line_number":819,"utf16_col":4},"end":{"line_number":839,"utf16_col":8}}},{"name":"OfType","kind":"type","ident_start":29921,"ident_end":29927,"extent_start":29916,"extent_end":30441,"fully_qualified_name":"ResultWas::OfType","ident_utf16":{"start":{"line_number":819,"utf16_col":28},"end":{"line_number":819,"utf16_col":34}},"extent_utf16":{"start":{"line_number":819,"utf16_col":23},"end":{"line_number":839,"utf16_col":5}}},{"name":"isOk","kind":"function","ident_start":30466,"ident_end":30470,"extent_start":30451,"extent_end":30570,"fully_qualified_name":"isOk","ident_utf16":{"start":{"line_number":841,"utf16_col":19},"end":{"line_number":841,"utf16_col":23}},"extent_utf16":{"start":{"line_number":841,"utf16_col":4},"end":{"line_number":843,"utf16_col":5}}},{"name":"isJustInfo","kind":"function","ident_start":30590,"ident_end":30600,"extent_start":30575,"extent_end":30650,"fully_qualified_name":"isJustInfo","ident_utf16":{"start":{"line_number":844,"utf16_col":19},"end":{"line_number":844,"utf16_col":29}},"extent_utf16":{"start":{"line_number":844,"utf16_col":4},"end":{"line_number":844,"utf16_col":79}}},{"name":"ResultDisposition","kind":"class","ident_start":30701,"ident_end":30718,"extent_start":30694,"extent_end":30999,"fully_qualified_name":"ResultDisposition","ident_utf16":{"start":{"line_number":848,"utf16_col":11},"end":{"line_number":848,"utf16_col":28}},"extent_utf16":{"start":{"line_number":848,"utf16_col":4},"end":{"line_number":854,"utf16_col":8}}},{"name":"Flags","kind":"type","ident_start":30726,"ident_end":30731,"extent_start":30721,"extent_end":30996,"fully_qualified_name":"ResultDisposition::Flags","ident_utf16":{"start":{"line_number":848,"utf16_col":36},"end":{"line_number":848,"utf16_col":41}},"extent_utf16":{"start":{"line_number":848,"utf16_col":31},"end":{"line_number":854,"utf16_col":5}}},{"name":"isFalseTest","kind":"function","ident_start":31342,"ident_end":31353,"extent_start":31327,"extent_end":31436,"fully_qualified_name":"isFalseTest","ident_utf16":{"start":{"line_number":862,"utf16_col":19},"end":{"line_number":862,"utf16_col":30}},"extent_utf16":{"start":{"line_number":862,"utf16_col":4},"end":{"line_number":864,"utf16_col":5}}},{"name":"shouldSuppressFailure","kind":"function","ident_start":31456,"ident_end":31477,"extent_start":31441,"extent_end":31563,"fully_qualified_name":"shouldSuppressFailure","ident_utf16":{"start":{"line_number":865,"utf16_col":19},"end":{"line_number":865,"utf16_col":40}},"extent_utf16":{"start":{"line_number":865,"utf16_col":4},"end":{"line_number":867,"utf16_col":5}}},{"name":"unique_ptr","kind":"class","ident_start":31987,"ident_end":31997,"extent_start":31981,"extent_end":33969,"fully_qualified_name":"unique_ptr","ident_utf16":{"start":{"line_number":889,"utf16_col":10},"end":{"line_number":889,"utf16_col":20}},"extent_utf16":{"start":{"line_number":889,"utf16_col":4},"end":{"line_number":968,"utf16_col":5}}},{"name":"unique_ptr","kind":"function","ident_start":32048,"ident_end":32058,"extent_start":32038,"extent_end":32116,"fully_qualified_name":"unique_ptr::unique_ptr","ident_utf16":{"start":{"line_number":892,"utf16_col":18},"end":{"line_number":892,"utf16_col":28}},"extent_utf16":{"start":{"line_number":892,"utf16_col":8},"end":{"line_number":894,"utf16_col":10}}},{"name":"unique_ptr","kind":"function","ident_start":32144,"ident_end":32154,"extent_start":32125,"extent_end":32197,"fully_qualified_name":"unique_ptr::unique_ptr","ident_utf16":{"start":{"line_number":895,"utf16_col":27},"end":{"line_number":895,"utf16_col":37}},"extent_utf16":{"start":{"line_number":895,"utf16_col":8},"end":{"line_number":897,"utf16_col":10}}},{"name":"unique_ptr","kind":"function","ident_start":32296,"ident_end":32306,"extent_start":32296,"extent_end":32374,"fully_qualified_name":"unique_ptr::unique_ptr","ident_utf16":{"start":{"line_number":900,"utf16_col":8},"end":{"line_number":900,"utf16_col":18}},"extent_utf16":{"start":{"line_number":900,"utf16_col":8},"end":{"line_number":902,"utf16_col":10}}},{"name":"unique_ptr","kind":"function","ident_start":32600,"ident_end":32610,"extent_start":32600,"extent_end":32639,"fully_qualified_name":"unique_ptr::unique_ptr","ident_utf16":{"start":{"line_number":911,"utf16_col":8},"end":{"line_number":911,"utf16_col":18}},"extent_utf16":{"start":{"line_number":911,"utf16_col":8},"end":{"line_number":911,"utf16_col":47}}},{"name":"unique_ptr","kind":"function","ident_start":32708,"ident_end":32718,"extent_start":32708,"extent_end":32820,"fully_qualified_name":"unique_ptr::unique_ptr","ident_utf16":{"start":{"line_number":914,"utf16_col":8},"end":{"line_number":914,"utf16_col":18}},"extent_utf16":{"start":{"line_number":914,"utf16_col":8},"end":{"line_number":917,"utf16_col":9}}},{"name":"reset","kind":"function","ident_start":33508,"ident_end":33513,"extent_start":33503,"extent_end":33594,"fully_qualified_name":"unique_ptr::reset","ident_utf16":{"start":{"line_number":948,"utf16_col":13},"end":{"line_number":948,"utf16_col":18}},"extent_utf16":{"start":{"line_number":948,"utf16_col":8},"end":{"line_number":951,"utf16_col":9}}},{"name":"swap","kind":"function","ident_start":33813,"ident_end":33817,"extent_start":33808,"extent_end":33963,"fully_qualified_name":"unique_ptr::swap","ident_utf16":{"start":{"line_number":963,"utf16_col":20},"end":{"line_number":963,"utf16_col":24}},"extent_utf16":{"start":{"line_number":963,"utf16_col":15},"end":{"line_number":967,"utf16_col":9}}},{"name":"make_unique","kind":"function","ident_start":34150,"ident_end":34161,"extent_start":34136,"extent_end":34246,"fully_qualified_name":"make_unique","ident_utf16":{"start":{"line_number":975,"utf16_col":18},"end":{"line_number":975,"utf16_col":29}},"extent_utf16":{"start":{"line_number":975,"utf16_col":4},"end":{"line_number":977,"utf16_col":5}}},{"name":"AssertionResult","kind":"class","ident_start":35373,"ident_end":35388,"extent_start":35367,"extent_end":35388,"fully_qualified_name":"AssertionResult","ident_utf16":{"start":{"line_number":1026,"utf16_col":10},"end":{"line_number":1026,"utf16_col":25}},"extent_utf16":{"start":{"line_number":1026,"utf16_col":4},"end":{"line_number":1026,"utf16_col":25}}},{"name":"ITransientExpression","kind":"class","ident_start":35605,"ident_end":35625,"extent_start":35599,"extent_end":35625,"fully_qualified_name":"ITransientExpression","ident_utf16":{"start":{"line_number":1036,"utf16_col":10},"end":{"line_number":1036,"utf16_col":30}},"extent_utf16":{"start":{"line_number":1036,"utf16_col":4},"end":{"line_number":1036,"utf16_col":30}}},{"name":"IGeneratorTracker","kind":"class","ident_start":35637,"ident_end":35654,"extent_start":35631,"extent_end":35654,"fully_qualified_name":"IGeneratorTracker","ident_utf16":{"start":{"line_number":1037,"utf16_col":10},"end":{"line_number":1037,"utf16_col":27}},"extent_utf16":{"start":{"line_number":1037,"utf16_col":4},"end":{"line_number":1037,"utf16_col":27}}},{"name":"GeneratorUntypedBase","kind":"class","ident_start":35725,"ident_end":35745,"extent_start":35719,"extent_end":35745,"fully_qualified_name":"GeneratorUntypedBase","ident_utf16":{"start":{"line_number":1042,"utf16_col":14},"end":{"line_number":1042,"utf16_col":34}},"extent_utf16":{"start":{"line_number":1042,"utf16_col":8},"end":{"line_number":1042,"utf16_col":34}}},{"name":"IResultCapture","kind":"class","ident_start":35847,"ident_end":35861,"extent_start":35841,"extent_end":38662,"fully_qualified_name":"IResultCapture","ident_utf16":{"start":{"line_number":1047,"utf16_col":10},"end":{"line_number":1047,"utf16_col":24}},"extent_utf16":{"start":{"line_number":1047,"utf16_col":4},"end":{"line_number":1110,"utf16_col":5}}},{"name":"notifyAssertionStarted","kind":"method","ident_start":35933,"ident_end":35955,"extent_start":35920,"extent_end":35989,"fully_qualified_name":"IResultCapture::notifyAssertionStarted","ident_utf16":{"start":{"line_number":1051,"utf16_col":21},"end":{"line_number":1051,"utf16_col":43}},"extent_utf16":{"start":{"line_number":1051,"utf16_col":8},"end":{"line_number":1051,"utf16_col":77}}},{"name":"sectionStarted","kind":"method","ident_start":36011,"ident_end":36025,"extent_start":35998,"extent_end":36188,"fully_qualified_name":"IResultCapture::sectionStarted","ident_utf16":{"start":{"line_number":1052,"utf16_col":21},"end":{"line_number":1052,"utf16_col":35}},"extent_utf16":{"start":{"line_number":1052,"utf16_col":8},"end":{"line_number":1054,"utf16_col":62}}},{"name":"sectionEnded","kind":"method","ident_start":36210,"ident_end":36222,"extent_start":36197,"extent_end":36255,"fully_qualified_name":"IResultCapture::sectionEnded","ident_utf16":{"start":{"line_number":1055,"utf16_col":21},"end":{"line_number":1055,"utf16_col":33}},"extent_utf16":{"start":{"line_number":1055,"utf16_col":8},"end":{"line_number":1055,"utf16_col":66}}},{"name":"sectionEndedEarly","kind":"method","ident_start":36277,"ident_end":36294,"extent_start":36264,"extent_end":36327,"fully_qualified_name":"IResultCapture::sectionEndedEarly","ident_utf16":{"start":{"line_number":1056,"utf16_col":21},"end":{"line_number":1056,"utf16_col":38}},"extent_utf16":{"start":{"line_number":1056,"utf16_col":8},"end":{"line_number":1056,"utf16_col":71}}},{"name":"benchmarkPreparing","kind":"method","ident_start":36744,"ident_end":36762,"extent_start":36731,"extent_end":36785,"fully_qualified_name":"IResultCapture::benchmarkPreparing","ident_utf16":{"start":{"line_number":1066,"utf16_col":21},"end":{"line_number":1066,"utf16_col":39}},"extent_utf16":{"start":{"line_number":1066,"utf16_col":8},"end":{"line_number":1066,"utf16_col":62}}},{"name":"benchmarkStarting","kind":"method","ident_start":36807,"ident_end":36824,"extent_start":36794,"extent_end":36858,"fully_qualified_name":"IResultCapture::benchmarkStarting","ident_utf16":{"start":{"line_number":1067,"utf16_col":21},"end":{"line_number":1067,"utf16_col":38}},"extent_utf16":{"start":{"line_number":1067,"utf16_col":8},"end":{"line_number":1067,"utf16_col":72}}},{"name":"benchmarkEnded","kind":"method","ident_start":36880,"ident_end":36894,"extent_start":36867,"extent_end":36932,"fully_qualified_name":"IResultCapture::benchmarkEnded","ident_utf16":{"start":{"line_number":1068,"utf16_col":21},"end":{"line_number":1068,"utf16_col":35}},"extent_utf16":{"start":{"line_number":1068,"utf16_col":8},"end":{"line_number":1068,"utf16_col":73}}},{"name":"benchmarkFailed","kind":"method","ident_start":36954,"ident_end":36969,"extent_start":36941,"extent_end":36993,"fully_qualified_name":"IResultCapture::benchmarkFailed","ident_utf16":{"start":{"line_number":1069,"utf16_col":21},"end":{"line_number":1069,"utf16_col":36}},"extent_utf16":{"start":{"line_number":1069,"utf16_col":8},"end":{"line_number":1069,"utf16_col":60}}},{"name":"pushScopedMessage","kind":"method","ident_start":37016,"ident_end":37033,"extent_start":37003,"extent_end":37068,"fully_qualified_name":"IResultCapture::pushScopedMessage","ident_utf16":{"start":{"line_number":1071,"utf16_col":21},"end":{"line_number":1071,"utf16_col":38}},"extent_utf16":{"start":{"line_number":1071,"utf16_col":8},"end":{"line_number":1071,"utf16_col":73}}},{"name":"popScopedMessage","kind":"method","ident_start":37090,"ident_end":37106,"extent_start":37077,"extent_end":37141,"fully_qualified_name":"IResultCapture::popScopedMessage","ident_utf16":{"start":{"line_number":1072,"utf16_col":21},"end":{"line_number":1072,"utf16_col":37}},"extent_utf16":{"start":{"line_number":1072,"utf16_col":8},"end":{"line_number":1072,"utf16_col":72}}},{"name":"emplaceUnscopedMessage","kind":"method","ident_start":37164,"ident_end":37186,"extent_start":37151,"extent_end":37219,"fully_qualified_name":"IResultCapture::emplaceUnscopedMessage","ident_utf16":{"start":{"line_number":1074,"utf16_col":21},"end":{"line_number":1074,"utf16_col":43}},"extent_utf16":{"start":{"line_number":1074,"utf16_col":8},"end":{"line_number":1074,"utf16_col":76}}},{"name":"handleFatalErrorCondition","kind":"method","ident_start":37242,"ident_end":37267,"extent_start":37229,"extent_end":37293,"fully_qualified_name":"IResultCapture::handleFatalErrorCondition","ident_utf16":{"start":{"line_number":1076,"utf16_col":21},"end":{"line_number":1076,"utf16_col":46}},"extent_utf16":{"start":{"line_number":1076,"utf16_col":8},"end":{"line_number":1076,"utf16_col":72}}},{"name":"handleExpr","kind":"method","ident_start":37316,"ident_end":37326,"extent_start":37303,"extent_end":37482,"fully_qualified_name":"IResultCapture::handleExpr","ident_utf16":{"start":{"line_number":1078,"utf16_col":21},"end":{"line_number":1078,"utf16_col":31}},"extent_utf16":{"start":{"line_number":1078,"utf16_col":8},"end":{"line_number":1081,"utf16_col":54}}},{"name":"handleMessage","kind":"method","ident_start":37504,"ident_end":37517,"extent_start":37491,"extent_end":37712,"fully_qualified_name":"IResultCapture::handleMessage","ident_utf16":{"start":{"line_number":1082,"utf16_col":21},"end":{"line_number":1082,"utf16_col":34}},"extent_utf16":{"start":{"line_number":1082,"utf16_col":8},"end":{"line_number":1086,"utf16_col":54}}},{"name":"handleUnexpectedExceptionNotThrown","kind":"method","ident_start":37734,"ident_end":37768,"extent_start":37721,"extent_end":37870,"fully_qualified_name":"IResultCapture::handleUnexpectedExceptionNotThrown","ident_utf16":{"start":{"line_number":1087,"utf16_col":21},"end":{"line_number":1087,"utf16_col":55}},"extent_utf16":{"start":{"line_number":1087,"utf16_col":8},"end":{"line_number":1089,"utf16_col":54}}},{"name":"handleUnexpectedInflightException","kind":"method","ident_start":37892,"ident_end":37925,"extent_start":37879,"extent_end":38070,"fully_qualified_name":"IResultCapture::handleUnexpectedInflightException","ident_utf16":{"start":{"line_number":1090,"utf16_col":21},"end":{"line_number":1090,"utf16_col":54}},"extent_utf16":{"start":{"line_number":1090,"utf16_col":8},"end":{"line_number":1093,"utf16_col":54}}},{"name":"handleIncomplete","kind":"method","ident_start":38092,"ident_end":38108,"extent_start":38079,"extent_end":38161,"fully_qualified_name":"IResultCapture::handleIncomplete","ident_utf16":{"start":{"line_number":1094,"utf16_col":21},"end":{"line_number":1094,"utf16_col":37}},"extent_utf16":{"start":{"line_number":1094,"utf16_col":8},"end":{"line_number":1095,"utf16_col":52}}},{"name":"handleNonExpr","kind":"method","ident_start":38183,"ident_end":38196,"extent_start":38170,"extent_end":38348,"fully_qualified_name":"IResultCapture::handleNonExpr","ident_utf16":{"start":{"line_number":1096,"utf16_col":21},"end":{"line_number":1096,"utf16_col":34}},"extent_utf16":{"start":{"line_number":1096,"utf16_col":8},"end":{"line_number":1099,"utf16_col":54}}},{"name":"lastAssertionPassed","kind":"method","ident_start":38373,"ident_end":38392,"extent_start":38360,"extent_end":38399,"fully_qualified_name":"IResultCapture::lastAssertionPassed","ident_utf16":{"start":{"line_number":1103,"utf16_col":21},"end":{"line_number":1103,"utf16_col":40}},"extent_utf16":{"start":{"line_number":1103,"utf16_col":8},"end":{"line_number":1103,"utf16_col":47}}},{"name":"assertionPassed","kind":"method","ident_start":38421,"ident_end":38436,"extent_start":38408,"extent_end":38443,"fully_qualified_name":"IResultCapture::assertionPassed","ident_utf16":{"start":{"line_number":1104,"utf16_col":21},"end":{"line_number":1104,"utf16_col":36}},"extent_utf16":{"start":{"line_number":1104,"utf16_col":8},"end":{"line_number":1104,"utf16_col":43}}},{"name":"getCurrentTestName","kind":"method","ident_start":38508,"ident_end":38526,"extent_start":38488,"extent_end":38539,"fully_qualified_name":"IResultCapture::getCurrentTestName","ident_utf16":{"start":{"line_number":1107,"utf16_col":28},"end":{"line_number":1107,"utf16_col":46}},"extent_utf16":{"start":{"line_number":1107,"utf16_col":8},"end":{"line_number":1107,"utf16_col":59}}},{"name":"exceptionEarlyReported","kind":"method","ident_start":38627,"ident_end":38649,"extent_start":38614,"extent_end":38656,"fully_qualified_name":"IResultCapture::exceptionEarlyReported","ident_utf16":{"start":{"line_number":1109,"utf16_col":21},"end":{"line_number":1109,"utf16_col":43}},"extent_utf16":{"start":{"line_number":1109,"utf16_col":8},"end":{"line_number":1109,"utf16_col":50}}},{"name":"NonCopyable","kind":"class","ident_start":39049,"ident_end":39060,"extent_start":39043,"extent_end":39374,"fully_qualified_name":"NonCopyable","ident_utf16":{"start":{"line_number":1130,"utf16_col":14},"end":{"line_number":1130,"utf16_col":25}},"extent_utf16":{"start":{"line_number":1130,"utf16_col":8},"end":{"line_number":1138,"utf16_col":9}}},{"name":"NonCopyable","kind":"function","ident_start":39075,"ident_end":39086,"extent_start":39075,"extent_end":39118,"fully_qualified_name":"NonCopyable::NonCopyable","ident_utf16":{"start":{"line_number":1131,"utf16_col":12},"end":{"line_number":1131,"utf16_col":23}},"extent_utf16":{"start":{"line_number":1131,"utf16_col":12},"end":{"line_number":1131,"utf16_col":55}}},{"name":"NonCopyable","kind":"function","ident_start":39131,"ident_end":39142,"extent_start":39131,"extent_end":39169,"fully_qualified_name":"NonCopyable::NonCopyable","ident_utf16":{"start":{"line_number":1132,"utf16_col":12},"end":{"line_number":1132,"utf16_col":23}},"extent_utf16":{"start":{"line_number":1132,"utf16_col":12},"end":{"line_number":1132,"utf16_col":50}}},{"name":"NonCopyable","kind":"function","ident_start":39331,"ident_end":39342,"extent_start":39331,"extent_end":39364,"fully_qualified_name":"NonCopyable::NonCopyable","ident_utf16":{"start":{"line_number":1137,"utf16_col":12},"end":{"line_number":1137,"utf16_col":23}},"extent_utf16":{"start":{"line_number":1137,"utf16_col":12},"end":{"line_number":1137,"utf16_col":45}}},{"name":"Verbosity","kind":"type","ident_start":39574,"ident_end":39583,"extent_start":39563,"extent_end":39639,"fully_qualified_name":"Verbosity","ident_utf16":{"start":{"line_number":1152,"utf16_col":15},"end":{"line_number":1152,"utf16_col":24}},"extent_utf16":{"start":{"line_number":1152,"utf16_col":4},"end":{"line_number":1156,"utf16_col":5}}},{"name":"WarnAbout","kind":"class","ident_start":39653,"ident_end":39662,"extent_start":39646,"extent_end":39898,"fully_qualified_name":"WarnAbout","ident_utf16":{"start":{"line_number":1158,"utf16_col":11},"end":{"line_number":1158,"utf16_col":20}},"extent_utf16":{"start":{"line_number":1158,"utf16_col":4},"end":{"line_number":1164,"utf16_col":8}}},{"name":"What","kind":"type","ident_start":39670,"ident_end":39674,"extent_start":39665,"extent_end":39895,"fully_qualified_name":"WarnAbout::What","ident_utf16":{"start":{"line_number":1158,"utf16_col":28},"end":{"line_number":1158,"utf16_col":32}},"extent_utf16":{"start":{"line_number":1158,"utf16_col":23},"end":{"line_number":1164,"utf16_col":5}}},{"name":"ShowDurations","kind":"type","ident_start":39916,"ident_end":39929,"extent_start":39905,"extent_end":39995,"fully_qualified_name":"ShowDurations","ident_utf16":{"start":{"line_number":1166,"utf16_col":15},"end":{"line_number":1166,"utf16_col":28}},"extent_utf16":{"start":{"line_number":1166,"utf16_col":4},"end":{"line_number":1170,"utf16_col":5}}},{"name":"TestRunOrder","kind":"type","ident_start":40012,"ident_end":40024,"extent_start":40001,"extent_end":40102,"fully_qualified_name":"TestRunOrder","ident_utf16":{"start":{"line_number":1171,"utf16_col":15},"end":{"line_number":1171,"utf16_col":27}},"extent_utf16":{"start":{"line_number":1171,"utf16_col":4},"end":{"line_number":1175,"utf16_col":5}}},{"name":"ColourMode","kind":"type","ident_start":40119,"ident_end":40129,"extent_start":40108,"extent_end":40405,"fully_qualified_name":"ColourMode","ident_utf16":{"start":{"line_number":1176,"utf16_col":15},"end":{"line_number":1176,"utf16_col":25}},"extent_utf16":{"start":{"line_number":1176,"utf16_col":4},"end":{"line_number":1185,"utf16_col":5}}},{"name":"WaitForKeypress","kind":"class","ident_start":40418,"ident_end":40433,"extent_start":40411,"extent_end":40574,"fully_qualified_name":"WaitForKeypress","ident_utf16":{"start":{"line_number":1186,"utf16_col":11},"end":{"line_number":1186,"utf16_col":26}},"extent_utf16":{"start":{"line_number":1186,"utf16_col":4},"end":{"line_number":1191,"utf16_col":8}}},{"name":"When","kind":"type","ident_start":40441,"ident_end":40445,"extent_start":40436,"extent_end":40571,"fully_qualified_name":"WaitForKeypress::When","ident_utf16":{"start":{"line_number":1186,"utf16_col":34},"end":{"line_number":1186,"utf16_col":38}},"extent_utf16":{"start":{"line_number":1186,"utf16_col":29},"end":{"line_number":1191,"utf16_col":5}}},{"name":"TestSpec","kind":"class","ident_start":40587,"ident_end":40595,"extent_start":40581,"extent_end":40595,"fully_qualified_name":"TestSpec","ident_utf16":{"start":{"line_number":1193,"utf16_col":10},"end":{"line_number":1193,"utf16_col":18}},"extent_utf16":{"start":{"line_number":1193,"utf16_col":4},"end":{"line_number":1193,"utf16_col":18}}},{"name":"IStream","kind":"class","ident_start":40607,"ident_end":40614,"extent_start":40601,"extent_end":40614,"fully_qualified_name":"IStream","ident_utf16":{"start":{"line_number":1194,"utf16_col":10},"end":{"line_number":1194,"utf16_col":17}},"extent_utf16":{"start":{"line_number":1194,"utf16_col":4},"end":{"line_number":1194,"utf16_col":17}}},{"name":"IConfig","kind":"class","ident_start":40627,"ident_end":40634,"extent_start":40621,"extent_end":42221,"fully_qualified_name":"IConfig","ident_utf16":{"start":{"line_number":1196,"utf16_col":10},"end":{"line_number":1196,"utf16_col":17}},"extent_utf16":{"start":{"line_number":1196,"utf16_col":4},"end":{"line_number":1228,"utf16_col":5}}},{"name":"allowThrows","kind":"method","ident_start":40728,"ident_end":40739,"extent_start":40715,"extent_end":40752,"fully_qualified_name":"IConfig::allowThrows","ident_utf16":{"start":{"line_number":1200,"utf16_col":21},"end":{"line_number":1200,"utf16_col":32}},"extent_utf16":{"start":{"line_number":1200,"utf16_col":8},"end":{"line_number":1200,"utf16_col":45}}},{"name":"name","kind":"method","ident_start":40779,"ident_end":40783,"extent_start":40761,"extent_end":40796,"fully_qualified_name":"IConfig::name","ident_utf16":{"start":{"line_number":1201,"utf16_col":26},"end":{"line_number":1201,"utf16_col":30}},"extent_utf16":{"start":{"line_number":1201,"utf16_col":8},"end":{"line_number":1201,"utf16_col":43}}},{"name":"includeSuccessfulResults","kind":"method","ident_start":40818,"ident_end":40842,"extent_start":40805,"extent_end":40855,"fully_qualified_name":"IConfig::includeSuccessfulResults","ident_utf16":{"start":{"line_number":1202,"utf16_col":21},"end":{"line_number":1202,"utf16_col":45}},"extent_utf16":{"start":{"line_number":1202,"utf16_col":8},"end":{"line_number":1202,"utf16_col":58}}},{"name":"shouldDebugBreak","kind":"method","ident_start":40877,"ident_end":40893,"extent_start":40864,"extent_end":40906,"fully_qualified_name":"IConfig::shouldDebugBreak","ident_utf16":{"start":{"line_number":1203,"utf16_col":21},"end":{"line_number":1203,"utf16_col":37}},"extent_utf16":{"start":{"line_number":1203,"utf16_col":8},"end":{"line_number":1203,"utf16_col":50}}},{"name":"warnAboutMissingAssertions","kind":"method","ident_start":40928,"ident_end":40954,"extent_start":40915,"extent_end":40967,"fully_qualified_name":"IConfig::warnAboutMissingAssertions","ident_utf16":{"start":{"line_number":1204,"utf16_col":21},"end":{"line_number":1204,"utf16_col":47}},"extent_utf16":{"start":{"line_number":1204,"utf16_col":8},"end":{"line_number":1204,"utf16_col":60}}},{"name":"warnAboutUnmatchedTestSpecs","kind":"method","ident_start":40989,"ident_end":41016,"extent_start":40976,"extent_end":41029,"fully_qualified_name":"IConfig::warnAboutUnmatchedTestSpecs","ident_utf16":{"start":{"line_number":1205,"utf16_col":21},"end":{"line_number":1205,"utf16_col":48}},"extent_utf16":{"start":{"line_number":1205,"utf16_col":8},"end":{"line_number":1205,"utf16_col":61}}},{"name":"zeroTestsCountAsSuccess","kind":"method","ident_start":41051,"ident_end":41074,"extent_start":41038,"extent_end":41087,"fully_qualified_name":"IConfig::zeroTestsCountAsSuccess","ident_utf16":{"start":{"line_number":1206,"utf16_col":21},"end":{"line_number":1206,"utf16_col":44}},"extent_utf16":{"start":{"line_number":1206,"utf16_col":8},"end":{"line_number":1206,"utf16_col":57}}},{"name":"abortAfter","kind":"method","ident_start":41108,"ident_end":41118,"extent_start":41096,"extent_end":41131,"fully_qualified_name":"IConfig::abortAfter","ident_utf16":{"start":{"line_number":1207,"utf16_col":20},"end":{"line_number":1207,"utf16_col":30}},"extent_utf16":{"start":{"line_number":1207,"utf16_col":8},"end":{"line_number":1207,"utf16_col":43}}},{"name":"showInvisibles","kind":"method","ident_start":41153,"ident_end":41167,"extent_start":41140,"extent_end":41180,"fully_qualified_name":"IConfig::showInvisibles","ident_utf16":{"start":{"line_number":1208,"utf16_col":21},"end":{"line_number":1208,"utf16_col":35}},"extent_utf16":{"start":{"line_number":1208,"utf16_col":8},"end":{"line_number":1208,"utf16_col":48}}},{"name":"showDurations","kind":"method","ident_start":41211,"ident_end":41224,"extent_start":41189,"extent_end":41237,"fully_qualified_name":"IConfig::showDurations","ident_utf16":{"start":{"line_number":1209,"utf16_col":30},"end":{"line_number":1209,"utf16_col":43}},"extent_utf16":{"start":{"line_number":1209,"utf16_col":8},"end":{"line_number":1209,"utf16_col":56}}},{"name":"minDuration","kind":"method","ident_start":41261,"ident_end":41272,"extent_start":41246,"extent_end":41285,"fully_qualified_name":"IConfig::minDuration","ident_utf16":{"start":{"line_number":1210,"utf16_col":23},"end":{"line_number":1210,"utf16_col":34}},"extent_utf16":{"start":{"line_number":1210,"utf16_col":8},"end":{"line_number":1210,"utf16_col":47}}},{"name":"hasTestFilters","kind":"method","ident_start":41361,"ident_end":41375,"extent_start":41348,"extent_end":41388,"fully_qualified_name":"IConfig::hasTestFilters","ident_utf16":{"start":{"line_number":1212,"utf16_col":21},"end":{"line_number":1212,"utf16_col":35}},"extent_utf16":{"start":{"line_number":1212,"utf16_col":8},"end":{"line_number":1212,"utf16_col":48}}},{"name":"runOrder","kind":"method","ident_start":41494,"ident_end":41502,"extent_start":41473,"extent_end":41515,"fully_qualified_name":"IConfig::runOrder","ident_utf16":{"start":{"line_number":1214,"utf16_col":29},"end":{"line_number":1214,"utf16_col":37}},"extent_utf16":{"start":{"line_number":1214,"utf16_col":8},"end":{"line_number":1214,"utf16_col":50}}},{"name":"rngSeed","kind":"method","ident_start":41541,"ident_end":41548,"extent_start":41524,"extent_end":41561,"fully_qualified_name":"IConfig::rngSeed","ident_utf16":{"start":{"line_number":1215,"utf16_col":25},"end":{"line_number":1215,"utf16_col":32}},"extent_utf16":{"start":{"line_number":1215,"utf16_col":8},"end":{"line_number":1215,"utf16_col":45}}},{"name":"shardCount","kind":"method","ident_start":41591,"ident_end":41601,"extent_start":41570,"extent_end":41614,"fully_qualified_name":"IConfig::shardCount","ident_utf16":{"start":{"line_number":1216,"utf16_col":29},"end":{"line_number":1216,"utf16_col":39}},"extent_utf16":{"start":{"line_number":1216,"utf16_col":8},"end":{"line_number":1216,"utf16_col":52}}},{"name":"shardIndex","kind":"method","ident_start":41644,"ident_end":41654,"extent_start":41623,"extent_end":41667,"fully_qualified_name":"IConfig::shardIndex","ident_utf16":{"start":{"line_number":1217,"utf16_col":29},"end":{"line_number":1217,"utf16_col":39}},"extent_utf16":{"start":{"line_number":1217,"utf16_col":8},"end":{"line_number":1217,"utf16_col":52}}},{"name":"defaultColourMode","kind":"method","ident_start":41695,"ident_end":41712,"extent_start":41676,"extent_end":41725,"fully_qualified_name":"IConfig::defaultColourMode","ident_utf16":{"start":{"line_number":1218,"utf16_col":27},"end":{"line_number":1218,"utf16_col":44}},"extent_utf16":{"start":{"line_number":1218,"utf16_col":8},"end":{"line_number":1218,"utf16_col":57}}},{"name":"verbosity","kind":"method","ident_start":41830,"ident_end":41839,"extent_start":41812,"extent_end":41852,"fully_qualified_name":"IConfig::verbosity","ident_utf16":{"start":{"line_number":1220,"utf16_col":26},"end":{"line_number":1220,"utf16_col":35}},"extent_utf16":{"start":{"line_number":1220,"utf16_col":8},"end":{"line_number":1220,"utf16_col":48}}},{"name":"skipBenchmarks","kind":"method","ident_start":41875,"ident_end":41889,"extent_start":41862,"extent_end":41902,"fully_qualified_name":"IConfig::skipBenchmarks","ident_utf16":{"start":{"line_number":1222,"utf16_col":21},"end":{"line_number":1222,"utf16_col":35}},"extent_utf16":{"start":{"line_number":1222,"utf16_col":8},"end":{"line_number":1222,"utf16_col":48}}},{"name":"benchmarkNoAnalysis","kind":"method","ident_start":41924,"ident_end":41943,"extent_start":41911,"extent_end":41956,"fully_qualified_name":"IConfig::benchmarkNoAnalysis","ident_utf16":{"start":{"line_number":1223,"utf16_col":21},"end":{"line_number":1223,"utf16_col":40}},"extent_utf16":{"start":{"line_number":1223,"utf16_col":8},"end":{"line_number":1223,"utf16_col":53}}},{"name":"benchmarkSamples","kind":"method","ident_start":41986,"ident_end":42002,"extent_start":41965,"extent_end":42015,"fully_qualified_name":"IConfig::benchmarkSamples","ident_utf16":{"start":{"line_number":1224,"utf16_col":29},"end":{"line_number":1224,"utf16_col":45}},"extent_utf16":{"start":{"line_number":1224,"utf16_col":8},"end":{"line_number":1224,"utf16_col":58}}},{"name":"benchmarkConfidenceInterval","kind":"method","ident_start":42039,"ident_end":42066,"extent_start":42024,"extent_end":42079,"fully_qualified_name":"IConfig::benchmarkConfidenceInterval","ident_utf16":{"start":{"line_number":1225,"utf16_col":23},"end":{"line_number":1225,"utf16_col":50}},"extent_utf16":{"start":{"line_number":1225,"utf16_col":8},"end":{"line_number":1225,"utf16_col":63}}},{"name":"benchmarkResamples","kind":"method","ident_start":42109,"ident_end":42127,"extent_start":42088,"extent_end":42140,"fully_qualified_name":"IConfig::benchmarkResamples","ident_utf16":{"start":{"line_number":1226,"utf16_col":29},"end":{"line_number":1226,"utf16_col":47}},"extent_utf16":{"start":{"line_number":1226,"utf16_col":8},"end":{"line_number":1226,"utf16_col":60}}},{"name":"benchmarkWarmupTime","kind":"method","ident_start":42183,"ident_end":42202,"extent_start":42149,"extent_end":42215,"fully_qualified_name":"IConfig::benchmarkWarmupTime","ident_utf16":{"start":{"line_number":1227,"utf16_col":42},"end":{"line_number":1227,"utf16_col":61}},"extent_utf16":{"start":{"line_number":1227,"utf16_col":8},"end":{"line_number":1227,"utf16_col":74}}},{"name":"TestCaseHandle","kind":"class","ident_start":42427,"ident_end":42441,"extent_start":42421,"extent_end":42441,"fully_qualified_name":"TestCaseHandle","ident_utf16":{"start":{"line_number":1242,"utf16_col":10},"end":{"line_number":1242,"utf16_col":24}},"extent_utf16":{"start":{"line_number":1242,"utf16_col":4},"end":{"line_number":1242,"utf16_col":24}}},{"name":"ITestCaseRegistry","kind":"class","ident_start":42478,"ident_end":42495,"extent_start":42472,"extent_end":42495,"fully_qualified_name":"ITestCaseRegistry","ident_utf16":{"start":{"line_number":1244,"utf16_col":10},"end":{"line_number":1244,"utf16_col":27}},"extent_utf16":{"start":{"line_number":1244,"utf16_col":4},"end":{"line_number":1244,"utf16_col":27}}},{"name":"IExceptionTranslatorRegistry","kind":"class","ident_start":42507,"ident_end":42535,"extent_start":42501,"extent_end":42535,"fully_qualified_name":"IExceptionTranslatorRegistry","ident_utf16":{"start":{"line_number":1245,"utf16_col":10},"end":{"line_number":1245,"utf16_col":38}},"extent_utf16":{"start":{"line_number":1245,"utf16_col":4},"end":{"line_number":1245,"utf16_col":38}}},{"name":"IExceptionTranslator","kind":"class","ident_start":42547,"ident_end":42567,"extent_start":42541,"extent_end":42567,"fully_qualified_name":"IExceptionTranslator","ident_utf16":{"start":{"line_number":1246,"utf16_col":10},"end":{"line_number":1246,"utf16_col":30}},"extent_utf16":{"start":{"line_number":1246,"utf16_col":4},"end":{"line_number":1246,"utf16_col":30}}},{"name":"ReporterRegistry","kind":"class","ident_start":42579,"ident_end":42595,"extent_start":42573,"extent_end":42595,"fully_qualified_name":"ReporterRegistry","ident_utf16":{"start":{"line_number":1247,"utf16_col":10},"end":{"line_number":1247,"utf16_col":26}},"extent_utf16":{"start":{"line_number":1247,"utf16_col":4},"end":{"line_number":1247,"utf16_col":26}}},{"name":"IReporterFactory","kind":"class","ident_start":42607,"ident_end":42623,"extent_start":42601,"extent_end":42623,"fully_qualified_name":"IReporterFactory","ident_utf16":{"start":{"line_number":1248,"utf16_col":10},"end":{"line_number":1248,"utf16_col":26}},"extent_utf16":{"start":{"line_number":1248,"utf16_col":4},"end":{"line_number":1248,"utf16_col":26}}},{"name":"ITagAliasRegistry","kind":"class","ident_start":42635,"ident_end":42652,"extent_start":42629,"extent_end":42652,"fully_qualified_name":"ITagAliasRegistry","ident_utf16":{"start":{"line_number":1249,"utf16_col":10},"end":{"line_number":1249,"utf16_col":27}},"extent_utf16":{"start":{"line_number":1249,"utf16_col":4},"end":{"line_number":1249,"utf16_col":27}}},{"name":"ITestInvoker","kind":"class","ident_start":42664,"ident_end":42676,"extent_start":42658,"extent_end":42676,"fully_qualified_name":"ITestInvoker","ident_utf16":{"start":{"line_number":1250,"utf16_col":10},"end":{"line_number":1250,"utf16_col":22}},"extent_utf16":{"start":{"line_number":1250,"utf16_col":4},"end":{"line_number":1250,"utf16_col":22}}},{"name":"IMutableEnumValuesRegistry","kind":"class","ident_start":42688,"ident_end":42714,"extent_start":42682,"extent_end":42714,"fully_qualified_name":"IMutableEnumValuesRegistry","ident_utf16":{"start":{"line_number":1251,"utf16_col":10},"end":{"line_number":1251,"utf16_col":36}},"extent_utf16":{"start":{"line_number":1251,"utf16_col":4},"end":{"line_number":1251,"utf16_col":36}}},{"name":"StartupExceptionRegistry","kind":"class","ident_start":42754,"ident_end":42778,"extent_start":42748,"extent_end":42778,"fully_qualified_name":"StartupExceptionRegistry","ident_utf16":{"start":{"line_number":1254,"utf16_col":10},"end":{"line_number":1254,"utf16_col":34}},"extent_utf16":{"start":{"line_number":1254,"utf16_col":4},"end":{"line_number":1254,"utf16_col":34}}},{"name":"EventListenerFactory","kind":"class","ident_start":42790,"ident_end":42810,"extent_start":42784,"extent_end":42810,"fully_qualified_name":"EventListenerFactory","ident_utf16":{"start":{"line_number":1255,"utf16_col":10},"end":{"line_number":1255,"utf16_col":30}},"extent_utf16":{"start":{"line_number":1255,"utf16_col":4},"end":{"line_number":1255,"utf16_col":30}}},{"name":"IRegistryHub","kind":"class","ident_start":42894,"ident_end":42906,"extent_start":42888,"extent_end":43381,"fully_qualified_name":"IRegistryHub","ident_utf16":{"start":{"line_number":1259,"utf16_col":10},"end":{"line_number":1259,"utf16_col":22}},"extent_utf16":{"start":{"line_number":1259,"utf16_col":4},"end":{"line_number":1270,"utf16_col":5}}},{"name":"IMutableRegistryHub","kind":"class","ident_start":43394,"ident_end":43413,"extent_start":43388,"extent_end":44179,"fully_qualified_name":"IMutableRegistryHub","ident_utf16":{"start":{"line_number":1272,"utf16_col":10},"end":{"line_number":1272,"utf16_col":29}},"extent_utf16":{"start":{"line_number":1272,"utf16_col":4},"end":{"line_number":1282,"utf16_col":5}}},{"name":"registerReporter","kind":"method","ident_start":43502,"ident_end":43518,"extent_start":43489,"extent_end":43579,"fully_qualified_name":"IMutableRegistryHub::registerReporter","ident_utf16":{"start":{"line_number":1275,"utf16_col":21},"end":{"line_number":1275,"utf16_col":37}},"extent_utf16":{"start":{"line_number":1275,"utf16_col":8},"end":{"line_number":1275,"utf16_col":98}}},{"name":"registerListener","kind":"method","ident_start":43601,"ident_end":43617,"extent_start":43588,"extent_end":43674,"fully_qualified_name":"IMutableRegistryHub::registerListener","ident_utf16":{"start":{"line_number":1276,"utf16_col":21},"end":{"line_number":1276,"utf16_col":37}},"extent_utf16":{"start":{"line_number":1276,"utf16_col":8},"end":{"line_number":1276,"utf16_col":94}}},{"name":"registerTest","kind":"method","ident_start":43696,"ident_end":43708,"extent_start":43683,"extent_end":43802,"fully_qualified_name":"IMutableRegistryHub::registerTest","ident_utf16":{"start":{"line_number":1277,"utf16_col":21},"end":{"line_number":1277,"utf16_col":33}},"extent_utf16":{"start":{"line_number":1277,"utf16_col":8},"end":{"line_number":1277,"utf16_col":127}}},{"name":"registerTranslator","kind":"method","ident_start":43824,"ident_end":43842,"extent_start":43811,"extent_end":43904,"fully_qualified_name":"IMutableRegistryHub::registerTranslator","ident_utf16":{"start":{"line_number":1278,"utf16_col":21},"end":{"line_number":1278,"utf16_col":39}},"extent_utf16":{"start":{"line_number":1278,"utf16_col":8},"end":{"line_number":1278,"utf16_col":101}}},{"name":"registerTagAlias","kind":"method","ident_start":43926,"ident_end":43942,"extent_start":43913,"extent_end":44031,"fully_qualified_name":"IMutableRegistryHub::registerTagAlias","ident_utf16":{"start":{"line_number":1279,"utf16_col":21},"end":{"line_number":1279,"utf16_col":37}},"extent_utf16":{"start":{"line_number":1279,"utf16_col":8},"end":{"line_number":1279,"utf16_col":126}}},{"name":"registerStartupException","kind":"method","ident_start":44053,"ident_end":44077,"extent_start":44040,"extent_end":44093,"fully_qualified_name":"IMutableRegistryHub::registerStartupException","ident_utf16":{"start":{"line_number":1280,"utf16_col":21},"end":{"line_number":1280,"utf16_col":45}},"extent_utf16":{"start":{"line_number":1280,"utf16_col":8},"end":{"line_number":1280,"utf16_col":61}}},{"name":"Estimate","kind":"class","ident_start":44689,"ident_end":44697,"extent_start":44682,"extent_end":44833,"fully_qualified_name":"Estimate","ident_utf16":{"start":{"line_number":1307,"utf16_col":15},"end":{"line_number":1307,"utf16_col":23}},"extent_utf16":{"start":{"line_number":1307,"utf16_col":8},"end":{"line_number":1312,"utf16_col":9}}},{"name":"OutlierClassification","kind":"class","ident_start":45124,"ident_end":45145,"extent_start":45117,"extent_end":45594,"fully_qualified_name":"OutlierClassification","ident_utf16":{"start":{"line_number":1326,"utf16_col":15},"end":{"line_number":1326,"utf16_col":36}},"extent_utf16":{"start":{"line_number":1326,"utf16_col":8},"end":{"line_number":1336,"utf16_col":9}}},{"name":"total","kind":"function","ident_start":45483,"ident_end":45488,"extent_start":45469,"extent_end":45584,"fully_qualified_name":"OutlierClassification::total","ident_utf16":{"start":{"line_number":1333,"utf16_col":26},"end":{"line_number":1333,"utf16_col":31}},"extent_utf16":{"start":{"line_number":1333,"utf16_col":12},"end":{"line_number":1335,"utf16_col":13}}},{"name":"BenchmarkInfo","kind":"class","ident_start":45910,"ident_end":45923,"extent_start":45903,"extent_end":46135,"fully_qualified_name":"BenchmarkInfo","ident_utf16":{"start":{"line_number":1349,"utf16_col":11},"end":{"line_number":1349,"utf16_col":24}},"extent_utf16":{"start":{"line_number":1349,"utf16_col":4},"end":{"line_number":1357,"utf16_col":5}}},{"name":"BenchmarkStats","kind":"class","ident_start":46309,"ident_end":46323,"extent_start":46302,"extent_end":46619,"fully_qualified_name":"BenchmarkStats","ident_utf16":{"start":{"line_number":1362,"utf16_col":11},"end":{"line_number":1362,"utf16_col":25}},"extent_utf16":{"start":{"line_number":1362,"utf16_col":4},"end":{"line_number":1370,"utf16_col":5}}},{"name":"EnvironmentEstimate","kind":"class","ident_start":46873,"ident_end":46892,"extent_start":46866,"extent_end":46976,"fully_qualified_name":"EnvironmentEstimate","ident_utf16":{"start":{"line_number":1386,"utf16_col":15},"end":{"line_number":1386,"utf16_col":34}},"extent_utf16":{"start":{"line_number":1386,"utf16_col":8},"end":{"line_number":1389,"utf16_col":9}}},{"name":"Environment","kind":"class","ident_start":46993,"ident_end":47004,"extent_start":46986,"extent_end":47110,"fully_qualified_name":"Environment","ident_utf16":{"start":{"line_number":1390,"utf16_col":15},"end":{"line_number":1390,"utf16_col":26}},"extent_utf16":{"start":{"line_number":1390,"utf16_col":8},"end":{"line_number":1393,"utf16_col":9}}},{"name":"keep_memory","kind":"function","ident_start":47965,"ident_end":47976,"extent_start":47953,"extent_end":48046,"fully_qualified_name":"keep_memory","ident_utf16":{"start":{"line_number":1437,"utf16_col":20},"end":{"line_number":1437,"utf16_col":31}},"extent_utf16":{"start":{"line_number":1437,"utf16_col":8},"end":{"line_number":1439,"utf16_col":9}}},{"name":"keep_memory","kind":"function","ident_start":48067,"ident_end":48078,"extent_start":48055,"extent_end":48137,"fully_qualified_name":"keep_memory","ident_utf16":{"start":{"line_number":1440,"utf16_col":20},"end":{"line_number":1440,"utf16_col":31}},"extent_utf16":{"start":{"line_number":1440,"utf16_col":8},"end":{"line_number":1442,"utf16_col":9}}},{"name":"optimizer_barrier","kind":"function","ident_start":48190,"ident_end":48207,"extent_start":48178,"extent_end":48228,"fully_qualified_name":"optimizer_barrier","ident_utf16":{"start":{"line_number":1445,"utf16_col":24},"end":{"line_number":1445,"utf16_col":41}},"extent_utf16":{"start":{"line_number":1445,"utf16_col":12},"end":{"line_number":1445,"utf16_col":62}}},{"name":"keep_memory","kind":"function","ident_start":48540,"ident_end":48551,"extent_start":48528,"extent_end":48700,"fully_qualified_name":"keep_memory","ident_utf16":{"start":{"line_number":1456,"utf16_col":20},"end":{"line_number":1456,"utf16_col":31}},"extent_utf16":{"start":{"line_number":1456,"utf16_col":8},"end":{"line_number":1459,"utf16_col":9}}},{"name":"optimizer_barrier","kind":"function","ident_start":48849,"ident_end":48866,"extent_start":48837,"extent_end":48953,"fully_qualified_name":"optimizer_barrier","ident_utf16":{"start":{"line_number":1466,"utf16_col":24},"end":{"line_number":1466,"utf16_col":41}},"extent_utf16":{"start":{"line_number":1466,"utf16_col":12},"end":{"line_number":1468,"utf16_col":13}}},{"name":"deoptimize_value","kind":"function","ident_start":49043,"ident_end":49059,"extent_start":49031,"extent_end":49107,"fully_qualified_name":"deoptimize_value","ident_utf16":{"start":{"line_number":1474,"utf16_col":20},"end":{"line_number":1474,"utf16_col":36}},"extent_utf16":{"start":{"line_number":1474,"utf16_col":8},"end":{"line_number":1476,"utf16_col":9}}},{"name":"invoke_deoptimized","kind":"function","ident_start":49178,"ident_end":49196,"extent_start":49166,"extent_end":49378,"fully_qualified_name":"invoke_deoptimized","ident_utf16":{"start":{"line_number":1479,"utf16_col":20},"end":{"line_number":1479,"utf16_col":38}},"extent_utf16":{"start":{"line_number":1479,"utf16_col":8},"end":{"line_number":1481,"utf16_col":9}}},{"name":"invoke_deoptimized","kind":"function","ident_start":49449,"ident_end":49467,"extent_start":49437,"extent_end":49632,"fully_qualified_name":"invoke_deoptimized","ident_utf16":{"start":{"line_number":1484,"utf16_col":20},"end":{"line_number":1484,"utf16_col":38}},"extent_utf16":{"start":{"line_number":1484,"utf16_col":8},"end":{"line_number":1486,"utf16_col":9}}},{"name":"true_given","kind":"class","ident_start":49867,"ident_end":49877,"extent_start":49860,"extent_end":49897,"fully_qualified_name":"true_given","ident_utf16":{"start":{"line_number":1500,"utf16_col":11},"end":{"line_number":1500,"utf16_col":21}},"extent_utf16":{"start":{"line_number":1500,"utf16_col":4},"end":{"line_number":1500,"utf16_col":41}}},{"name":"is_callable_tester","kind":"class","ident_start":49911,"ident_end":49929,"extent_start":49904,"extent_end":50153,"fully_qualified_name":"is_callable_tester","ident_utf16":{"start":{"line_number":1502,"utf16_col":11},"end":{"line_number":1502,"utf16_col":29}},"extent_utf16":{"start":{"line_number":1502,"utf16_col":4},"end":{"line_number":1507,"utf16_col":5}}},{"name":"ChronometerConcept","kind":"class","ident_start":51043,"ident_end":51061,"extent_start":51036,"extent_end":51429,"fully_qualified_name":"ChronometerConcept","ident_utf16":{"start":{"line_number":1537,"utf16_col":19},"end":{"line_number":1537,"utf16_col":37}},"extent_utf16":{"start":{"line_number":1537,"utf16_col":12},"end":{"line_number":1545,"utf16_col":13}}},{"name":"ChronometerConcept","kind":"function","ident_start":51227,"ident_end":51245,"extent_start":51227,"extent_end":51258,"fully_qualified_name":"ChronometerConcept::ChronometerConcept","ident_utf16":{"start":{"line_number":1542,"utf16_col":16},"end":{"line_number":1542,"utf16_col":34}},"extent_utf16":{"start":{"line_number":1542,"utf16_col":16},"end":{"line_number":1542,"utf16_col":47}}},{"name":"ChronometerConcept","kind":"function","ident_start":51275,"ident_end":51293,"extent_start":51275,"extent_end":51331,"fully_qualified_name":"ChronometerConcept::ChronometerConcept","ident_utf16":{"start":{"line_number":1543,"utf16_col":16},"end":{"line_number":1543,"utf16_col":34}},"extent_utf16":{"start":{"line_number":1543,"utf16_col":16},"end":{"line_number":1543,"utf16_col":72}}},{"name":"ChronometerModel","kind":"class","ident_start":51488,"ident_end":51504,"extent_start":51481,"extent_end":51964,"fully_qualified_name":"ChronometerModel","ident_utf16":{"start":{"line_number":1547,"utf16_col":19},"end":{"line_number":1547,"utf16_col":35}},"extent_utf16":{"start":{"line_number":1547,"utf16_col":12},"end":{"line_number":1558,"utf16_col":13}}},{"name":"start","kind":"function","ident_start":51562,"ident_end":51567,"extent_start":51557,"extent_end":51606,"fully_qualified_name":"ChronometerModel::start","ident_utf16":{"start":{"line_number":1548,"utf16_col":21},"end":{"line_number":1548,"utf16_col":26}},"extent_utf16":{"start":{"line_number":1548,"utf16_col":16},"end":{"line_number":1548,"utf16_col":65}}},{"name":"finish","kind":"function","ident_start":51628,"ident_end":51634,"extent_start":51623,"extent_end":51674,"fully_qualified_name":"ChronometerModel::finish","ident_utf16":{"start":{"line_number":1549,"utf16_col":21},"end":{"line_number":1549,"utf16_col":27}},"extent_utf16":{"start":{"line_number":1549,"utf16_col":16},"end":{"line_number":1549,"utf16_col":67}}},{"name":"elapsed","kind":"function","ident_start":51702,"ident_end":51709,"extent_start":51692,"extent_end":51864,"fully_qualified_name":"ChronometerModel::elapsed","ident_utf16":{"start":{"line_number":1551,"utf16_col":26},"end":{"line_number":1551,"utf16_col":33}},"extent_utf16":{"start":{"line_number":1551,"utf16_col":16},"end":{"line_number":1554,"utf16_col":17}}},{"name":"Chronometer","kind":"class","ident_start":52012,"ident_end":52023,"extent_start":52005,"extent_end":52980,"fully_qualified_name":"Chronometer","ident_utf16":{"start":{"line_number":1561,"utf16_col":15},"end":{"line_number":1561,"utf16_col":26}},"extent_utf16":{"start":{"line_number":1561,"utf16_col":8},"end":{"line_number":1589,"utf16_col":9}}},{"name":"measure","kind":"function","ident_start":52095,"ident_end":52102,"extent_start":52090,"extent_end":52171,"fully_qualified_name":"Chronometer::measure","ident_utf16":{"start":{"line_number":1564,"utf16_col":17},"end":{"line_number":1564,"utf16_col":24}},"extent_utf16":{"start":{"line_number":1564,"utf16_col":12},"end":{"line_number":1564,"utf16_col":93}}},{"name":"runs","kind":"function","ident_start":52189,"ident_end":52193,"extent_start":52185,"extent_end":52221,"fully_qualified_name":"Chronometer::runs","ident_utf16":{"start":{"line_number":1566,"utf16_col":16},"end":{"line_number":1566,"utf16_col":20}},"extent_utf16":{"start":{"line_number":1566,"utf16_col":12},"end":{"line_number":1566,"utf16_col":48}}},{"name":"Chronometer","kind":"function","ident_start":52235,"ident_end":52246,"extent_start":52235,"extent_end":52365,"fully_qualified_name":"Chronometer::Chronometer","ident_utf16":{"start":{"line_number":1568,"utf16_col":12},"end":{"line_number":1568,"utf16_col":23}},"extent_utf16":{"start":{"line_number":1568,"utf16_col":12},"end":{"line_number":1570,"utf16_col":38}}},{"name":"measure","kind":"function","ident_start":52437,"ident_end":52444,"extent_start":52432,"extent_end":52562,"fully_qualified_name":"Chronometer::measure","ident_utf16":{"start":{"line_number":1574,"utf16_col":17},"end":{"line_number":1574,"utf16_col":24}},"extent_utf16":{"start":{"line_number":1574,"utf16_col":12},"end":{"line_number":1576,"utf16_col":13}}},{"name":"measure","kind":"function","ident_start":52617,"ident_end":52624,"extent_start":52612,"extent_end":52898,"fully_qualified_name":"Chronometer::measure","ident_utf16":{"start":{"line_number":1579,"utf16_col":17},"end":{"line_number":1579,"utf16_col":24}},"extent_utf16":{"start":{"line_number":1579,"utf16_col":12},"end":{"line_number":1585,"utf16_col":13}}},{"name":"is_related","kind":"class","ident_start":53235,"ident_end":53245,"extent_start":53228,"extent_end":53313,"fully_qualified_name":"is_related","ident_utf16":{"start":{"line_number":1601,"utf16_col":19},"end":{"line_number":1601,"utf16_col":29}},"extent_utf16":{"start":{"line_number":1601,"utf16_col":12},"end":{"line_number":1602,"utf16_col":67}}},{"name":"BenchmarkFunction","kind":"class","ident_start":53927,"ident_end":53944,"extent_start":53920,"extent_end":55798,"fully_qualified_name":"BenchmarkFunction","ident_utf16":{"start":{"line_number":1611,"utf16_col":19},"end":{"line_number":1611,"utf16_col":36}},"extent_utf16":{"start":{"line_number":1611,"utf16_col":12},"end":{"line_number":1660,"utf16_col":13}}},{"name":"callable","kind":"class","ident_start":53991,"ident_end":53999,"extent_start":53984,"extent_end":54300,"fully_qualified_name":"BenchmarkFunction::callable","ident_utf16":{"start":{"line_number":1613,"utf16_col":23},"end":{"line_number":1613,"utf16_col":31}},"extent_utf16":{"start":{"line_number":1613,"utf16_col":16},"end":{"line_number":1620,"utf16_col":17}}},{"name":"callable","kind":"function","ident_start":54146,"ident_end":54154,"extent_start":54146,"extent_end":54167,"fully_qualified_name":"BenchmarkFunction::callable::callable","ident_utf16":{"start":{"line_number":1617,"utf16_col":20},"end":{"line_number":1617,"utf16_col":28}},"extent_utf16":{"start":{"line_number":1617,"utf16_col":20},"end":{"line_number":1617,"utf16_col":41}}},{"name":"callable","kind":"function","ident_start":54188,"ident_end":54196,"extent_start":54188,"extent_end":54219,"fully_qualified_name":"BenchmarkFunction::callable::callable","ident_utf16":{"start":{"line_number":1618,"utf16_col":20},"end":{"line_number":1618,"utf16_col":28}},"extent_utf16":{"start":{"line_number":1618,"utf16_col":20},"end":{"line_number":1618,"utf16_col":51}}},{"name":"model","kind":"class","ident_start":54365,"ident_end":54370,"extent_start":54358,"extent_end":54991,"fully_qualified_name":"BenchmarkFunction::model","ident_utf16":{"start":{"line_number":1622,"utf16_col":23},"end":{"line_number":1622,"utf16_col":28}},"extent_utf16":{"start":{"line_number":1622,"utf16_col":16},"end":{"line_number":1637,"utf16_col":17}}},{"name":"model","kind":"function","ident_start":54411,"ident_end":54416,"extent_start":54411,"extent_end":54455,"fully_qualified_name":"BenchmarkFunction::model::model","ident_utf16":{"start":{"line_number":1623,"utf16_col":20},"end":{"line_number":1623,"utf16_col":25}},"extent_utf16":{"start":{"line_number":1623,"utf16_col":20},"end":{"line_number":1623,"utf16_col":64}}},{"name":"model","kind":"function","ident_start":54476,"ident_end":54481,"extent_start":54476,"extent_end":54513,"fully_qualified_name":"BenchmarkFunction::model::model","ident_utf16":{"start":{"line_number":1624,"utf16_col":20},"end":{"line_number":1624,"utf16_col":25}},"extent_utf16":{"start":{"line_number":1624,"utf16_col":20},"end":{"line_number":1624,"utf16_col":57}}},{"name":"call","kind":"function","ident_start":54540,"ident_end":54544,"extent_start":54535,"extent_end":54672,"fully_qualified_name":"BenchmarkFunction::model::call","ident_utf16":{"start":{"line_number":1626,"utf16_col":25},"end":{"line_number":1626,"utf16_col":29}},"extent_utf16":{"start":{"line_number":1626,"utf16_col":20},"end":{"line_number":1628,"utf16_col":21}}},{"name":"call","kind":"function","ident_start":54698,"ident_end":54702,"extent_start":54693,"extent_end":54803,"fully_qualified_name":"BenchmarkFunction::model::call","ident_utf16":{"start":{"line_number":1629,"utf16_col":25},"end":{"line_number":1629,"utf16_col":29}},"extent_utf16":{"start":{"line_number":1629,"utf16_col":20},"end":{"line_number":1631,"utf16_col":21}}},{"name":"call","kind":"function","ident_start":54829,"ident_end":54833,"extent_start":54824,"extent_end":54943,"fully_qualified_name":"BenchmarkFunction::model::call","ident_utf16":{"start":{"line_number":1632,"utf16_col":25},"end":{"line_number":1632,"utf16_col":29}},"extent_utf16":{"start":{"line_number":1632,"utf16_col":20},"end":{"line_number":1634,"utf16_col":21}}},{"name":"BenchmarkFunction","kind":"function","ident_start":55203,"ident_end":55220,"extent_start":55203,"extent_end":55308,"fully_qualified_name":"BenchmarkFunction::BenchmarkFunction","ident_utf16":{"start":{"line_number":1644,"utf16_col":20},"end":{"line_number":1644,"utf16_col":37}},"extent_utf16":{"start":{"line_number":1644,"utf16_col":20},"end":{"line_number":1645,"utf16_col":76}}},{"name":"BenchmarkFunction","kind":"function","ident_start":55326,"ident_end":55343,"extent_start":55326,"extent_end":55430,"fully_qualified_name":"BenchmarkFunction::BenchmarkFunction","ident_utf16":{"start":{"line_number":1647,"utf16_col":16},"end":{"line_number":1647,"utf16_col":33}},"extent_utf16":{"start":{"line_number":1647,"utf16_col":16},"end":{"line_number":1648,"utf16_col":48}}},{"name":"repeater","kind":"class","ident_start":56188,"ident_end":56196,"extent_start":56181,"extent_end":56405,"fully_qualified_name":"repeater","ident_utf16":{"start":{"line_number":1679,"utf16_col":19},"end":{"line_number":1679,"utf16_col":27}},"extent_utf16":{"start":{"line_number":1679,"utf16_col":12},"end":{"line_number":1686,"utf16_col":13}}},{"name":"repeat","kind":"function","ident_start":56483,"ident_end":56489,"extent_start":56455,"extent_end":56563,"fully_qualified_name":"repeat","ident_utf16":{"start":{"line_number":1688,"utf16_col":40},"end":{"line_number":1688,"utf16_col":46}},"extent_utf16":{"start":{"line_number":1688,"utf16_col":12},"end":{"line_number":1690,"utf16_col":13}}},{"name":"CompleteType","kind":"class","ident_start":57173,"ident_end":57185,"extent_start":57166,"extent_end":57205,"fully_qualified_name":"CompleteType","ident_utf16":{"start":{"line_number":1722,"utf16_col":19},"end":{"line_number":1722,"utf16_col":31}},"extent_utf16":{"start":{"line_number":1722,"utf16_col":12},"end":{"line_number":1722,"utf16_col":51}}},{"name":"type","kind":"class","ident_start":57278,"ident_end":57282,"extent_start":57271,"extent_end":57285,"fully_qualified_name":"type","ident_utf16":{"start":{"line_number":1724,"utf16_col":47},"end":{"line_number":1724,"utf16_col":51}},"extent_utf16":{"start":{"line_number":1724,"utf16_col":40},"end":{"line_number":1724,"utf16_col":54}}},{"name":"CompleteInvoker","kind":"class","ident_start":57451,"ident_end":57466,"extent_start":57444,"extent_end":57695,"fully_qualified_name":"CompleteInvoker","ident_utf16":{"start":{"line_number":1730,"utf16_col":19},"end":{"line_number":1730,"utf16_col":34}},"extent_utf16":{"start":{"line_number":1730,"utf16_col":12},"end":{"line_number":1735,"utf16_col":13}}},{"name":"invoke","kind":"function","ident_start":57557,"ident_end":57563,"extent_start":57543,"extent_end":57681,"fully_qualified_name":"CompleteInvoker::invoke","ident_utf16":{"start":{"line_number":1732,"utf16_col":30},"end":{"line_number":1732,"utf16_col":36}},"extent_utf16":{"start":{"line_number":1732,"utf16_col":16},"end":{"line_number":1734,"utf16_col":17}}},{"name":"invoke","kind":"function","ident_start":57866,"ident_end":57872,"extent_start":57838,"extent_end":58014,"fully_qualified_name":"invoke","ident_utf16":{"start":{"line_number":1739,"utf16_col":44},"end":{"line_number":1739,"utf16_col":50}},"extent_utf16":{"start":{"line_number":1739,"utf16_col":16},"end":{"line_number":1742,"utf16_col":17}}},{"name":"complete_invoke","kind":"function","ident_start":58191,"ident_end":58206,"extent_start":58142,"extent_end":58375,"fully_qualified_name":"complete_invoke","ident_utf16":{"start":{"line_number":1747,"utf16_col":61},"end":{"line_number":1747,"utf16_col":76}},"extent_utf16":{"start":{"line_number":1747,"utf16_col":12},"end":{"line_number":1749,"utf16_col":13}}},{"name":"user_code","kind":"function","ident_start":58496,"ident_end":58505,"extent_start":58448,"extent_end":58592,"fully_qualified_name":"user_code","ident_utf16":{"start":{"line_number":1754,"utf16_col":56},"end":{"line_number":1754,"utf16_col":65}},"extent_utf16":{"start":{"line_number":1754,"utf16_col":8},"end":{"line_number":1756,"utf16_col":9}}},{"name":"Timing","kind":"class","ident_start":58917,"ident_end":58923,"extent_start":58910,"extent_end":59021,"fully_qualified_name":"Timing","ident_utf16":{"start":{"line_number":1774,"utf16_col":15},"end":{"line_number":1774,"utf16_col":21}},"extent_utf16":{"start":{"line_number":1774,"utf16_col":8},"end":{"line_number":1778,"utf16_col":9}}},{"name":"measure","kind":"function","ident_start":59430,"ident_end":59437,"extent_start":59407,"extent_end":59757,"fully_qualified_name":"measure","ident_utf16":{"start":{"line_number":1790,"utf16_col":35},"end":{"line_number":1790,"utf16_col":42}},"extent_utf16":{"start":{"line_number":1790,"utf16_col":12},"end":{"line_number":1796,"utf16_col":13}}},{"name":"measure_one","kind":"function","ident_start":60055,"ident_end":60066,"extent_start":60036,"extent_end":60180,"fully_qualified_name":"measure_one","ident_utf16":{"start":{"line_number":1809,"utf16_col":31},"end":{"line_number":1809,"utf16_col":42}},"extent_utf16":{"start":{"line_number":1809,"utf16_col":12},"end":{"line_number":1811,"utf16_col":13}}},{"name":"measure_one","kind":"function","ident_start":60272,"ident_end":60283,"extent_start":60245,"extent_end":60553,"fully_qualified_name":"measure_one","ident_utf16":{"start":{"line_number":1813,"utf16_col":39},"end":{"line_number":1813,"utf16_col":50}},"extent_utf16":{"start":{"line_number":1813,"utf16_col":12},"end":{"line_number":1818,"utf16_col":13}}},{"name":"run_for_at_least","kind":"function","ident_start":60941,"ident_end":60957,"extent_start":60870,"extent_end":61552,"fully_qualified_name":"run_for_at_least","ident_utf16":{"start":{"line_number":1829,"utf16_col":16},"end":{"line_number":1829,"utf16_col":32}},"extent_utf16":{"start":{"line_number":1828,"utf16_col":12},"end":{"line_number":1842,"utf16_col":13}}},{"name":"ExecutionPlan","kind":"class","ident_start":61759,"ident_end":61772,"extent_start":61752,"extent_end":63104,"fully_qualified_name":"ExecutionPlan","ident_utf16":{"start":{"line_number":1853,"utf16_col":15},"end":{"line_number":1853,"utf16_col":28}},"extent_utf16":{"start":{"line_number":1853,"utf16_col":8},"end":{"line_number":1883,"utf16_col":9}}},{"name":"run","kind":"function","ident_start":62049,"ident_end":62052,"extent_start":62026,"extent_end":63094,"fully_qualified_name":"ExecutionPlan::run","ident_utf16":{"start":{"line_number":1861,"utf16_col":35},"end":{"line_number":1861,"utf16_col":38}},"extent_utf16":{"start":{"line_number":1861,"utf16_col":12},"end":{"line_number":1882,"utf16_col":13}}},{"name":"bootstrap_analysis","kind":"class","ident_start":64411,"ident_end":64429,"extent_start":64404,"extent_end":64578,"fully_qualified_name":"bootstrap_analysis","ident_utf16":{"start":{"line_number":1933,"utf16_col":19},"end":{"line_number":1933,"utf16_col":37}},"extent_utf16":{"start":{"line_number":1933,"utf16_col":12},"end":{"line_number":1937,"utf16_col":13}}},{"name":"resolution","kind":"function","ident_start":65165,"ident_end":65175,"extent_start":65145,"extent_end":65911,"fully_qualified_name":"resolution","ident_utf16":{"start":{"line_number":1957,"utf16_col":32},"end":{"line_number":1957,"utf16_col":42}},"extent_utf16":{"start":{"line_number":1957,"utf16_col":12},"end":{"line_number":1974,"utf16_col":13}}},{"name":"warmup","kind":"function","ident_start":66599,"ident_end":66605,"extent_start":66595,"extent_end":66749,"fully_qualified_name":"warmup","ident_utf16":{"start":{"line_number":1987,"utf16_col":16},"end":{"line_number":1987,"utf16_col":22}},"extent_utf16":{"start":{"line_number":1987,"utf16_col":12},"end":{"line_number":1990,"utf16_col":13}}},{"name":"estimate_clock_resolution","kind":"function","ident_start":66820,"ident_end":66845,"extent_start":66800,"extent_end":67203,"fully_qualified_name":"estimate_clock_resolution","ident_utf16":{"start":{"line_number":1992,"utf16_col":32},"end":{"line_number":1992,"utf16_col":57}},"extent_utf16":{"start":{"line_number":1992,"utf16_col":12},"end":{"line_number":1999,"utf16_col":13}}},{"name":"estimate_clock_cost","kind":"function","ident_start":67274,"ident_end":67293,"extent_start":67254,"extent_end":68682,"fully_qualified_name":"estimate_clock_cost","ident_utf16":{"start":{"line_number":2001,"utf16_col":32},"end":{"line_number":2001,"utf16_col":51}},"extent_utf16":{"start":{"line_number":2001,"utf16_col":12},"end":{"line_number":2028,"utf16_col":13}}},{"name":"measure_environment","kind":"function","ident_start":68746,"ident_end":68765,"extent_start":68734,"extent_end":69463,"fully_qualified_name":"measure_environment","ident_utf16":{"start":{"line_number":2031,"utf16_col":24},"end":{"line_number":2031,"utf16_col":43}},"extent_utf16":{"start":{"line_number":2031,"utf16_col":12},"end":{"line_number":2050,"utf16_col":13}}},{"name":"SampleAnalysis","kind":"class","ident_start":69906,"ident_end":69920,"extent_start":69899,"extent_end":70147,"fully_qualified_name":"SampleAnalysis","ident_utf16":{"start":{"line_number":2075,"utf16_col":15},"end":{"line_number":2075,"utf16_col":29}},"extent_utf16":{"start":{"line_number":2075,"utf16_col":8},"end":{"line_number":2081,"utf16_col":9}}},{"name":"IConfig","kind":"class","ident_start":70275,"ident_end":70282,"extent_start":70269,"extent_end":70282,"fully_qualified_name":"IConfig","ident_utf16":{"start":{"line_number":2089,"utf16_col":10},"end":{"line_number":2089,"utf16_col":17}},"extent_utf16":{"start":{"line_number":2089,"utf16_col":4},"end":{"line_number":2089,"utf16_col":17}}},{"name":"Benchmark","kind":"class","ident_start":70703,"ident_end":70712,"extent_start":70696,"extent_end":73828,"fully_qualified_name":"Benchmark","ident_utf16":{"start":{"line_number":2108,"utf16_col":15},"end":{"line_number":2108,"utf16_col":24}},"extent_utf16":{"start":{"line_number":2108,"utf16_col":8},"end":{"line_number":2166,"utf16_col":13}}},{"name":"Benchmark","kind":"function","ident_start":70727,"ident_end":70736,"extent_start":70727,"extent_end":70818,"fully_qualified_name":"Benchmark::Benchmark","ident_utf16":{"start":{"line_number":2109,"utf16_col":12},"end":{"line_number":2109,"utf16_col":21}},"extent_utf16":{"start":{"line_number":2109,"utf16_col":12},"end":{"line_number":2110,"utf16_col":52}}},{"name":"Benchmark","kind":"function","ident_start":70865,"ident_end":70874,"extent_start":70865,"extent_end":70992,"fully_qualified_name":"Benchmark::Benchmark","ident_utf16":{"start":{"line_number":2113,"utf16_col":12},"end":{"line_number":2113,"utf16_col":21}},"extent_utf16":{"start":{"line_number":2113,"utf16_col":12},"end":{"line_number":2114,"utf16_col":75}}},{"name":"prepare","kind":"function","ident_start":71058,"ident_end":71065,"extent_start":71044,"extent_end":71769,"fully_qualified_name":"Benchmark::prepare","ident_utf16":{"start":{"line_number":2117,"utf16_col":26},"end":{"line_number":2117,"utf16_col":33}},"extent_utf16":{"start":{"line_number":2117,"utf16_col":12},"end":{"line_number":2123,"utf16_col":13}}},{"name":"run","kind":"function","ident_start":71842,"ident_end":71845,"extent_start":71837,"extent_end":73331,"fully_qualified_name":"Benchmark::run","ident_utf16":{"start":{"line_number":2126,"utf16_col":17},"end":{"line_number":2126,"utf16_col":20}},"extent_utf16":{"start":{"line_number":2126,"utf16_col":12},"end":{"line_number":2158,"utf16_col":17}}},{"name":"CATCH_CATCH_ANON","kind":"function","ident_start":73332,"ident_end":73348,"extent_start":73332,"extent_end":73501,"fully_qualified_name":"Benchmark::CATCH_CATCH_ANON","ident_utf16":{"start":{"line_number":2158,"utf16_col":18},"end":{"line_number":2158,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2158,"utf16_col":18},"end":{"line_number":2160,"utf16_col":17}}},{"name":"ObjectStorage","kind":"class","ident_start":76019,"ident_end":76032,"extent_start":76012,"extent_end":77108,"fully_qualified_name":"ObjectStorage","ident_utf16":{"start":{"line_number":2232,"utf16_col":19},"end":{"line_number":2232,"utf16_col":32}},"extent_utf16":{"start":{"line_number":2232,"utf16_col":12},"end":{"line_number":2263,"utf16_col":101}}},{"name":"ObjectStorage","kind":"function","ident_start":76063,"ident_end":76076,"extent_start":76063,"extent_end":76089,"fully_qualified_name":"ObjectStorage::ObjectStorage","ident_utf16":{"start":{"line_number":2234,"utf16_col":16},"end":{"line_number":2234,"utf16_col":29}},"extent_utf16":{"start":{"line_number":2234,"utf16_col":16},"end":{"line_number":2234,"utf16_col":42}}},{"name":"ObjectStorage","kind":"function","ident_start":76107,"ident_end":76120,"extent_start":76107,"extent_end":76241,"fully_qualified_name":"ObjectStorage::ObjectStorage","ident_utf16":{"start":{"line_number":2236,"utf16_col":16},"end":{"line_number":2236,"utf16_col":29}},"extent_utf16":{"start":{"line_number":2236,"utf16_col":16},"end":{"line_number":2239,"utf16_col":17}}},{"name":"ObjectStorage","kind":"function","ident_start":76259,"ident_end":76272,"extent_start":76259,"extent_end":76399,"fully_qualified_name":"ObjectStorage::ObjectStorage","ident_utf16":{"start":{"line_number":2241,"utf16_col":16},"end":{"line_number":2241,"utf16_col":29}},"extent_utf16":{"start":{"line_number":2241,"utf16_col":16},"end":{"line_number":2244,"utf16_col":17}}},{"name":"construct","kind":"function","ident_start":76527,"ident_end":76536,"extent_start":76522,"extent_end":76646,"fully_qualified_name":"ObjectStorage::construct","ident_utf16":{"start":{"line_number":2249,"utf16_col":21},"end":{"line_number":2249,"utf16_col":30}},"extent_utf16":{"start":{"line_number":2249,"utf16_col":16},"end":{"line_number":2252,"utf16_col":17}}},{"name":"destruct","kind":"function","ident_start":76772,"ident_end":76780,"extent_start":76731,"extent_end":76860,"fully_qualified_name":"ObjectStorage::destruct","ident_utf16":{"start":{"line_number":2255,"utf16_col":57},"end":{"line_number":2255,"utf16_col":65}},"extent_utf16":{"start":{"line_number":2255,"utf16_col":16},"end":{"line_number":2258,"utf16_col":17}}},{"name":"ReusableStringStream","kind":"class","ident_start":79335,"ident_end":79355,"extent_start":79329,"extent_end":80482,"fully_qualified_name":"ReusableStringStream","ident_utf16":{"start":{"line_number":2354,"utf16_col":10},"end":{"line_number":2354,"utf16_col":30}},"extent_utf16":{"start":{"line_number":2354,"utf16_col":4},"end":{"line_number":2388,"utf16_col":5}}},{"name":"str","kind":"method","ident_start":79577,"ident_end":79580,"extent_start":79565,"extent_end":79589,"fully_qualified_name":"ReusableStringStream::str","ident_utf16":{"start":{"line_number":2362,"utf16_col":20},"end":{"line_number":2362,"utf16_col":23}},"extent_utf16":{"start":{"line_number":2362,"utf16_col":8},"end":{"line_number":2362,"utf16_col":32}}},{"name":"str","kind":"method","ident_start":79644,"ident_end":79647,"extent_start":79639,"extent_end":79672,"fully_qualified_name":"ReusableStringStream::str","ident_utf16":{"start":{"line_number":2364,"utf16_col":13},"end":{"line_number":2364,"utf16_col":16}},"extent_utf16":{"start":{"line_number":2364,"utf16_col":8},"end":{"line_number":2364,"utf16_col":41}}},{"name":"get","kind":"function","ident_start":80435,"ident_end":80438,"extent_start":80430,"extent_end":80476,"fully_qualified_name":"ReusableStringStream::get","ident_utf16":{"start":{"line_number":2387,"utf16_col":13},"end":{"line_number":2387,"utf16_col":16}},"extent_utf16":{"start":{"line_number":2387,"utf16_col":8},"end":{"line_number":2387,"utf16_col":54}}},{"name":"make_void","kind":"class","ident_start":80705,"ident_end":80714,"extent_start":80698,"extent_end":80737,"fully_qualified_name":"make_void","ident_utf16":{"start":{"line_number":2402,"utf16_col":15},"end":{"line_number":2402,"utf16_col":24}},"extent_utf16":{"start":{"line_number":2402,"utf16_col":8},"end":{"line_number":2402,"utf16_col":47}}},{"name":"EnumInfo","kind":"class","ident_start":81117,"ident_end":81125,"extent_start":81110,"extent_end":81304,"fully_qualified_name":"EnumInfo","ident_utf16":{"start":{"line_number":2423,"utf16_col":15},"end":{"line_number":2423,"utf16_col":23}},"extent_utf16":{"start":{"line_number":2423,"utf16_col":8},"end":{"line_number":2430,"utf16_col":9}}},{"name":"IMutableEnumValuesRegistry","kind":"class","ident_start":81343,"ident_end":81369,"extent_start":81337,"extent_end":82097,"fully_qualified_name":"IMutableEnumValuesRegistry","ident_utf16":{"start":{"line_number":2433,"utf16_col":10},"end":{"line_number":2433,"utf16_col":36}},"extent_utf16":{"start":{"line_number":2433,"utf16_col":4},"end":{"line_number":2448,"utf16_col":5}}},{"name":"Catch_global_namespace_dummy","kind":"class","ident_start":82508,"ident_end":82536,"extent_start":82501,"extent_end":82538,"fully_qualified_name":"Catch_global_namespace_dummy","ident_utf16":{"start":{"line_number":2464,"utf16_col":7},"end":{"line_number":2464,"utf16_col":35}},"extent_utf16":{"start":{"line_number":2464,"utf16_col":0},"end":{"line_number":2464,"utf16_col":37}}},{"name":"catch_strnlen","kind":"function","ident_start":82803,"ident_end":82816,"extent_start":82784,"extent_end":83057,"fully_qualified_name":"catch_strnlen","ident_utf16":{"start":{"line_number":2474,"utf16_col":27},"end":{"line_number":2474,"utf16_col":40}},"extent_utf16":{"start":{"line_number":2474,"utf16_col":8},"end":{"line_number":2480,"utf16_col":9}}},{"name":"rawMemoryToString","kind":"function","ident_start":83567,"ident_end":83584,"extent_start":83555,"extent_end":83678,"fully_qualified_name":"rawMemoryToString","ident_utf16":{"start":{"line_number":2494,"utf16_col":20},"end":{"line_number":2494,"utf16_col":37}},"extent_utf16":{"start":{"line_number":2494,"utf16_col":8},"end":{"line_number":2496,"utf16_col":9}}},{"name":"IsStreamInsertable","kind":"class","ident_start":83723,"ident_end":83741,"extent_start":83717,"extent_end":84129,"fully_qualified_name":"IsStreamInsertable","ident_utf16":{"start":{"line_number":2499,"utf16_col":14},"end":{"line_number":2499,"utf16_col":32}},"extent_utf16":{"start":{"line_number":2499,"utf16_col":8},"end":{"line_number":2509,"utf16_col":9}}},{"name":"convertUnstreamable","kind":"function","ident_start":84376,"ident_end":84395,"extent_start":84254,"extent_end":84478,"fully_qualified_name":"convertUnstreamable","ident_utf16":{"start":{"line_number":2517,"utf16_col":21},"end":{"line_number":2517,"utf16_col":40}},"extent_utf16":{"start":{"line_number":2515,"utf16_col":8},"end":{"line_number":2519,"utf16_col":9}}},{"name":"convertUnstreamable","kind":"function","ident_start":84638,"ident_end":84657,"extent_start":84516,"extent_end":84712,"fully_qualified_name":"convertUnstreamable","ident_utf16":{"start":{"line_number":2523,"utf16_col":22},"end":{"line_number":2523,"utf16_col":41}},"extent_utf16":{"start":{"line_number":2521,"utf16_col":8},"end":{"line_number":2525,"utf16_col":9}}},{"name":"convertUnstreamable","kind":"function","ident_start":84827,"ident_end":84846,"extent_start":84752,"extent_end":84932,"fully_qualified_name":"convertUnstreamable","ident_utf16":{"start":{"line_number":2531,"utf16_col":21},"end":{"line_number":2531,"utf16_col":40}},"extent_utf16":{"start":{"line_number":2529,"utf16_col":8},"end":{"line_number":2533,"utf16_col":9}}},{"name":"StringMaker","kind":"class","ident_start":85487,"ident_end":85498,"extent_start":85480,"extent_end":86333,"fully_qualified_name":"StringMaker","ident_utf16":{"start":{"line_number":2551,"utf16_col":11},"end":{"line_number":2551,"utf16_col":22}},"extent_utf16":{"start":{"line_number":2551,"utf16_col":4},"end":{"line_number":2573,"utf16_col":5}}},{"name":"convert","kind":"function","ident_start":85653,"ident_end":85660,"extent_start":85546,"extent_end":85955,"fully_qualified_name":"StringMaker::convert","ident_utf16":{"start":{"line_number":2555,"utf16_col":12},"end":{"line_number":2555,"utf16_col":19}},"extent_utf16":{"start":{"line_number":2553,"utf16_col":8},"end":{"line_number":2561,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":86110,"ident_end":86117,"extent_start":86002,"extent_end":86327,"fully_qualified_name":"StringMaker::convert","ident_utf16":{"start":{"line_number":2566,"utf16_col":12},"end":{"line_number":2566,"utf16_col":19}},"extent_utf16":{"start":{"line_number":2564,"utf16_col":8},"end":{"line_number":2572,"utf16_col":9}}},{"name":"stringify","kind":"function","ident_start":86580,"ident_end":86589,"extent_start":86568,"extent_end":86712,"fully_qualified_name":"stringify","ident_utf16":{"start":{"line_number":2580,"utf16_col":20},"end":{"line_number":2580,"utf16_col":29}},"extent_utf16":{"start":{"line_number":2580,"utf16_col":8},"end":{"line_number":2582,"utf16_col":9}}},{"name":"convertUnknownEnumToString","kind":"function","ident_start":86763,"ident_end":86789,"extent_start":86751,"extent_end":86898,"fully_qualified_name":"convertUnknownEnumToString","ident_utf16":{"start":{"line_number":2585,"utf16_col":20},"end":{"line_number":2585,"utf16_col":46}},"extent_utf16":{"start":{"line_number":2585,"utf16_col":8},"end":{"line_number":2587,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":88318,"ident_end":88325,"extent_start":88299,"extent_end":88470,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2646,"utf16_col":27},"end":{"line_number":2646,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2646,"utf16_col":8},"end":{"line_number":2649,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":88571,"ident_end":88578,"extent_start":88552,"extent_end":88814,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2653,"utf16_col":27},"end":{"line_number":2653,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2653,"utf16_col":8},"end":{"line_number":2657,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":88917,"ident_end":88924,"extent_start":88898,"extent_end":89162,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2661,"utf16_col":27},"end":{"line_number":2661,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2661,"utf16_col":8},"end":{"line_number":2665,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":90112,"ident_end":90119,"extent_start":90093,"extent_end":90232,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2701,"utf16_col":27},"end":{"line_number":2701,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2701,"utf16_col":8},"end":{"line_number":2704,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":90656,"ident_end":90663,"extent_start":90637,"extent_end":90772,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2722,"utf16_col":27},"end":{"line_number":2722,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2722,"utf16_col":8},"end":{"line_number":2725,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":91189,"ident_end":91196,"extent_start":91170,"extent_end":91366,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2743,"utf16_col":27},"end":{"line_number":2743,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2743,"utf16_col":8},"end":{"line_number":2749,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":91473,"ident_end":91480,"extent_start":91454,"extent_end":91654,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2754,"utf16_col":27},"end":{"line_number":2754,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2754,"utf16_col":8},"end":{"line_number":2760,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":91767,"ident_end":91774,"extent_start":91748,"extent_end":91859,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2766,"utf16_col":27},"end":{"line_number":2766,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2766,"utf16_col":8},"end":{"line_number":2768,"utf16_col":9}}},{"name":"rangeToString","kind":"function","ident_start":91994,"ident_end":92007,"extent_start":91982,"extent_end":92404,"fully_qualified_name":"rangeToString","ident_utf16":{"start":{"line_number":2774,"utf16_col":20},"end":{"line_number":2774,"utf16_col":33}},"extent_utf16":{"start":{"line_number":2774,"utf16_col":8},"end":{"line_number":2784,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":93107,"ident_end":93114,"extent_start":93088,"extent_end":93415,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2806,"utf16_col":27},"end":{"line_number":2806,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2806,"utf16_col":8},"end":{"line_number":2814,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":93701,"ident_end":93708,"extent_start":93682,"extent_end":93921,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2824,"utf16_col":27},"end":{"line_number":2824,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2824,"utf16_col":8},"end":{"line_number":2830,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":94013,"ident_end":94020,"extent_start":93994,"extent_end":94081,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2834,"utf16_col":27},"end":{"line_number":2834,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2834,"utf16_col":8},"end":{"line_number":2836,"utf16_col":9}}},{"name":"TupleElementPrinter","kind":"class","ident_start":94455,"ident_end":94474,"extent_start":94448,"extent_end":94749,"fully_qualified_name":"TupleElementPrinter","ident_utf16":{"start":{"line_number":2851,"utf16_col":19},"end":{"line_number":2851,"utf16_col":38}},"extent_utf16":{"start":{"line_number":2851,"utf16_col":12},"end":{"line_number":2857,"utf16_col":9}}},{"name":"print","kind":"function","ident_start":94501,"ident_end":94506,"extent_start":94489,"extent_end":94739,"fully_qualified_name":"TupleElementPrinter::print","ident_utf16":{"start":{"line_number":2852,"utf16_col":24},"end":{"line_number":2852,"utf16_col":29}},"extent_utf16":{"start":{"line_number":2852,"utf16_col":12},"end":{"line_number":2856,"utf16_col":13}}},{"name":"print","kind":"function","ident_start":94916,"ident_end":94921,"extent_start":94904,"extent_end":94953,"fully_qualified_name":"print","ident_utf16":{"start":{"line_number":2864,"utf16_col":24},"end":{"line_number":2864,"utf16_col":29}},"extent_utf16":{"start":{"line_number":2864,"utf16_col":12},"end":{"line_number":2864,"utf16_col":61}}},{"name":"convert","kind":"function","ident_start":95080,"ident_end":95087,"extent_start":95061,"extent_end":95339,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2872,"utf16_col":27},"end":{"line_number":2872,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2872,"utf16_col":8},"end":{"line_number":2878,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":95610,"ident_end":95617,"extent_start":95591,"extent_end":95678,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2888,"utf16_col":27},"end":{"line_number":2888,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2888,"utf16_col":8},"end":{"line_number":2890,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":95801,"ident_end":95808,"extent_start":95782,"extent_end":96210,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2895,"utf16_col":27},"end":{"line_number":2895,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2895,"utf16_col":8},"end":{"line_number":2906,"utf16_col":9}}},{"name":"is_range_impl","kind":"class","ident_start":96456,"ident_end":96469,"extent_start":96449,"extent_end":96490,"fully_qualified_name":"is_range_impl","ident_utf16":{"start":{"line_number":2918,"utf16_col":15},"end":{"line_number":2918,"utf16_col":28}},"extent_utf16":{"start":{"line_number":2918,"utf16_col":8},"end":{"line_number":2918,"utf16_col":49}}},{"name":"is_range","kind":"class","ident_start":96684,"ident_end":96692,"extent_start":96677,"extent_end":96722,"fully_qualified_name":"is_range","ident_utf16":{"start":{"line_number":2925,"utf16_col":11},"end":{"line_number":2925,"utf16_col":19}},"extent_utf16":{"start":{"line_number":2925,"utf16_col":4},"end":{"line_number":2925,"utf16_col":49}}},{"name":"rangeToString","kind":"function","ident_start":96934,"ident_end":96947,"extent_start":96922,"extent_end":97056,"fully_qualified_name":"rangeToString","ident_utf16":{"start":{"line_number":2935,"utf16_col":16},"end":{"line_number":2935,"utf16_col":29}},"extent_utf16":{"start":{"line_number":2935,"utf16_col":4},"end":{"line_number":2937,"utf16_col":5}}},{"name":"rangeToString","kind":"function","ident_start":97144,"ident_end":97157,"extent_start":97132,"extent_end":97526,"fully_qualified_name":"rangeToString","ident_utf16":{"start":{"line_number":2941,"utf16_col":16},"end":{"line_number":2941,"utf16_col":29}},"extent_utf16":{"start":{"line_number":2941,"utf16_col":4},"end":{"line_number":2954,"utf16_col":5}}},{"name":"convert","kind":"function","ident_start":97696,"ident_end":97703,"extent_start":97677,"extent_end":97776,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2958,"utf16_col":27},"end":{"line_number":2958,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2958,"utf16_col":8},"end":{"line_number":2960,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":97881,"ident_end":97888,"extent_start":97862,"extent_end":97958,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":2965,"utf16_col":27},"end":{"line_number":2965,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2965,"utf16_col":8},"end":{"line_number":2967,"utf16_col":9}}},{"name":"ratio_string","kind":"class","ident_start":98142,"ident_end":98154,"extent_start":98135,"extent_end":98339,"fully_qualified_name":"ratio_string","ident_utf16":{"start":{"line_number":2982,"utf16_col":7},"end":{"line_number":2982,"utf16_col":19}},"extent_utf16":{"start":{"line_number":2982,"utf16_col":0},"end":{"line_number":2989,"utf16_col":1}}},{"name":"symbol","kind":"function","ident_start":98180,"ident_end":98186,"extent_start":98161,"extent_end":98337,"fully_qualified_name":"ratio_string::symbol","ident_utf16":{"start":{"line_number":2983,"utf16_col":23},"end":{"line_number":2983,"utf16_col":29}},"extent_utf16":{"start":{"line_number":2983,"utf16_col":4},"end":{"line_number":2988,"utf16_col":5}}},{"name":"symbol","kind":"function","ident_start":98403,"ident_end":98409,"extent_start":98391,"extent_end":98427,"fully_qualified_name":"symbol","ident_utf16":{"start":{"line_number":2993,"utf16_col":16},"end":{"line_number":2993,"utf16_col":22}},"extent_utf16":{"start":{"line_number":2993,"utf16_col":4},"end":{"line_number":2993,"utf16_col":40}}},{"name":"symbol","kind":"function","ident_start":98493,"ident_end":98499,"extent_start":98481,"extent_end":98517,"fully_qualified_name":"symbol","ident_utf16":{"start":{"line_number":2997,"utf16_col":16},"end":{"line_number":2997,"utf16_col":22}},"extent_utf16":{"start":{"line_number":2997,"utf16_col":4},"end":{"line_number":2997,"utf16_col":40}}},{"name":"symbol","kind":"function","ident_start":98582,"ident_end":98588,"extent_start":98570,"extent_end":98606,"fully_qualified_name":"symbol","ident_utf16":{"start":{"line_number":3001,"utf16_col":16},"end":{"line_number":3001,"utf16_col":22}},"extent_utf16":{"start":{"line_number":3001,"utf16_col":4},"end":{"line_number":3001,"utf16_col":40}}},{"name":"symbol","kind":"function","ident_start":98671,"ident_end":98677,"extent_start":98659,"extent_end":98695,"fully_qualified_name":"symbol","ident_utf16":{"start":{"line_number":3005,"utf16_col":16},"end":{"line_number":3005,"utf16_col":22}},"extent_utf16":{"start":{"line_number":3005,"utf16_col":4},"end":{"line_number":3005,"utf16_col":40}}},{"name":"symbol","kind":"function","ident_start":98761,"ident_end":98767,"extent_start":98749,"extent_end":98785,"fully_qualified_name":"symbol","ident_utf16":{"start":{"line_number":3009,"utf16_col":16},"end":{"line_number":3009,"utf16_col":22}},"extent_utf16":{"start":{"line_number":3009,"utf16_col":4},"end":{"line_number":3009,"utf16_col":40}}},{"name":"symbol","kind":"function","ident_start":98851,"ident_end":98857,"extent_start":98839,"extent_end":98875,"fully_qualified_name":"symbol","ident_utf16":{"start":{"line_number":3013,"utf16_col":16},"end":{"line_number":3013,"utf16_col":22}},"extent_utf16":{"start":{"line_number":3013,"utf16_col":4},"end":{"line_number":3013,"utf16_col":40}}},{"name":"convert","kind":"function","ident_start":99076,"ident_end":99083,"extent_start":99057,"extent_end":99300,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":3020,"utf16_col":27},"end":{"line_number":3020,"utf16_col":34}},"extent_utf16":{"start":{"line_number":3020,"utf16_col":8},"end":{"line_number":3024,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":99434,"ident_end":99441,"extent_start":99415,"extent_end":99627,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":3028,"utf16_col":27},"end":{"line_number":3028,"utf16_col":34}},"extent_utf16":{"start":{"line_number":3028,"utf16_col":8},"end":{"line_number":3032,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":99762,"ident_end":99769,"extent_start":99743,"extent_end":99956,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":3036,"utf16_col":27},"end":{"line_number":3036,"utf16_col":34}},"extent_utf16":{"start":{"line_number":3036,"utf16_col":8},"end":{"line_number":3040,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":100093,"ident_end":100100,"extent_start":100074,"extent_end":100289,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":3044,"utf16_col":27},"end":{"line_number":3044,"utf16_col":34}},"extent_utf16":{"start":{"line_number":3044,"utf16_col":8},"end":{"line_number":3048,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":100595,"ident_end":100602,"extent_start":100576,"extent_end":100769,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":3056,"utf16_col":27},"end":{"line_number":3056,"utf16_col":34}},"extent_utf16":{"start":{"line_number":3056,"utf16_col":8},"end":{"line_number":3058,"utf16_col":9}}},{"name":"convert","kind":"function","ident_start":100983,"ident_end":100990,"extent_start":100964,"extent_end":101941,"fully_qualified_name":"convert","ident_utf16":{"start":{"line_number":3063,"utf16_col":27},"end":{"line_number":3063,"utf16_col":34}},"extent_utf16":{"start":{"line_number":3063,"utf16_col":8},"end":{"line_number":3087,"utf16_col":9}}},{"name":"Approx","kind":"class","ident_start":102654,"ident_end":102660,"extent_start":102648,"extent_end":106581,"fully_qualified_name":"Approx","ident_utf16":{"start":{"line_number":3114,"utf16_col":10},"end":{"line_number":3114,"utf16_col":16}},"extent_utf16":{"start":{"line_number":3114,"utf16_col":4},"end":{"line_number":3211,"utf16_col":5}}},{"name":"equalityComparisonImpl","kind":"method","ident_start":102689,"ident_end":102711,"extent_start":102684,"extent_end":102732,"fully_qualified_name":"Approx::equalityComparisonImpl","ident_utf16":{"start":{"line_number":3116,"utf16_col":13},"end":{"line_number":3116,"utf16_col":35}},"extent_utf16":{"start":{"line_number":3116,"utf16_col":8},"end":{"line_number":3116,"utf16_col":56}}},{"name":"setMargin","kind":"method","ident_start":102805,"ident_end":102814,"extent_start":102800,"extent_end":102830,"fully_qualified_name":"Approx::setMargin","ident_utf16":{"start":{"line_number":3118,"utf16_col":13},"end":{"line_number":3118,"utf16_col":22}},"extent_utf16":{"start":{"line_number":3118,"utf16_col":8},"end":{"line_number":3118,"utf16_col":38}}},{"name":"setEpsilon","kind":"method","ident_start":102908,"ident_end":102918,"extent_start":102903,"extent_end":102935,"fully_qualified_name":"Approx::setEpsilon","ident_utf16":{"start":{"line_number":3120,"utf16_col":13},"end":{"line_number":3120,"utf16_col":23}},"extent_utf16":{"start":{"line_number":3120,"utf16_col":8},"end":{"line_number":3120,"utf16_col":40}}},{"name":"custom","kind":"method","ident_start":103014,"ident_end":103020,"extent_start":103000,"extent_end":103023,"fully_qualified_name":"Approx::custom","ident_utf16":{"start":{"line_number":3125,"utf16_col":22},"end":{"line_number":3125,"utf16_col":28}},"extent_utf16":{"start":{"line_number":3125,"utf16_col":8},"end":{"line_number":3125,"utf16_col":31}}},{"name":"Approx","kind":"function","ident_start":103544,"ident_end":103550,"extent_start":103535,"extent_end":103615,"fully_qualified_name":"Approx::Approx","ident_utf16":{"start":{"line_number":3139,"utf16_col":17},"end":{"line_number":3139,"utf16_col":23}},"extent_utf16":{"start":{"line_number":3139,"utf16_col":8},"end":{"line_number":3140,"utf16_col":10}}},{"name":"toString","kind":"method","ident_start":106445,"ident_end":106453,"extent_start":106433,"extent_end":106462,"fully_qualified_name":"Approx::toString","ident_utf16":{"start":{"line_number":3204,"utf16_col":20},"end":{"line_number":3204,"utf16_col":28}},"extent_utf16":{"start":{"line_number":3204,"utf16_col":8},"end":{"line_number":3204,"utf16_col":37}}},{"name":"SourceLineInfo","kind":"class","ident_start":107146,"ident_end":107160,"extent_start":107139,"extent_end":107640,"fully_qualified_name":"SourceLineInfo","ident_utf16":{"start":{"line_number":3241,"utf16_col":11},"end":{"line_number":3241,"utf16_col":25}},"extent_utf16":{"start":{"line_number":3241,"utf16_col":4},"end":{"line_number":3256,"utf16_col":5}}},{"name":"SourceLineInfo","kind":"function","ident_start":107172,"ident_end":107186,"extent_start":107172,"extent_end":107198,"fully_qualified_name":"SourceLineInfo::SourceLineInfo","ident_utf16":{"start":{"line_number":3243,"utf16_col":8},"end":{"line_number":3243,"utf16_col":22}},"extent_utf16":{"start":{"line_number":3243,"utf16_col":8},"end":{"line_number":3243,"utf16_col":34}}},{"name":"SourceLineInfo","kind":"function","ident_start":107217,"ident_end":107231,"extent_start":107207,"extent_end":107345,"fully_qualified_name":"SourceLineInfo::SourceLineInfo","ident_utf16":{"start":{"line_number":3244,"utf16_col":18},"end":{"line_number":3244,"utf16_col":32}},"extent_utf16":{"start":{"line_number":3244,"utf16_col":8},"end":{"line_number":3247,"utf16_col":10}}},{"name":"AssertionInfo","kind":"class","ident_start":107835,"ident_end":107848,"extent_start":107828,"extent_end":108046,"fully_qualified_name":"AssertionInfo","ident_utf16":{"start":{"line_number":3266,"utf16_col":11},"end":{"line_number":3266,"utf16_col":24}},"extent_utf16":{"start":{"line_number":3266,"utf16_col":4},"end":{"line_number":3273,"utf16_col":5}}},{"name":"ITransientExpression","kind":"class","ident_start":108335,"ident_end":108355,"extent_start":108329,"extent_end":108355,"fully_qualified_name":"ITransientExpression","ident_utf16":{"start":{"line_number":3292,"utf16_col":10},"end":{"line_number":3292,"utf16_col":30}},"extent_utf16":{"start":{"line_number":3292,"utf16_col":4},"end":{"line_number":3292,"utf16_col":30}}},{"name":"LazyExpression","kind":"class","ident_start":108368,"ident_end":108382,"extent_start":108362,"extent_end":109069,"fully_qualified_name":"LazyExpression","ident_utf16":{"start":{"line_number":3294,"utf16_col":10},"end":{"line_number":3294,"utf16_col":24}},"extent_utf16":{"start":{"line_number":3294,"utf16_col":4},"end":{"line_number":3313,"utf16_col":5}}},{"name":"LazyExpression","kind":"function","ident_start":108621,"ident_end":108635,"extent_start":108611,"extent_end":108700,"fully_qualified_name":"LazyExpression::LazyExpression","ident_utf16":{"start":{"line_number":3302,"utf16_col":18},"end":{"line_number":3302,"utf16_col":32}},"extent_utf16":{"start":{"line_number":3302,"utf16_col":8},"end":{"line_number":3304,"utf16_col":10}}},{"name":"LazyExpression","kind":"function","ident_start":108719,"ident_end":108733,"extent_start":108709,"extent_end":108773,"fully_qualified_name":"LazyExpression::LazyExpression","ident_utf16":{"start":{"line_number":3305,"utf16_col":18},"end":{"line_number":3305,"utf16_col":32}},"extent_utf16":{"start":{"line_number":3305,"utf16_col":8},"end":{"line_number":3305,"utf16_col":72}}},{"name":"AssertionResultData","kind":"class","ident_start":109183,"ident_end":109202,"extent_start":109176,"extent_end":109568,"fully_qualified_name":"AssertionResultData","ident_utf16":{"start":{"line_number":3323,"utf16_col":11},"end":{"line_number":3323,"utf16_col":30}},"extent_utf16":{"start":{"line_number":3323,"utf16_col":4},"end":{"line_number":3335,"utf16_col":5}}},{"name":"AssertionResultData","kind":"function","ident_start":109217,"ident_end":109236,"extent_start":109217,"extent_end":109248,"fully_qualified_name":"AssertionResultData::AssertionResultData","ident_utf16":{"start":{"line_number":3325,"utf16_col":8},"end":{"line_number":3325,"utf16_col":27}},"extent_utf16":{"start":{"line_number":3325,"utf16_col":8},"end":{"line_number":3325,"utf16_col":39}}},{"name":"AssertionResult","kind":"class","ident_start":109581,"ident_end":109596,"extent_start":109575,"extent_end":110318,"fully_qualified_name":"AssertionResult","ident_utf16":{"start":{"line_number":3337,"utf16_col":10},"end":{"line_number":3337,"utf16_col":25}},"extent_utf16":{"start":{"line_number":3337,"utf16_col":4},"end":{"line_number":3358,"utf16_col":5}}},{"name":"AssertionResult","kind":"function","ident_start":109619,"ident_end":109634,"extent_start":109619,"extent_end":109646,"fully_qualified_name":"AssertionResult::AssertionResult","ident_utf16":{"start":{"line_number":3339,"utf16_col":8},"end":{"line_number":3339,"utf16_col":23}},"extent_utf16":{"start":{"line_number":3339,"utf16_col":8},"end":{"line_number":3339,"utf16_col":35}}},{"name":"isOk","kind":"method","ident_start":109743,"ident_end":109747,"extent_start":109738,"extent_end":109756,"fully_qualified_name":"AssertionResult::isOk","ident_utf16":{"start":{"line_number":3342,"utf16_col":13},"end":{"line_number":3342,"utf16_col":17}},"extent_utf16":{"start":{"line_number":3342,"utf16_col":8},"end":{"line_number":3342,"utf16_col":26}}},{"name":"succeeded","kind":"method","ident_start":109770,"ident_end":109779,"extent_start":109765,"extent_end":109788,"fully_qualified_name":"AssertionResult::succeeded","ident_utf16":{"start":{"line_number":3343,"utf16_col":13},"end":{"line_number":3343,"utf16_col":22}},"extent_utf16":{"start":{"line_number":3343,"utf16_col":8},"end":{"line_number":3343,"utf16_col":31}}},{"name":"getResultType","kind":"method","ident_start":109815,"ident_end":109828,"extent_start":109797,"extent_end":109837,"fully_qualified_name":"AssertionResult::getResultType","ident_utf16":{"start":{"line_number":3344,"utf16_col":26},"end":{"line_number":3344,"utf16_col":39}},"extent_utf16":{"start":{"line_number":3344,"utf16_col":8},"end":{"line_number":3344,"utf16_col":48}}},{"name":"hasExpression","kind":"method","ident_start":109851,"ident_end":109864,"extent_start":109846,"extent_end":109873,"fully_qualified_name":"AssertionResult::hasExpression","ident_utf16":{"start":{"line_number":3345,"utf16_col":13},"end":{"line_number":3345,"utf16_col":26}},"extent_utf16":{"start":{"line_number":3345,"utf16_col":8},"end":{"line_number":3345,"utf16_col":35}}},{"name":"hasMessage","kind":"method","ident_start":109887,"ident_end":109897,"extent_start":109882,"extent_end":109906,"fully_qualified_name":"AssertionResult::hasMessage","ident_utf16":{"start":{"line_number":3346,"utf16_col":13},"end":{"line_number":3346,"utf16_col":23}},"extent_utf16":{"start":{"line_number":3346,"utf16_col":8},"end":{"line_number":3346,"utf16_col":32}}},{"name":"getExpression","kind":"method","ident_start":109927,"ident_end":109940,"extent_start":109915,"extent_end":109949,"fully_qualified_name":"AssertionResult::getExpression","ident_utf16":{"start":{"line_number":3347,"utf16_col":20},"end":{"line_number":3347,"utf16_col":33}},"extent_utf16":{"start":{"line_number":3347,"utf16_col":8},"end":{"line_number":3347,"utf16_col":42}}},{"name":"getExpressionInMacro","kind":"method","ident_start":109970,"ident_end":109990,"extent_start":109958,"extent_end":109999,"fully_qualified_name":"AssertionResult::getExpressionInMacro","ident_utf16":{"start":{"line_number":3348,"utf16_col":20},"end":{"line_number":3348,"utf16_col":40}},"extent_utf16":{"start":{"line_number":3348,"utf16_col":8},"end":{"line_number":3348,"utf16_col":49}}},{"name":"hasExpandedExpression","kind":"method","ident_start":110013,"ident_end":110034,"extent_start":110008,"extent_end":110043,"fully_qualified_name":"AssertionResult::hasExpandedExpression","ident_utf16":{"start":{"line_number":3349,"utf16_col":13},"end":{"line_number":3349,"utf16_col":34}},"extent_utf16":{"start":{"line_number":3349,"utf16_col":8},"end":{"line_number":3349,"utf16_col":43}}},{"name":"getExpandedExpression","kind":"method","ident_start":110064,"ident_end":110085,"extent_start":110052,"extent_end":110094,"fully_qualified_name":"AssertionResult::getExpandedExpression","ident_utf16":{"start":{"line_number":3350,"utf16_col":20},"end":{"line_number":3350,"utf16_col":41}},"extent_utf16":{"start":{"line_number":3350,"utf16_col":8},"end":{"line_number":3350,"utf16_col":50}}},{"name":"getMessage","kind":"method","ident_start":110113,"ident_end":110123,"extent_start":110103,"extent_end":110132,"fully_qualified_name":"AssertionResult::getMessage","ident_utf16":{"start":{"line_number":3351,"utf16_col":18},"end":{"line_number":3351,"utf16_col":28}},"extent_utf16":{"start":{"line_number":3351,"utf16_col":8},"end":{"line_number":3351,"utf16_col":37}}},{"name":"getSourceInfo","kind":"method","ident_start":110156,"ident_end":110169,"extent_start":110141,"extent_end":110178,"fully_qualified_name":"AssertionResult::getSourceInfo","ident_utf16":{"start":{"line_number":3352,"utf16_col":23},"end":{"line_number":3352,"utf16_col":36}},"extent_utf16":{"start":{"line_number":3352,"utf16_col":8},"end":{"line_number":3352,"utf16_col":45}}},{"name":"getTestMacroName","kind":"method","ident_start":110197,"ident_end":110213,"extent_start":110187,"extent_end":110222,"fully_qualified_name":"AssertionResult::getTestMacroName","ident_utf16":{"start":{"line_number":3353,"utf16_col":18},"end":{"line_number":3353,"utf16_col":34}},"extent_utf16":{"start":{"line_number":3353,"utf16_col":8},"end":{"line_number":3353,"utf16_col":43}}},{"name":"CaseSensitive","kind":"type","ident_start":110514,"ident_end":110527,"extent_start":110503,"extent_end":110539,"fully_qualified_name":"CaseSensitive","ident_utf16":{"start":{"line_number":3370,"utf16_col":15},"end":{"line_number":3370,"utf16_col":28}},"extent_utf16":{"start":{"line_number":3370,"utf16_col":4},"end":{"line_number":3370,"utf16_col":40}}},{"name":"WildcardPattern","kind":"class","ident_start":110994,"ident_end":111009,"extent_start":110988,"extent_end":111576,"fully_qualified_name":"WildcardPattern","ident_utf16":{"start":{"line_number":3400,"utf16_col":10},"end":{"line_number":3400,"utf16_col":25}},"extent_utf16":{"start":{"line_number":3400,"utf16_col":4},"end":{"line_number":3418,"utf16_col":5}}},{"name":"WildcardPosition","kind":"type","ident_start":111025,"ident_end":111041,"extent_start":111020,"extent_end":111210,"fully_qualified_name":"WildcardPattern::WildcardPosition","ident_utf16":{"start":{"line_number":3401,"utf16_col":13},"end":{"line_number":3401,"utf16_col":29}},"extent_utf16":{"start":{"line_number":3401,"utf16_col":8},"end":{"line_number":3406,"utf16_col":9}}},{"name":"matches","kind":"method","ident_start":111325,"ident_end":111332,"extent_start":111320,"extent_end":111365,"fully_qualified_name":"WildcardPattern::matches","ident_utf16":{"start":{"line_number":3411,"utf16_col":13},"end":{"line_number":3411,"utf16_col":20}},"extent_utf16":{"start":{"line_number":3411,"utf16_col":8},"end":{"line_number":3411,"utf16_col":53}}},{"name":"normaliseString","kind":"method","ident_start":111400,"ident_end":111415,"extent_start":111388,"extent_end":111448,"fully_qualified_name":"WildcardPattern::normaliseString","ident_utf16":{"start":{"line_number":3414,"utf16_col":20},"end":{"line_number":3414,"utf16_col":35}},"extent_utf16":{"start":{"line_number":3414,"utf16_col":8},"end":{"line_number":3414,"utf16_col":68}}},{"name":"IConfig","kind":"class","ident_start":111712,"ident_end":111719,"extent_start":111706,"extent_end":111719,"fully_qualified_name":"IConfig","ident_utf16":{"start":{"line_number":3429,"utf16_col":10},"end":{"line_number":3429,"utf16_col":17}},"extent_utf16":{"start":{"line_number":3429,"utf16_col":4},"end":{"line_number":3429,"utf16_col":17}}},{"name":"TestCaseHandle","kind":"class","ident_start":111756,"ident_end":111770,"extent_start":111750,"extent_end":111770,"fully_qualified_name":"TestCaseHandle","ident_utf16":{"start":{"line_number":3431,"utf16_col":10},"end":{"line_number":3431,"utf16_col":24}},"extent_utf16":{"start":{"line_number":3431,"utf16_col":4},"end":{"line_number":3431,"utf16_col":24}}},{"name":"TestSpec","kind":"class","ident_start":111783,"ident_end":111791,"extent_start":111777,"extent_end":114836,"fully_qualified_name":"TestSpec","ident_utf16":{"start":{"line_number":3433,"utf16_col":10},"end":{"line_number":3433,"utf16_col":18}},"extent_utf16":{"start":{"line_number":3433,"utf16_col":4},"end":{"line_number":3516,"utf16_col":5}}},{"name":"Pattern","kind":"class","ident_start":111809,"ident_end":111816,"extent_start":111803,"extent_end":112467,"fully_qualified_name":"TestSpec::Pattern","ident_utf16":{"start":{"line_number":3435,"utf16_col":14},"end":{"line_number":3435,"utf16_col":21}},"extent_utf16":{"start":{"line_number":3435,"utf16_col":8},"end":{"line_number":3451,"utf16_col":9}}},{"name":"matches","kind":"method","ident_start":111949,"ident_end":111956,"extent_start":111936,"extent_end":111999,"fully_qualified_name":"TestSpec::Pattern::matches","ident_utf16":{"start":{"line_number":3439,"utf16_col":25},"end":{"line_number":3439,"utf16_col":32}},"extent_utf16":{"start":{"line_number":3439,"utf16_col":12},"end":{"line_number":3439,"utf16_col":75}}},{"name":"serializeTo","kind":"method","ident_start":112087,"ident_end":112098,"extent_start":112074,"extent_end":112130,"fully_qualified_name":"TestSpec::Pattern::serializeTo","ident_utf16":{"start":{"line_number":3442,"utf16_col":25},"end":{"line_number":3442,"utf16_col":36}},"extent_utf16":{"start":{"line_number":3442,"utf16_col":12},"end":{"line_number":3442,"utf16_col":68}}},{"name":"NamePattern","kind":"class","ident_start":112484,"ident_end":112495,"extent_start":112478,"extent_end":112838,"fully_qualified_name":"TestSpec::NamePattern","ident_utf16":{"start":{"line_number":3453,"utf16_col":14},"end":{"line_number":3453,"utf16_col":25}},"extent_utf16":{"start":{"line_number":3453,"utf16_col":8},"end":{"line_number":3461,"utf16_col":9}}},{"name":"matches","kind":"method","ident_start":112642,"ident_end":112649,"extent_start":112637,"extent_end":112697,"fully_qualified_name":"TestSpec::NamePattern::matches","ident_utf16":{"start":{"line_number":3456,"utf16_col":17},"end":{"line_number":3456,"utf16_col":24}},"extent_utf16":{"start":{"line_number":3456,"utf16_col":12},"end":{"line_number":3456,"utf16_col":72}}},{"name":"serializeTo","kind":"method","ident_start":112732,"ident_end":112743,"extent_start":112727,"extent_end":112780,"fully_qualified_name":"TestSpec::NamePattern::serializeTo","ident_utf16":{"start":{"line_number":3458,"utf16_col":17},"end":{"line_number":3458,"utf16_col":28}},"extent_utf16":{"start":{"line_number":3458,"utf16_col":12},"end":{"line_number":3458,"utf16_col":65}}},{"name":"TagPattern","kind":"class","ident_start":112855,"ident_end":112865,"extent_start":112849,"extent_end":113190,"fully_qualified_name":"TestSpec::TagPattern","ident_utf16":{"start":{"line_number":3463,"utf16_col":14},"end":{"line_number":3463,"utf16_col":24}},"extent_utf16":{"start":{"line_number":3463,"utf16_col":8},"end":{"line_number":3471,"utf16_col":9}}},{"name":"matches","kind":"method","ident_start":113010,"ident_end":113017,"extent_start":113005,"extent_end":113065,"fully_qualified_name":"TestSpec::TagPattern::matches","ident_utf16":{"start":{"line_number":3466,"utf16_col":17},"end":{"line_number":3466,"utf16_col":24}},"extent_utf16":{"start":{"line_number":3466,"utf16_col":12},"end":{"line_number":3466,"utf16_col":72}}},{"name":"serializeTo","kind":"method","ident_start":113100,"ident_end":113111,"extent_start":113095,"extent_end":113148,"fully_qualified_name":"TestSpec::TagPattern::serializeTo","ident_utf16":{"start":{"line_number":3468,"utf16_col":17},"end":{"line_number":3468,"utf16_col":28}},"extent_utf16":{"start":{"line_number":3468,"utf16_col":12},"end":{"line_number":3468,"utf16_col":65}}},{"name":"Filter","kind":"class","ident_start":113208,"ident_end":113214,"extent_start":113201,"extent_end":113758,"fully_qualified_name":"TestSpec::Filter","ident_utf16":{"start":{"line_number":3473,"utf16_col":15},"end":{"line_number":3473,"utf16_col":21}},"extent_utf16":{"start":{"line_number":3473,"utf16_col":8},"end":{"line_number":3486,"utf16_col":9}}},{"name":"extractFilterName","kind":"method","ident_start":113788,"ident_end":113805,"extent_start":113769,"extent_end":113830,"fully_qualified_name":"TestSpec::extractFilterName","ident_utf16":{"start":{"line_number":3488,"utf16_col":27},"end":{"line_number":3488,"utf16_col":44}},"extent_utf16":{"start":{"line_number":3488,"utf16_col":8},"end":{"line_number":3488,"utf16_col":69}}},{"name":"FilterMatch","kind":"class","ident_start":113859,"ident_end":113870,"extent_start":113852,"extent_end":113966,"fully_qualified_name":"TestSpec::FilterMatch","ident_utf16":{"start":{"line_number":3491,"utf16_col":15},"end":{"line_number":3491,"utf16_col":26}},"extent_utf16":{"start":{"line_number":3491,"utf16_col":8},"end":{"line_number":3494,"utf16_col":9}}},{"name":"hasFilters","kind":"method","ident_start":114088,"ident_end":114098,"extent_start":114083,"extent_end":114107,"fully_qualified_name":"TestSpec::hasFilters","ident_utf16":{"start":{"line_number":3498,"utf16_col":13},"end":{"line_number":3498,"utf16_col":23}},"extent_utf16":{"start":{"line_number":3498,"utf16_col":8},"end":{"line_number":3498,"utf16_col":32}}},{"name":"matches","kind":"method","ident_start":114121,"ident_end":114128,"extent_start":114116,"extent_end":114167,"fully_qualified_name":"TestSpec::matches","ident_utf16":{"start":{"line_number":3499,"utf16_col":13},"end":{"line_number":3499,"utf16_col":20}},"extent_utf16":{"start":{"line_number":3499,"utf16_col":8},"end":{"line_number":3499,"utf16_col":59}}},{"name":"matchesByFilter","kind":"method","ident_start":114184,"ident_end":114199,"extent_start":114176,"extent_end":114277,"fully_qualified_name":"TestSpec::matchesByFilter","ident_utf16":{"start":{"line_number":3500,"utf16_col":16},"end":{"line_number":3500,"utf16_col":31}},"extent_utf16":{"start":{"line_number":3500,"utf16_col":8},"end":{"line_number":3500,"utf16_col":109}}},{"name":"serializeTo","kind":"method","ident_start":114597,"ident_end":114608,"extent_start":114592,"extent_end":114636,"fully_qualified_name":"TestSpec::serializeTo","ident_utf16":{"start":{"line_number":3510,"utf16_col":13},"end":{"line_number":3510,"utf16_col":24}},"extent_utf16":{"start":{"line_number":3510,"utf16_col":8},"end":{"line_number":3510,"utf16_col":52}}},{"name":"Optional","kind":"class","ident_start":115108,"ident_end":115116,"extent_start":115102,"extent_end":118070,"fully_qualified_name":"Optional","ident_utf16":{"start":{"line_number":3536,"utf16_col":10},"end":{"line_number":3536,"utf16_col":18}},"extent_utf16":{"start":{"line_number":3536,"utf16_col":4},"end":{"line_number":3630,"utf16_col":5}}},{"name":"Optional","kind":"function","ident_start":115139,"ident_end":115147,"extent_start":115139,"extent_end":115178,"fully_qualified_name":"Optional::Optional","ident_utf16":{"start":{"line_number":3538,"utf16_col":8},"end":{"line_number":3538,"utf16_col":16}},"extent_utf16":{"start":{"line_number":3538,"utf16_col":8},"end":{"line_number":3538,"utf16_col":47}}},{"name":"Optional","kind":"function","ident_start":115221,"ident_end":115229,"extent_start":115221,"extent_end":115309,"fully_qualified_name":"Optional::Optional","ident_utf16":{"start":{"line_number":3541,"utf16_col":8},"end":{"line_number":3541,"utf16_col":16}},"extent_utf16":{"start":{"line_number":3541,"utf16_col":8},"end":{"line_number":3542,"utf16_col":59}}},{"name":"Optional","kind":"function","ident_start":115318,"ident_end":115326,"extent_start":115318,"extent_end":115415,"fully_qualified_name":"Optional::Optional","ident_utf16":{"start":{"line_number":3543,"utf16_col":8},"end":{"line_number":3543,"utf16_col":16}},"extent_utf16":{"start":{"line_number":3543,"utf16_col":8},"end":{"line_number":3544,"utf16_col":73}}},{"name":"Optional","kind":"function","ident_start":115761,"ident_end":115769,"extent_start":115761,"extent_end":115876,"fully_qualified_name":"Optional::Optional","ident_utf16":{"start":{"line_number":3557,"utf16_col":8},"end":{"line_number":3557,"utf16_col":16}},"extent_utf16":{"start":{"line_number":3557,"utf16_col":8},"end":{"line_number":3558,"utf16_col":79}}},{"name":"Optional","kind":"function","ident_start":115885,"ident_end":115893,"extent_start":115885,"extent_end":116043,"fully_qualified_name":"Optional::Optional","ident_utf16":{"start":{"line_number":3559,"utf16_col":8},"end":{"line_number":3559,"utf16_col":16}},"extent_utf16":{"start":{"line_number":3559,"utf16_col":8},"end":{"line_number":3561,"utf16_col":48}}},{"name":"reset","kind":"function","ident_start":116600,"ident_end":116605,"extent_start":116595,"extent_end":116714,"fully_qualified_name":"Optional::reset","ident_utf16":{"start":{"line_number":3580,"utf16_col":13},"end":{"line_number":3580,"utf16_col":18}},"extent_utf16":{"start":{"line_number":3580,"utf16_col":8},"end":{"line_number":3583,"utf16_col":9}}},{"name":"valueOr","kind":"function","ident_start":117171,"ident_end":117178,"extent_start":117169,"extent_end":117287,"fully_qualified_name":"Optional::valueOr","ident_utf16":{"start":{"line_number":3602,"utf16_col":10},"end":{"line_number":3602,"utf16_col":17}},"extent_utf16":{"start":{"line_number":3602,"utf16_col":8},"end":{"line_number":3604,"utf16_col":9}}},{"name":"some","kind":"function","ident_start":117302,"ident_end":117306,"extent_start":117297,"extent_end":117351,"fully_qualified_name":"Optional::some","ident_utf16":{"start":{"line_number":3606,"utf16_col":13},"end":{"line_number":3606,"utf16_col":17}},"extent_utf16":{"start":{"line_number":3606,"utf16_col":8},"end":{"line_number":3606,"utf16_col":62}}},{"name":"none","kind":"function","ident_start":117365,"ident_end":117369,"extent_start":117360,"extent_end":117414,"fully_qualified_name":"Optional::none","ident_utf16":{"start":{"line_number":3607,"utf16_col":13},"end":{"line_number":3607,"utf16_col":17}},"extent_utf16":{"start":{"line_number":3607,"utf16_col":8},"end":{"line_number":3607,"utf16_col":62}}},{"name":"GenerateFrom","kind":"type","ident_start":118294,"ident_end":118306,"extent_start":118283,"extent_end":118444,"fully_qualified_name":"GenerateFrom","ident_utf16":{"start":{"line_number":3644,"utf16_col":15},"end":{"line_number":3644,"utf16_col":27}},"extent_utf16":{"start":{"line_number":3644,"utf16_col":4},"end":{"line_number":3649,"utf16_col":5}}},{"name":"ColourMode","kind":"type","ident_start":118769,"ident_end":118779,"extent_start":118758,"extent_end":118794,"fully_qualified_name":"ColourMode","ident_utf16":{"start":{"line_number":3668,"utf16_col":15},"end":{"line_number":3668,"utf16_col":25}},"extent_utf16":{"start":{"line_number":3668,"utf16_col":4},"end":{"line_number":3668,"utf16_col":40}}},{"name":"ReporterSpec","kind":"class","ident_start":119386,"ident_end":119398,"extent_start":119380,"extent_end":120457,"fully_qualified_name":"ReporterSpec","ident_utf16":{"start":{"line_number":3685,"utf16_col":10},"end":{"line_number":3685,"utf16_col":22}},"extent_utf16":{"start":{"line_number":3685,"utf16_col":4},"end":{"line_number":3716,"utf16_col":5}}},{"name":"IStream","kind":"class","ident_start":121001,"ident_end":121008,"extent_start":120995,"extent_end":121008,"fully_qualified_name":"IStream","ident_utf16":{"start":{"line_number":3741,"utf16_col":10},"end":{"line_number":3741,"utf16_col":17}},"extent_utf16":{"start":{"line_number":3741,"utf16_col":4},"end":{"line_number":3741,"utf16_col":17}}},{"name":"ProcessedReporterSpec","kind":"class","ident_start":121157,"ident_end":121178,"extent_start":121150,"extent_end":121652,"fully_qualified_name":"ProcessedReporterSpec","ident_utf16":{"start":{"line_number":3748,"utf16_col":11},"end":{"line_number":3748,"utf16_col":32}},"extent_utf16":{"start":{"line_number":3748,"utf16_col":4},"end":{"line_number":3759,"utf16_col":5}}},{"name":"ConfigData","kind":"class","ident_start":121666,"ident_end":121676,"extent_start":121659,"extent_end":123240,"fully_qualified_name":"ConfigData","ident_utf16":{"start":{"line_number":3761,"utf16_col":11},"end":{"line_number":3761,"utf16_col":21}},"extent_utf16":{"start":{"line_number":3761,"utf16_col":4},"end":{"line_number":3805,"utf16_col":5}}},{"name":"Config","kind":"class","ident_start":123254,"ident_end":123260,"extent_start":123248,"extent_end":125488,"fully_qualified_name":"Config","ident_utf16":{"start":{"line_number":3808,"utf16_col":10},"end":{"line_number":3808,"utf16_col":16}},"extent_utf16":{"start":{"line_number":3808,"utf16_col":4},"end":{"line_number":3865,"utf16_col":5}}},{"name":"Config","kind":"function","ident_start":123301,"ident_end":123307,"extent_start":123301,"extent_end":123320,"fully_qualified_name":"Config::Config","ident_utf16":{"start":{"line_number":3811,"utf16_col":8},"end":{"line_number":3811,"utf16_col":14}},"extent_utf16":{"start":{"line_number":3811,"utf16_col":8},"end":{"line_number":3811,"utf16_col":27}}},{"name":"listTests","kind":"method","ident_start":123434,"ident_end":123443,"extent_start":123429,"extent_end":123452,"fully_qualified_name":"Config::listTests","ident_utf16":{"start":{"line_number":3815,"utf16_col":13},"end":{"line_number":3815,"utf16_col":22}},"extent_utf16":{"start":{"line_number":3815,"utf16_col":8},"end":{"line_number":3815,"utf16_col":31}}},{"name":"listTags","kind":"method","ident_start":123466,"ident_end":123474,"extent_start":123461,"extent_end":123483,"fully_qualified_name":"Config::listTags","ident_utf16":{"start":{"line_number":3816,"utf16_col":13},"end":{"line_number":3816,"utf16_col":21}},"extent_utf16":{"start":{"line_number":3816,"utf16_col":8},"end":{"line_number":3816,"utf16_col":30}}},{"name":"listReporters","kind":"method","ident_start":123497,"ident_end":123510,"extent_start":123492,"extent_end":123519,"fully_qualified_name":"Config::listReporters","ident_utf16":{"start":{"line_number":3817,"utf16_col":13},"end":{"line_number":3817,"utf16_col":26}},"extent_utf16":{"start":{"line_number":3817,"utf16_col":8},"end":{"line_number":3817,"utf16_col":35}}},{"name":"listListeners","kind":"method","ident_start":123533,"ident_end":123546,"extent_start":123528,"extent_end":123555,"fully_qualified_name":"Config::listListeners","ident_utf16":{"start":{"line_number":3818,"utf16_col":13},"end":{"line_number":3818,"utf16_col":26}},"extent_utf16":{"start":{"line_number":3818,"utf16_col":8},"end":{"line_number":3818,"utf16_col":35}}},{"name":"hasTestFilters","kind":"method","ident_start":123931,"ident_end":123945,"extent_start":123926,"extent_end":123963,"fully_qualified_name":"Config::hasTestFilters","ident_utf16":{"start":{"line_number":3828,"utf16_col":13},"end":{"line_number":3828,"utf16_col":27}},"extent_utf16":{"start":{"line_number":3828,"utf16_col":8},"end":{"line_number":3828,"utf16_col":45}}},{"name":"showHelp","kind":"method","ident_start":123978,"ident_end":123986,"extent_start":123973,"extent_end":123995,"fully_qualified_name":"Config::showHelp","ident_utf16":{"start":{"line_number":3830,"utf16_col":13},"end":{"line_number":3830,"utf16_col":21}},"extent_utf16":{"start":{"line_number":3830,"utf16_col":8},"end":{"line_number":3830,"utf16_col":30}}},{"name":"allowThrows","kind":"method","ident_start":124039,"ident_end":124050,"extent_start":124034,"extent_end":124068,"fully_qualified_name":"Config::allowThrows","ident_utf16":{"start":{"line_number":3833,"utf16_col":13},"end":{"line_number":3833,"utf16_col":24}},"extent_utf16":{"start":{"line_number":3833,"utf16_col":8},"end":{"line_number":3833,"utf16_col":42}}},{"name":"name","kind":"method","ident_start":124087,"ident_end":124091,"extent_start":124077,"extent_end":124109,"fully_qualified_name":"Config::name","ident_utf16":{"start":{"line_number":3834,"utf16_col":18},"end":{"line_number":3834,"utf16_col":22}},"extent_utf16":{"start":{"line_number":3834,"utf16_col":8},"end":{"line_number":3834,"utf16_col":40}}},{"name":"includeSuccessfulResults","kind":"method","ident_start":124123,"ident_end":124147,"extent_start":124118,"extent_end":124165,"fully_qualified_name":"Config::includeSuccessfulResults","ident_utf16":{"start":{"line_number":3835,"utf16_col":13},"end":{"line_number":3835,"utf16_col":37}},"extent_utf16":{"start":{"line_number":3835,"utf16_col":8},"end":{"line_number":3835,"utf16_col":55}}},{"name":"warnAboutMissingAssertions","kind":"method","ident_start":124179,"ident_end":124205,"extent_start":124174,"extent_end":124223,"fully_qualified_name":"Config::warnAboutMissingAssertions","ident_utf16":{"start":{"line_number":3836,"utf16_col":13},"end":{"line_number":3836,"utf16_col":39}},"extent_utf16":{"start":{"line_number":3836,"utf16_col":8},"end":{"line_number":3836,"utf16_col":57}}},{"name":"warnAboutUnmatchedTestSpecs","kind":"method","ident_start":124237,"ident_end":124264,"extent_start":124232,"extent_end":124282,"fully_qualified_name":"Config::warnAboutUnmatchedTestSpecs","ident_utf16":{"start":{"line_number":3837,"utf16_col":13},"end":{"line_number":3837,"utf16_col":40}},"extent_utf16":{"start":{"line_number":3837,"utf16_col":8},"end":{"line_number":3837,"utf16_col":58}}},{"name":"zeroTestsCountAsSuccess","kind":"method","ident_start":124296,"ident_end":124319,"extent_start":124291,"extent_end":124337,"fully_qualified_name":"Config::zeroTestsCountAsSuccess","ident_utf16":{"start":{"line_number":3838,"utf16_col":13},"end":{"line_number":3838,"utf16_col":36}},"extent_utf16":{"start":{"line_number":3838,"utf16_col":8},"end":{"line_number":3838,"utf16_col":54}}},{"name":"showDurations","kind":"method","ident_start":124360,"ident_end":124373,"extent_start":124346,"extent_end":124391,"fully_qualified_name":"Config::showDurations","ident_utf16":{"start":{"line_number":3839,"utf16_col":22},"end":{"line_number":3839,"utf16_col":35}},"extent_utf16":{"start":{"line_number":3839,"utf16_col":8},"end":{"line_number":3839,"utf16_col":53}}},{"name":"minDuration","kind":"method","ident_start":124407,"ident_end":124418,"extent_start":124400,"extent_end":124436,"fully_qualified_name":"Config::minDuration","ident_utf16":{"start":{"line_number":3840,"utf16_col":15},"end":{"line_number":3840,"utf16_col":26}},"extent_utf16":{"start":{"line_number":3840,"utf16_col":8},"end":{"line_number":3840,"utf16_col":44}}},{"name":"runOrder","kind":"method","ident_start":124458,"ident_end":124466,"extent_start":124445,"extent_end":124484,"fully_qualified_name":"Config::runOrder","ident_utf16":{"start":{"line_number":3841,"utf16_col":21},"end":{"line_number":3841,"utf16_col":29}},"extent_utf16":{"start":{"line_number":3841,"utf16_col":8},"end":{"line_number":3841,"utf16_col":47}}},{"name":"rngSeed","kind":"method","ident_start":124502,"ident_end":124509,"extent_start":124493,"extent_end":124527,"fully_qualified_name":"Config::rngSeed","ident_utf16":{"start":{"line_number":3842,"utf16_col":17},"end":{"line_number":3842,"utf16_col":24}},"extent_utf16":{"start":{"line_number":3842,"utf16_col":8},"end":{"line_number":3842,"utf16_col":42}}},{"name":"shardCount","kind":"method","ident_start":124549,"ident_end":124559,"extent_start":124536,"extent_end":124577,"fully_qualified_name":"Config::shardCount","ident_utf16":{"start":{"line_number":3843,"utf16_col":21},"end":{"line_number":3843,"utf16_col":31}},"extent_utf16":{"start":{"line_number":3843,"utf16_col":8},"end":{"line_number":3843,"utf16_col":49}}},{"name":"shardIndex","kind":"method","ident_start":124599,"ident_end":124609,"extent_start":124586,"extent_end":124627,"fully_qualified_name":"Config::shardIndex","ident_utf16":{"start":{"line_number":3844,"utf16_col":21},"end":{"line_number":3844,"utf16_col":31}},"extent_utf16":{"start":{"line_number":3844,"utf16_col":8},"end":{"line_number":3844,"utf16_col":49}}},{"name":"defaultColourMode","kind":"method","ident_start":124647,"ident_end":124664,"extent_start":124636,"extent_end":124682,"fully_qualified_name":"Config::defaultColourMode","ident_utf16":{"start":{"line_number":3845,"utf16_col":19},"end":{"line_number":3845,"utf16_col":36}},"extent_utf16":{"start":{"line_number":3845,"utf16_col":8},"end":{"line_number":3845,"utf16_col":54}}},{"name":"shouldDebugBreak","kind":"method","ident_start":124696,"ident_end":124712,"extent_start":124691,"extent_end":124730,"fully_qualified_name":"Config::shouldDebugBreak","ident_utf16":{"start":{"line_number":3846,"utf16_col":13},"end":{"line_number":3846,"utf16_col":29}},"extent_utf16":{"start":{"line_number":3846,"utf16_col":8},"end":{"line_number":3846,"utf16_col":47}}},{"name":"abortAfter","kind":"method","ident_start":124743,"ident_end":124753,"extent_start":124739,"extent_end":124771,"fully_qualified_name":"Config::abortAfter","ident_utf16":{"start":{"line_number":3847,"utf16_col":12},"end":{"line_number":3847,"utf16_col":22}},"extent_utf16":{"start":{"line_number":3847,"utf16_col":8},"end":{"line_number":3847,"utf16_col":40}}},{"name":"showInvisibles","kind":"method","ident_start":124785,"ident_end":124799,"extent_start":124780,"extent_end":124817,"fully_qualified_name":"Config::showInvisibles","ident_utf16":{"start":{"line_number":3848,"utf16_col":13},"end":{"line_number":3848,"utf16_col":27}},"extent_utf16":{"start":{"line_number":3848,"utf16_col":8},"end":{"line_number":3848,"utf16_col":45}}},{"name":"verbosity","kind":"method","ident_start":124836,"ident_end":124845,"extent_start":124826,"extent_end":124863,"fully_qualified_name":"Config::verbosity","ident_utf16":{"start":{"line_number":3849,"utf16_col":18},"end":{"line_number":3849,"utf16_col":27}},"extent_utf16":{"start":{"line_number":3849,"utf16_col":8},"end":{"line_number":3849,"utf16_col":45}}},{"name":"skipBenchmarks","kind":"method","ident_start":124877,"ident_end":124891,"extent_start":124872,"extent_end":124909,"fully_qualified_name":"Config::skipBenchmarks","ident_utf16":{"start":{"line_number":3850,"utf16_col":13},"end":{"line_number":3850,"utf16_col":27}},"extent_utf16":{"start":{"line_number":3850,"utf16_col":8},"end":{"line_number":3850,"utf16_col":45}}},{"name":"benchmarkNoAnalysis","kind":"method","ident_start":124923,"ident_end":124942,"extent_start":124918,"extent_end":124960,"fully_qualified_name":"Config::benchmarkNoAnalysis","ident_utf16":{"start":{"line_number":3851,"utf16_col":13},"end":{"line_number":3851,"utf16_col":32}},"extent_utf16":{"start":{"line_number":3851,"utf16_col":8},"end":{"line_number":3851,"utf16_col":50}}},{"name":"benchmarkSamples","kind":"method","ident_start":124982,"ident_end":124998,"extent_start":124969,"extent_end":125016,"fully_qualified_name":"Config::benchmarkSamples","ident_utf16":{"start":{"line_number":3852,"utf16_col":21},"end":{"line_number":3852,"utf16_col":37}},"extent_utf16":{"start":{"line_number":3852,"utf16_col":8},"end":{"line_number":3852,"utf16_col":55}}},{"name":"benchmarkConfidenceInterval","kind":"method","ident_start":125032,"ident_end":125059,"extent_start":125025,"extent_end":125077,"fully_qualified_name":"Config::benchmarkConfidenceInterval","ident_utf16":{"start":{"line_number":3853,"utf16_col":15},"end":{"line_number":3853,"utf16_col":42}},"extent_utf16":{"start":{"line_number":3853,"utf16_col":8},"end":{"line_number":3853,"utf16_col":60}}},{"name":"benchmarkResamples","kind":"method","ident_start":125099,"ident_end":125117,"extent_start":125086,"extent_end":125135,"fully_qualified_name":"Config::benchmarkResamples","ident_utf16":{"start":{"line_number":3854,"utf16_col":21},"end":{"line_number":3854,"utf16_col":39}},"extent_utf16":{"start":{"line_number":3854,"utf16_col":8},"end":{"line_number":3854,"utf16_col":57}}},{"name":"benchmarkWarmupTime","kind":"method","ident_start":125170,"ident_end":125189,"extent_start":125144,"extent_end":125207,"fully_qualified_name":"Config::benchmarkWarmupTime","ident_utf16":{"start":{"line_number":3855,"utf16_col":34},"end":{"line_number":3855,"utf16_col":53}},"extent_utf16":{"start":{"line_number":3855,"utf16_col":8},"end":{"line_number":3855,"utf16_col":71}}},{"name":"readBazelEnvVars","kind":"method","ident_start":125298,"ident_end":125314,"extent_start":125293,"extent_end":125317,"fully_qualified_name":"Config::readBazelEnvVars","ident_utf16":{"start":{"line_number":3859,"utf16_col":13},"end":{"line_number":3859,"utf16_col":29}},"extent_utf16":{"start":{"line_number":3859,"utf16_col":8},"end":{"line_number":3859,"utf16_col":32}}},{"name":"StreamEndStop","kind":"class","ident_start":126806,"ident_end":126819,"extent_start":126799,"extent_end":127043,"fully_qualified_name":"StreamEndStop","ident_utf16":{"start":{"line_number":3922,"utf16_col":11},"end":{"line_number":3922,"utf16_col":24}},"extent_utf16":{"start":{"line_number":3922,"utf16_col":4},"end":{"line_number":3929,"utf16_col":5}}},{"name":"MessageInfo","kind":"class","ident_start":127246,"ident_end":127257,"extent_start":127239,"extent_end":127861,"fully_qualified_name":"MessageInfo","ident_utf16":{"start":{"line_number":3944,"utf16_col":11},"end":{"line_number":3944,"utf16_col":22}},"extent_utf16":{"start":{"line_number":3944,"utf16_col":4},"end":{"line_number":3963,"utf16_col":5}}},{"name":"IResultCapture","kind":"class","ident_start":128026,"ident_end":128040,"extent_start":128020,"extent_end":128040,"fully_qualified_name":"IResultCapture","ident_utf16":{"start":{"line_number":3975,"utf16_col":10},"end":{"line_number":3975,"utf16_col":24}},"extent_utf16":{"start":{"line_number":3975,"utf16_col":4},"end":{"line_number":3975,"utf16_col":24}}},{"name":"MessageStream","kind":"class","ident_start":128054,"ident_end":128067,"extent_start":128047,"extent_end":128268,"fully_qualified_name":"MessageStream","ident_utf16":{"start":{"line_number":3977,"utf16_col":11},"end":{"line_number":3977,"utf16_col":24}},"extent_utf16":{"start":{"line_number":3977,"utf16_col":4},"end":{"line_number":3986,"utf16_col":5}}},{"name":"MessageBuilder","kind":"class","ident_start":128282,"ident_end":128296,"extent_start":128275,"extent_end":128719,"fully_qualified_name":"MessageBuilder","ident_utf16":{"start":{"line_number":3988,"utf16_col":11},"end":{"line_number":3988,"utf16_col":25}},"extent_utf16":{"start":{"line_number":3988,"utf16_col":4},"end":{"line_number":4001,"utf16_col":5}}},{"name":"MessageBuilder","kind":"function","ident_start":128323,"ident_end":128337,"extent_start":128323,"extent_end":128514,"fully_qualified_name":"MessageBuilder::MessageBuilder","ident_utf16":{"start":{"line_number":3989,"utf16_col":8},"end":{"line_number":3989,"utf16_col":22}},"extent_utf16":{"start":{"line_number":3989,"utf16_col":8},"end":{"line_number":3992,"utf16_col":48}}},{"name":"ScopedMessage","kind":"class","ident_start":128732,"ident_end":128745,"extent_start":128726,"extent_end":129025,"fully_qualified_name":"ScopedMessage","ident_utf16":{"start":{"line_number":4003,"utf16_col":10},"end":{"line_number":4003,"utf16_col":23}},"extent_utf16":{"start":{"line_number":4003,"utf16_col":4},"end":{"line_number":4012,"utf16_col":5}}},{"name":"ScopedMessage","kind":"function","ident_start":128828,"ident_end":128841,"extent_start":128828,"extent_end":128879,"fully_qualified_name":"ScopedMessage::ScopedMessage","ident_utf16":{"start":{"line_number":4006,"utf16_col":8},"end":{"line_number":4006,"utf16_col":21}},"extent_utf16":{"start":{"line_number":4006,"utf16_col":8},"end":{"line_number":4006,"utf16_col":59}}},{"name":"Capturer","kind":"class","ident_start":129038,"ident_end":129046,"extent_start":129032,"extent_end":129921,"fully_qualified_name":"Capturer","ident_utf16":{"start":{"line_number":4014,"utf16_col":10},"end":{"line_number":4014,"utf16_col":18}},"extent_utf16":{"start":{"line_number":4014,"utf16_col":4},"end":{"line_number":4038,"utf16_col":5}}},{"name":"Capturer","kind":"function","ident_start":129307,"ident_end":129315,"extent_start":129307,"extent_end":129342,"fully_qualified_name":"Capturer::Capturer","ident_utf16":{"start":{"line_number":4021,"utf16_col":8},"end":{"line_number":4021,"utf16_col":16}},"extent_utf16":{"start":{"line_number":4021,"utf16_col":8},"end":{"line_number":4021,"utf16_col":43}}},{"name":"captureValue","kind":"method","ident_start":129434,"ident_end":129446,"extent_start":129429,"extent_end":129489,"fully_qualified_name":"Capturer::captureValue","ident_utf16":{"start":{"line_number":4026,"utf16_col":13},"end":{"line_number":4026,"utf16_col":25}},"extent_utf16":{"start":{"line_number":4026,"utf16_col":8},"end":{"line_number":4026,"utf16_col":68}}},{"name":"captureValues","kind":"function","ident_start":129533,"ident_end":129546,"extent_start":129528,"extent_end":129660,"fully_qualified_name":"Capturer::captureValues","ident_utf16":{"start":{"line_number":4029,"utf16_col":13},"end":{"line_number":4029,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4029,"utf16_col":8},"end":{"line_number":4031,"utf16_col":9}}},{"name":"captureValues","kind":"function","ident_start":129720,"ident_end":129733,"extent_start":129715,"extent_end":129915,"fully_qualified_name":"Capturer::captureValues","ident_utf16":{"start":{"line_number":4034,"utf16_col":13},"end":{"line_number":4034,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4034,"utf16_col":8},"end":{"line_number":4037,"utf16_col":9}}},{"name":"Counts","kind":"class","ident_start":133282,"ident_end":133288,"extent_start":133275,"extent_end":133647,"fully_qualified_name":"Counts","ident_utf16":{"start":{"line_number":4115,"utf16_col":11},"end":{"line_number":4115,"utf16_col":17}},"extent_utf16":{"start":{"line_number":4115,"utf16_col":4},"end":{"line_number":4127,"utf16_col":5}}},{"name":"Totals","kind":"class","ident_start":133661,"ident_end":133667,"extent_start":133654,"extent_end":133897,"fully_qualified_name":"Totals","ident_utf16":{"start":{"line_number":4129,"utf16_col":11},"end":{"line_number":4129,"utf16_col":17}},"extent_utf16":{"start":{"line_number":4129,"utf16_col":4},"end":{"line_number":4138,"utf16_col":5}}},{"name":"SectionInfo","kind":"class","ident_start":133988,"ident_end":133999,"extent_start":133981,"extent_end":134460,"fully_qualified_name":"SectionInfo","ident_utf16":{"start":{"line_number":4147,"utf16_col":11},"end":{"line_number":4147,"utf16_col":22}},"extent_utf16":{"start":{"line_number":4147,"utf16_col":4},"end":{"line_number":4159,"utf16_col":5}}},{"name":"SectionInfo","kind":"function","ident_start":134195,"ident_end":134206,"extent_start":134195,"extent_end":134394,"fully_qualified_name":"SectionInfo::SectionInfo","ident_utf16":{"start":{"line_number":4151,"utf16_col":8},"end":{"line_number":4151,"utf16_col":19}},"extent_utf16":{"start":{"line_number":4151,"utf16_col":8},"end":{"line_number":4155,"utf16_col":14}}},{"name":"SectionEndInfo","kind":"class","ident_start":134474,"ident_end":134488,"extent_start":134467,"extent_end":134594,"fully_qualified_name":"SectionEndInfo","ident_utf16":{"start":{"line_number":4161,"utf16_col":11},"end":{"line_number":4161,"utf16_col":25}},"extent_utf16":{"start":{"line_number":4161,"utf16_col":4},"end":{"line_number":4165,"utf16_col":5}}},{"name":"Args","kind":"class","ident_start":135671,"ident_end":135675,"extent_start":135665,"extent_end":135675,"fully_qualified_name":"Args","ident_utf16":{"start":{"line_number":4218,"utf16_col":14},"end":{"line_number":4218,"utf16_col":18}},"extent_utf16":{"start":{"line_number":4218,"utf16_col":8},"end":{"line_number":4218,"utf16_col":18}}},{"name":"Parser","kind":"class","ident_start":135691,"ident_end":135697,"extent_start":135685,"extent_end":135697,"fully_qualified_name":"Parser","ident_utf16":{"start":{"line_number":4219,"utf16_col":14},"end":{"line_number":4219,"utf16_col":20}},"extent_utf16":{"start":{"line_number":4219,"utf16_col":8},"end":{"line_number":4219,"utf16_col":20}}},{"name":"ParseResultType","kind":"type","ident_start":135764,"ident_end":135779,"extent_start":135753,"extent_end":135891,"fully_qualified_name":"ParseResultType","ident_utf16":{"start":{"line_number":4222,"utf16_col":19},"end":{"line_number":4222,"utf16_col":34}},"extent_utf16":{"start":{"line_number":4222,"utf16_col":8},"end":{"line_number":4227,"utf16_col":9}}},{"name":"accept_many_t","kind":"class","ident_start":135909,"ident_end":135922,"extent_start":135902,"extent_end":135925,"fully_qualified_name":"accept_many_t","ident_utf16":{"start":{"line_number":4229,"utf16_col":15},"end":{"line_number":4229,"utf16_col":28}},"extent_utf16":{"start":{"line_number":4229,"utf16_col":8},"end":{"line_number":4229,"utf16_col":31}}},{"name":"fake_arg","kind":"class","ident_start":136022,"ident_end":136030,"extent_start":136015,"extent_end":136114,"fully_qualified_name":"fake_arg","ident_utf16":{"start":{"line_number":4233,"utf16_col":19},"end":{"line_number":4233,"utf16_col":27}},"extent_utf16":{"start":{"line_number":4233,"utf16_col":12},"end":{"line_number":4236,"utf16_col":13}}},{"name":"is_unary_function","kind":"class","ident_start":136187,"ident_end":136204,"extent_start":136180,"extent_end":136225,"fully_qualified_name":"is_unary_function","ident_utf16":{"start":{"line_number":4239,"utf16_col":19},"end":{"line_number":4239,"utf16_col":36}},"extent_utf16":{"start":{"line_number":4239,"utf16_col":12},"end":{"line_number":4239,"utf16_col":57}}},{"name":"UnaryLambdaTraits","kind":"class","ident_start":136641,"ident_end":136658,"extent_start":136634,"extent_end":136725,"fully_qualified_name":"UnaryLambdaTraits","ident_utf16":{"start":{"line_number":4252,"utf16_col":19},"end":{"line_number":4252,"utf16_col":36}},"extent_utf16":{"start":{"line_number":4252,"utf16_col":12},"end":{"line_number":4253,"utf16_col":66}}},{"name":"TokenStream","kind":"class","ident_start":137309,"ident_end":137320,"extent_start":137303,"extent_end":137320,"fully_qualified_name":"TokenStream","ident_utf16":{"start":{"line_number":4267,"utf16_col":18},"end":{"line_number":4267,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4267,"utf16_col":12},"end":{"line_number":4267,"utf16_col":29}}},{"name":"TokenType","kind":"type","ident_start":137560,"ident_end":137569,"extent_start":137549,"extent_end":137590,"fully_qualified_name":"TokenType","ident_utf16":{"start":{"line_number":4272,"utf16_col":23},"end":{"line_number":4272,"utf16_col":32}},"extent_utf16":{"start":{"line_number":4272,"utf16_col":12},"end":{"line_number":4272,"utf16_col":53}}},{"name":"Token","kind":"class","ident_start":137611,"ident_end":137616,"extent_start":137604,"extent_end":137697,"fully_qualified_name":"Token","ident_utf16":{"start":{"line_number":4273,"utf16_col":19},"end":{"line_number":4273,"utf16_col":24}},"extent_utf16":{"start":{"line_number":4273,"utf16_col":12},"end":{"line_number":4276,"utf16_col":13}}},{"name":"TokenStream","kind":"class","ident_start":137841,"ident_end":137852,"extent_start":137835,"extent_end":138867,"fully_qualified_name":"TokenStream","ident_utf16":{"start":{"line_number":4280,"utf16_col":18},"end":{"line_number":4280,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4280,"utf16_col":12},"end":{"line_number":4310,"utf16_col":13}}},{"name":"loadBuffer","kind":"method","ident_start":138060,"ident_end":138070,"extent_start":138055,"extent_end":138073,"fully_qualified_name":"TokenStream::loadBuffer","ident_utf16":{"start":{"line_number":4285,"utf16_col":21},"end":{"line_number":4285,"utf16_col":31}},"extent_utf16":{"start":{"line_number":4285,"utf16_col":16},"end":{"line_number":4285,"utf16_col":34}}},{"name":"count","kind":"function","ident_start":138371,"ident_end":138376,"extent_start":138364,"extent_end":138470,"fully_qualified_name":"TokenStream::count","ident_utf16":{"start":{"line_number":4295,"utf16_col":23},"end":{"line_number":4295,"utf16_col":28}},"extent_utf16":{"start":{"line_number":4295,"utf16_col":16},"end":{"line_number":4297,"utf16_col":17}}},{"name":"ResultType","kind":"type","ident_start":138942,"ident_end":138952,"extent_start":138931,"extent_end":139189,"fully_qualified_name":"ResultType","ident_utf16":{"start":{"line_number":4313,"utf16_col":23},"end":{"line_number":4313,"utf16_col":33}},"extent_utf16":{"start":{"line_number":4313,"utf16_col":12},"end":{"line_number":4318,"utf16_col":13}}},{"name":"ResultBase","kind":"class","ident_start":139210,"ident_end":139220,"extent_start":139204,"extent_end":139708,"fully_qualified_name":"ResultBase","ident_utf16":{"start":{"line_number":4320,"utf16_col":18},"end":{"line_number":4320,"utf16_col":28}},"extent_utf16":{"start":{"line_number":4320,"utf16_col":12},"end":{"line_number":4334,"utf16_col":13}}},{"name":"ResultBase","kind":"function","ident_start":139262,"ident_end":139272,"extent_start":139262,"extent_end":139310,"fully_qualified_name":"ResultBase::ResultBase","ident_utf16":{"start":{"line_number":4322,"utf16_col":16},"end":{"line_number":4322,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4322,"utf16_col":16},"end":{"line_number":4322,"utf16_col":64}}},{"name":"ResultBase","kind":"function","ident_start":139382,"ident_end":139392,"extent_start":139382,"extent_end":139422,"fully_qualified_name":"ResultBase::ResultBase","ident_utf16":{"start":{"line_number":4326,"utf16_col":16},"end":{"line_number":4326,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4326,"utf16_col":16},"end":{"line_number":4326,"utf16_col":56}}},{"name":"ResultBase","kind":"function","ident_start":139507,"ident_end":139517,"extent_start":139507,"extent_end":139542,"fully_qualified_name":"ResultBase::ResultBase","ident_utf16":{"start":{"line_number":4328,"utf16_col":16},"end":{"line_number":4328,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4328,"utf16_col":16},"end":{"line_number":4328,"utf16_col":51}}},{"name":"enforceOk","kind":"method","ident_start":139636,"ident_end":139645,"extent_start":139623,"extent_end":139658,"fully_qualified_name":"ResultBase::enforceOk","ident_utf16":{"start":{"line_number":4331,"utf16_col":29},"end":{"line_number":4331,"utf16_col":38}},"extent_utf16":{"start":{"line_number":4331,"utf16_col":16},"end":{"line_number":4331,"utf16_col":51}}},{"name":"ResultValueBase","kind":"class","ident_start":139763,"ident_end":139778,"extent_start":139757,"extent_end":142033,"fully_qualified_name":"ResultValueBase","ident_utf16":{"start":{"line_number":4337,"utf16_col":18},"end":{"line_number":4337,"utf16_col":33}},"extent_utf16":{"start":{"line_number":4337,"utf16_col":12},"end":{"line_number":4397,"utf16_col":13}}},{"name":"ResultValueBase","kind":"function","ident_start":140124,"ident_end":140139,"extent_start":140124,"extent_end":140181,"fully_qualified_name":"ResultValueBase::ResultValueBase","ident_utf16":{"start":{"line_number":4349,"utf16_col":16},"end":{"line_number":4349,"utf16_col":31}},"extent_utf16":{"start":{"line_number":4349,"utf16_col":16},"end":{"line_number":4349,"utf16_col":73}}},{"name":"ResultValueBase","kind":"function","ident_start":140199,"ident_end":140214,"extent_start":140199,"extent_end":140420,"fully_qualified_name":"ResultValueBase::ResultValueBase","ident_utf16":{"start":{"line_number":4351,"utf16_col":16},"end":{"line_number":4351,"utf16_col":31}},"extent_utf16":{"start":{"line_number":4351,"utf16_col":16},"end":{"line_number":4355,"utf16_col":17}}},{"name":"ResultValueBase","kind":"function","ident_start":140437,"ident_end":140452,"extent_start":140437,"extent_end":140665,"fully_qualified_name":"ResultValueBase::ResultValueBase","ident_utf16":{"start":{"line_number":4356,"utf16_col":16},"end":{"line_number":4356,"utf16_col":31}},"extent_utf16":{"start":{"line_number":4356,"utf16_col":16},"end":{"line_number":4360,"utf16_col":17}}},{"name":"ResultValueBase","kind":"function","ident_start":140684,"ident_end":140699,"extent_start":140684,"extent_end":140848,"fully_qualified_name":"ResultValueBase::ResultValueBase","ident_utf16":{"start":{"line_number":4363,"utf16_col":16},"end":{"line_number":4363,"utf16_col":31}},"extent_utf16":{"start":{"line_number":4363,"utf16_col":16},"end":{"line_number":4366,"utf16_col":17}}},{"name":"ResultValueBase","kind":"function","ident_start":140865,"ident_end":140880,"extent_start":140865,"extent_end":141036,"fully_qualified_name":"ResultValueBase::ResultValueBase","ident_utf16":{"start":{"line_number":4367,"utf16_col":16},"end":{"line_number":4367,"utf16_col":31}},"extent_utf16":{"start":{"line_number":4367,"utf16_col":16},"end":{"line_number":4370,"utf16_col":17}}},{"name":"BasicResult","kind":"class","ident_start":142254,"ident_end":142265,"extent_start":142248,"extent_end":144536,"fully_qualified_name":"BasicResult","ident_utf16":{"start":{"line_number":4405,"utf16_col":18},"end":{"line_number":4405,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4405,"utf16_col":12},"end":{"line_number":4458,"utf16_col":13}}},{"name":"BasicResult","kind":"function","ident_start":142379,"ident_end":142390,"extent_start":142370,"extent_end":142613,"fully_qualified_name":"BasicResult::BasicResult","ident_utf16":{"start":{"line_number":4408,"utf16_col":25},"end":{"line_number":4408,"utf16_col":36}},"extent_utf16":{"start":{"line_number":4408,"utf16_col":16},"end":{"line_number":4412,"utf16_col":17}}},{"name":"ok","kind":"function","ident_start":142681,"ident_end":142683,"extent_start":142669,"extent_end":142800,"fully_qualified_name":"BasicResult::ok","ident_utf16":{"start":{"line_number":4415,"utf16_col":28},"end":{"line_number":4415,"utf16_col":30}},"extent_utf16":{"start":{"line_number":4415,"utf16_col":16},"end":{"line_number":4417,"utf16_col":17}}},{"name":"ok","kind":"function","ident_start":142829,"ident_end":142831,"extent_start":142817,"extent_end":142879,"fully_qualified_name":"BasicResult::ok","ident_utf16":{"start":{"line_number":4418,"utf16_col":28},"end":{"line_number":4418,"utf16_col":30}},"extent_utf16":{"start":{"line_number":4418,"utf16_col":16},"end":{"line_number":4418,"utf16_col":78}}},{"name":"logicError","kind":"function","ident_start":142908,"ident_end":142918,"extent_start":142896,"extent_end":143074,"fully_qualified_name":"BasicResult::logicError","ident_utf16":{"start":{"line_number":4419,"utf16_col":28},"end":{"line_number":4419,"utf16_col":38}},"extent_utf16":{"start":{"line_number":4419,"utf16_col":16},"end":{"line_number":4422,"utf16_col":17}}},{"name":"runtimeError","kind":"function","ident_start":143103,"ident_end":143115,"extent_start":143091,"extent_end":143273,"fully_qualified_name":"BasicResult::runtimeError","ident_utf16":{"start":{"line_number":4423,"utf16_col":28},"end":{"line_number":4423,"utf16_col":40}},"extent_utf16":{"start":{"line_number":4423,"utf16_col":16},"end":{"line_number":4426,"utf16_col":17}}},{"name":"type","kind":"function","ident_start":143416,"ident_end":143420,"extent_start":143411,"extent_end":143461,"fully_qualified_name":"BasicResult::type","ident_utf16":{"start":{"line_number":4431,"utf16_col":21},"end":{"line_number":4431,"utf16_col":25}},"extent_utf16":{"start":{"line_number":4431,"utf16_col":16},"end":{"line_number":4431,"utf16_col":66}}},{"name":"errorMessage","kind":"function","ident_start":143483,"ident_end":143495,"extent_start":143478,"extent_end":143588,"fully_qualified_name":"BasicResult::errorMessage","ident_utf16":{"start":{"line_number":4432,"utf16_col":21},"end":{"line_number":4432,"utf16_col":33}},"extent_utf16":{"start":{"line_number":4432,"utf16_col":16},"end":{"line_number":4434,"utf16_col":17}}},{"name":"enforceOk","kind":"function","ident_start":143634,"ident_end":143643,"extent_start":143629,"extent_end":144048,"fully_qualified_name":"BasicResult::enforceOk","ident_utf16":{"start":{"line_number":4437,"utf16_col":21},"end":{"line_number":4437,"utf16_col":30}},"extent_utf16":{"start":{"line_number":4437,"utf16_col":16},"end":{"line_number":4445,"utf16_col":17}}},{"name":"BasicResult","kind":"function","ident_start":144175,"ident_end":144186,"extent_start":144175,"extent_end":144420,"fully_qualified_name":"BasicResult::BasicResult","ident_utf16":{"start":{"line_number":4450,"utf16_col":16},"end":{"line_number":4450,"utf16_col":27}},"extent_utf16":{"start":{"line_number":4450,"utf16_col":16},"end":{"line_number":4454,"utf16_col":17}}},{"name":"ParseState","kind":"class","ident_start":144557,"ident_end":144567,"extent_start":144551,"extent_end":145143,"fully_qualified_name":"ParseState","ident_utf16":{"start":{"line_number":4460,"utf16_col":18},"end":{"line_number":4460,"utf16_col":28}},"extent_utf16":{"start":{"line_number":4460,"utf16_col":12},"end":{"line_number":4476,"utf16_col":13}}},{"name":"type","kind":"function","ident_start":144732,"ident_end":144736,"extent_start":144716,"extent_end":144763,"fully_qualified_name":"ParseState::type","ident_utf16":{"start":{"line_number":4465,"utf16_col":32},"end":{"line_number":4465,"utf16_col":36}},"extent_utf16":{"start":{"line_number":4465,"utf16_col":16},"end":{"line_number":4465,"utf16_col":63}}},{"name":"HelpColumns","kind":"class","ident_start":145340,"ident_end":145351,"extent_start":145333,"extent_end":145441,"fully_qualified_name":"HelpColumns","ident_utf16":{"start":{"line_number":4482,"utf16_col":19},"end":{"line_number":4482,"utf16_col":30}},"extent_utf16":{"start":{"line_number":4482,"utf16_col":12},"end":{"line_number":4485,"utf16_col":13}}},{"name":"convertInto","kind":"function","ident_start":145503,"ident_end":145514,"extent_start":145490,"extent_end":145962,"fully_qualified_name":"convertInto","ident_utf16":{"start":{"line_number":4488,"utf16_col":25},"end":{"line_number":4488,"utf16_col":36}},"extent_utf16":{"start":{"line_number":4488,"utf16_col":12},"end":{"line_number":4498,"utf16_col":13}}},{"name":"convertInto","kind":"function","ident_start":146256,"ident_end":146267,"extent_start":146251,"extent_end":146606,"fully_qualified_name":"convertInto","ident_utf16":{"start":{"line_number":4505,"utf16_col":17},"end":{"line_number":4505,"utf16_col":28}},"extent_utf16":{"start":{"line_number":4505,"utf16_col":12},"end":{"line_number":4513,"utf16_col":13}}},{"name":"BoundRef","kind":"class","ident_start":146664,"ident_end":146672,"extent_start":146657,"extent_end":146859,"fully_qualified_name":"BoundRef","ident_utf16":{"start":{"line_number":4516,"utf16_col":19},"end":{"line_number":4516,"utf16_col":27}},"extent_utf16":{"start":{"line_number":4516,"utf16_col":12},"end":{"line_number":4520,"utf16_col":13}}},{"name":"BoundValueRefBase","kind":"class","ident_start":146880,"ident_end":146897,"extent_start":146873,"extent_end":147029,"fully_qualified_name":"BoundValueRefBase","ident_utf16":{"start":{"line_number":4521,"utf16_col":19},"end":{"line_number":4521,"utf16_col":36}},"extent_utf16":{"start":{"line_number":4521,"utf16_col":12},"end":{"line_number":4524,"utf16_col":13}}},{"name":"BoundFlagRefBase","kind":"class","ident_start":147050,"ident_end":147066,"extent_start":147043,"extent_end":147210,"fully_qualified_name":"BoundFlagRefBase","ident_utf16":{"start":{"line_number":4525,"utf16_col":19},"end":{"line_number":4525,"utf16_col":35}},"extent_utf16":{"start":{"line_number":4525,"utf16_col":12},"end":{"line_number":4528,"utf16_col":13}}},{"name":"BoundValueRef","kind":"class","ident_start":147254,"ident_end":147267,"extent_start":147247,"extent_end":147544,"fully_qualified_name":"BoundValueRef","ident_utf16":{"start":{"line_number":4530,"utf16_col":41},"end":{"line_number":4530,"utf16_col":54}},"extent_utf16":{"start":{"line_number":4530,"utf16_col":34},"end":{"line_number":4538,"utf16_col":13}}},{"name":"BoundValueRef","kind":"function","ident_start":147342,"ident_end":147355,"extent_start":147333,"extent_end":147382,"fully_qualified_name":"BoundValueRef::BoundValueRef","ident_utf16":{"start":{"line_number":4533,"utf16_col":25},"end":{"line_number":4533,"utf16_col":38}},"extent_utf16":{"start":{"line_number":4533,"utf16_col":16},"end":{"line_number":4533,"utf16_col":65}}},{"name":"setValue","kind":"function","ident_start":147413,"ident_end":147421,"extent_start":147400,"extent_end":147530,"fully_qualified_name":"BoundValueRef::setValue","ident_utf16":{"start":{"line_number":4535,"utf16_col":29},"end":{"line_number":4535,"utf16_col":37}},"extent_utf16":{"start":{"line_number":4535,"utf16_col":16},"end":{"line_number":4537,"utf16_col":17}}},{"name":"BoundValueRef","kind":"function","ident_start":147717,"ident_end":147730,"extent_start":147708,"extent_end":147770,"fully_qualified_name":"BoundValueRef","ident_utf16":{"start":{"line_number":4544,"utf16_col":25},"end":{"line_number":4544,"utf16_col":38}},"extent_utf16":{"start":{"line_number":4544,"utf16_col":16},"end":{"line_number":4544,"utf16_col":78}}},{"name":"isContainer","kind":"function","ident_start":147793,"ident_end":147804,"extent_start":147788,"extent_end":147846,"fully_qualified_name":"isContainer","ident_utf16":{"start":{"line_number":4546,"utf16_col":21},"end":{"line_number":4546,"utf16_col":32}},"extent_utf16":{"start":{"line_number":4546,"utf16_col":16},"end":{"line_number":4546,"utf16_col":74}}},{"name":"setValue","kind":"function","ident_start":147869,"ident_end":147877,"extent_start":147864,"extent_end":148174,"fully_qualified_name":"setValue","ident_utf16":{"start":{"line_number":4548,"utf16_col":21},"end":{"line_number":4548,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4548,"utf16_col":16},"end":{"line_number":4555,"utf16_col":17}}},{"name":"BoundFlagRef","kind":"class","ident_start":148210,"ident_end":148222,"extent_start":148203,"extent_end":148416,"fully_qualified_name":"BoundFlagRef","ident_utf16":{"start":{"line_number":4558,"utf16_col":19},"end":{"line_number":4558,"utf16_col":31}},"extent_utf16":{"start":{"line_number":4558,"utf16_col":12},"end":{"line_number":4564,"utf16_col":13}}},{"name":"BoundFlagRef","kind":"function","ident_start":148299,"ident_end":148311,"extent_start":148290,"extent_end":148341,"fully_qualified_name":"BoundFlagRef::BoundFlagRef","ident_utf16":{"start":{"line_number":4561,"utf16_col":25},"end":{"line_number":4561,"utf16_col":37}},"extent_utf16":{"start":{"line_number":4561,"utf16_col":16},"end":{"line_number":4561,"utf16_col":67}}},{"name":"LambdaInvoker","kind":"class","ident_start":148469,"ident_end":148482,"extent_start":148462,"extent_end":148897,"fully_qualified_name":"LambdaInvoker","ident_utf16":{"start":{"line_number":4566,"utf16_col":50},"end":{"line_number":4566,"utf16_col":63}},"extent_utf16":{"start":{"line_number":4566,"utf16_col":43},"end":{"line_number":4576,"utf16_col":13}}},{"name":"invoke","kind":"function","ident_start":148740,"ident_end":148746,"extent_start":148728,"extent_end":148883,"fully_qualified_name":"LambdaInvoker::invoke","ident_utf16":{"start":{"line_number":4572,"utf16_col":28},"end":{"line_number":4572,"utf16_col":34}},"extent_utf16":{"start":{"line_number":4572,"utf16_col":16},"end":{"line_number":4575,"utf16_col":17}}},{"name":"invoke","kind":"function","ident_start":149037,"ident_end":149043,"extent_start":149025,"extent_end":149246,"fully_qualified_name":"invoke","ident_utf16":{"start":{"line_number":4580,"utf16_col":28},"end":{"line_number":4580,"utf16_col":34}},"extent_utf16":{"start":{"line_number":4580,"utf16_col":16},"end":{"line_number":4584,"utf16_col":17}}},{"name":"invokeLambda","kind":"function","ident_start":149332,"ident_end":149344,"extent_start":149327,"extent_end":149716,"fully_qualified_name":"invokeLambda","ident_utf16":{"start":{"line_number":4588,"utf16_col":17},"end":{"line_number":4588,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4588,"utf16_col":12},"end":{"line_number":4595,"utf16_col":13}}},{"name":"BoundLambda","kind":"class","ident_start":149759,"ident_end":149770,"extent_start":149752,"extent_end":150312,"fully_qualified_name":"BoundLambda","ident_utf16":{"start":{"line_number":4597,"utf16_col":41},"end":{"line_number":4597,"utf16_col":52}},"extent_utf16":{"start":{"line_number":4597,"utf16_col":34},"end":{"line_number":4610,"utf16_col":13}}},{"name":"BoundLambda","kind":"function","ident_start":150001,"ident_end":150012,"extent_start":149992,"extent_end":150054,"fully_qualified_name":"BoundLambda::BoundLambda","ident_utf16":{"start":{"line_number":4603,"utf16_col":25},"end":{"line_number":4603,"utf16_col":36}},"extent_utf16":{"start":{"line_number":4603,"utf16_col":16},"end":{"line_number":4603,"utf16_col":78}}},{"name":"setValue","kind":"function","ident_start":150077,"ident_end":150085,"extent_start":150072,"extent_end":150298,"fully_qualified_name":"BoundLambda::setValue","ident_utf16":{"start":{"line_number":4605,"utf16_col":21},"end":{"line_number":4605,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4605,"utf16_col":16},"end":{"line_number":4609,"utf16_col":17}}},{"name":"BoundManyLambda","kind":"class","ident_start":150356,"ident_end":150371,"extent_start":150349,"extent_end":150560,"fully_qualified_name":"BoundManyLambda","ident_utf16":{"start":{"line_number":4612,"utf16_col":41},"end":{"line_number":4612,"utf16_col":56}},"extent_utf16":{"start":{"line_number":4612,"utf16_col":34},"end":{"line_number":4615,"utf16_col":13}}},{"name":"BoundManyLambda","kind":"function","ident_start":150416,"ident_end":150431,"extent_start":150407,"extent_end":150479,"fully_qualified_name":"BoundManyLambda::BoundManyLambda","ident_utf16":{"start":{"line_number":4613,"utf16_col":25},"end":{"line_number":4613,"utf16_col":40}},"extent_utf16":{"start":{"line_number":4613,"utf16_col":16},"end":{"line_number":4613,"utf16_col":88}}},{"name":"isContainer","kind":"function","ident_start":150501,"ident_end":150512,"extent_start":150496,"extent_end":150546,"fully_qualified_name":"BoundManyLambda::isContainer","ident_utf16":{"start":{"line_number":4614,"utf16_col":21},"end":{"line_number":4614,"utf16_col":32}},"extent_utf16":{"start":{"line_number":4614,"utf16_col":16},"end":{"line_number":4614,"utf16_col":66}}},{"name":"BoundFlagLambda","kind":"class","ident_start":150604,"ident_end":150619,"extent_start":150597,"extent_end":151363,"fully_qualified_name":"BoundFlagLambda","ident_utf16":{"start":{"line_number":4617,"utf16_col":41},"end":{"line_number":4617,"utf16_col":56}},"extent_utf16":{"start":{"line_number":4617,"utf16_col":34},"end":{"line_number":4635,"utf16_col":13}}},{"name":"BoundFlagLambda","kind":"function","ident_start":151048,"ident_end":151063,"extent_start":151039,"extent_end":151125,"fully_qualified_name":"BoundFlagLambda::BoundFlagLambda","ident_utf16":{"start":{"line_number":4628,"utf16_col":25},"end":{"line_number":4628,"utf16_col":40}},"extent_utf16":{"start":{"line_number":4628,"utf16_col":16},"end":{"line_number":4629,"utf16_col":41}}},{"name":"setFlag","kind":"function","ident_start":151148,"ident_end":151155,"extent_start":151143,"extent_end":151349,"fully_qualified_name":"BoundFlagLambda::setFlag","ident_utf16":{"start":{"line_number":4631,"utf16_col":21},"end":{"line_number":4631,"utf16_col":28}},"extent_utf16":{"start":{"line_number":4631,"utf16_col":16},"end":{"line_number":4634,"utf16_col":17}}},{"name":"Optionality","kind":"type","ident_start":151389,"ident_end":151400,"extent_start":151378,"extent_end":151423,"fully_qualified_name":"Optionality","ident_utf16":{"start":{"line_number":4637,"utf16_col":23},"end":{"line_number":4637,"utf16_col":34}},"extent_utf16":{"start":{"line_number":4637,"utf16_col":12},"end":{"line_number":4637,"utf16_col":57}}},{"name":"ParserBase","kind":"class","ident_start":151444,"ident_end":151454,"extent_start":151438,"extent_end":151917,"fully_qualified_name":"ParserBase","ident_utf16":{"start":{"line_number":4639,"utf16_col":18},"end":{"line_number":4639,"utf16_col":28}},"extent_utf16":{"start":{"line_number":4639,"utf16_col":12},"end":{"line_number":4649,"utf16_col":13}}},{"name":"validate","kind":"function","ident_start":151555,"ident_end":151563,"extent_start":151542,"extent_end":151606,"fully_qualified_name":"ParserBase::validate","ident_utf16":{"start":{"line_number":4642,"utf16_col":29},"end":{"line_number":4642,"utf16_col":37}},"extent_utf16":{"start":{"line_number":4642,"utf16_col":16},"end":{"line_number":4642,"utf16_col":80}}},{"name":"parse","kind":"method","ident_start":151636,"ident_end":151641,"extent_start":151623,"extent_end":151781,"fully_qualified_name":"ParserBase::parse","ident_utf16":{"start":{"line_number":4643,"utf16_col":29},"end":{"line_number":4643,"utf16_col":34}},"extent_utf16":{"start":{"line_number":4643,"utf16_col":16},"end":{"line_number":4645,"utf16_col":47}}},{"name":"cardinality","kind":"method","ident_start":151813,"ident_end":151824,"extent_start":151798,"extent_end":151833,"fully_qualified_name":"ParserBase::cardinality","ident_utf16":{"start":{"line_number":4646,"utf16_col":31},"end":{"line_number":4646,"utf16_col":42}},"extent_utf16":{"start":{"line_number":4646,"utf16_col":16},"end":{"line_number":4646,"utf16_col":51}}},{"name":"parse","kind":"method","ident_start":151871,"ident_end":151876,"extent_start":151851,"extent_end":151903,"fully_qualified_name":"ParserBase::parse","ident_utf16":{"start":{"line_number":4648,"utf16_col":36},"end":{"line_number":4648,"utf16_col":41}},"extent_utf16":{"start":{"line_number":4648,"utf16_col":16},"end":{"line_number":4648,"utf16_col":68}}},{"name":"ComposableParserImpl","kind":"class","ident_start":151979,"ident_end":151999,"extent_start":151973,"extent_end":152159,"fully_qualified_name":"ComposableParserImpl","ident_utf16":{"start":{"line_number":4652,"utf16_col":18},"end":{"line_number":4652,"utf16_col":38}},"extent_utf16":{"start":{"line_number":4652,"utf16_col":12},"end":{"line_number":4656,"utf16_col":13}}},{"name":"ParserRefImpl","kind":"class","ident_start":152276,"ident_end":152289,"extent_start":152270,"extent_end":154887,"fully_qualified_name":"ParserRefImpl","ident_utf16":{"start":{"line_number":4660,"utf16_col":18},"end":{"line_number":4660,"utf16_col":31}},"extent_utf16":{"start":{"line_number":4660,"utf16_col":12},"end":{"line_number":4723,"utf16_col":13}}},{"name":"ParserRefImpl","kind":"function","ident_start":152572,"ident_end":152585,"extent_start":152563,"extent_end":152662,"fully_qualified_name":"ParserRefImpl::ParserRefImpl","ident_utf16":{"start":{"line_number":4667,"utf16_col":25},"end":{"line_number":4667,"utf16_col":38}},"extent_utf16":{"start":{"line_number":4667,"utf16_col":16},"end":{"line_number":4668,"utf16_col":35}}},{"name":"ParserRefImpl","kind":"function","ident_start":152744,"ident_end":152757,"extent_start":152744,"extent_end":152991,"fully_qualified_name":"ParserRefImpl::ParserRefImpl","ident_utf16":{"start":{"line_number":4672,"utf16_col":16},"end":{"line_number":4672,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4672,"utf16_col":16},"end":{"line_number":4676,"utf16_col":37}}},{"name":"ParserRefImpl","kind":"function","ident_start":153180,"ident_end":153193,"extent_start":153180,"extent_end":153330,"fully_qualified_name":"ParserRefImpl::ParserRefImpl","ident_utf16":{"start":{"line_number":4681,"utf16_col":16},"end":{"line_number":4681,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4681,"utf16_col":16},"end":{"line_number":4683,"utf16_col":37}}},{"name":"ParserRefImpl","kind":"function","ident_start":153530,"ident_end":153543,"extent_start":153530,"extent_end":153696,"fully_qualified_name":"ParserRefImpl::ParserRefImpl","ident_utf16":{"start":{"line_number":4688,"utf16_col":16},"end":{"line_number":4688,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4688,"utf16_col":16},"end":{"line_number":4690,"utf16_col":37}}},{"name":"optional","kind":"function","ident_start":154109,"ident_end":154117,"extent_start":154104,"extent_end":154271,"fully_qualified_name":"ParserRefImpl::optional","ident_utf16":{"start":{"line_number":4701,"utf16_col":21},"end":{"line_number":4701,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4701,"utf16_col":16},"end":{"line_number":4704,"utf16_col":17}}},{"name":"required","kind":"function","ident_start":154294,"ident_end":154302,"extent_start":154289,"extent_end":154456,"fully_qualified_name":"ParserRefImpl::required","ident_utf16":{"start":{"line_number":4706,"utf16_col":21},"end":{"line_number":4706,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4706,"utf16_col":16},"end":{"line_number":4709,"utf16_col":17}}},{"name":"isOptional","kind":"function","ident_start":154479,"ident_end":154489,"extent_start":154474,"extent_end":154592,"fully_qualified_name":"ParserRefImpl::isOptional","ident_utf16":{"start":{"line_number":4711,"utf16_col":21},"end":{"line_number":4711,"utf16_col":31}},"extent_utf16":{"start":{"line_number":4711,"utf16_col":16},"end":{"line_number":4713,"utf16_col":17}}},{"name":"cardinality","kind":"function","ident_start":154615,"ident_end":154626,"extent_start":154610,"extent_end":154814,"fully_qualified_name":"ParserRefImpl::cardinality","ident_utf16":{"start":{"line_number":4715,"utf16_col":21},"end":{"line_number":4715,"utf16_col":32}},"extent_utf16":{"start":{"line_number":4715,"utf16_col":16},"end":{"line_number":4720,"utf16_col":17}}},{"name":"hint","kind":"function","ident_start":154842,"ident_end":154846,"extent_start":154832,"extent_end":154873,"fully_qualified_name":"ParserRefImpl::hint","ident_utf16":{"start":{"line_number":4722,"utf16_col":26},"end":{"line_number":4722,"utf16_col":30}},"extent_utf16":{"start":{"line_number":4722,"utf16_col":16},"end":{"line_number":4722,"utf16_col":57}}},{"name":"Arg","kind":"class","ident_start":154970,"ident_end":154973,"extent_start":154964,"extent_end":155271,"fully_qualified_name":"Arg","ident_utf16":{"start":{"line_number":4729,"utf16_col":14},"end":{"line_number":4729,"utf16_col":17}},"extent_utf16":{"start":{"line_number":4729,"utf16_col":8},"end":{"line_number":4737,"utf16_col":9}}},{"name":"parse","kind":"method","ident_start":155170,"ident_end":155175,"extent_start":155126,"extent_end":155261,"fully_qualified_name":"Arg::parse","ident_utf16":{"start":{"line_number":4735,"utf16_col":16},"end":{"line_number":4735,"utf16_col":21}},"extent_utf16":{"start":{"line_number":4734,"utf16_col":12},"end":{"line_number":4736,"utf16_col":65}}},{"name":"Opt","kind":"class","ident_start":155320,"ident_end":155323,"extent_start":155314,"extent_end":157038,"fully_qualified_name":"Opt","ident_utf16":{"start":{"line_number":4740,"utf16_col":14},"end":{"line_number":4740,"utf16_col":17}},"extent_utf16":{"start":{"line_number":4740,"utf16_col":8},"end":{"line_number":4788,"utf16_col":9}}},{"name":"Opt","kind":"function","ident_start":155506,"ident_end":155509,"extent_start":155497,"extent_end":155642,"fully_qualified_name":"Opt::Opt","ident_utf16":{"start":{"line_number":4746,"utf16_col":21},"end":{"line_number":4746,"utf16_col":24}},"extent_utf16":{"start":{"line_number":4746,"utf16_col":12},"end":{"line_number":4748,"utf16_col":79}}},{"name":"Opt","kind":"function","ident_start":155864,"ident_end":155867,"extent_start":155864,"extent_end":155952,"fully_qualified_name":"Opt::Opt","ident_utf16":{"start":{"line_number":4755,"utf16_col":12},"end":{"line_number":4755,"utf16_col":15}},"extent_utf16":{"start":{"line_number":4755,"utf16_col":12},"end":{"line_number":4756,"utf16_col":45}}},{"name":"Opt","kind":"function","ident_start":156006,"ident_end":156009,"extent_start":156006,"extent_end":156122,"fully_qualified_name":"Opt::Opt","ident_utf16":{"start":{"line_number":4759,"utf16_col":12},"end":{"line_number":4759,"utf16_col":15}},"extent_utf16":{"start":{"line_number":4759,"utf16_col":12},"end":{"line_number":4760,"utf16_col":58}}},{"name":"Opt","kind":"function","ident_start":156295,"ident_end":156298,"extent_start":156295,"extent_end":156371,"fully_qualified_name":"Opt::Opt","ident_utf16":{"start":{"line_number":4765,"utf16_col":12},"end":{"line_number":4765,"utf16_col":15}},"extent_utf16":{"start":{"line_number":4765,"utf16_col":12},"end":{"line_number":4766,"utf16_col":45}}},{"name":"getHelpColumns","kind":"method","ident_start":156710,"ident_end":156724,"extent_start":156690,"extent_end":156733,"fully_qualified_name":"Opt::getHelpColumns","ident_utf16":{"start":{"line_number":4777,"utf16_col":32},"end":{"line_number":4777,"utf16_col":46}},"extent_utf16":{"start":{"line_number":4777,"utf16_col":12},"end":{"line_number":4777,"utf16_col":55}}},{"name":"isMatch","kind":"method","ident_start":156752,"ident_end":156759,"extent_start":156747,"extent_end":156786,"fully_qualified_name":"Opt::isMatch","ident_utf16":{"start":{"line_number":4779,"utf16_col":17},"end":{"line_number":4779,"utf16_col":24}},"extent_utf16":{"start":{"line_number":4779,"utf16_col":12},"end":{"line_number":4779,"utf16_col":51}}},{"name":"parse","kind":"method","ident_start":156882,"ident_end":156887,"extent_start":156838,"extent_end":156973,"fully_qualified_name":"Opt::parse","ident_utf16":{"start":{"line_number":4784,"utf16_col":16},"end":{"line_number":4784,"utf16_col":21}},"extent_utf16":{"start":{"line_number":4783,"utf16_col":12},"end":{"line_number":4785,"utf16_col":65}}},{"name":"validate","kind":"method","ident_start":157002,"ident_end":157010,"extent_start":156987,"extent_end":157028,"fully_qualified_name":"Opt::validate","ident_utf16":{"start":{"line_number":4787,"utf16_col":27},"end":{"line_number":4787,"utf16_col":35}},"extent_utf16":{"start":{"line_number":4787,"utf16_col":12},"end":{"line_number":4787,"utf16_col":53}}},{"name":"ExeName","kind":"class","ident_start":157103,"ident_end":157110,"extent_start":157097,"extent_end":157957,"fully_qualified_name":"ExeName","ident_utf16":{"start":{"line_number":4791,"utf16_col":14},"end":{"line_number":4791,"utf16_col":21}},"extent_utf16":{"start":{"line_number":4791,"utf16_col":8},"end":{"line_number":4812,"utf16_col":9}}},{"name":"ExeName","kind":"function","ident_start":157421,"ident_end":157428,"extent_start":157412,"extent_end":157559,"fully_qualified_name":"ExeName::ExeName","ident_utf16":{"start":{"line_number":4800,"utf16_col":21},"end":{"line_number":4800,"utf16_col":28}},"extent_utf16":{"start":{"line_number":4800,"utf16_col":12},"end":{"line_number":4802,"utf16_col":13}}},{"name":"parse","kind":"method","ident_start":157725,"ident_end":157730,"extent_start":157681,"extent_end":157816,"fully_qualified_name":"ExeName::parse","ident_utf16":{"start":{"line_number":4807,"utf16_col":16},"end":{"line_number":4807,"utf16_col":21}},"extent_utf16":{"start":{"line_number":4806,"utf16_col":12},"end":{"line_number":4808,"utf16_col":65}}},{"name":"set","kind":"method","ident_start":157915,"ident_end":157918,"extent_start":157894,"extent_end":157947,"fully_qualified_name":"ExeName::set","ident_utf16":{"start":{"line_number":4811,"utf16_col":33},"end":{"line_number":4811,"utf16_col":36}},"extent_utf16":{"start":{"line_number":4811,"utf16_col":12},"end":{"line_number":4811,"utf16_col":65}}},{"name":"Parser","kind":"class","ident_start":158004,"ident_end":158010,"extent_start":157998,"extent_end":159802,"fully_qualified_name":"Parser","ident_utf16":{"start":{"line_number":4816,"utf16_col":14},"end":{"line_number":4816,"utf16_col":20}},"extent_utf16":{"start":{"line_number":4816,"utf16_col":8},"end":{"line_number":4873,"utf16_col":9}}},{"name":"getHelpColumns","kind":"method","ident_start":159269,"ident_end":159283,"extent_start":159236,"extent_end":159292,"fully_qualified_name":"Parser::getHelpColumns","ident_utf16":{"start":{"line_number":4857,"utf16_col":45},"end":{"line_number":4857,"utf16_col":59}},"extent_utf16":{"start":{"line_number":4857,"utf16_col":12},"end":{"line_number":4857,"utf16_col":68}}},{"name":"writeToStream","kind":"method","ident_start":159311,"ident_end":159324,"extent_start":159306,"extent_end":159349,"fully_qualified_name":"Parser::writeToStream","ident_utf16":{"start":{"line_number":4859,"utf16_col":17},"end":{"line_number":4859,"utf16_col":30}},"extent_utf16":{"start":{"line_number":4859,"utf16_col":12},"end":{"line_number":4859,"utf16_col":55}}},{"name":"validate","kind":"method","ident_start":159572,"ident_end":159580,"extent_start":159557,"extent_end":159598,"fully_qualified_name":"Parser::validate","ident_utf16":{"start":{"line_number":4867,"utf16_col":27},"end":{"line_number":4867,"utf16_col":35}},"extent_utf16":{"start":{"line_number":4867,"utf16_col":12},"end":{"line_number":4867,"utf16_col":53}}},{"name":"parse","kind":"method","ident_start":159693,"ident_end":159698,"extent_start":159649,"extent_end":159792,"fully_qualified_name":"Parser::parse","ident_utf16":{"start":{"line_number":4871,"utf16_col":16},"end":{"line_number":4871,"utf16_col":21}},"extent_utf16":{"start":{"line_number":4870,"utf16_col":12},"end":{"line_number":4872,"utf16_col":65}}},{"name":"Args","kind":"class","ident_start":159915,"ident_end":159919,"extent_start":159909,"extent_end":160281,"fully_qualified_name":"Args","ident_utf16":{"start":{"line_number":4878,"utf16_col":14},"end":{"line_number":4878,"utf16_col":18}},"extent_utf16":{"start":{"line_number":4878,"utf16_col":8},"end":{"line_number":4889,"utf16_col":9}}},{"name":"exeName","kind":"function","ident_start":160234,"ident_end":160241,"extent_start":160224,"extent_end":160271,"fully_qualified_name":"Args::exeName","ident_utf16":{"start":{"line_number":4888,"utf16_col":22},"end":{"line_number":4888,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4888,"utf16_col":12},"end":{"line_number":4888,"utf16_col":59}}},{"name":"Help","kind":"class","ident_start":160380,"ident_end":160384,"extent_start":160373,"extent_end":160440,"fully_qualified_name":"Help","ident_utf16":{"start":{"line_number":4893,"utf16_col":15},"end":{"line_number":4893,"utf16_col":19}},"extent_utf16":{"start":{"line_number":4893,"utf16_col":8},"end":{"line_number":4895,"utf16_col":9}}},{"name":"Session","kind":"class","ident_start":161247,"ident_end":161254,"extent_start":161241,"extent_end":162372,"fully_qualified_name":"Session","ident_utf16":{"start":{"line_number":4934,"utf16_col":10},"end":{"line_number":4934,"utf16_col":17}},"extent_utf16":{"start":{"line_number":4934,"utf16_col":4},"end":{"line_number":4973,"utf16_col":5}}},{"name":"showHelp","kind":"method","ident_start":161345,"ident_end":161353,"extent_start":161340,"extent_end":161362,"fully_qualified_name":"Session::showHelp","ident_utf16":{"start":{"line_number":4940,"utf16_col":13},"end":{"line_number":4940,"utf16_col":21}},"extent_utf16":{"start":{"line_number":4940,"utf16_col":8},"end":{"line_number":4940,"utf16_col":30}}},{"name":"libIdentify","kind":"method","ident_start":161376,"ident_end":161387,"extent_start":161371,"extent_end":161390,"fully_qualified_name":"Session::libIdentify","ident_utf16":{"start":{"line_number":4941,"utf16_col":13},"end":{"line_number":4941,"utf16_col":24}},"extent_utf16":{"start":{"line_number":4941,"utf16_col":8},"end":{"line_number":4941,"utf16_col":27}}},{"name":"applyCommandLine","kind":"method","ident_start":161404,"ident_end":161420,"extent_start":161400,"extent_end":161460,"fully_qualified_name":"Session::applyCommandLine","ident_utf16":{"start":{"line_number":4943,"utf16_col":12},"end":{"line_number":4943,"utf16_col":28}},"extent_utf16":{"start":{"line_number":4943,"utf16_col":8},"end":{"line_number":4943,"utf16_col":68}}},{"name":"useConfigData","kind":"method","ident_start":161633,"ident_end":161646,"extent_start":161628,"extent_end":161679,"fully_qualified_name":"Session::useConfigData","ident_utf16":{"start":{"line_number":4948,"utf16_col":13},"end":{"line_number":4948,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4948,"utf16_col":8},"end":{"line_number":4948,"utf16_col":59}}},{"name":"run","kind":"function","ident_start":161726,"ident_end":161729,"extent_start":161722,"extent_end":162001,"fully_qualified_name":"Session::run","ident_utf16":{"start":{"line_number":4951,"utf16_col":12},"end":{"line_number":4951,"utf16_col":15}},"extent_utf16":{"start":{"line_number":4951,"utf16_col":8},"end":{"line_number":4958,"utf16_col":9}}},{"name":"run","kind":"method","ident_start":162015,"ident_end":162018,"extent_start":162011,"extent_end":162021,"fully_qualified_name":"Session::run","ident_utf16":{"start":{"line_number":4960,"utf16_col":12},"end":{"line_number":4960,"utf16_col":15}},"extent_utf16":{"start":{"line_number":4960,"utf16_col":8},"end":{"line_number":4960,"utf16_col":18}}},{"name":"cli","kind":"method","ident_start":162078,"ident_end":162081,"extent_start":162073,"extent_end":162116,"fully_qualified_name":"Session::cli","ident_utf16":{"start":{"line_number":4963,"utf16_col":13},"end":{"line_number":4963,"utf16_col":16}},"extent_utf16":{"start":{"line_number":4963,"utf16_col":8},"end":{"line_number":4963,"utf16_col":51}}},{"name":"runInternal","kind":"method","ident_start":162202,"ident_end":162213,"extent_start":162198,"extent_end":162216,"fully_qualified_name":"Session::runInternal","ident_utf16":{"start":{"line_number":4967,"utf16_col":12},"end":{"line_number":4967,"utf16_col":23}},"extent_utf16":{"start":{"line_number":4967,"utf16_col":8},"end":{"line_number":4967,"utf16_col":26}}},{"name":"TagAlias","kind":"class","ident_start":162565,"ident_end":162573,"extent_start":162558,"extent_end":162775,"fully_qualified_name":"TagAlias","ident_utf16":{"start":{"line_number":4988,"utf16_col":11},"end":{"line_number":4988,"utf16_col":19}},"extent_utf16":{"start":{"line_number":4988,"utf16_col":4},"end":{"line_number":4996,"utf16_col":5}}},{"name":"TagAlias","kind":"function","ident_start":162584,"ident_end":162592,"extent_start":162584,"extent_end":162710,"fully_qualified_name":"TagAlias::TagAlias","ident_utf16":{"start":{"line_number":4989,"utf16_col":8},"end":{"line_number":4989,"utf16_col":16}},"extent_utf16":{"start":{"line_number":4989,"utf16_col":8},"end":{"line_number":4992,"utf16_col":10}}},{"name":"RegistrarForTagAliases","kind":"class","ident_start":162979,"ident_end":163001,"extent_start":162972,"extent_end":163111,"fully_qualified_name":"RegistrarForTagAliases","ident_utf16":{"start":{"line_number":5009,"utf16_col":11},"end":{"line_number":5009,"utf16_col":33}},"extent_utf16":{"start":{"line_number":5009,"utf16_col":4},"end":{"line_number":5011,"utf16_col":5}}},{"name":"BinaryExpr","kind":"class","ident_start":175550,"ident_end":175560,"extent_start":175544,"extent_end":178641,"fully_qualified_name":"BinaryExpr","ident_utf16":{"start":{"line_number":5333,"utf16_col":10},"end":{"line_number":5333,"utf16_col":20}},"extent_utf16":{"start":{"line_number":5333,"utf16_col":4},"end":{"line_number":5406,"utf16_col":5}}},{"name":"streamReconstructedExpression","kind":"function","ident_start":175672,"ident_end":175701,"extent_start":175667,"extent_end":175894,"fully_qualified_name":"BinaryExpr::streamReconstructedExpression","ident_utf16":{"start":{"line_number":5338,"utf16_col":13},"end":{"line_number":5338,"utf16_col":42}},"extent_utf16":{"start":{"line_number":5338,"utf16_col":8},"end":{"line_number":5341,"utf16_col":9}}},{"name":"BinaryExpr","kind":"function","ident_start":175926,"ident_end":175936,"extent_start":175916,"extent_end":176141,"fully_qualified_name":"BinaryExpr::BinaryExpr","ident_utf16":{"start":{"line_number":5344,"utf16_col":18},"end":{"line_number":5344,"utf16_col":28}},"extent_utf16":{"start":{"line_number":5344,"utf16_col":8},"end":{"line_number":5349,"utf16_col":10}}},{"name":"UnaryExpr","kind":"class","ident_start":178682,"ident_end":178691,"extent_start":178676,"extent_end":179058,"fully_qualified_name":"UnaryExpr","ident_utf16":{"start":{"line_number":5409,"utf16_col":10},"end":{"line_number":5409,"utf16_col":19}},"extent_utf16":{"start":{"line_number":5409,"utf16_col":4},"end":{"line_number":5421,"utf16_col":5}}},{"name":"streamReconstructedExpression","kind":"function","ident_start":178758,"ident_end":178787,"extent_start":178753,"extent_end":178887,"fully_qualified_name":"UnaryExpr::streamReconstructedExpression","ident_utf16":{"start":{"line_number":5412,"utf16_col":13},"end":{"line_number":5412,"utf16_col":42}},"extent_utf16":{"start":{"line_number":5412,"utf16_col":8},"end":{"line_number":5414,"utf16_col":9}}},{"name":"UnaryExpr","kind":"function","ident_start":178928,"ident_end":178937,"extent_start":178909,"extent_end":179052,"fully_qualified_name":"UnaryExpr::UnaryExpr","ident_utf16":{"start":{"line_number":5417,"utf16_col":27},"end":{"line_number":5417,"utf16_col":36}},"extent_utf16":{"start":{"line_number":5417,"utf16_col":8},"end":{"line_number":5420,"utf16_col":10}}},{"name":"ExprLhs","kind":"class","ident_start":179100,"ident_end":179107,"extent_start":179094,"extent_end":257208,"fully_qualified_name":"ExprLhs","ident_utf16":{"start":{"line_number":5425,"utf16_col":10},"end":{"line_number":5425,"utf16_col":17}},"extent_utf16":{"start":{"line_number":5425,"utf16_col":4},"end":{"line_number":6721,"utf16_col":13}}},{"name":"ExprLhs","kind":"function","ident_start":179169,"ident_end":179176,"extent_start":179150,"extent_end":179206,"fully_qualified_name":"ExprLhs::ExprLhs","ident_utf16":{"start":{"line_number":5428,"utf16_col":27},"end":{"line_number":5428,"utf16_col":34}},"extent_utf16":{"start":{"line_number":5428,"utf16_col":8},"end":{"line_number":5428,"utf16_col":64}}},{"name":"makeUnaryExpr","kind":"function","ident_start":189003,"ident_end":189016,"extent_start":188988,"extent_end":189100,"fully_qualified_name":"ExprLhs::makeUnaryExpr","ident_utf16":{"start":{"line_number":5573,"utf16_col":23},"end":{"line_number":5573,"utf16_col":36}},"extent_utf16":{"start":{"line_number":5573,"utf16_col":8},"end":{"line_number":5575,"utf16_col":9}}},{"name":"AssertionReaction","kind":"class","ident_start":189945,"ident_end":189962,"extent_start":189938,"extent_end":190076,"fully_qualified_name":"ExprLhs::AssertionReaction","ident_utf16":{"start":{"line_number":5610,"utf16_col":11},"end":{"line_number":5610,"utf16_col":28}},"extent_utf16":{"start":{"line_number":5610,"utf16_col":4},"end":{"line_number":5614,"utf16_col":5}}},{"name":"AssertionHandler","kind":"class","ident_start":190089,"ident_end":190105,"extent_start":190083,"extent_end":191276,"fully_qualified_name":"ExprLhs::AssertionHandler","ident_utf16":{"start":{"line_number":5616,"utf16_col":10},"end":{"line_number":5616,"utf16_col":26}},"extent_utf16":{"start":{"line_number":5616,"utf16_col":4},"end":{"line_number":5653,"utf16_col":5}}},{"name":"handleExpr","kind":"function","ident_start":190702,"ident_end":190712,"extent_start":190687,"extent_end":190798,"fully_qualified_name":"ExprLhs::AssertionHandler::handleExpr","ident_utf16":{"start":{"line_number":5636,"utf16_col":23},"end":{"line_number":5636,"utf16_col":33}},"extent_utf16":{"start":{"line_number":5636,"utf16_col":8},"end":{"line_number":5638,"utf16_col":9}}},{"name":"handleExpr","kind":"method","ident_start":190812,"ident_end":190822,"extent_start":190807,"extent_end":190859,"fully_qualified_name":"ExprLhs::AssertionHandler::handleExpr","ident_utf16":{"start":{"line_number":5639,"utf16_col":13},"end":{"line_number":5639,"utf16_col":23}},"extent_utf16":{"start":{"line_number":5639,"utf16_col":8},"end":{"line_number":5639,"utf16_col":60}}},{"name":"handleMessage","kind":"method","ident_start":190874,"ident_end":190887,"extent_start":190869,"extent_end":190941,"fully_qualified_name":"ExprLhs::AssertionHandler::handleMessage","ident_utf16":{"start":{"line_number":5641,"utf16_col":13},"end":{"line_number":5641,"utf16_col":26}},"extent_utf16":{"start":{"line_number":5641,"utf16_col":8},"end":{"line_number":5641,"utf16_col":80}}},{"name":"handleExceptionThrownAsExpected","kind":"method","ident_start":190956,"ident_end":190987,"extent_start":190951,"extent_end":190990,"fully_qualified_name":"ExprLhs::AssertionHandler::handleExceptionThrownAsExpected","ident_utf16":{"start":{"line_number":5643,"utf16_col":13},"end":{"line_number":5643,"utf16_col":44}},"extent_utf16":{"start":{"line_number":5643,"utf16_col":8},"end":{"line_number":5643,"utf16_col":47}}},{"name":"handleUnexpectedExceptionNotThrown","kind":"method","ident_start":191004,"ident_end":191038,"extent_start":190999,"extent_end":191041,"fully_qualified_name":"ExprLhs::AssertionHandler::handleUnexpectedExceptionNotThrown","ident_utf16":{"start":{"line_number":5644,"utf16_col":13},"end":{"line_number":5644,"utf16_col":47}},"extent_utf16":{"start":{"line_number":5644,"utf16_col":8},"end":{"line_number":5644,"utf16_col":50}}},{"name":"handleExceptionNotThrownAsExpected","kind":"method","ident_start":191055,"ident_end":191089,"extent_start":191050,"extent_end":191092,"fully_qualified_name":"ExprLhs::AssertionHandler::handleExceptionNotThrownAsExpected","ident_utf16":{"start":{"line_number":5645,"utf16_col":13},"end":{"line_number":5645,"utf16_col":47}},"extent_utf16":{"start":{"line_number":5645,"utf16_col":8},"end":{"line_number":5645,"utf16_col":50}}},{"name":"handleThrowingCallSkipped","kind":"method","ident_start":191106,"ident_end":191131,"extent_start":191101,"extent_end":191134,"fully_qualified_name":"ExprLhs::AssertionHandler::handleThrowingCallSkipped","ident_utf16":{"start":{"line_number":5646,"utf16_col":13},"end":{"line_number":5646,"utf16_col":38}},"extent_utf16":{"start":{"line_number":5646,"utf16_col":8},"end":{"line_number":5646,"utf16_col":41}}},{"name":"handleUnexpectedInflightException","kind":"method","ident_start":191148,"ident_end":191181,"extent_start":191143,"extent_end":191184,"fully_qualified_name":"ExprLhs::AssertionHandler::handleUnexpectedInflightException","ident_utf16":{"start":{"line_number":5647,"utf16_col":13},"end":{"line_number":5647,"utf16_col":46}},"extent_utf16":{"start":{"line_number":5647,"utf16_col":8},"end":{"line_number":5647,"utf16_col":49}}},{"name":"complete","kind":"method","ident_start":191199,"ident_end":191207,"extent_start":191194,"extent_end":191210,"fully_qualified_name":"ExprLhs::AssertionHandler::complete","ident_utf16":{"start":{"line_number":5649,"utf16_col":13},"end":{"line_number":5649,"utf16_col":21}},"extent_utf16":{"start":{"line_number":5649,"utf16_col":8},"end":{"line_number":5649,"utf16_col":24}}},{"name":"allowThrows","kind":"method","ident_start":191242,"ident_end":191253,"extent_start":191237,"extent_end":191270,"fully_qualified_name":"ExprLhs::AssertionHandler::allowThrows","ident_utf16":{"start":{"line_number":5652,"utf16_col":13},"end":{"line_number":5652,"utf16_col":24}},"extent_utf16":{"start":{"line_number":5652,"utf16_col":8},"end":{"line_number":5652,"utf16_col":41}}},{"name":"Timer","kind":"class","ident_start":199946,"ident_end":199951,"extent_start":199940,"extent_end":200253,"fully_qualified_name":"ExprLhs::Timer","ident_utf16":{"start":{"line_number":5854,"utf16_col":10},"end":{"line_number":5854,"utf16_col":15}},"extent_utf16":{"start":{"line_number":5854,"utf16_col":4},"end":{"line_number":5862,"utf16_col":5}}},{"name":"start","kind":"method","ident_start":200015,"ident_end":200020,"extent_start":200010,"extent_end":200023,"fully_qualified_name":"ExprLhs::Timer::start","ident_utf16":{"start":{"line_number":5857,"utf16_col":13},"end":{"line_number":5857,"utf16_col":18}},"extent_utf16":{"start":{"line_number":5857,"utf16_col":8},"end":{"line_number":5857,"utf16_col":21}}},{"name":"getElapsedNanoseconds","kind":"method","ident_start":200037,"ident_end":200058,"extent_start":200032,"extent_end":200079,"fully_qualified_name":"ExprLhs::Timer::getElapsedNanoseconds","ident_utf16":{"start":{"line_number":5858,"utf16_col":13},"end":{"line_number":5858,"utf16_col":34}},"extent_utf16":{"start":{"line_number":5858,"utf16_col":8},"end":{"line_number":5858,"utf16_col":55}}},{"name":"getElapsedMicroseconds","kind":"method","ident_start":200093,"ident_end":200115,"extent_start":200088,"extent_end":200136,"fully_qualified_name":"ExprLhs::Timer::getElapsedMicroseconds","ident_utf16":{"start":{"line_number":5859,"utf16_col":13},"end":{"line_number":5859,"utf16_col":35}},"extent_utf16":{"start":{"line_number":5859,"utf16_col":8},"end":{"line_number":5859,"utf16_col":56}}},{"name":"getElapsedMilliseconds","kind":"method","ident_start":200150,"ident_end":200172,"extent_start":200145,"extent_end":200197,"fully_qualified_name":"ExprLhs::Timer::getElapsedMilliseconds","ident_utf16":{"start":{"line_number":5860,"utf16_col":13},"end":{"line_number":5860,"utf16_col":35}},"extent_utf16":{"start":{"line_number":5860,"utf16_col":8},"end":{"line_number":5860,"utf16_col":60}}},{"name":"getElapsedSeconds","kind":"method","ident_start":200211,"ident_end":200228,"extent_start":200206,"extent_end":200247,"fully_qualified_name":"ExprLhs::Timer::getElapsedSeconds","ident_utf16":{"start":{"line_number":5861,"utf16_col":13},"end":{"line_number":5861,"utf16_col":30}},"extent_utf16":{"start":{"line_number":5861,"utf16_col":8},"end":{"line_number":5861,"utf16_col":49}}},{"name":"Section","kind":"class","ident_start":200343,"ident_end":200350,"extent_start":200337,"extent_end":200823,"fully_qualified_name":"ExprLhs::Section","ident_utf16":{"start":{"line_number":5870,"utf16_col":10},"end":{"line_number":5870,"utf16_col":17}},"extent_utf16":{"start":{"line_number":5870,"utf16_col":4},"end":{"line_number":5887,"utf16_col":5}}},{"name":"ITestInvoker","kind":"class","ident_start":204496,"ident_end":204508,"extent_start":204490,"extent_end":204696,"fully_qualified_name":"ExprLhs::ITestInvoker","ident_utf16":{"start":{"line_number":5966,"utf16_col":10},"end":{"line_number":5966,"utf16_col":22}},"extent_utf16":{"start":{"line_number":5966,"utf16_col":4},"end":{"line_number":5972,"utf16_col":5}}},{"name":"prepareTestCase","kind":"method","ident_start":204544,"ident_end":204559,"extent_start":204531,"extent_end":204562,"fully_qualified_name":"ExprLhs::ITestInvoker::prepareTestCase","ident_utf16":{"start":{"line_number":5968,"utf16_col":21},"end":{"line_number":5968,"utf16_col":36}},"extent_utf16":{"start":{"line_number":5968,"utf16_col":8},"end":{"line_number":5968,"utf16_col":39}}},{"name":"tearDownTestCase","kind":"method","ident_start":204584,"ident_end":204600,"extent_start":204571,"extent_end":204603,"fully_qualified_name":"ExprLhs::ITestInvoker::tearDownTestCase","ident_utf16":{"start":{"line_number":5969,"utf16_col":21},"end":{"line_number":5969,"utf16_col":37}},"extent_utf16":{"start":{"line_number":5969,"utf16_col":8},"end":{"line_number":5969,"utf16_col":40}}},{"name":"invoke","kind":"method","ident_start":204625,"ident_end":204631,"extent_start":204612,"extent_end":204644,"fully_qualified_name":"ExprLhs::ITestInvoker::invoke","ident_utf16":{"start":{"line_number":5970,"utf16_col":21},"end":{"line_number":5970,"utf16_col":27}},"extent_utf16":{"start":{"line_number":5970,"utf16_col":8},"end":{"line_number":5970,"utf16_col":40}}},{"name":"TestInvokerAsMethod","kind":"class","ident_start":205645,"ident_end":205664,"extent_start":205639,"extent_end":205938,"fully_qualified_name":"ExprLhs::TestInvokerAsMethod","ident_utf16":{"start":{"line_number":6004,"utf16_col":6},"end":{"line_number":6004,"utf16_col":25}},"extent_utf16":{"start":{"line_number":6004,"utf16_col":0},"end":{"line_number":6014,"utf16_col":1}}},{"name":"TestInvokerAsMethod","kind":"function","ident_start":205744,"ident_end":205763,"extent_start":205734,"extent_end":205846,"fully_qualified_name":"ExprLhs::TestInvokerAsMethod::TestInvokerAsMethod","ident_utf16":{"start":{"line_number":6007,"utf16_col":14},"end":{"line_number":6007,"utf16_col":33}},"extent_utf16":{"start":{"line_number":6007,"utf16_col":4},"end":{"line_number":6008,"utf16_col":41}}},{"name":"invoke","kind":"function","ident_start":205857,"ident_end":205863,"extent_start":205852,"extent_end":205936,"fully_qualified_name":"ExprLhs::TestInvokerAsMethod::invoke","ident_utf16":{"start":{"line_number":6010,"utf16_col":9},"end":{"line_number":6010,"utf16_col":15}},"extent_utf16":{"start":{"line_number":6010,"utf16_col":4},"end":{"line_number":6013,"utf16_col":5}}},{"name":"makeTestInvoker","kind":"function","ident_start":206073,"ident_end":206088,"extent_start":206040,"extent_end":206193,"fully_qualified_name":"ExprLhs::makeTestInvoker","ident_utf16":{"start":{"line_number":6019,"utf16_col":33},"end":{"line_number":6019,"utf16_col":48}},"extent_utf16":{"start":{"line_number":6019,"utf16_col":0},"end":{"line_number":6021,"utf16_col":1}}},{"name":"TestInvokerFixture","kind":"class","ident_start":206223,"ident_end":206241,"extent_start":206217,"extent_end":206761,"fully_qualified_name":"ExprLhs::TestInvokerFixture","ident_utf16":{"start":{"line_number":6024,"utf16_col":6},"end":{"line_number":6024,"utf16_col":24}},"extent_utf16":{"start":{"line_number":6024,"utf16_col":0},"end":{"line_number":6044,"utf16_col":1}}},{"name":"TestInvokerFixture","kind":"function","ident_start":206377,"ident_end":206395,"extent_start":206367,"extent_end":206484,"fully_qualified_name":"ExprLhs::TestInvokerFixture::TestInvokerFixture","ident_utf16":{"start":{"line_number":6029,"utf16_col":14},"end":{"line_number":6029,"utf16_col":32}},"extent_utf16":{"start":{"line_number":6029,"utf16_col":4},"end":{"line_number":6030,"utf16_col":41}}},{"name":"prepareTestCase","kind":"function","ident_start":206495,"ident_end":206510,"extent_start":206490,"extent_end":206575,"fully_qualified_name":"ExprLhs::TestInvokerFixture::prepareTestCase","ident_utf16":{"start":{"line_number":6032,"utf16_col":9},"end":{"line_number":6032,"utf16_col":24}},"extent_utf16":{"start":{"line_number":6032,"utf16_col":4},"end":{"line_number":6034,"utf16_col":5}}},{"name":"tearDownTestCase","kind":"function","ident_start":206586,"ident_end":206602,"extent_start":206581,"extent_end":206648,"fully_qualified_name":"ExprLhs::TestInvokerFixture::tearDownTestCase","ident_utf16":{"start":{"line_number":6036,"utf16_col":9},"end":{"line_number":6036,"utf16_col":25}},"extent_utf16":{"start":{"line_number":6036,"utf16_col":4},"end":{"line_number":6038,"utf16_col":5}}},{"name":"invoke","kind":"function","ident_start":206659,"ident_end":206665,"extent_start":206654,"extent_end":206759,"fully_qualified_name":"ExprLhs::TestInvokerFixture::invoke","ident_utf16":{"start":{"line_number":6040,"utf16_col":9},"end":{"line_number":6040,"utf16_col":15}},"extent_utf16":{"start":{"line_number":6040,"utf16_col":4},"end":{"line_number":6043,"utf16_col":5}}},{"name":"makeTestInvokerFixture","kind":"function","ident_start":206818,"ident_end":206840,"extent_start":206785,"extent_end":206952,"fully_qualified_name":"ExprLhs::makeTestInvokerFixture","ident_utf16":{"start":{"line_number":6047,"utf16_col":33},"end":{"line_number":6047,"utf16_col":55}},"extent_utf16":{"start":{"line_number":6047,"utf16_col":0},"end":{"line_number":6049,"utf16_col":1}}},{"name":"NameAndTags","kind":"class","ident_start":206961,"ident_end":206972,"extent_start":206954,"extent_end":207183,"fully_qualified_name":"ExprLhs::NameAndTags","ident_utf16":{"start":{"line_number":6051,"utf16_col":7},"end":{"line_number":6051,"utf16_col":18}},"extent_utf16":{"start":{"line_number":6051,"utf16_col":0},"end":{"line_number":6057,"utf16_col":1}}},{"name":"NameAndTags","kind":"function","ident_start":206989,"ident_end":207000,"extent_start":206979,"extent_end":207141,"fully_qualified_name":"ExprLhs::NameAndTags::NameAndTags","ident_utf16":{"start":{"line_number":6052,"utf16_col":14},"end":{"line_number":6052,"utf16_col":25}},"extent_utf16":{"start":{"line_number":6052,"utf16_col":4},"end":{"line_number":6054,"utf16_col":39}}},{"name":"AutoReg","kind":"class","ident_start":207193,"ident_end":207200,"extent_start":207186,"extent_end":207381,"fully_qualified_name":"ExprLhs::AutoReg","ident_utf16":{"start":{"line_number":6059,"utf16_col":7},"end":{"line_number":6059,"utf16_col":14}},"extent_utf16":{"start":{"line_number":6059,"utf16_col":0},"end":{"line_number":6061,"utf16_col":1}}},{"name":"DummyUse","kind":"class","ident_start":209010,"ident_end":209018,"extent_start":209003,"extent_end":209100,"fully_qualified_name":"ExprLhs::DummyUse","ident_utf16":{"start":{"line_number":6098,"utf16_col":15},"end":{"line_number":6098,"utf16_col":23}},"extent_utf16":{"start":{"line_number":6098,"utf16_col":8},"end":{"line_number":6100,"utf16_col":9}}},{"name":"Tag","kind":"class","ident_start":284832,"ident_end":284835,"extent_start":284825,"extent_end":285091,"fully_qualified_name":"Tag","ident_utf16":{"start":{"line_number":7094,"utf16_col":11},"end":{"line_number":7094,"utf16_col":14}},"extent_utf16":{"start":{"line_number":7094,"utf16_col":4},"end":{"line_number":7102,"utf16_col":5}}},{"name":"Tag","kind":"function","ident_start":284856,"ident_end":284859,"extent_start":284846,"extent_end":284924,"fully_qualified_name":"Tag::Tag","ident_utf16":{"start":{"line_number":7095,"utf16_col":18},"end":{"line_number":7095,"utf16_col":21}},"extent_utf16":{"start":{"line_number":7095,"utf16_col":8},"end":{"line_number":7097,"utf16_col":10}}},{"name":"ITestInvoker","kind":"class","ident_start":285104,"ident_end":285116,"extent_start":285098,"extent_end":285116,"fully_qualified_name":"ITestInvoker","ident_utf16":{"start":{"line_number":7104,"utf16_col":10},"end":{"line_number":7104,"utf16_col":22}},"extent_utf16":{"start":{"line_number":7104,"utf16_col":4},"end":{"line_number":7104,"utf16_col":22}}},{"name":"TestCaseProperties","kind":"type","ident_start":285158,"ident_end":285176,"extent_start":285147,"extent_end":285376,"fully_qualified_name":"TestCaseProperties","ident_utf16":{"start":{"line_number":7107,"utf16_col":15},"end":{"line_number":7107,"utf16_col":33}},"extent_utf16":{"start":{"line_number":7107,"utf16_col":4},"end":{"line_number":7115,"utf16_col":5}}},{"name":"TestCaseInfo","kind":"class","ident_start":285676,"ident_end":285688,"extent_start":285669,"extent_end":286724,"fully_qualified_name":"TestCaseInfo","ident_utf16":{"start":{"line_number":7126,"utf16_col":11},"end":{"line_number":7126,"utf16_col":23}},"extent_utf16":{"start":{"line_number":7126,"utf16_col":4},"end":{"line_number":7158,"utf16_col":5}}},{"name":"TestCaseHandle","kind":"class","ident_start":286920,"ident_end":286934,"extent_start":286914,"extent_end":287506,"fully_qualified_name":"TestCaseHandle","ident_utf16":{"start":{"line_number":7166,"utf16_col":10},"end":{"line_number":7166,"utf16_col":24}},"extent_utf16":{"start":{"line_number":7166,"utf16_col":4},"end":{"line_number":7188,"utf16_col":5}}},{"name":"TestCaseHandle","kind":"function","ident_start":287030,"ident_end":287044,"extent_start":287020,"extent_end":287137,"fully_qualified_name":"TestCaseHandle::TestCaseHandle","ident_utf16":{"start":{"line_number":7170,"utf16_col":18},"end":{"line_number":7170,"utf16_col":32}},"extent_utf16":{"start":{"line_number":7170,"utf16_col":8},"end":{"line_number":7171,"utf16_col":47}}},{"name":"prepareTestCase","kind":"function","ident_start":287152,"ident_end":287167,"extent_start":287147,"extent_end":287229,"fully_qualified_name":"TestCaseHandle::prepareTestCase","ident_utf16":{"start":{"line_number":7173,"utf16_col":13},"end":{"line_number":7173,"utf16_col":28}},"extent_utf16":{"start":{"line_number":7173,"utf16_col":8},"end":{"line_number":7175,"utf16_col":9}}},{"name":"tearDownTestCase","kind":"function","ident_start":287244,"ident_end":287260,"extent_start":287239,"extent_end":287323,"fully_qualified_name":"TestCaseHandle::tearDownTestCase","ident_utf16":{"start":{"line_number":7177,"utf16_col":13},"end":{"line_number":7177,"utf16_col":29}},"extent_utf16":{"start":{"line_number":7177,"utf16_col":8},"end":{"line_number":7179,"utf16_col":9}}},{"name":"invoke","kind":"function","ident_start":287338,"ident_end":287344,"extent_start":287333,"extent_end":287397,"fully_qualified_name":"TestCaseHandle::invoke","ident_utf16":{"start":{"line_number":7181,"utf16_col":13},"end":{"line_number":7181,"utf16_col":19}},"extent_utf16":{"start":{"line_number":7181,"utf16_col":8},"end":{"line_number":7183,"utf16_col":9}}},{"name":"IExceptionTranslator","kind":"class","ident_start":288120,"ident_end":288140,"extent_start":288114,"extent_end":288140,"fully_qualified_name":"IExceptionTranslator","ident_utf16":{"start":{"line_number":7218,"utf16_col":10},"end":{"line_number":7218,"utf16_col":30}},"extent_utf16":{"start":{"line_number":7218,"utf16_col":4},"end":{"line_number":7218,"utf16_col":30}}},{"name":"IExceptionTranslator","kind":"class","ident_start":288247,"ident_end":288267,"extent_start":288241,"extent_end":288477,"fully_qualified_name":"IExceptionTranslator","ident_utf16":{"start":{"line_number":7221,"utf16_col":10},"end":{"line_number":7221,"utf16_col":30}},"extent_utf16":{"start":{"line_number":7221,"utf16_col":4},"end":{"line_number":7225,"utf16_col":5}}},{"name":"translate","kind":"method","ident_start":288364,"ident_end":288373,"extent_start":288344,"extent_end":288471,"fully_qualified_name":"IExceptionTranslator::translate","ident_utf16":{"start":{"line_number":7224,"utf16_col":28},"end":{"line_number":7224,"utf16_col":37}},"extent_utf16":{"start":{"line_number":7224,"utf16_col":8},"end":{"line_number":7224,"utf16_col":135}}},{"name":"IExceptionTranslatorRegistry","kind":"class","ident_start":288490,"ident_end":288518,"extent_start":288484,"extent_end":288666,"fully_qualified_name":"IExceptionTranslatorRegistry","ident_utf16":{"start":{"line_number":7227,"utf16_col":10},"end":{"line_number":7227,"utf16_col":38}},"extent_utf16":{"start":{"line_number":7227,"utf16_col":4},"end":{"line_number":7231,"utf16_col":5}}},{"name":"translateActiveException","kind":"method","ident_start":288623,"ident_end":288647,"extent_start":288603,"extent_end":288660,"fully_qualified_name":"IExceptionTranslatorRegistry::translateActiveException","ident_utf16":{"start":{"line_number":7230,"utf16_col":28},"end":{"line_number":7230,"utf16_col":52}},"extent_utf16":{"start":{"line_number":7230,"utf16_col":8},"end":{"line_number":7230,"utf16_col":65}}},{"name":"ExceptionTranslatorRegistrar","kind":"class","ident_start":288928,"ident_end":288956,"extent_start":288922,"extent_end":290228,"fully_qualified_name":"ExceptionTranslatorRegistrar","ident_utf16":{"start":{"line_number":7245,"utf16_col":10},"end":{"line_number":7245,"utf16_col":38}},"extent_utf16":{"start":{"line_number":7245,"utf16_col":4},"end":{"line_number":7281,"utf16_col":5}}},{"name":"ExceptionTranslator","kind":"class","ident_start":289002,"ident_end":289021,"extent_start":288996,"extent_end":289935,"fully_qualified_name":"ExceptionTranslatorRegistrar::ExceptionTranslator","ident_utf16":{"start":{"line_number":7247,"utf16_col":14},"end":{"line_number":7247,"utf16_col":33}},"extent_utf16":{"start":{"line_number":7247,"utf16_col":8},"end":{"line_number":7272,"utf16_col":9}}},{"name":"ExceptionTranslator","kind":"function","ident_start":289093,"ident_end":289112,"extent_start":289083,"extent_end":289229,"fully_qualified_name":"ExceptionTranslatorRegistrar::ExceptionTranslator::ExceptionTranslator","ident_utf16":{"start":{"line_number":7250,"utf16_col":22},"end":{"line_number":7250,"utf16_col":41}},"extent_utf16":{"start":{"line_number":7250,"utf16_col":12},"end":{"line_number":7252,"utf16_col":14}}},{"name":"translate","kind":"function","ident_start":289255,"ident_end":289264,"extent_start":289243,"extent_end":289846,"fully_qualified_name":"ExceptionTranslatorRegistrar::ExceptionTranslator::translate","ident_utf16":{"start":{"line_number":7254,"utf16_col":24},"end":{"line_number":7254,"utf16_col":33}},"extent_utf16":{"start":{"line_number":7254,"utf16_col":12},"end":{"line_number":7268,"utf16_col":13}}},{"name":"ExceptionTranslatorRegistrar","kind":"function","ident_start":289987,"ident_end":290015,"extent_start":289987,"extent_end":290222,"fully_qualified_name":"ExceptionTranslatorRegistrar::ExceptionTranslatorRegistrar","ident_utf16":{"start":{"line_number":7276,"utf16_col":8},"end":{"line_number":7276,"utf16_col":36}},"extent_utf16":{"start":{"line_number":7276,"utf16_col":8},"end":{"line_number":7280,"utf16_col":9}}},{"name":"Version","kind":"class","ident_start":291700,"ident_end":291707,"extent_start":291693,"extent_end":292411,"fully_qualified_name":"Version","ident_utf16":{"start":{"line_number":7321,"utf16_col":11},"end":{"line_number":7321,"utf16_col":18}},"extent_utf16":{"start":{"line_number":7321,"utf16_col":4},"end":{"line_number":7339,"utf16_col":5}}},{"name":"Version","kind":"function","ident_start":291718,"ident_end":291725,"extent_start":291718,"extent_end":291753,"fully_qualified_name":"Version::Version","ident_utf16":{"start":{"line_number":7322,"utf16_col":8},"end":{"line_number":7322,"utf16_col":15}},"extent_utf16":{"start":{"line_number":7322,"utf16_col":8},"end":{"line_number":7322,"utf16_col":43}}},{"name":"GeneratorException","kind":"class","ident_start":293629,"ident_end":293647,"extent_start":293623,"extent_end":293868,"fully_qualified_name":"GeneratorException","ident_utf16":{"start":{"line_number":7385,"utf16_col":10},"end":{"line_number":7385,"utf16_col":28}},"extent_utf16":{"start":{"line_number":7385,"utf16_col":4},"end":{"line_number":7394,"utf16_col":5}}},{"name":"GeneratorException","kind":"function","ident_start":293733,"ident_end":293751,"extent_start":293733,"extent_end":293803,"fully_qualified_name":"GeneratorException::GeneratorException","ident_utf16":{"start":{"line_number":7389,"utf16_col":8},"end":{"line_number":7389,"utf16_col":26}},"extent_utf16":{"start":{"line_number":7389,"utf16_col":8},"end":{"line_number":7391,"utf16_col":10}}},{"name":"GeneratorUntypedBase","kind":"class","ident_start":294218,"ident_end":294238,"extent_start":294212,"extent_end":296530,"fully_qualified_name":"GeneratorUntypedBase","ident_utf16":{"start":{"line_number":7415,"utf16_col":14},"end":{"line_number":7415,"utf16_col":34}},"extent_utf16":{"start":{"line_number":7415,"utf16_col":8},"end":{"line_number":7471,"utf16_col":9}}},{"name":"next","kind":"method","ident_start":294773,"ident_end":294777,"extent_start":294760,"extent_end":294784,"fully_qualified_name":"GeneratorUntypedBase::next","ident_utf16":{"start":{"line_number":7429,"utf16_col":25},"end":{"line_number":7429,"utf16_col":29}},"extent_utf16":{"start":{"line_number":7429,"utf16_col":12},"end":{"line_number":7429,"utf16_col":36}}},{"name":"stringifyImpl","kind":"method","ident_start":294883,"ident_end":294896,"extent_start":294863,"extent_end":294909,"fully_qualified_name":"GeneratorUntypedBase::stringifyImpl","ident_utf16":{"start":{"line_number":7432,"utf16_col":32},"end":{"line_number":7432,"utf16_col":45}},"extent_utf16":{"start":{"line_number":7432,"utf16_col":12},"end":{"line_number":7432,"utf16_col":58}}},{"name":"GeneratorUntypedBase","kind":"function","ident_start":294939,"ident_end":294959,"extent_start":294939,"extent_end":294972,"fully_qualified_name":"GeneratorUntypedBase::GeneratorUntypedBase","ident_utf16":{"start":{"line_number":7435,"utf16_col":12},"end":{"line_number":7435,"utf16_col":32}},"extent_utf16":{"start":{"line_number":7435,"utf16_col":12},"end":{"line_number":7435,"utf16_col":45}}},{"name":"GeneratorUntypedBase","kind":"function","ident_start":295116,"ident_end":295136,"extent_start":295116,"extent_end":295176,"fully_qualified_name":"GeneratorUntypedBase::GeneratorUntypedBase","ident_utf16":{"start":{"line_number":7438,"utf16_col":12},"end":{"line_number":7438,"utf16_col":32}},"extent_utf16":{"start":{"line_number":7438,"utf16_col":12},"end":{"line_number":7438,"utf16_col":72}}},{"name":"countedNext","kind":"method","ident_start":295772,"ident_end":295783,"extent_start":295767,"extent_end":295786,"fully_qualified_name":"GeneratorUntypedBase::countedNext","ident_utf16":{"start":{"line_number":7453,"utf16_col":17},"end":{"line_number":7453,"utf16_col":28}},"extent_utf16":{"start":{"line_number":7453,"utf16_col":12},"end":{"line_number":7453,"utf16_col":31}}},{"name":"currentElementIndex","kind":"function","ident_start":295812,"ident_end":295831,"extent_start":295800,"extent_end":295873,"fully_qualified_name":"GeneratorUntypedBase::currentElementIndex","ident_utf16":{"start":{"line_number":7455,"utf16_col":24},"end":{"line_number":7455,"utf16_col":43}},"extent_utf16":{"start":{"line_number":7455,"utf16_col":12},"end":{"line_number":7455,"utf16_col":85}}},{"name":"currentElementAsString","kind":"method","ident_start":296489,"ident_end":296511,"extent_start":296479,"extent_end":296520,"fully_qualified_name":"GeneratorUntypedBase::currentElementAsString","ident_utf16":{"start":{"line_number":7470,"utf16_col":22},"end":{"line_number":7470,"utf16_col":44}},"extent_utf16":{"start":{"line_number":7470,"utf16_col":12},"end":{"line_number":7470,"utf16_col":53}}},{"name":"IGeneratorTracker","kind":"class","ident_start":296656,"ident_end":296673,"extent_start":296650,"extent_end":296969,"fully_qualified_name":"IGeneratorTracker","ident_utf16":{"start":{"line_number":7476,"utf16_col":10},"end":{"line_number":7476,"utf16_col":27}},"extent_utf16":{"start":{"line_number":7476,"utf16_col":4},"end":{"line_number":7482,"utf16_col":5}}},{"name":"hasGenerator","kind":"method","ident_start":296761,"ident_end":296773,"extent_start":296748,"extent_end":296794,"fully_qualified_name":"IGeneratorTracker::hasGenerator","ident_utf16":{"start":{"line_number":7479,"utf16_col":21},"end":{"line_number":7479,"utf16_col":33}},"extent_utf16":{"start":{"line_number":7479,"utf16_col":8},"end":{"line_number":7479,"utf16_col":54}}},{"name":"getGenerator","kind":"method","ident_start":296816,"ident_end":296828,"extent_start":296803,"extent_end":296880,"fully_qualified_name":"IGeneratorTracker::getGenerator","ident_utf16":{"start":{"line_number":7480,"utf16_col":21},"end":{"line_number":7480,"utf16_col":33}},"extent_utf16":{"start":{"line_number":7480,"utf16_col":8},"end":{"line_number":7480,"utf16_col":85}}},{"name":"setGenerator","kind":"method","ident_start":296902,"ident_end":296914,"extent_start":296889,"extent_end":296963,"fully_qualified_name":"IGeneratorTracker::setGenerator","ident_utf16":{"start":{"line_number":7481,"utf16_col":21},"end":{"line_number":7481,"utf16_col":33}},"extent_utf16":{"start":{"line_number":7481,"utf16_col":8},"end":{"line_number":7481,"utf16_col":82}}},{"name":"IGenerator","kind":"class","ident_start":297345,"ident_end":297355,"extent_start":297339,"extent_end":297782,"fully_qualified_name":"IGenerator","ident_utf16":{"start":{"line_number":7504,"utf16_col":10},"end":{"line_number":7504,"utf16_col":20}},"extent_utf16":{"start":{"line_number":7504,"utf16_col":4},"end":{"line_number":7516,"utf16_col":5}}},{"name":"stringifyImpl","kind":"function","ident_start":297408,"ident_end":297421,"extent_start":297396,"extent_end":297506,"fully_qualified_name":"IGenerator::stringifyImpl","ident_utf16":{"start":{"line_number":7505,"utf16_col":20},"end":{"line_number":7505,"utf16_col":33}},"extent_utf16":{"start":{"line_number":7505,"utf16_col":8},"end":{"line_number":7507,"utf16_col":9}}},{"name":"GeneratorWrapper","kind":"class","ident_start":297915,"ident_end":297931,"extent_start":297909,"extent_end":298398,"fully_qualified_name":"GeneratorWrapper","ident_utf16":{"start":{"line_number":7522,"utf16_col":10},"end":{"line_number":7522,"utf16_col":26}},"extent_utf16":{"start":{"line_number":7522,"utf16_col":4},"end":{"line_number":7537,"utf16_col":5}}},{"name":"GeneratorWrapper","kind":"function","ident_start":298048,"ident_end":298064,"extent_start":298048,"extent_end":298129,"fully_qualified_name":"GeneratorWrapper::GeneratorWrapper","ident_utf16":{"start":{"line_number":7526,"utf16_col":8},"end":{"line_number":7526,"utf16_col":24}},"extent_utf16":{"start":{"line_number":7526,"utf16_col":8},"end":{"line_number":7527,"utf16_col":37}}},{"name":"GeneratorWrapper","kind":"function","ident_start":298138,"ident_end":298154,"extent_start":298138,"extent_end":298232,"fully_qualified_name":"GeneratorWrapper::GeneratorWrapper","ident_utf16":{"start":{"line_number":7528,"utf16_col":8},"end":{"line_number":7528,"utf16_col":24}},"extent_utf16":{"start":{"line_number":7528,"utf16_col":8},"end":{"line_number":7529,"utf16_col":49}}},{"name":"next","kind":"function","ident_start":298327,"ident_end":298331,"extent_start":298322,"extent_end":298392,"fully_qualified_name":"GeneratorWrapper::next","ident_utf16":{"start":{"line_number":7534,"utf16_col":13},"end":{"line_number":7534,"utf16_col":17}},"extent_utf16":{"start":{"line_number":7534,"utf16_col":8},"end":{"line_number":7536,"utf16_col":9}}},{"name":"SingleValueGenerator","kind":"class","ident_start":298437,"ident_end":298457,"extent_start":298431,"extent_end":298847,"fully_qualified_name":"SingleValueGenerator","ident_utf16":{"start":{"line_number":7541,"utf16_col":10},"end":{"line_number":7541,"utf16_col":30}},"extent_utf16":{"start":{"line_number":7541,"utf16_col":4},"end":{"line_number":7557,"utf16_col":5}}},{"name":"SingleValueGenerator","kind":"function","ident_start":298528,"ident_end":298548,"extent_start":298528,"extent_end":298604,"fully_qualified_name":"SingleValueGenerator::SingleValueGenerator","ident_utf16":{"start":{"line_number":7544,"utf16_col":8},"end":{"line_number":7544,"utf16_col":28}},"extent_utf16":{"start":{"line_number":7544,"utf16_col":8},"end":{"line_number":7546,"utf16_col":10}}},{"name":"SingleValueGenerator","kind":"function","ident_start":298613,"ident_end":298633,"extent_start":298613,"extent_end":298695,"fully_qualified_name":"SingleValueGenerator::SingleValueGenerator","ident_utf16":{"start":{"line_number":7547,"utf16_col":8},"end":{"line_number":7547,"utf16_col":28}},"extent_utf16":{"start":{"line_number":7547,"utf16_col":8},"end":{"line_number":7549,"utf16_col":10}}},{"name":"next","kind":"function","ident_start":298788,"ident_end":298792,"extent_start":298783,"extent_end":298841,"fully_qualified_name":"SingleValueGenerator::next","ident_utf16":{"start":{"line_number":7554,"utf16_col":13},"end":{"line_number":7554,"utf16_col":17}},"extent_utf16":{"start":{"line_number":7554,"utf16_col":8},"end":{"line_number":7556,"utf16_col":9}}},{"name":"FixedValuesGenerator","kind":"class","ident_start":298885,"ident_end":298905,"extent_start":298879,"extent_end":299501,"fully_qualified_name":"FixedValuesGenerator","ident_utf16":{"start":{"line_number":7560,"utf16_col":10},"end":{"line_number":7560,"utf16_col":30}},"extent_utf16":{"start":{"line_number":7560,"utf16_col":4},"end":{"line_number":7576,"utf16_col":5}}},{"name":"FixedValuesGenerator","kind":"function","ident_start":299223,"ident_end":299243,"extent_start":299223,"extent_end":299302,"fully_qualified_name":"FixedValuesGenerator::FixedValuesGenerator","ident_utf16":{"start":{"line_number":7567,"utf16_col":8},"end":{"line_number":7567,"utf16_col":28}},"extent_utf16":{"start":{"line_number":7567,"utf16_col":8},"end":{"line_number":7567,"utf16_col":87}}},{"name":"next","kind":"function","ident_start":299403,"ident_end":299407,"extent_start":299398,"extent_end":299495,"fully_qualified_name":"FixedValuesGenerator::next","ident_utf16":{"start":{"line_number":7572,"utf16_col":13},"end":{"line_number":7572,"utf16_col":17}},"extent_utf16":{"start":{"line_number":7572,"utf16_col":8},"end":{"line_number":7575,"utf16_col":9}}},{"name":"value","kind":"function","ident_start":299598,"ident_end":299603,"extent_start":299571,"extent_end":299783,"fully_qualified_name":"value","ident_utf16":{"start":{"line_number":7579,"utf16_col":31},"end":{"line_number":7579,"utf16_col":36}},"extent_utf16":{"start":{"line_number":7579,"utf16_col":4},"end":{"line_number":7583,"utf16_col":5}}},{"name":"values","kind":"function","ident_start":299834,"ident_end":299840,"extent_start":299814,"extent_end":299978,"fully_qualified_name":"values","ident_utf16":{"start":{"line_number":7585,"utf16_col":24},"end":{"line_number":7585,"utf16_col":30}},"extent_utf16":{"start":{"line_number":7585,"utf16_col":4},"end":{"line_number":7587,"utf16_col":5}}},{"name":"Generators","kind":"class","ident_start":300015,"ident_end":300025,"extent_start":300009,"extent_end":301780,"fully_qualified_name":"Generators","ident_utf16":{"start":{"line_number":7590,"utf16_col":10},"end":{"line_number":7590,"utf16_col":20}},"extent_utf16":{"start":{"line_number":7590,"utf16_col":4},"end":{"line_number":7640,"utf16_col":5}}},{"name":"add_generator","kind":"function","ident_start":300150,"ident_end":300163,"extent_start":300145,"extent_end":300276,"fully_qualified_name":"Generators::add_generator","ident_utf16":{"start":{"line_number":7594,"utf16_col":13},"end":{"line_number":7594,"utf16_col":26}},"extent_utf16":{"start":{"line_number":7594,"utf16_col":8},"end":{"line_number":7596,"utf16_col":9}}},{"name":"add_generator","kind":"function","ident_start":300290,"ident_end":300303,"extent_start":300285,"extent_end":300386,"fully_qualified_name":"Generators::add_generator","ident_utf16":{"start":{"line_number":7597,"utf16_col":13},"end":{"line_number":7597,"utf16_col":26}},"extent_utf16":{"start":{"line_number":7597,"utf16_col":8},"end":{"line_number":7599,"utf16_col":9}}},{"name":"add_generator","kind":"function","ident_start":300400,"ident_end":300413,"extent_start":300395,"extent_end":300505,"fully_qualified_name":"Generators::add_generator","ident_utf16":{"start":{"line_number":7600,"utf16_col":13},"end":{"line_number":7600,"utf16_col":26}},"extent_utf16":{"start":{"line_number":7600,"utf16_col":8},"end":{"line_number":7602,"utf16_col":9}}},{"name":"add_generator","kind":"function","ident_start":300611,"ident_end":300624,"extent_start":300544,"extent_end":300703,"fully_qualified_name":"Generators::add_generator","ident_utf16":{"start":{"line_number":7605,"utf16_col":8},"end":{"line_number":7605,"utf16_col":21}},"extent_utf16":{"start":{"line_number":7604,"utf16_col":8},"end":{"line_number":7607,"utf16_col":9}}},{"name":"add_generators","kind":"function","ident_start":300740,"ident_end":300754,"extent_start":300735,"extent_end":300854,"fully_qualified_name":"Generators::add_generators","ident_utf16":{"start":{"line_number":7609,"utf16_col":35},"end":{"line_number":7609,"utf16_col":49}},"extent_utf16":{"start":{"line_number":7609,"utf16_col":30},"end":{"line_number":7611,"utf16_col":9}}},{"name":"add_generators","kind":"function","ident_start":300915,"ident_end":300929,"extent_start":300910,"extent_end":301119,"fully_qualified_name":"Generators::add_generators","ident_utf16":{"start":{"line_number":7614,"utf16_col":13},"end":{"line_number":7614,"utf16_col":27}},"extent_utf16":{"start":{"line_number":7614,"utf16_col":8},"end":{"line_number":7617,"utf16_col":9}}},{"name":"Generators","kind":"function","ident_start":301175,"ident_end":301185,"extent_start":301175,"extent_end":301333,"fully_qualified_name":"Generators::Generators","ident_utf16":{"start":{"line_number":7621,"utf16_col":8},"end":{"line_number":7621,"utf16_col":18}},"extent_utf16":{"start":{"line_number":7621,"utf16_col":8},"end":{"line_number":7624,"utf16_col":9}}},{"name":"next","kind":"function","ident_start":301449,"ident_end":301453,"extent_start":301444,"extent_end":301774,"fully_qualified_name":"Generators::next","ident_utf16":{"start":{"line_number":7630,"utf16_col":13},"end":{"line_number":7630,"utf16_col":17}},"extent_utf16":{"start":{"line_number":7630,"utf16_col":8},"end":{"line_number":7639,"utf16_col":9}}},{"name":"table","kind":"function","ident_start":301872,"ident_end":301877,"extent_start":301818,"extent_end":302002,"fully_qualified_name":"table","ident_utf16":{"start":{"line_number":7645,"utf16_col":4},"end":{"line_number":7645,"utf16_col":9}},"extent_utf16":{"start":{"line_number":7644,"utf16_col":4},"end":{"line_number":7647,"utf16_col":5}}},{"name":"as","kind":"class","ident_start":302137,"ident_end":302139,"extent_start":302130,"extent_end":302142,"fully_qualified_name":"as","ident_utf16":{"start":{"line_number":7651,"utf16_col":11},"end":{"line_number":7651,"utf16_col":13}},"extent_utf16":{"start":{"line_number":7651,"utf16_col":4},"end":{"line_number":7651,"utf16_col":16}}},{"name":"makeGenerators","kind":"function","ident_start":302195,"ident_end":302209,"extent_start":302190,"extent_end":302381,"fully_qualified_name":"makeGenerators","ident_utf16":{"start":{"line_number":7654,"utf16_col":9},"end":{"line_number":7654,"utf16_col":23}},"extent_utf16":{"start":{"line_number":7654,"utf16_col":4},"end":{"line_number":7656,"utf16_col":5}}},{"name":"makeGenerators","kind":"function","ident_start":302416,"ident_end":302430,"extent_start":302411,"extent_end":302543,"fully_qualified_name":"makeGenerators","ident_utf16":{"start":{"line_number":7658,"utf16_col":9},"end":{"line_number":7658,"utf16_col":23}},"extent_utf16":{"start":{"line_number":7658,"utf16_col":4},"end":{"line_number":7660,"utf16_col":5}}},{"name":"makeGenerators","kind":"function","ident_start":302594,"ident_end":302608,"extent_start":302589,"extent_end":302783,"fully_qualified_name":"makeGenerators","ident_utf16":{"start":{"line_number":7662,"utf16_col":9},"end":{"line_number":7662,"utf16_col":23}},"extent_utf16":{"start":{"line_number":7662,"utf16_col":4},"end":{"line_number":7664,"utf16_col":5}}},{"name":"makeGenerators","kind":"function","ident_start":302846,"ident_end":302860,"extent_start":302841,"extent_end":303033,"fully_qualified_name":"makeGenerators","ident_utf16":{"start":{"line_number":7666,"utf16_col":9},"end":{"line_number":7666,"utf16_col":23}},"extent_utf16":{"start":{"line_number":7666,"utf16_col":4},"end":{"line_number":7668,"utf16_col":5}}},{"name":"generate","kind":"function","ident_start":303448,"ident_end":303456,"extent_start":303443,"extent_end":304317,"fully_qualified_name":"generate","ident_utf16":{"start":{"line_number":7677,"utf16_col":9},"end":{"line_number":7677,"utf16_col":17}},"extent_utf16":{"start":{"line_number":7677,"utf16_col":4},"end":{"line_number":7693,"utf16_col":5}}},{"name":"TakeGenerator","kind":"class","ident_start":305844,"ident_end":305857,"extent_start":305838,"extent_end":306761,"fully_qualified_name":"TakeGenerator","ident_utf16":{"start":{"line_number":7727,"utf16_col":10},"end":{"line_number":7727,"utf16_col":23}},"extent_utf16":{"start":{"line_number":7727,"utf16_col":4},"end":{"line_number":7755,"utf16_col":5}}},{"name":"TakeGenerator","kind":"function","ident_start":306006,"ident_end":306019,"extent_start":306006,"extent_end":306236,"fully_qualified_name":"TakeGenerator::TakeGenerator","ident_utf16":{"start":{"line_number":7732,"utf16_col":8},"end":{"line_number":7732,"utf16_col":21}},"extent_utf16":{"start":{"line_number":7732,"utf16_col":8},"end":{"line_number":7737,"utf16_col":9}}},{"name":"next","kind":"function","ident_start":306338,"ident_end":306342,"extent_start":306333,"extent_end":306755,"fully_qualified_name":"TakeGenerator::next","ident_utf16":{"start":{"line_number":7741,"utf16_col":13},"end":{"line_number":7741,"utf16_col":17}},"extent_utf16":{"start":{"line_number":7741,"utf16_col":8},"end":{"line_number":7754,"utf16_col":9}}},{"name":"take","kind":"function","ident_start":306814,"ident_end":306818,"extent_start":306794,"extent_end":306987,"fully_qualified_name":"take","ident_utf16":{"start":{"line_number":7758,"utf16_col":24},"end":{"line_number":7758,"utf16_col":28}},"extent_utf16":{"start":{"line_number":7758,"utf16_col":4},"end":{"line_number":7760,"utf16_col":5}}},{"name":"FilterGenerator","kind":"class","ident_start":307046,"ident_end":307061,"extent_start":307040,"extent_end":308190,"fully_qualified_name":"FilterGenerator","ident_utf16":{"start":{"line_number":7764,"utf16_col":10},"end":{"line_number":7764,"utf16_col":25}},"extent_utf16":{"start":{"line_number":7764,"utf16_col":4},"end":{"line_number":7795,"utf16_col":5}}},{"name":"FilterGenerator","kind":"function","ident_start":307227,"ident_end":307242,"extent_start":307227,"extent_end":307811,"fully_qualified_name":"FilterGenerator::FilterGenerator","ident_utf16":{"start":{"line_number":7769,"utf16_col":8},"end":{"line_number":7769,"utf16_col":23}},"extent_utf16":{"start":{"line_number":7769,"utf16_col":8},"end":{"line_number":7781,"utf16_col":9}}},{"name":"next","kind":"function","ident_start":307915,"ident_end":307919,"extent_start":307910,"extent_end":308184,"fully_qualified_name":"FilterGenerator::next","ident_utf16":{"start":{"line_number":7787,"utf16_col":13},"end":{"line_number":7787,"utf16_col":17}},"extent_utf16":{"start":{"line_number":7787,"utf16_col":8},"end":{"line_number":7794,"utf16_col":9}}},{"name":"filter","kind":"function","ident_start":308264,"ident_end":308270,"extent_start":308244,"extent_end":308468,"fully_qualified_name":"filter","ident_utf16":{"start":{"line_number":7799,"utf16_col":24},"end":{"line_number":7799,"utf16_col":30}},"extent_utf16":{"start":{"line_number":7799,"utf16_col":4},"end":{"line_number":7801,"utf16_col":5}}},{"name":"RepeatGenerator","kind":"class","ident_start":308506,"ident_end":308521,"extent_start":308500,"extent_end":310438,"fully_qualified_name":"RepeatGenerator","ident_utf16":{"start":{"line_number":7804,"utf16_col":10},"end":{"line_number":7804,"utf16_col":25}},"extent_utf16":{"start":{"line_number":7804,"utf16_col":4},"end":{"line_number":7852,"utf16_col":5}}},{"name":"RepeatGenerator","kind":"function","ident_start":308938,"ident_end":308953,"extent_start":308938,"extent_end":309199,"fully_qualified_name":"RepeatGenerator::RepeatGenerator","ident_utf16":{"start":{"line_number":7814,"utf16_col":8},"end":{"line_number":7814,"utf16_col":23}},"extent_utf16":{"start":{"line_number":7814,"utf16_col":8},"end":{"line_number":7819,"utf16_col":9}}},{"name":"next","kind":"function","ident_start":309466,"ident_end":309470,"extent_start":309461,"extent_end":310432,"fully_qualified_name":"RepeatGenerator::next","ident_utf16":{"start":{"line_number":7829,"utf16_col":13},"end":{"line_number":7829,"utf16_col":17}},"extent_utf16":{"start":{"line_number":7829,"utf16_col":8},"end":{"line_number":7851,"utf16_col":9}}},{"name":"repeat","kind":"function","ident_start":310491,"ident_end":310497,"extent_start":310471,"extent_end":310670,"fully_qualified_name":"repeat","ident_utf16":{"start":{"line_number":7855,"utf16_col":24},"end":{"line_number":7855,"utf16_col":30}},"extent_utf16":{"start":{"line_number":7855,"utf16_col":4},"end":{"line_number":7857,"utf16_col":5}}},{"name":"MapGenerator","kind":"class","ident_start":310735,"ident_end":310747,"extent_start":310729,"extent_end":311612,"fully_qualified_name":"MapGenerator","ident_utf16":{"start":{"line_number":7860,"utf16_col":10},"end":{"line_number":7860,"utf16_col":22}},"extent_utf16":{"start":{"line_number":7860,"utf16_col":4},"end":{"line_number":7884,"utf16_col":5}}},{"name":"MapGenerator","kind":"function","ident_start":311086,"ident_end":311098,"extent_start":311086,"extent_end":311307,"fully_qualified_name":"MapGenerator::MapGenerator","ident_utf16":{"start":{"line_number":7868,"utf16_col":8},"end":{"line_number":7868,"utf16_col":20}},"extent_utf16":{"start":{"line_number":7868,"utf16_col":8},"end":{"line_number":7872,"utf16_col":10}}},{"name":"next","kind":"function","ident_start":311400,"ident_end":311404,"extent_start":311395,"extent_end":311606,"fully_qualified_name":"MapGenerator::next","ident_utf16":{"start":{"line_number":7877,"utf16_col":13},"end":{"line_number":7877,"utf16_col":17}},"extent_utf16":{"start":{"line_number":7877,"utf16_col":8},"end":{"line_number":7883,"utf16_col":9}}},{"name":"map","kind":"function","ident_start":311722,"ident_end":311725,"extent_start":311702,"extent_end":311943,"fully_qualified_name":"map","ident_utf16":{"start":{"line_number":7887,"utf16_col":24},"end":{"line_number":7887,"utf16_col":27}},"extent_utf16":{"start":{"line_number":7887,"utf16_col":4},"end":{"line_number":7891,"utf16_col":5}}},{"name":"map","kind":"function","ident_start":312022,"ident_end":312025,"extent_start":312002,"extent_end":312243,"fully_qualified_name":"map","ident_utf16":{"start":{"line_number":7894,"utf16_col":24},"end":{"line_number":7894,"utf16_col":27}},"extent_utf16":{"start":{"line_number":7894,"utf16_col":4},"end":{"line_number":7898,"utf16_col":5}}},{"name":"ChunkGenerator","kind":"class","ident_start":312281,"ident_end":312295,"extent_start":312275,"extent_end":313521,"fully_qualified_name":"ChunkGenerator","ident_utf16":{"start":{"line_number":7901,"utf16_col":10},"end":{"line_number":7901,"utf16_col":24}},"extent_utf16":{"start":{"line_number":7901,"utf16_col":4},"end":{"line_number":7934,"utf16_col":5}}},{"name":"ChunkGenerator","kind":"function","ident_start":312494,"ident_end":312508,"extent_start":312494,"extent_end":313104,"fully_qualified_name":"ChunkGenerator::ChunkGenerator","ident_utf16":{"start":{"line_number":7907,"utf16_col":8},"end":{"line_number":7907,"utf16_col":22}},"extent_utf16":{"start":{"line_number":7907,"utf16_col":8},"end":{"line_number":7920,"utf16_col":9}}},{"name":"next","kind":"function","ident_start":313209,"ident_end":313213,"extent_start":313204,"extent_end":313515,"fully_qualified_name":"ChunkGenerator::next","ident_utf16":{"start":{"line_number":7924,"utf16_col":13},"end":{"line_number":7924,"utf16_col":17}},"extent_utf16":{"start":{"line_number":7924,"utf16_col":8},"end":{"line_number":7933,"utf16_col":9}}},{"name":"chunk","kind":"function","ident_start":313587,"ident_end":313592,"extent_start":313554,"extent_end":313793,"fully_qualified_name":"chunk","ident_utf16":{"start":{"line_number":7937,"utf16_col":37},"end":{"line_number":7937,"utf16_col":42}},"extent_utf16":{"start":{"line_number":7937,"utf16_col":4},"end":{"line_number":7941,"utf16_col":5}}},{"name":"SimplePcg32","kind":"class","ident_start":314450,"ident_end":314461,"extent_start":314444,"extent_end":315720,"fully_qualified_name":"SimplePcg32","ident_utf16":{"start":{"line_number":7967,"utf16_col":10},"end":{"line_number":7967,"utf16_col":21}},"extent_utf16":{"start":{"line_number":7967,"utf16_col":4},"end":{"line_number":8002,"utf16_col":5}}},{"name":"SimplePcg32","kind":"function","ident_start":314829,"ident_end":314840,"extent_start":314829,"extent_end":314870,"fully_qualified_name":"SimplePcg32::SimplePcg32","ident_utf16":{"start":{"line_number":7979,"utf16_col":8},"end":{"line_number":7979,"utf16_col":19}},"extent_utf16":{"start":{"line_number":7979,"utf16_col":8},"end":{"line_number":7979,"utf16_col":49}}},{"name":"seed","kind":"method","ident_start":314935,"ident_end":314939,"extent_start":314930,"extent_end":314959,"fully_qualified_name":"SimplePcg32::seed","ident_utf16":{"start":{"line_number":7983,"utf16_col":13},"end":{"line_number":7983,"utf16_col":17}},"extent_utf16":{"start":{"line_number":7983,"utf16_col":8},"end":{"line_number":7983,"utf16_col":37}}},{"name":"discard","kind":"method","ident_start":314973,"ident_end":314980,"extent_start":314968,"extent_end":314996,"fully_qualified_name":"SimplePcg32::discard","ident_utf16":{"start":{"line_number":7984,"utf16_col":13},"end":{"line_number":7984,"utf16_col":20}},"extent_utf16":{"start":{"line_number":7984,"utf16_col":8},"end":{"line_number":7984,"utf16_col":36}}},{"name":"ExtendedMultResult","kind":"class","ident_start":318031,"ident_end":318049,"extent_start":318024,"extent_end":318261,"fully_qualified_name":"ExtendedMultResult","ident_utf16":{"start":{"line_number":8076,"utf16_col":15},"end":{"line_number":8076,"utf16_col":33}},"extent_utf16":{"start":{"line_number":8076,"utf16_col":8},"end":{"line_number":8082,"utf16_col":9}}},{"name":"extendedMultPortable","kind":"function","ident_start":318597,"ident_end":318617,"extent_start":318545,"extent_end":319543,"fully_qualified_name":"extendedMultPortable","ident_utf16":{"start":{"line_number":8091,"utf16_col":8},"end":{"line_number":8091,"utf16_col":28}},"extent_utf16":{"start":{"line_number":8090,"utf16_col":8},"end":{"line_number":8111,"utf16_col":9}}},{"name":"extendedMult","kind":"function","ident_start":319650,"ident_end":319662,"extent_start":319601,"extent_end":320179,"fully_qualified_name":"extendedMult","ident_utf16":{"start":{"line_number":8115,"utf16_col":8},"end":{"line_number":8115,"utf16_col":20}},"extent_utf16":{"start":{"line_number":8114,"utf16_col":8},"end":{"line_number":8127,"utf16_col":9}}},{"name":"extendedMult","kind":"function","ident_start":320258,"ident_end":320270,"extent_start":320223,"extent_end":320920,"fully_qualified_name":"extendedMult","ident_utf16":{"start":{"line_number":8131,"utf16_col":43},"end":{"line_number":8131,"utf16_col":55}},"extent_utf16":{"start":{"line_number":8131,"utf16_col":8},"end":{"line_number":8143,"utf16_col":9}}},{"name":"fillBitsFrom","kind":"function","ident_start":322211,"ident_end":322223,"extent_start":322108,"extent_end":323163,"fully_qualified_name":"fillBitsFrom","ident_utf16":{"start":{"line_number":8168,"utf16_col":24},"end":{"line_number":8168,"utf16_col":36}},"extent_utf16":{"start":{"line_number":8167,"utf16_col":12},"end":{"line_number":8187,"utf16_col":9}}},{"name":"transposeToNaturalOrder","kind":"function","ident_start":323665,"ident_end":323688,"extent_start":323571,"extent_end":324462,"fully_qualified_name":"transposeToNaturalOrder","ident_utf16":{"start":{"line_number":8199,"utf16_col":8},"end":{"line_number":8199,"utf16_col":31}},"extent_utf16":{"start":{"line_number":8197,"utf16_col":8},"end":{"line_number":8212,"utf16_col":9}}},{"name":"transposeToNaturalOrder","kind":"function","ident_start":324656,"ident_end":324679,"extent_start":324556,"extent_end":325063,"fully_qualified_name":"transposeToNaturalOrder","ident_utf16":{"start":{"line_number":8220,"utf16_col":12},"end":{"line_number":8220,"utf16_col":35}},"extent_utf16":{"start":{"line_number":8218,"utf16_col":8},"end":{"line_number":8227,"utf16_col":9}}},{"name":"uniform_integer_distribution","kind":"class","ident_start":325682,"ident_end":325710,"extent_start":325676,"extent_end":329211,"fully_qualified_name":"uniform_integer_distribution","ident_utf16":{"start":{"line_number":8247,"utf16_col":6},"end":{"line_number":8247,"utf16_col":34}},"extent_utf16":{"start":{"line_number":8247,"utf16_col":0},"end":{"line_number":8323,"utf16_col":1}}},{"name":"computeDistance","kind":"function","ident_start":326937,"ident_end":326952,"extent_start":326900,"extent_end":327171,"fully_qualified_name":"uniform_integer_distribution::computeDistance","ident_utf16":{"start":{"line_number":8270,"utf16_col":41},"end":{"line_number":8270,"utf16_col":56}},"extent_utf16":{"start":{"line_number":8270,"utf16_col":4},"end":{"line_number":8274,"utf16_col":5}}},{"name":"computeRejectionThreshold","kind":"function","ident_start":327214,"ident_end":327239,"extent_start":327177,"extent_end":327521,"fully_qualified_name":"uniform_integer_distribution::computeRejectionThreshold","ident_utf16":{"start":{"line_number":8276,"utf16_col":41},"end":{"line_number":8276,"utf16_col":66}},"extent_utf16":{"start":{"line_number":8276,"utf16_col":4},"end":{"line_number":8281,"utf16_col":5}}},{"name":"transposeTo","kind":"function","ident_start":327564,"ident_end":327575,"extent_start":327527,"extent_end":327714,"fully_qualified_name":"uniform_integer_distribution::transposeTo","ident_utf16":{"start":{"line_number":8283,"utf16_col":41},"end":{"line_number":8283,"utf16_col":52}},"extent_utf16":{"start":{"line_number":8283,"utf16_col":4},"end":{"line_number":8286,"utf16_col":5}}},{"name":"transposeBack","kind":"function","ident_start":327748,"ident_end":327761,"extent_start":327719,"extent_end":327898,"fully_qualified_name":"uniform_integer_distribution::transposeBack","ident_utf16":{"start":{"line_number":8287,"utf16_col":33},"end":{"line_number":8287,"utf16_col":46}},"extent_utf16":{"start":{"line_number":8287,"utf16_col":4},"end":{"line_number":8290,"utf16_col":5}}},{"name":"uniform_integer_distribution","kind":"function","ident_start":327960,"ident_end":327988,"extent_start":327950,"extent_end":328208,"fully_qualified_name":"uniform_integer_distribution::uniform_integer_distribution","ident_utf16":{"start":{"line_number":8295,"utf16_col":14},"end":{"line_number":8295,"utf16_col":42}},"extent_utf16":{"start":{"line_number":8295,"utf16_col":4},"end":{"line_number":8300,"utf16_col":5}}},{"name":"a","kind":"function","ident_start":329082,"ident_end":329083,"extent_start":329060,"extent_end":329122,"fully_qualified_name":"uniform_integer_distribution::a","ident_utf16":{"start":{"line_number":8321,"utf16_col":26},"end":{"line_number":8321,"utf16_col":27}},"extent_utf16":{"start":{"line_number":8321,"utf16_col":4},"end":{"line_number":8321,"utf16_col":66}}},{"name":"b","kind":"function","ident_start":329149,"ident_end":329150,"extent_start":329127,"extent_end":329209,"fully_qualified_name":"uniform_integer_distribution::b","ident_utf16":{"start":{"line_number":8322,"utf16_col":26},"end":{"line_number":8322,"utf16_col":27}},"extent_utf16":{"start":{"line_number":8322,"utf16_col":4},"end":{"line_number":8322,"utf16_col":86}}},{"name":"gamma","kind":"function","ident_start":330161,"ident_end":330166,"extent_start":330151,"extent_end":330799,"fully_qualified_name":"gamma","ident_utf16":{"start":{"line_number":8372,"utf16_col":18},"end":{"line_number":8372,"utf16_col":23}},"extent_utf16":{"start":{"line_number":8372,"utf16_col":8},"end":{"line_number":8383,"utf16_col":9}}},{"name":"count_equidistant_floats","kind":"function","ident_start":331804,"ident_end":331828,"extent_start":331772,"extent_end":332487,"fully_qualified_name":"count_equidistant_floats","ident_utf16":{"start":{"line_number":8414,"utf16_col":8},"end":{"line_number":8414,"utf16_col":32}},"extent_utf16":{"start":{"line_number":8413,"utf16_col":8},"end":{"line_number":8428,"utf16_col":9}}},{"name":"calculate_max_steps_in_one_go","kind":"function","ident_start":333219,"ident_end":333248,"extent_start":333195,"extent_end":333406,"fully_qualified_name":"calculate_max_steps_in_one_go","ident_utf16":{"start":{"line_number":8453,"utf16_col":32},"end":{"line_number":8453,"utf16_col":61}},"extent_utf16":{"start":{"line_number":8453,"utf16_col":8},"end":{"line_number":8456,"utf16_col":9}}},{"name":"calculate_max_steps_in_one_go","kind":"function","ident_start":333439,"ident_end":333468,"extent_start":333415,"extent_end":333609,"fully_qualified_name":"calculate_max_steps_in_one_go","ident_utf16":{"start":{"line_number":8457,"utf16_col":32},"end":{"line_number":8457,"utf16_col":61}},"extent_utf16":{"start":{"line_number":8457,"utf16_col":8},"end":{"line_number":8460,"utf16_col":9}}},{"name":"uniform_floating_point_distribution","kind":"class","ident_start":335001,"ident_end":335036,"extent_start":334995,"extent_end":337232,"fully_qualified_name":"uniform_floating_point_distribution","ident_utf16":{"start":{"line_number":8493,"utf16_col":6},"end":{"line_number":8493,"utf16_col":41}},"extent_utf16":{"start":{"line_number":8493,"utf16_col":0},"end":{"line_number":8551,"utf16_col":1}}},{"name":"uniform_floating_point_distribution","kind":"function","ident_start":335848,"ident_end":335883,"extent_start":335848,"extent_end":336326,"fully_qualified_name":"uniform_floating_point_distribution::uniform_floating_point_distribution","ident_utf16":{"start":{"line_number":8515,"utf16_col":4},"end":{"line_number":8515,"utf16_col":39}},"extent_utf16":{"start":{"line_number":8515,"utf16_col":4},"end":{"line_number":8525,"utf16_col":5}}},{"name":"a","kind":"function","ident_start":337163,"ident_end":337164,"extent_start":337151,"extent_end":337188,"fully_qualified_name":"uniform_floating_point_distribution::a","ident_utf16":{"start":{"line_number":8549,"utf16_col":16},"end":{"line_number":8549,"utf16_col":17}},"extent_utf16":{"start":{"line_number":8549,"utf16_col":4},"end":{"line_number":8549,"utf16_col":41}}},{"name":"b","kind":"function","ident_start":337205,"ident_end":337206,"extent_start":337193,"extent_end":337230,"fully_qualified_name":"uniform_floating_point_distribution::b","ident_utf16":{"start":{"line_number":8550,"utf16_col":16},"end":{"line_number":8550,"utf16_col":17}},"extent_utf16":{"start":{"line_number":8550,"utf16_col":4},"end":{"line_number":8550,"utf16_col":41}}},{"name":"RandomFloatingGenerator","kind":"class","ident_start":337642,"ident_end":337665,"extent_start":337636,"extent_end":338160,"fully_qualified_name":"RandomFloatingGenerator","ident_utf16":{"start":{"line_number":8567,"utf16_col":6},"end":{"line_number":8567,"utf16_col":29}},"extent_utf16":{"start":{"line_number":8567,"utf16_col":0},"end":{"line_number":8585,"utf16_col":1}}},{"name":"RandomFloatingGenerator","kind":"function","ident_start":337833,"ident_end":337856,"extent_start":337833,"extent_end":337982,"fully_qualified_name":"RandomFloatingGenerator::RandomFloatingGenerator","ident_utf16":{"start":{"line_number":8572,"utf16_col":4},"end":{"line_number":8572,"utf16_col":27}},"extent_utf16":{"start":{"line_number":8572,"utf16_col":4},"end":{"line_number":8576,"utf16_col":5}}},{"name":"next","kind":"function","ident_start":338072,"ident_end":338076,"extent_start":338067,"extent_end":338158,"fully_qualified_name":"RandomFloatingGenerator::next","ident_utf16":{"start":{"line_number":8581,"utf16_col":9},"end":{"line_number":8581,"utf16_col":13}},"extent_utf16":{"start":{"line_number":8581,"utf16_col":4},"end":{"line_number":8584,"utf16_col":5}}},{"name":"next","kind":"method","ident_start":338641,"ident_end":338645,"extent_start":338636,"extent_end":338657,"fully_qualified_name":"next","ident_utf16":{"start":{"line_number":8599,"utf16_col":9},"end":{"line_number":8599,"utf16_col":13}},"extent_utf16":{"start":{"line_number":8599,"utf16_col":4},"end":{"line_number":8599,"utf16_col":25}}},{"name":"RandomIntegerGenerator","kind":"class","ident_start":338751,"ident_end":338773,"extent_start":338745,"extent_end":339272,"fully_qualified_name":"RandomIntegerGenerator","ident_utf16":{"start":{"line_number":8605,"utf16_col":6},"end":{"line_number":8605,"utf16_col":28}},"extent_utf16":{"start":{"line_number":8605,"utf16_col":0},"end":{"line_number":8623,"utf16_col":1}}},{"name":"RandomIntegerGenerator","kind":"function","ident_start":338940,"ident_end":338962,"extent_start":338940,"extent_end":339092,"fully_qualified_name":"RandomIntegerGenerator::RandomIntegerGenerator","ident_utf16":{"start":{"line_number":8610,"utf16_col":4},"end":{"line_number":8610,"utf16_col":26}},"extent_utf16":{"start":{"line_number":8610,"utf16_col":4},"end":{"line_number":8614,"utf16_col":5}}},{"name":"next","kind":"function","ident_start":339184,"ident_end":339188,"extent_start":339179,"extent_end":339270,"fully_qualified_name":"RandomIntegerGenerator::next","ident_utf16":{"start":{"line_number":8619,"utf16_col":9},"end":{"line_number":8619,"utf16_col":13}},"extent_utf16":{"start":{"line_number":8619,"utf16_col":4},"end":{"line_number":8622,"utf16_col":5}}},{"name":"random","kind":"function","ident_start":339363,"ident_end":339369,"extent_start":339297,"extent_end":339509,"fully_qualified_name":"random","ident_utf16":{"start":{"line_number":8627,"utf16_col":0},"end":{"line_number":8627,"utf16_col":6}},"extent_utf16":{"start":{"line_number":8626,"utf16_col":0},"end":{"line_number":8631,"utf16_col":1}}},{"name":"random","kind":"function","ident_start":339605,"ident_end":339611,"extent_start":339533,"extent_end":339752,"fully_qualified_name":"random","ident_utf16":{"start":{"line_number":8636,"utf16_col":0},"end":{"line_number":8636,"utf16_col":6}},"extent_utf16":{"start":{"line_number":8634,"utf16_col":0},"end":{"line_number":8640,"utf16_col":1}}},{"name":"RangeGenerator","kind":"class","ident_start":340058,"ident_end":340072,"extent_start":340052,"extent_end":340948,"fully_qualified_name":"RangeGenerator","ident_utf16":{"start":{"line_number":8662,"utf16_col":6},"end":{"line_number":8662,"utf16_col":20}},"extent_utf16":{"start":{"line_number":8662,"utf16_col":0},"end":{"line_number":8692,"utf16_col":1}}},{"name":"RangeGenerator","kind":"function","ident_start":340182,"ident_end":340196,"extent_start":340182,"extent_end":340618,"fully_qualified_name":"RangeGenerator::RangeGenerator","ident_utf16":{"start":{"line_number":8669,"utf16_col":4},"end":{"line_number":8669,"utf16_col":18}},"extent_utf16":{"start":{"line_number":8669,"utf16_col":4},"end":{"line_number":8678,"utf16_col":5}}},{"name":"RangeGenerator","kind":"function","ident_start":340624,"ident_end":340638,"extent_start":340624,"extent_end":340741,"fully_qualified_name":"RangeGenerator::RangeGenerator","ident_utf16":{"start":{"line_number":8680,"utf16_col":4},"end":{"line_number":8680,"utf16_col":18}},"extent_utf16":{"start":{"line_number":8680,"utf16_col":4},"end":{"line_number":8682,"utf16_col":6}}},{"name":"next","kind":"function","ident_start":340821,"ident_end":340825,"extent_start":340816,"extent_end":340946,"fully_qualified_name":"RangeGenerator::next","ident_utf16":{"start":{"line_number":8688,"utf16_col":9},"end":{"line_number":8688,"utf16_col":13}},"extent_utf16":{"start":{"line_number":8688,"utf16_col":4},"end":{"line_number":8691,"utf16_col":5}}},{"name":"range","kind":"function","ident_start":340993,"ident_end":340998,"extent_start":340973,"extent_end":341250,"fully_qualified_name":"range","ident_utf16":{"start":{"line_number":8695,"utf16_col":20},"end":{"line_number":8695,"utf16_col":25}},"extent_utf16":{"start":{"line_number":8695,"utf16_col":0},"end":{"line_number":8698,"utf16_col":1}}},{"name":"range","kind":"function","ident_start":341294,"ident_end":341299,"extent_start":341274,"extent_end":341531,"fully_qualified_name":"range","ident_utf16":{"start":{"line_number":8701,"utf16_col":20},"end":{"line_number":8701,"utf16_col":25}},"extent_utf16":{"start":{"line_number":8701,"utf16_col":0},"end":{"line_number":8704,"utf16_col":1}}},{"name":"IteratorGenerator","kind":"class","ident_start":341562,"ident_end":341579,"extent_start":341556,"extent_end":342306,"fully_qualified_name":"IteratorGenerator","ident_utf16":{"start":{"line_number":8708,"utf16_col":6},"end":{"line_number":8708,"utf16_col":23}},"extent_utf16":{"start":{"line_number":8708,"utf16_col":0},"end":{"line_number":8731,"utf16_col":1}}},{"name":"IteratorGenerator","kind":"function","ident_start":341906,"ident_end":341923,"extent_start":341906,"extent_end":342127,"fully_qualified_name":"IteratorGenerator::IteratorGenerator","ident_utf16":{"start":{"line_number":8717,"utf16_col":4},"end":{"line_number":8717,"utf16_col":21}},"extent_utf16":{"start":{"line_number":8717,"utf16_col":4},"end":{"line_number":8721,"utf16_col":5}}},{"name":"next","kind":"function","ident_start":342216,"ident_end":342220,"extent_start":342211,"extent_end":342304,"fully_qualified_name":"IteratorGenerator::next","ident_utf16":{"start":{"line_number":8727,"utf16_col":9},"end":{"line_number":8727,"utf16_col":13}},"extent_utf16":{"start":{"line_number":8727,"utf16_col":4},"end":{"line_number":8730,"utf16_col":5}}},{"name":"from_range","kind":"function","ident_start":342517,"ident_end":342527,"extent_start":342488,"extent_end":342679,"fully_qualified_name":"from_range","ident_utf16":{"start":{"line_number":8736,"utf16_col":29},"end":{"line_number":8736,"utf16_col":39}},"extent_utf16":{"start":{"line_number":8736,"utf16_col":0},"end":{"line_number":8738,"utf16_col":1}}},{"name":"from_range","kind":"function","ident_start":342716,"ident_end":342726,"extent_start":342711,"extent_end":342845,"fully_qualified_name":"from_range","ident_utf16":{"start":{"line_number":8741,"utf16_col":5},"end":{"line_number":8741,"utf16_col":15}},"extent_utf16":{"start":{"line_number":8741,"utf16_col":0},"end":{"line_number":8745,"utf16_col":1}}},{"name":"TestRunInfo","kind":"class","ident_start":343792,"ident_end":343803,"extent_start":343785,"extent_end":343899,"fully_qualified_name":"TestRunInfo","ident_utf16":{"start":{"line_number":8787,"utf16_col":11},"end":{"line_number":8787,"utf16_col":22}},"extent_utf16":{"start":{"line_number":8787,"utf16_col":4},"end":{"line_number":8790,"utf16_col":5}}},{"name":"TestRunInfo","kind":"function","ident_start":343824,"ident_end":343835,"extent_start":343814,"extent_end":343869,"fully_qualified_name":"TestRunInfo::TestRunInfo","ident_utf16":{"start":{"line_number":8788,"utf16_col":18},"end":{"line_number":8788,"utf16_col":29}},"extent_utf16":{"start":{"line_number":8788,"utf16_col":8},"end":{"line_number":8788,"utf16_col":63}}},{"name":"TestCaseHandle","kind":"class","ident_start":344180,"ident_end":344194,"extent_start":344174,"extent_end":344194,"fully_qualified_name":"TestCaseHandle","ident_utf16":{"start":{"line_number":8807,"utf16_col":10},"end":{"line_number":8807,"utf16_col":24}},"extent_utf16":{"start":{"line_number":8807,"utf16_col":4},"end":{"line_number":8807,"utf16_col":24}}},{"name":"IConfig","kind":"class","ident_start":344206,"ident_end":344213,"extent_start":344200,"extent_end":344213,"fully_qualified_name":"IConfig","ident_utf16":{"start":{"line_number":8808,"utf16_col":10},"end":{"line_number":8808,"utf16_col":17}},"extent_utf16":{"start":{"line_number":8808,"utf16_col":4},"end":{"line_number":8808,"utf16_col":17}}},{"name":"IStream","kind":"class","ident_start":344225,"ident_end":344232,"extent_start":344219,"extent_end":344232,"fully_qualified_name":"IStream","ident_utf16":{"start":{"line_number":8809,"utf16_col":10},"end":{"line_number":8809,"utf16_col":17}},"extent_utf16":{"start":{"line_number":8809,"utf16_col":4},"end":{"line_number":8809,"utf16_col":17}}},{"name":"ColourMode","kind":"type","ident_start":344249,"ident_end":344259,"extent_start":344238,"extent_end":344274,"fully_qualified_name":"ColourMode","ident_utf16":{"start":{"line_number":8810,"utf16_col":15},"end":{"line_number":8810,"utf16_col":25}},"extent_utf16":{"start":{"line_number":8810,"utf16_col":4},"end":{"line_number":8810,"utf16_col":40}}},{"name":"ReporterConfig","kind":"class","ident_start":344288,"ident_end":344302,"extent_start":344281,"extent_end":345105,"fully_qualified_name":"ReporterConfig","ident_utf16":{"start":{"line_number":8812,"utf16_col":11},"end":{"line_number":8812,"utf16_col":25}},"extent_utf16":{"start":{"line_number":8812,"utf16_col":4},"end":{"line_number":8832,"utf16_col":5}}},{"name":"ReporterConfig","kind":"function","ident_start":344550,"ident_end":344564,"extent_start":344550,"extent_end":344595,"fully_qualified_name":"ReporterConfig::ReporterConfig","ident_utf16":{"start":{"line_number":8818,"utf16_col":8},"end":{"line_number":8818,"utf16_col":22}},"extent_utf16":{"start":{"line_number":8818,"utf16_col":8},"end":{"line_number":8818,"utf16_col":53}}},{"name":"AssertionStats","kind":"class","ident_start":345119,"ident_end":345133,"extent_start":345112,"extent_end":345725,"fully_qualified_name":"AssertionStats","ident_utf16":{"start":{"line_number":8834,"utf16_col":11},"end":{"line_number":8834,"utf16_col":25}},"extent_utf16":{"start":{"line_number":8834,"utf16_col":4},"end":{"line_number":8847,"utf16_col":5}}},{"name":"AssertionStats","kind":"function","ident_start":345330,"ident_end":345344,"extent_start":345330,"extent_end":345393,"fully_qualified_name":"AssertionStats::AssertionStats","ident_utf16":{"start":{"line_number":8839,"utf16_col":8},"end":{"line_number":8839,"utf16_col":22}},"extent_utf16":{"start":{"line_number":8839,"utf16_col":8},"end":{"line_number":8839,"utf16_col":71}}},{"name":"AssertionStats","kind":"function","ident_start":345402,"ident_end":345416,"extent_start":345402,"extent_end":345465,"fully_qualified_name":"AssertionStats::AssertionStats","ident_utf16":{"start":{"line_number":8840,"utf16_col":8},"end":{"line_number":8840,"utf16_col":22}},"extent_utf16":{"start":{"line_number":8840,"utf16_col":8},"end":{"line_number":8840,"utf16_col":71}}},{"name":"SectionStats","kind":"class","ident_start":345739,"ident_end":345751,"extent_start":345732,"extent_end":346091,"fully_qualified_name":"SectionStats","ident_utf16":{"start":{"line_number":8849,"utf16_col":11},"end":{"line_number":8849,"utf16_col":23}},"extent_utf16":{"start":{"line_number":8849,"utf16_col":4},"end":{"line_number":8859,"utf16_col":5}}},{"name":"TestCaseStats","kind":"class","ident_start":346105,"ident_end":346118,"extent_start":346098,"extent_end":346506,"fully_qualified_name":"TestCaseStats","ident_utf16":{"start":{"line_number":8861,"utf16_col":11},"end":{"line_number":8861,"utf16_col":24}},"extent_utf16":{"start":{"line_number":8861,"utf16_col":4},"end":{"line_number":8873,"utf16_col":5}}},{"name":"TestRunStats","kind":"class","ident_start":346520,"ident_end":346532,"extent_start":346513,"extent_end":346758,"fully_qualified_name":"TestRunStats","ident_utf16":{"start":{"line_number":8875,"utf16_col":11},"end":{"line_number":8875,"utf16_col":23}},"extent_utf16":{"start":{"line_number":8875,"utf16_col":4},"end":{"line_number":8883,"utf16_col":5}}},{"name":"ReporterPreferences","kind":"class","ident_start":347001,"ident_end":347020,"extent_start":346994,"extent_end":347311,"fully_qualified_name":"ReporterPreferences","ident_utf16":{"start":{"line_number":8888,"utf16_col":11},"end":{"line_number":8888,"utf16_col":30}},"extent_utf16":{"start":{"line_number":8888,"utf16_col":4},"end":{"line_number":8895,"utf16_col":5}}},{"name":"IEventListener","kind":"class","ident_start":347761,"ident_end":347775,"extent_start":347755,"extent_end":352237,"fully_qualified_name":"IEventListener","ident_utf16":{"start":{"line_number":8909,"utf16_col":10},"end":{"line_number":8909,"utf16_col":24}},"extent_utf16":{"start":{"line_number":8909,"utf16_col":4},"end":{"line_number":8994,"utf16_col":5}}},{"name":"IEventListener","kind":"function","ident_start":348021,"ident_end":348035,"extent_start":348021,"extent_end":348083,"fully_qualified_name":"IEventListener::IEventListener","ident_utf16":{"start":{"line_number":8917,"utf16_col":8},"end":{"line_number":8917,"utf16_col":22}},"extent_utf16":{"start":{"line_number":8917,"utf16_col":8},"end":{"line_number":8917,"utf16_col":70}}},{"name":"noMatchingTestCases","kind":"method","ident_start":348451,"ident_end":348470,"extent_start":348438,"extent_end":348502,"fully_qualified_name":"IEventListener::noMatchingTestCases","ident_utf16":{"start":{"line_number":8929,"utf16_col":21},"end":{"line_number":8929,"utf16_col":40}},"extent_utf16":{"start":{"line_number":8929,"utf16_col":8},"end":{"line_number":8929,"utf16_col":72}}},{"name":"reportInvalidTestSpec","kind":"method","ident_start":348583,"ident_end":348604,"extent_start":348570,"extent_end":348638,"fully_qualified_name":"IEventListener::reportInvalidTestSpec","ident_utf16":{"start":{"line_number":8931,"utf16_col":21},"end":{"line_number":8931,"utf16_col":42}},"extent_utf16":{"start":{"line_number":8931,"utf16_col":8},"end":{"line_number":8931,"utf16_col":76}}},{"name":"testRunStarting","kind":"method","ident_start":348837,"ident_end":348852,"extent_start":348824,"extent_end":348891,"fully_qualified_name":"IEventListener::testRunStarting","ident_utf16":{"start":{"line_number":8938,"utf16_col":21},"end":{"line_number":8938,"utf16_col":36}},"extent_utf16":{"start":{"line_number":8938,"utf16_col":8},"end":{"line_number":8938,"utf16_col":75}}},{"name":"testCaseStarting","kind":"method","ident_start":348999,"ident_end":349015,"extent_start":348986,"extent_end":349052,"fully_qualified_name":"IEventListener::testCaseStarting","ident_utf16":{"start":{"line_number":8941,"utf16_col":21},"end":{"line_number":8941,"utf16_col":37}},"extent_utf16":{"start":{"line_number":8941,"utf16_col":8},"end":{"line_number":8941,"utf16_col":74}}},{"name":"testCasePartialStarting","kind":"method","ident_start":349166,"ident_end":349189,"extent_start":349153,"extent_end":349247,"fully_qualified_name":"IEventListener::testCasePartialStarting","ident_utf16":{"start":{"line_number":8943,"utf16_col":21},"end":{"line_number":8943,"utf16_col":44}},"extent_utf16":{"start":{"line_number":8943,"utf16_col":8},"end":{"line_number":8943,"utf16_col":102}}},{"name":"sectionStarting","kind":"method","ident_start":349355,"ident_end":349370,"extent_start":349342,"extent_end":349409,"fully_qualified_name":"IEventListener::sectionStarting","ident_utf16":{"start":{"line_number":8945,"utf16_col":21},"end":{"line_number":8945,"utf16_col":36}},"extent_utf16":{"start":{"line_number":8945,"utf16_col":8},"end":{"line_number":8945,"utf16_col":75}}},{"name":"benchmarkPreparing","kind":"method","ident_start":349515,"ident_end":349533,"extent_start":349502,"extent_end":349565,"fully_qualified_name":"IEventListener::benchmarkPreparing","ident_utf16":{"start":{"line_number":8948,"utf16_col":21},"end":{"line_number":8948,"utf16_col":39}},"extent_utf16":{"start":{"line_number":8948,"utf16_col":8},"end":{"line_number":8948,"utf16_col":71}}},{"name":"benchmarkStarting","kind":"method","ident_start":349664,"ident_end":349681,"extent_start":349651,"extent_end":349724,"fully_qualified_name":"IEventListener::benchmarkStarting","ident_utf16":{"start":{"line_number":8950,"utf16_col":21},"end":{"line_number":8950,"utf16_col":38}},"extent_utf16":{"start":{"line_number":8950,"utf16_col":8},"end":{"line_number":8950,"utf16_col":81}}},{"name":"benchmarkEnded","kind":"method","ident_start":349827,"ident_end":349841,"extent_start":349814,"extent_end":349888,"fully_qualified_name":"IEventListener::benchmarkEnded","ident_utf16":{"start":{"line_number":8952,"utf16_col":21},"end":{"line_number":8952,"utf16_col":35}},"extent_utf16":{"start":{"line_number":8952,"utf16_col":8},"end":{"line_number":8952,"utf16_col":82}}},{"name":"benchmarkFailed","kind":"method","ident_start":349976,"ident_end":349991,"extent_start":349963,"extent_end":350023,"fully_qualified_name":"IEventListener::benchmarkFailed","ident_utf16":{"start":{"line_number":8954,"utf16_col":21},"end":{"line_number":8954,"utf16_col":36}},"extent_utf16":{"start":{"line_number":8954,"utf16_col":8},"end":{"line_number":8954,"utf16_col":68}}},{"name":"assertionStarting","kind":"method","ident_start":350111,"ident_end":350128,"extent_start":350098,"extent_end":350171,"fully_qualified_name":"IEventListener::assertionStarting","ident_utf16":{"start":{"line_number":8957,"utf16_col":21},"end":{"line_number":8957,"utf16_col":38}},"extent_utf16":{"start":{"line_number":8957,"utf16_col":8},"end":{"line_number":8957,"utf16_col":81}}},{"name":"assertionEnded","kind":"method","ident_start":350249,"ident_end":350263,"extent_start":350236,"extent_end":350308,"fully_qualified_name":"IEventListener::assertionEnded","ident_utf16":{"start":{"line_number":8960,"utf16_col":21},"end":{"line_number":8960,"utf16_col":35}},"extent_utf16":{"start":{"line_number":8960,"utf16_col":8},"end":{"line_number":8960,"utf16_col":80}}},{"name":"sectionEnded","kind":"method","ident_start":350389,"ident_end":350401,"extent_start":350376,"extent_end":350442,"fully_qualified_name":"IEventListener::sectionEnded","ident_utf16":{"start":{"line_number":8963,"utf16_col":21},"end":{"line_number":8963,"utf16_col":33}},"extent_utf16":{"start":{"line_number":8963,"utf16_col":8},"end":{"line_number":8963,"utf16_col":74}}},{"name":"testCasePartialEnded","kind":"method","ident_start":350556,"ident_end":350576,"extent_start":350543,"extent_end":350639,"fully_qualified_name":"IEventListener::testCasePartialEnded","ident_utf16":{"start":{"line_number":8965,"utf16_col":21},"end":{"line_number":8965,"utf16_col":41}},"extent_utf16":{"start":{"line_number":8965,"utf16_col":8},"end":{"line_number":8965,"utf16_col":104}}},{"name":"testCaseEnded","kind":"method","ident_start":350746,"ident_end":350759,"extent_start":350733,"extent_end":350802,"fully_qualified_name":"IEventListener::testCaseEnded","ident_utf16":{"start":{"line_number":8967,"utf16_col":21},"end":{"line_number":8967,"utf16_col":34}},"extent_utf16":{"start":{"line_number":8967,"utf16_col":8},"end":{"line_number":8967,"utf16_col":77}}},{"name":"testRunEnded","kind":"method","ident_start":351001,"ident_end":351013,"extent_start":350988,"extent_end":351054,"fully_qualified_name":"IEventListener::testRunEnded","ident_utf16":{"start":{"line_number":8973,"utf16_col":21},"end":{"line_number":8973,"utf16_col":33}},"extent_utf16":{"start":{"line_number":8973,"utf16_col":8},"end":{"line_number":8973,"utf16_col":74}}},{"name":"skipTest","kind":"method","ident_start":351349,"ident_end":351357,"extent_start":351336,"extent_end":351394,"fully_qualified_name":"IEventListener::skipTest","ident_utf16":{"start":{"line_number":8981,"utf16_col":21},"end":{"line_number":8981,"utf16_col":29}},"extent_utf16":{"start":{"line_number":8981,"utf16_col":8},"end":{"line_number":8981,"utf16_col":66}}},{"name":"fatalErrorEncountered","kind":"method","ident_start":351492,"ident_end":351513,"extent_start":351479,"extent_end":351537,"fully_qualified_name":"IEventListener::fatalErrorEncountered","ident_utf16":{"start":{"line_number":8984,"utf16_col":21},"end":{"line_number":8984,"utf16_col":42}},"extent_utf16":{"start":{"line_number":8984,"utf16_col":8},"end":{"line_number":8984,"utf16_col":66}}},{"name":"listReporters","kind":"method","ident_start":351651,"ident_end":351664,"extent_start":351638,"extent_end":351723,"fully_qualified_name":"IEventListener::listReporters","ident_utf16":{"start":{"line_number":8987,"utf16_col":21},"end":{"line_number":8987,"utf16_col":34}},"extent_utf16":{"start":{"line_number":8987,"utf16_col":8},"end":{"line_number":8987,"utf16_col":93}}},{"name":"listListeners","kind":"method","ident_start":351835,"ident_end":351848,"extent_start":351822,"extent_end":351907,"fully_qualified_name":"IEventListener::listListeners","ident_utf16":{"start":{"line_number":8989,"utf16_col":21},"end":{"line_number":8989,"utf16_col":34}},"extent_utf16":{"start":{"line_number":8989,"utf16_col":8},"end":{"line_number":8989,"utf16_col":93}}},{"name":"listTests","kind":"method","ident_start":352016,"ident_end":352025,"extent_start":352003,"extent_end":352072,"fully_qualified_name":"IEventListener::listTests","ident_utf16":{"start":{"line_number":8991,"utf16_col":21},"end":{"line_number":8991,"utf16_col":30}},"extent_utf16":{"start":{"line_number":8991,"utf16_col":8},"end":{"line_number":8991,"utf16_col":77}}},{"name":"listTags","kind":"method","ident_start":352184,"ident_end":352192,"extent_start":352171,"extent_end":352231,"fully_qualified_name":"IEventListener::listTags","ident_utf16":{"start":{"line_number":8993,"utf16_col":21},"end":{"line_number":8993,"utf16_col":29}},"extent_utf16":{"start":{"line_number":8993,"utf16_col":8},"end":{"line_number":8993,"utf16_col":68}}},{"name":"IConfig","kind":"class","ident_start":352570,"ident_end":352577,"extent_start":352564,"extent_end":352577,"fully_qualified_name":"IConfig","ident_utf16":{"start":{"line_number":9011,"utf16_col":10},"end":{"line_number":9011,"utf16_col":17}},"extent_utf16":{"start":{"line_number":9011,"utf16_col":4},"end":{"line_number":9011,"utf16_col":17}}},{"name":"IEventListener","kind":"class","ident_start":352589,"ident_end":352603,"extent_start":352583,"extent_end":352603,"fully_qualified_name":"IEventListener","ident_utf16":{"start":{"line_number":9012,"utf16_col":10},"end":{"line_number":9012,"utf16_col":24}},"extent_utf16":{"start":{"line_number":9012,"utf16_col":4},"end":{"line_number":9012,"utf16_col":24}}},{"name":"IReporterFactory","kind":"class","ident_start":352683,"ident_end":352699,"extent_start":352677,"extent_end":352913,"fully_qualified_name":"IReporterFactory","ident_utf16":{"start":{"line_number":9016,"utf16_col":10},"end":{"line_number":9016,"utf16_col":26}},"extent_utf16":{"start":{"line_number":9016,"utf16_col":4},"end":{"line_number":9023,"utf16_col":5}}},{"name":"create","kind":"method","ident_start":352807,"ident_end":352813,"extent_start":352773,"extent_end":352851,"fully_qualified_name":"IReporterFactory::create","ident_utf16":{"start":{"line_number":9021,"utf16_col":8},"end":{"line_number":9021,"utf16_col":14}},"extent_utf16":{"start":{"line_number":9020,"utf16_col":8},"end":{"line_number":9021,"utf16_col":52}}},{"name":"getDescription","kind":"method","ident_start":352880,"ident_end":352894,"extent_start":352860,"extent_end":352907,"fully_qualified_name":"IReporterFactory::getDescription","ident_utf16":{"start":{"line_number":9022,"utf16_col":28},"end":{"line_number":9022,"utf16_col":42}},"extent_utf16":{"start":{"line_number":9022,"utf16_col":8},"end":{"line_number":9022,"utf16_col":55}}},{"name":"EventListenerFactory","kind":"class","ident_start":352996,"ident_end":353016,"extent_start":352990,"extent_end":353399,"fully_qualified_name":"EventListenerFactory","ident_utf16":{"start":{"line_number":9026,"utf16_col":10},"end":{"line_number":9026,"utf16_col":30}},"extent_utf16":{"start":{"line_number":9026,"utf16_col":4},"end":{"line_number":9034,"utf16_col":5}}},{"name":"create","kind":"method","ident_start":353119,"ident_end":353125,"extent_start":353093,"extent_end":353161,"fully_qualified_name":"EventListenerFactory::create","ident_utf16":{"start":{"line_number":9029,"utf16_col":34},"end":{"line_number":9029,"utf16_col":40}},"extent_utf16":{"start":{"line_number":9029,"utf16_col":8},"end":{"line_number":9029,"utf16_col":76}}},{"name":"getName","kind":"method","ident_start":353262,"ident_end":353269,"extent_start":353244,"extent_end":353282,"fully_qualified_name":"EventListenerFactory::getName","ident_utf16":{"start":{"line_number":9031,"utf16_col":26},"end":{"line_number":9031,"utf16_col":33}},"extent_utf16":{"start":{"line_number":9031,"utf16_col":8},"end":{"line_number":9031,"utf16_col":46}}},{"name":"getDescription","kind":"method","ident_start":353366,"ident_end":353380,"extent_start":353346,"extent_end":353393,"fully_qualified_name":"EventListenerFactory::getDescription","ident_utf16":{"start":{"line_number":9033,"utf16_col":28},"end":{"line_number":9033,"utf16_col":42}},"extent_utf16":{"start":{"line_number":9033,"utf16_col":8},"end":{"line_number":9033,"utf16_col":55}}},{"name":"ITagAliasRegistry","kind":"class","ident_start":353667,"ident_end":353684,"extent_start":353661,"extent_end":354007,"fully_qualified_name":"ITagAliasRegistry","ident_utf16":{"start":{"line_number":9049,"utf16_col":10},"end":{"line_number":9049,"utf16_col":27}},"extent_utf16":{"start":{"line_number":9049,"utf16_col":4},"end":{"line_number":9057,"utf16_col":5}}},{"name":"expandAliases","kind":"method","ident_start":353888,"ident_end":353901,"extent_start":353868,"extent_end":353953,"fully_qualified_name":"ITagAliasRegistry::expandAliases","ident_utf16":{"start":{"line_number":9054,"utf16_col":28},"end":{"line_number":9054,"utf16_col":41}},"extent_utf16":{"start":{"line_number":9054,"utf16_col":8},"end":{"line_number":9054,"utf16_col":93}}},{"name":"TestCaseHandle","kind":"class","ident_start":354265,"ident_end":354279,"extent_start":354259,"extent_end":354279,"fully_qualified_name":"TestCaseHandle","ident_utf16":{"start":{"line_number":9072,"utf16_col":10},"end":{"line_number":9072,"utf16_col":24}},"extent_utf16":{"start":{"line_number":9072,"utf16_col":4},"end":{"line_number":9072,"utf16_col":24}}},{"name":"IConfig","kind":"class","ident_start":354291,"ident_end":354298,"extent_start":354285,"extent_end":354298,"fully_qualified_name":"IConfig","ident_utf16":{"start":{"line_number":9073,"utf16_col":10},"end":{"line_number":9073,"utf16_col":17}},"extent_utf16":{"start":{"line_number":9073,"utf16_col":4},"end":{"line_number":9073,"utf16_col":17}}},{"name":"ITestCaseRegistry","kind":"class","ident_start":354311,"ident_end":354328,"extent_start":354305,"extent_end":354767,"fully_qualified_name":"ITestCaseRegistry","ident_utf16":{"start":{"line_number":9075,"utf16_col":10},"end":{"line_number":9075,"utf16_col":27}},"extent_utf16":{"start":{"line_number":9075,"utf16_col":4},"end":{"line_number":9082,"utf16_col":5}}},{"name":"CaseInsensitiveLess","kind":"class","ident_start":355105,"ident_end":355124,"extent_start":355098,"extent_end":355232,"fully_qualified_name":"CaseInsensitiveLess","ident_utf16":{"start":{"line_number":9098,"utf16_col":15},"end":{"line_number":9098,"utf16_col":34}},"extent_utf16":{"start":{"line_number":9098,"utf16_col":8},"end":{"line_number":9101,"utf16_col":9}}},{"name":"CaseInsensitiveEqualTo","kind":"class","ident_start":355317,"ident_end":355339,"extent_start":355310,"extent_end":355447,"fully_qualified_name":"CaseInsensitiveEqualTo","ident_utf16":{"start":{"line_number":9104,"utf16_col":15},"end":{"line_number":9104,"utf16_col":37}},"extent_utf16":{"start":{"line_number":9104,"utf16_col":8},"end":{"line_number":9107,"utf16_col":9}}},{"name":"ColourMode","kind":"type","ident_start":357469,"ident_end":357479,"extent_start":357458,"extent_end":357494,"fully_qualified_name":"ColourMode","ident_utf16":{"start":{"line_number":9191,"utf16_col":15},"end":{"line_number":9191,"utf16_col":25}},"extent_utf16":{"start":{"line_number":9191,"utf16_col":4},"end":{"line_number":9191,"utf16_col":40}}},{"name":"IStream","kind":"class","ident_start":357506,"ident_end":357513,"extent_start":357500,"extent_end":357513,"fully_qualified_name":"IStream","ident_utf16":{"start":{"line_number":9192,"utf16_col":10},"end":{"line_number":9192,"utf16_col":17}},"extent_utf16":{"start":{"line_number":9192,"utf16_col":4},"end":{"line_number":9192,"utf16_col":17}}},{"name":"Colour","kind":"class","ident_start":357527,"ident_end":357533,"extent_start":357520,"extent_end":358431,"fully_qualified_name":"Colour","ident_utf16":{"start":{"line_number":9194,"utf16_col":11},"end":{"line_number":9194,"utf16_col":17}},"extent_utf16":{"start":{"line_number":9194,"utf16_col":4},"end":{"line_number":9231,"utf16_col":5}}},{"name":"Code","kind":"type","ident_start":357549,"ident_end":357553,"extent_start":357544,"extent_end":358424,"fully_qualified_name":"Colour::Code","ident_utf16":{"start":{"line_number":9195,"utf16_col":13},"end":{"line_number":9195,"utf16_col":17}},"extent_utf16":{"start":{"line_number":9195,"utf16_col":8},"end":{"line_number":9230,"utf16_col":9}}},{"name":"ColourImpl","kind":"class","ident_start":358444,"ident_end":358454,"extent_start":358438,"extent_end":360896,"fully_qualified_name":"ColourImpl","ident_utf16":{"start":{"line_number":9233,"utf16_col":10},"end":{"line_number":9233,"utf16_col":20}},"extent_utf16":{"start":{"line_number":9233,"utf16_col":4},"end":{"line_number":9303,"utf16_col":5}}},{"name":"ColourImpl","kind":"function","ident_start":358581,"ident_end":358591,"extent_start":358581,"extent_end":358633,"fully_qualified_name":"ColourImpl::ColourImpl","ident_utf16":{"start":{"line_number":9238,"utf16_col":8},"end":{"line_number":9238,"utf16_col":18}},"extent_utf16":{"start":{"line_number":9238,"utf16_col":8},"end":{"line_number":9238,"utf16_col":60}}},{"name":"ColourGuard","kind":"class","ident_start":358767,"ident_end":358778,"extent_start":358761,"extent_end":360500,"fully_qualified_name":"ColourImpl::ColourGuard","ident_utf16":{"start":{"line_number":9242,"utf16_col":14},"end":{"line_number":9242,"utf16_col":25}},"extent_utf16":{"start":{"line_number":9242,"utf16_col":8},"end":{"line_number":9290,"utf16_col":9}}},{"name":"ColourGuard","kind":"function","ident_start":359084,"ident_end":359095,"extent_start":359084,"extent_end":359131,"fully_qualified_name":"ColourImpl::ColourGuard::ColourGuard","ident_utf16":{"start":{"line_number":9252,"utf16_col":12},"end":{"line_number":9252,"utf16_col":23}},"extent_utf16":{"start":{"line_number":9252,"utf16_col":12},"end":{"line_number":9252,"utf16_col":59}}},{"name":"engageImpl","kind":"method","ident_start":360454,"ident_end":360464,"extent_start":360449,"extent_end":360489,"fully_qualified_name":"ColourImpl::ColourGuard::engageImpl","ident_utf16":{"start":{"line_number":9288,"utf16_col":17},"end":{"line_number":9288,"utf16_col":27}},"extent_utf16":{"start":{"line_number":9288,"utf16_col":12},"end":{"line_number":9288,"utf16_col":52}}},{"name":"guardColour","kind":"method","ident_start":360774,"ident_end":360785,"extent_start":360762,"extent_end":360813,"fully_qualified_name":"ColourImpl::guardColour","ident_utf16":{"start":{"line_number":9299,"utf16_col":20},"end":{"line_number":9299,"utf16_col":31}},"extent_utf16":{"start":{"line_number":9299,"utf16_col":8},"end":{"line_number":9299,"utf16_col":59}}},{"name":"use","kind":"method","ident_start":360849,"ident_end":360852,"extent_start":360836,"extent_end":360890,"fully_qualified_name":"ColourImpl::use","ident_utf16":{"start":{"line_number":9302,"utf16_col":21},"end":{"line_number":9302,"utf16_col":24}},"extent_utf16":{"start":{"line_number":9302,"utf16_col":8},"end":{"line_number":9302,"utf16_col":62}}},{"name":"empty","kind":"function","ident_start":362630,"ident_end":362635,"extent_start":362615,"extent_end":362721,"fully_qualified_name":"empty","ident_utf16":{"start":{"line_number":9363,"utf16_col":19},"end":{"line_number":9363,"utf16_col":24}},"extent_utf16":{"start":{"line_number":9363,"utf16_col":4},"end":{"line_number":9365,"utf16_col":5}}},{"name":"empty","kind":"function","ident_start":362782,"ident_end":362787,"extent_start":362767,"extent_end":362983,"fully_qualified_name":"empty","ident_utf16":{"start":{"line_number":9367,"utf16_col":19},"end":{"line_number":9367,"utf16_col":24}},"extent_utf16":{"start":{"line_number":9367,"utf16_col":4},"end":{"line_number":9372,"utf16_col":5}}},{"name":"empty","kind":"function","ident_start":363029,"ident_end":363034,"extent_start":363014,"extent_end":363114,"fully_qualified_name":"empty","ident_utf16":{"start":{"line_number":9374,"utf16_col":19},"end":{"line_number":9374,"utf16_col":24}},"extent_utf16":{"start":{"line_number":9374,"utf16_col":4},"end":{"line_number":9376,"utf16_col":5}}},{"name":"size","kind":"function","ident_start":363170,"ident_end":363174,"extent_start":363155,"extent_end":363258,"fully_qualified_name":"size","ident_utf16":{"start":{"line_number":9380,"utf16_col":19},"end":{"line_number":9380,"utf16_col":23}},"extent_utf16":{"start":{"line_number":9380,"utf16_col":4},"end":{"line_number":9382,"utf16_col":5}}},{"name":"size","kind":"function","ident_start":363326,"ident_end":363330,"extent_start":363304,"extent_end":363380,"fully_qualified_name":"size","ident_utf16":{"start":{"line_number":9384,"utf16_col":26},"end":{"line_number":9384,"utf16_col":30}},"extent_utf16":{"start":{"line_number":9384,"utf16_col":4},"end":{"line_number":9386,"utf16_col":5}}},{"name":"throw_exception","kind":"function","ident_start":365996,"ident_end":366011,"extent_start":365974,"extent_end":366049,"fully_qualified_name":"throw_exception","ident_utf16":{"start":{"line_number":9480,"utf16_col":9},"end":{"line_number":9480,"utf16_col":24}},"extent_utf16":{"start":{"line_number":9479,"utf16_col":4},"end":{"line_number":9482,"utf16_col":5}}},{"name":"EnumValuesRegistry","kind":"class","ident_start":367320,"ident_end":367338,"extent_start":367314,"extent_end":367591,"fully_qualified_name":"EnumValuesRegistry","ident_utf16":{"start":{"line_number":9528,"utf16_col":14},"end":{"line_number":9528,"utf16_col":32}},"extent_utf16":{"start":{"line_number":9528,"utf16_col":8},"end":{"line_number":9533,"utf16_col":9}}},{"name":"ErrnoGuard","kind":"class","ident_start":367961,"ident_end":367971,"extent_start":367955,"extent_end":368147,"fully_qualified_name":"ErrnoGuard","ident_utf16":{"start":{"line_number":9551,"utf16_col":10},"end":{"line_number":9551,"utf16_col":20}},"extent_utf16":{"start":{"line_number":9551,"utf16_col":4},"end":{"line_number":9559,"utf16_col":5}}},{"name":"ExceptionTranslatorRegistry","kind":"class","ident_start":368378,"ident_end":368405,"extent_start":368372,"extent_end":368723,"fully_qualified_name":"ExceptionTranslatorRegistry","ident_utf16":{"start":{"line_number":9575,"utf16_col":10},"end":{"line_number":9575,"utf16_col":37}},"extent_utf16":{"start":{"line_number":9575,"utf16_col":4},"end":{"line_number":9583,"utf16_col":5}}},{"name":"registerTranslator","kind":"method","ident_start":368520,"ident_end":368538,"extent_start":368515,"extent_end":368596,"fully_qualified_name":"ExceptionTranslatorRegistry::registerTranslator","ident_utf16":{"start":{"line_number":9578,"utf16_col":13},"end":{"line_number":9578,"utf16_col":31}},"extent_utf16":{"start":{"line_number":9578,"utf16_col":8},"end":{"line_number":9578,"utf16_col":89}}},{"name":"translateActiveException","kind":"method","ident_start":368617,"ident_end":368641,"extent_start":368605,"extent_end":368659,"fully_qualified_name":"ExceptionTranslatorRegistry::translateActiveException","ident_utf16":{"start":{"line_number":9579,"utf16_col":20},"end":{"line_number":9579,"utf16_col":44}},"extent_utf16":{"start":{"line_number":9579,"utf16_col":8},"end":{"line_number":9579,"utf16_col":62}}},{"name":"FatalConditionHandler","kind":"class","ident_start":369387,"ident_end":369408,"extent_start":369381,"extent_end":370230,"fully_qualified_name":"FatalConditionHandler","ident_utf16":{"start":{"line_number":9606,"utf16_col":10},"end":{"line_number":9606,"utf16_col":31}},"extent_utf16":{"start":{"line_number":9606,"utf16_col":4},"end":{"line_number":9630,"utf16_col":5}}},{"name":"engage_platform","kind":"method","ident_start":369635,"ident_end":369650,"extent_start":369630,"extent_end":369653,"fully_qualified_name":"FatalConditionHandler::engage_platform","ident_utf16":{"start":{"line_number":9612,"utf16_col":13},"end":{"line_number":9612,"utf16_col":28}},"extent_utf16":{"start":{"line_number":9612,"utf16_col":8},"end":{"line_number":9612,"utf16_col":31}}},{"name":"disengage_platform","kind":"method","ident_start":369667,"ident_end":369685,"extent_start":369662,"extent_end":369697,"fully_qualified_name":"FatalConditionHandler::disengage_platform","ident_utf16":{"start":{"line_number":9613,"utf16_col":13},"end":{"line_number":9613,"utf16_col":31}},"extent_utf16":{"start":{"line_number":9613,"utf16_col":8},"end":{"line_number":9613,"utf16_col":43}}},{"name":"engage","kind":"function","ident_start":369863,"ident_end":369869,"extent_start":369858,"extent_end":370016,"fully_qualified_name":"FatalConditionHandler::engage","ident_utf16":{"start":{"line_number":9619,"utf16_col":13},"end":{"line_number":9619,"utf16_col":19}},"extent_utf16":{"start":{"line_number":9619,"utf16_col":8},"end":{"line_number":9623,"utf16_col":9}}},{"name":"disengage","kind":"function","ident_start":370031,"ident_end":370040,"extent_start":370026,"extent_end":370224,"fully_qualified_name":"FatalConditionHandler::disengage","ident_utf16":{"start":{"line_number":9625,"utf16_col":13},"end":{"line_number":9625,"utf16_col":22}},"extent_utf16":{"start":{"line_number":9625,"utf16_col":8},"end":{"line_number":9629,"utf16_col":9}}},{"name":"FatalConditionHandlerGuard","kind":"class","ident_start":370313,"ident_end":370339,"extent_start":370307,"extent_end":370631,"fully_qualified_name":"FatalConditionHandlerGuard","ident_utf16":{"start":{"line_number":9633,"utf16_col":10},"end":{"line_number":9633,"utf16_col":36}},"extent_utf16":{"start":{"line_number":9633,"utf16_col":4},"end":{"line_number":9643,"utf16_col":5}}},{"name":"FatalConditionHandlerGuard","kind":"function","ident_start":370404,"ident_end":370430,"extent_start":370404,"extent_end":370539,"fully_qualified_name":"FatalConditionHandlerGuard::FatalConditionHandlerGuard","ident_utf16":{"start":{"line_number":9636,"utf16_col":8},"end":{"line_number":9636,"utf16_col":34}},"extent_utf16":{"start":{"line_number":9636,"utf16_col":8},"end":{"line_number":9639,"utf16_col":9}}},{"name":"ulpDistance","kind":"function","ident_start":372393,"ident_end":372404,"extent_start":372384,"extent_end":374129,"fully_qualified_name":"ulpDistance","ident_utf16":{"start":{"line_number":9701,"utf16_col":13},"end":{"line_number":9701,"utf16_col":24}},"extent_utf16":{"start":{"line_number":9701,"utf16_col":4},"end":{"line_number":9740,"utf16_col":5}}},{"name":"find_sentinel","kind":"function","ident_start":374939,"ident_end":374952,"extent_start":374909,"extent_end":375303,"fully_qualified_name":"find_sentinel","ident_utf16":{"start":{"line_number":9781,"utf16_col":20},"end":{"line_number":9781,"utf16_col":33}},"extent_utf16":{"start":{"line_number":9780,"utf16_col":8},"end":{"line_number":9790,"utf16_col":9}}},{"name":"count_sentinel","kind":"function","ident_start":375492,"ident_end":375506,"extent_start":375459,"extent_end":375909,"fully_qualified_name":"count_sentinel","ident_utf16":{"start":{"line_number":9797,"utf16_col":23},"end":{"line_number":9797,"utf16_col":37}},"extent_utf16":{"start":{"line_number":9796,"utf16_col":8},"end":{"line_number":9807,"utf16_col":9}}},{"name":"sentinel_distance","kind":"function","ident_start":376107,"ident_end":376124,"extent_start":375978,"extent_end":376346,"fully_qualified_name":"sentinel_distance","ident_utf16":{"start":{"line_number":9813,"utf16_col":8},"end":{"line_number":9813,"utf16_col":25}},"extent_utf16":{"start":{"line_number":9810,"utf16_col":8},"end":{"line_number":9820,"utf16_col":9}}},{"name":"sentinel_distance","kind":"function","ident_start":376421,"ident_end":376438,"extent_start":376396,"extent_end":376590,"fully_qualified_name":"sentinel_distance","ident_utf16":{"start":{"line_number":9823,"utf16_col":33},"end":{"line_number":9823,"utf16_col":50}},"extent_utf16":{"start":{"line_number":9823,"utf16_col":8},"end":{"line_number":9826,"utf16_col":9}}},{"name":"check_element_counts","kind":"function","ident_start":376812,"ident_end":376832,"extent_start":376797,"extent_end":378016,"fully_qualified_name":"check_element_counts","ident_utf16":{"start":{"line_number":9833,"utf16_col":23},"end":{"line_number":9833,"utf16_col":43}},"extent_utf16":{"start":{"line_number":9833,"utf16_col":8},"end":{"line_number":9860,"utf16_col":9}}},{"name":"is_permutation","kind":"function","ident_start":378238,"ident_end":378252,"extent_start":378223,"extent_end":379718,"fully_qualified_name":"is_permutation","ident_utf16":{"start":{"line_number":9867,"utf16_col":23},"end":{"line_number":9867,"utf16_col":37}},"extent_utf16":{"start":{"line_number":9867,"utf16_col":8},"end":{"line_number":9895,"utf16_col":9}}},{"name":"IStream","kind":"class","ident_start":379990,"ident_end":379997,"extent_start":379984,"extent_end":380666,"fully_qualified_name":"IStream","ident_utf16":{"start":{"line_number":9914,"utf16_col":10},"end":{"line_number":9914,"utf16_col":17}},"extent_utf16":{"start":{"line_number":9914,"utf16_col":4},"end":{"line_number":9930,"utf16_col":5}}},{"name":"isConsole","kind":"function","ident_start":380625,"ident_end":380634,"extent_start":380612,"extent_end":380660,"fully_qualified_name":"IStream::isConsole","ident_utf16":{"start":{"line_number":9929,"utf16_col":21},"end":{"line_number":9929,"utf16_col":30}},"extent_utf16":{"start":{"line_number":9929,"utf16_col":8},"end":{"line_number":9929,"utf16_col":56}}},{"name":"JsonObjectWriter","kind":"class","ident_start":381274,"ident_end":381290,"extent_start":381268,"extent_end":381290,"fully_qualified_name":"JsonObjectWriter","ident_utf16":{"start":{"line_number":9958,"utf16_col":10},"end":{"line_number":9958,"utf16_col":26}},"extent_utf16":{"start":{"line_number":9958,"utf16_col":4},"end":{"line_number":9958,"utf16_col":26}}},{"name":"JsonArrayWriter","kind":"class","ident_start":381302,"ident_end":381317,"extent_start":381296,"extent_end":381317,"fully_qualified_name":"JsonArrayWriter","ident_utf16":{"start":{"line_number":9959,"utf16_col":10},"end":{"line_number":9959,"utf16_col":25}},"extent_utf16":{"start":{"line_number":9959,"utf16_col":4},"end":{"line_number":9959,"utf16_col":25}}},{"name":"JsonUtils","kind":"class","ident_start":381331,"ident_end":381340,"extent_start":381324,"extent_end":381598,"fully_qualified_name":"JsonUtils","ident_utf16":{"start":{"line_number":9961,"utf16_col":11},"end":{"line_number":9961,"utf16_col":20}},"extent_utf16":{"start":{"line_number":9961,"utf16_col":4},"end":{"line_number":9966,"utf16_col":5}}},{"name":"JsonValueWriter","kind":"class","ident_start":381611,"ident_end":381626,"extent_start":381605,"extent_end":382804,"fully_qualified_name":"JsonValueWriter","ident_utf16":{"start":{"line_number":9968,"utf16_col":10},"end":{"line_number":9968,"utf16_col":25}},"extent_utf16":{"start":{"line_number":9968,"utf16_col":4},"end":{"line_number":10001,"utf16_col":5}}},{"name":"writeObject","kind":"method","ident_start":381785,"ident_end":381796,"extent_start":381768,"extent_end":381802,"fully_qualified_name":"JsonValueWriter::writeObject","ident_utf16":{"start":{"line_number":9973,"utf16_col":25},"end":{"line_number":9973,"utf16_col":36}},"extent_utf16":{"start":{"line_number":9973,"utf16_col":8},"end":{"line_number":9973,"utf16_col":42}}},{"name":"writeArray","kind":"method","ident_start":381827,"ident_end":381837,"extent_start":381811,"extent_end":381843,"fully_qualified_name":"JsonValueWriter::writeArray","ident_utf16":{"start":{"line_number":9974,"utf16_col":24},"end":{"line_number":9974,"utf16_col":34}},"extent_utf16":{"start":{"line_number":9974,"utf16_col":8},"end":{"line_number":9974,"utf16_col":40}}},{"name":"write","kind":"function","ident_start":381888,"ident_end":381893,"extent_start":381883,"extent_end":381989,"fully_qualified_name":"JsonValueWriter::write","ident_utf16":{"start":{"line_number":9977,"utf16_col":13},"end":{"line_number":9977,"utf16_col":18}},"extent_utf16":{"start":{"line_number":9977,"utf16_col":8},"end":{"line_number":9979,"utf16_col":9}}},{"name":"write","kind":"method","ident_start":382003,"ident_end":382008,"extent_start":381998,"extent_end":382031,"fully_qualified_name":"JsonValueWriter::write","ident_utf16":{"start":{"line_number":9980,"utf16_col":13},"end":{"line_number":9980,"utf16_col":18}},"extent_utf16":{"start":{"line_number":9980,"utf16_col":8},"end":{"line_number":9980,"utf16_col":41}}},{"name":"write","kind":"method","ident_start":382045,"ident_end":382050,"extent_start":382040,"extent_end":382068,"fully_qualified_name":"JsonValueWriter::write","ident_utf16":{"start":{"line_number":9981,"utf16_col":13},"end":{"line_number":9981,"utf16_col":18}},"extent_utf16":{"start":{"line_number":9981,"utf16_col":8},"end":{"line_number":9981,"utf16_col":36}}},{"name":"writeImpl","kind":"method","ident_start":382096,"ident_end":382105,"extent_start":382091,"extent_end":382137,"fully_qualified_name":"JsonValueWriter::writeImpl","ident_utf16":{"start":{"line_number":9984,"utf16_col":13},"end":{"line_number":9984,"utf16_col":22}},"extent_utf16":{"start":{"line_number":9984,"utf16_col":8},"end":{"line_number":9984,"utf16_col":54}}},{"name":"writeImpl","kind":"function","ident_start":382550,"ident_end":382559,"extent_start":382545,"extent_end":382694,"fully_qualified_name":"JsonValueWriter::writeImpl","ident_utf16":{"start":{"line_number":9993,"utf16_col":13},"end":{"line_number":9993,"utf16_col":22}},"extent_utf16":{"start":{"line_number":9993,"utf16_col":8},"end":{"line_number":9996,"utf16_col":9}}},{"name":"JsonObjectWriter","kind":"class","ident_start":382817,"ident_end":382833,"extent_start":382811,"extent_end":383339,"fully_qualified_name":"JsonObjectWriter","ident_utf16":{"start":{"line_number":10003,"utf16_col":10},"end":{"line_number":10003,"utf16_col":26}},"extent_utf16":{"start":{"line_number":10003,"utf16_col":4},"end":{"line_number":10020,"utf16_col":5}}},{"name":"write","kind":"method","ident_start":383163,"ident_end":383168,"extent_start":383147,"extent_end":383186,"fully_qualified_name":"JsonObjectWriter::write","ident_utf16":{"start":{"line_number":10013,"utf16_col":24},"end":{"line_number":10013,"utf16_col":29}},"extent_utf16":{"start":{"line_number":10013,"utf16_col":8},"end":{"line_number":10013,"utf16_col":47}}},{"name":"JsonArrayWriter","kind":"class","ident_start":383352,"ident_end":383367,"extent_start":383346,"extent_end":384352,"fully_qualified_name":"JsonArrayWriter","ident_utf16":{"start":{"line_number":10022,"utf16_col":10},"end":{"line_number":10022,"utf16_col":25}},"extent_utf16":{"start":{"line_number":10022,"utf16_col":4},"end":{"line_number":10056,"utf16_col":5}}},{"name":"writeObject","kind":"method","ident_start":383691,"ident_end":383702,"extent_start":383674,"extent_end":383705,"fully_qualified_name":"JsonArrayWriter::writeObject","ident_utf16":{"start":{"line_number":10032,"utf16_col":25},"end":{"line_number":10032,"utf16_col":36}},"extent_utf16":{"start":{"line_number":10032,"utf16_col":8},"end":{"line_number":10032,"utf16_col":39}}},{"name":"writeArray","kind":"method","ident_start":383730,"ident_end":383740,"extent_start":383714,"extent_end":383743,"fully_qualified_name":"JsonArrayWriter::writeArray","ident_utf16":{"start":{"line_number":10033,"utf16_col":24},"end":{"line_number":10033,"utf16_col":34}},"extent_utf16":{"start":{"line_number":10033,"utf16_col":8},"end":{"line_number":10033,"utf16_col":37}}},{"name":"LeakDetector","kind":"class","ident_start":384532,"ident_end":384544,"extent_start":384525,"extent_end":384601,"fully_qualified_name":"LeakDetector","ident_utf16":{"start":{"line_number":10068,"utf16_col":11},"end":{"line_number":10068,"utf16_col":23}},"extent_utf16":{"start":{"line_number":10068,"utf16_col":4},"end":{"line_number":10071,"utf16_col":5}}},{"name":"IEventListener","kind":"class","ident_start":384781,"ident_end":384795,"extent_start":384775,"extent_end":384795,"fully_qualified_name":"IEventListener","ident_utf16":{"start":{"line_number":10087,"utf16_col":10},"end":{"line_number":10087,"utf16_col":24}},"extent_utf16":{"start":{"line_number":10087,"utf16_col":4},"end":{"line_number":10087,"utf16_col":24}}},{"name":"Config","kind":"class","ident_start":384807,"ident_end":384813,"extent_start":384801,"extent_end":384813,"fully_qualified_name":"Config","ident_utf16":{"start":{"line_number":10088,"utf16_col":10},"end":{"line_number":10088,"utf16_col":16}},"extent_utf16":{"start":{"line_number":10088,"utf16_col":4},"end":{"line_number":10088,"utf16_col":16}}},{"name":"ReporterDescription","kind":"class","ident_start":384828,"ident_end":384847,"extent_start":384821,"extent_end":384894,"fully_qualified_name":"ReporterDescription","ident_utf16":{"start":{"line_number":10091,"utf16_col":11},"end":{"line_number":10091,"utf16_col":30}},"extent_utf16":{"start":{"line_number":10091,"utf16_col":4},"end":{"line_number":10093,"utf16_col":5}}},{"name":"ListenerDescription","kind":"class","ident_start":384907,"ident_end":384926,"extent_start":384900,"extent_end":384991,"fully_qualified_name":"ListenerDescription","ident_utf16":{"start":{"line_number":10094,"utf16_col":11},"end":{"line_number":10094,"utf16_col":30}},"extent_utf16":{"start":{"line_number":10094,"utf16_col":4},"end":{"line_number":10097,"utf16_col":5}}},{"name":"TagInfo","kind":"class","ident_start":385005,"ident_end":385012,"extent_start":384998,"extent_end":385162,"fully_qualified_name":"TagInfo","ident_utf16":{"start":{"line_number":10099,"utf16_col":11},"end":{"line_number":10099,"utf16_col":18}},"extent_utf16":{"start":{"line_number":10099,"utf16_col":4},"end":{"line_number":10105,"utf16_col":5}}},{"name":"OutputRedirect","kind":"class","ident_start":385448,"ident_end":385462,"extent_start":385442,"extent_end":386583,"fully_qualified_name":"OutputRedirect","ident_utf16":{"start":{"line_number":10123,"utf16_col":10},"end":{"line_number":10123,"utf16_col":24}},"extent_utf16":{"start":{"line_number":10123,"utf16_col":4},"end":{"line_number":10154,"utf16_col":5}}},{"name":"activateImpl","kind":"method","ident_start":385525,"ident_end":385537,"extent_start":385512,"extent_end":385544,"fully_qualified_name":"OutputRedirect::activateImpl","ident_utf16":{"start":{"line_number":10125,"utf16_col":21},"end":{"line_number":10125,"utf16_col":33}},"extent_utf16":{"start":{"line_number":10125,"utf16_col":8},"end":{"line_number":10125,"utf16_col":40}}},{"name":"deactivateImpl","kind":"method","ident_start":385566,"ident_end":385580,"extent_start":385553,"extent_end":385587,"fully_qualified_name":"OutputRedirect::deactivateImpl","ident_utf16":{"start":{"line_number":10126,"utf16_col":21},"end":{"line_number":10126,"utf16_col":35}},"extent_utf16":{"start":{"line_number":10126,"utf16_col":8},"end":{"line_number":10126,"utf16_col":42}}},{"name":"Kind","kind":"type","ident_start":385613,"ident_end":385617,"extent_start":385608,"extent_end":385892,"fully_qualified_name":"OutputRedirect::Kind","ident_utf16":{"start":{"line_number":10128,"utf16_col":13},"end":{"line_number":10128,"utf16_col":17}},"extent_utf16":{"start":{"line_number":10128,"utf16_col":8},"end":{"line_number":10135,"utf16_col":9}}},{"name":"getStdout","kind":"method","ident_start":386068,"ident_end":386077,"extent_start":386048,"extent_end":386084,"fully_qualified_name":"OutputRedirect::getStdout","ident_utf16":{"start":{"line_number":10140,"utf16_col":28},"end":{"line_number":10140,"utf16_col":37}},"extent_utf16":{"start":{"line_number":10140,"utf16_col":8},"end":{"line_number":10140,"utf16_col":44}}},{"name":"getStderr","kind":"method","ident_start":386113,"ident_end":386122,"extent_start":386093,"extent_end":386129,"fully_qualified_name":"OutputRedirect::getStderr","ident_utf16":{"start":{"line_number":10141,"utf16_col":28},"end":{"line_number":10141,"utf16_col":37}},"extent_utf16":{"start":{"line_number":10141,"utf16_col":8},"end":{"line_number":10141,"utf16_col":44}}},{"name":"clearBuffers","kind":"method","ident_start":386151,"ident_end":386163,"extent_start":386138,"extent_end":386170,"fully_qualified_name":"OutputRedirect::clearBuffers","ident_utf16":{"start":{"line_number":10142,"utf16_col":21},"end":{"line_number":10142,"utf16_col":33}},"extent_utf16":{"start":{"line_number":10142,"utf16_col":8},"end":{"line_number":10142,"utf16_col":40}}},{"name":"isActive","kind":"function","ident_start":386184,"ident_end":386192,"extent_start":386179,"extent_end":386229,"fully_qualified_name":"OutputRedirect::isActive","ident_utf16":{"start":{"line_number":10143,"utf16_col":13},"end":{"line_number":10143,"utf16_col":21}},"extent_utf16":{"start":{"line_number":10143,"utf16_col":8},"end":{"line_number":10143,"utf16_col":58}}},{"name":"activate","kind":"function","ident_start":386243,"ident_end":386251,"extent_start":386238,"extent_end":386403,"fully_qualified_name":"OutputRedirect::activate","ident_utf16":{"start":{"line_number":10144,"utf16_col":13},"end":{"line_number":10144,"utf16_col":21}},"extent_utf16":{"start":{"line_number":10144,"utf16_col":8},"end":{"line_number":10148,"utf16_col":9}}},{"name":"deactivate","kind":"function","ident_start":386417,"ident_end":386427,"extent_start":386412,"extent_end":386577,"fully_qualified_name":"OutputRedirect::deactivate","ident_utf16":{"start":{"line_number":10149,"utf16_col":13},"end":{"line_number":10149,"utf16_col":23}},"extent_utf16":{"start":{"line_number":10149,"utf16_col":8},"end":{"line_number":10153,"utf16_col":9}}},{"name":"RedirectGuard","kind":"class","ident_start":386729,"ident_end":386742,"extent_start":386723,"extent_end":387317,"fully_qualified_name":"RedirectGuard","ident_utf16":{"start":{"line_number":10159,"utf16_col":10},"end":{"line_number":10159,"utf16_col":23}},"extent_utf16":{"start":{"line_number":10159,"utf16_col":4},"end":{"line_number":10175,"utf16_col":5}}},{"name":"RedirectGuard","kind":"function","ident_start":387005,"ident_end":387018,"extent_start":387005,"extent_end":387052,"fully_qualified_name":"RedirectGuard::RedirectGuard","ident_utf16":{"start":{"line_number":10169,"utf16_col":8},"end":{"line_number":10169,"utf16_col":21}},"extent_utf16":{"start":{"line_number":10169,"utf16_col":8},"end":{"line_number":10169,"utf16_col":55}}},{"name":"IEventListener","kind":"class","ident_start":388181,"ident_end":388195,"extent_start":388175,"extent_end":388195,"fully_qualified_name":"IEventListener","ident_utf16":{"start":{"line_number":10215,"utf16_col":10},"end":{"line_number":10215,"utf16_col":24}},"extent_utf16":{"start":{"line_number":10215,"utf16_col":4},"end":{"line_number":10215,"utf16_col":24}}},{"name":"IReporterFactory","kind":"class","ident_start":388273,"ident_end":388289,"extent_start":388267,"extent_end":388289,"fully_qualified_name":"IReporterFactory","ident_utf16":{"start":{"line_number":10217,"utf16_col":10},"end":{"line_number":10217,"utf16_col":26}},"extent_utf16":{"start":{"line_number":10217,"utf16_col":4},"end":{"line_number":10217,"utf16_col":26}}},{"name":"EventListenerFactory","kind":"class","ident_start":388398,"ident_end":388418,"extent_start":388392,"extent_end":388418,"fully_qualified_name":"EventListenerFactory","ident_utf16":{"start":{"line_number":10220,"utf16_col":10},"end":{"line_number":10220,"utf16_col":30}},"extent_utf16":{"start":{"line_number":10220,"utf16_col":4},"end":{"line_number":10220,"utf16_col":30}}},{"name":"ReporterRegistry","kind":"class","ident_start":388431,"ident_end":388447,"extent_start":388425,"extent_end":389223,"fully_qualified_name":"ReporterRegistry","ident_utf16":{"start":{"line_number":10222,"utf16_col":10},"end":{"line_number":10222,"utf16_col":26}},"extent_utf16":{"start":{"line_number":10222,"utf16_col":4},"end":{"line_number":10246,"utf16_col":5}}},{"name":"create","kind":"method","ident_start":388655,"ident_end":388661,"extent_start":388637,"extent_end":388754,"fully_qualified_name":"ReporterRegistry::create","ident_utf16":{"start":{"line_number":10230,"utf16_col":26},"end":{"line_number":10230,"utf16_col":32}},"extent_utf16":{"start":{"line_number":10230,"utf16_col":8},"end":{"line_number":10231,"utf16_col":66}}},{"name":"registerReporter","kind":"method","ident_start":388769,"ident_end":388785,"extent_start":388764,"extent_end":388873,"fully_qualified_name":"ReporterRegistry::registerReporter","ident_utf16":{"start":{"line_number":10233,"utf16_col":13},"end":{"line_number":10233,"utf16_col":29}},"extent_utf16":{"start":{"line_number":10233,"utf16_col":8},"end":{"line_number":10234,"utf16_col":61}}},{"name":"registerListener","kind":"method","ident_start":388896,"ident_end":388912,"extent_start":388883,"extent_end":388965,"fully_qualified_name":"ReporterRegistry::registerListener","ident_utf16":{"start":{"line_number":10237,"utf16_col":8},"end":{"line_number":10237,"utf16_col":24}},"extent_utf16":{"start":{"line_number":10236,"utf16_col":8},"end":{"line_number":10237,"utf16_col":77}}},{"name":"NameAndLocation","kind":"class","ident_start":389570,"ident_end":389585,"extent_start":389563,"extent_end":390442,"fully_qualified_name":"NameAndLocation","ident_utf16":{"start":{"line_number":10268,"utf16_col":11},"end":{"line_number":10268,"utf16_col":26}},"extent_utf16":{"start":{"line_number":10268,"utf16_col":4},"end":{"line_number":10285,"utf16_col":5}}},{"name":"NameAndLocationRef","kind":"class","ident_start":390743,"ident_end":390761,"extent_start":390736,"extent_end":391779,"fully_qualified_name":"NameAndLocationRef","ident_utf16":{"start":{"line_number":10294,"utf16_col":11},"end":{"line_number":10294,"utf16_col":29}},"extent_utf16":{"start":{"line_number":10294,"utf16_col":4},"end":{"line_number":10316,"utf16_col":5}}},{"name":"NameAndLocationRef","kind":"function","ident_start":390840,"ident_end":390858,"extent_start":390830,"extent_end":390994,"fully_qualified_name":"NameAndLocationRef::NameAndLocationRef","ident_utf16":{"start":{"line_number":10298,"utf16_col":18},"end":{"line_number":10298,"utf16_col":36}},"extent_utf16":{"start":{"line_number":10298,"utf16_col":8},"end":{"line_number":10300,"utf16_col":51}}},{"name":"ITracker","kind":"class","ident_start":391792,"ident_end":391800,"extent_start":391786,"extent_end":391800,"fully_qualified_name":"ITracker","ident_utf16":{"start":{"line_number":10318,"utf16_col":10},"end":{"line_number":10318,"utf16_col":18}},"extent_utf16":{"start":{"line_number":10318,"utf16_col":4},"end":{"line_number":10318,"utf16_col":18}}},{"name":"ITracker","kind":"class","ident_start":391875,"ident_end":391883,"extent_start":391869,"extent_end":394467,"fully_qualified_name":"ITracker","ident_utf16":{"start":{"line_number":10322,"utf16_col":10},"end":{"line_number":10322,"utf16_col":18}},"extent_utf16":{"start":{"line_number":10322,"utf16_col":4},"end":{"line_number":10408,"utf16_col":5}}},{"name":"CycleState","kind":"type","ident_start":392010,"ident_end":392020,"extent_start":392005,"extent_end":392193,"fully_qualified_name":"ITracker::CycleState","ident_utf16":{"start":{"line_number":10328,"utf16_col":13},"end":{"line_number":10328,"utf16_col":23}},"extent_utf16":{"start":{"line_number":10328,"utf16_col":8},"end":{"line_number":10335,"utf16_col":9}}},{"name":"ITracker","kind":"function","ident_start":392328,"ident_end":392336,"extent_start":392328,"extent_end":392486,"fully_qualified_name":"ITracker::ITracker","ident_utf16":{"start":{"line_number":10342,"utf16_col":8},"end":{"line_number":10342,"utf16_col":16}},"extent_utf16":{"start":{"line_number":10342,"utf16_col":8},"end":{"line_number":10345,"utf16_col":10}}},{"name":"isComplete","kind":"method","ident_start":392864,"ident_end":392874,"extent_start":392851,"extent_end":392887,"fully_qualified_name":"ITracker::isComplete","ident_utf16":{"start":{"line_number":10362,"utf16_col":21},"end":{"line_number":10362,"utf16_col":31}},"extent_utf16":{"start":{"line_number":10362,"utf16_col":8},"end":{"line_number":10362,"utf16_col":44}}},{"name":"isSuccessfullyCompleted","kind":"function","ident_start":392968,"ident_end":392991,"extent_start":392963,"extent_end":393067,"fully_qualified_name":"ITracker::isSuccessfullyCompleted","ident_utf16":{"start":{"line_number":10364,"utf16_col":13},"end":{"line_number":10364,"utf16_col":36}},"extent_utf16":{"start":{"line_number":10364,"utf16_col":8},"end":{"line_number":10366,"utf16_col":9}}},{"name":"isOpen","kind":"method","ident_start":393155,"ident_end":393161,"extent_start":393150,"extent_end":393170,"fully_qualified_name":"ITracker::isOpen","ident_utf16":{"start":{"line_number":10368,"utf16_col":13},"end":{"line_number":10368,"utf16_col":19}},"extent_utf16":{"start":{"line_number":10368,"utf16_col":8},"end":{"line_number":10368,"utf16_col":28}}},{"name":"hasStarted","kind":"method","ident_start":393233,"ident_end":393243,"extent_start":393228,"extent_end":393252,"fully_qualified_name":"ITracker::hasStarted","ident_utf16":{"start":{"line_number":10370,"utf16_col":13},"end":{"line_number":10370,"utf16_col":23}},"extent_utf16":{"start":{"line_number":10370,"utf16_col":8},"end":{"line_number":10370,"utf16_col":32}}},{"name":"close","kind":"method","ident_start":393294,"ident_end":393299,"extent_start":393281,"extent_end":393306,"fully_qualified_name":"ITracker::close","ident_utf16":{"start":{"line_number":10373,"utf16_col":21},"end":{"line_number":10373,"utf16_col":26}},"extent_utf16":{"start":{"line_number":10373,"utf16_col":8},"end":{"line_number":10373,"utf16_col":33}}},{"name":"fail","kind":"method","ident_start":393353,"ident_end":393357,"extent_start":393340,"extent_end":393364,"fully_qualified_name":"ITracker::fail","ident_utf16":{"start":{"line_number":10374,"utf16_col":21},"end":{"line_number":10374,"utf16_col":25}},"extent_utf16":{"start":{"line_number":10374,"utf16_col":8},"end":{"line_number":10374,"utf16_col":32}}},{"name":"markAsNeedingAnotherRun","kind":"method","ident_start":393378,"ident_end":393401,"extent_start":393373,"extent_end":393404,"fully_qualified_name":"ITracker::markAsNeedingAnotherRun","ident_utf16":{"start":{"line_number":10375,"utf16_col":13},"end":{"line_number":10375,"utf16_col":36}},"extent_utf16":{"start":{"line_number":10375,"utf16_col":8},"end":{"line_number":10375,"utf16_col":39}}},{"name":"addChild","kind":"method","ident_start":393458,"ident_end":393466,"extent_start":393453,"extent_end":393490,"fully_qualified_name":"ITracker::addChild","ident_utf16":{"start":{"line_number":10378,"utf16_col":13},"end":{"line_number":10378,"utf16_col":21}},"extent_utf16":{"start":{"line_number":10378,"utf16_col":8},"end":{"line_number":10378,"utf16_col":45}}},{"name":"hasChildren","kind":"function","ident_start":393768,"ident_end":393779,"extent_start":393763,"extent_end":393839,"fully_qualified_name":"ITracker::hasChildren","ident_utf16":{"start":{"line_number":10386,"utf16_col":13},"end":{"line_number":10386,"utf16_col":24}},"extent_utf16":{"start":{"line_number":10386,"utf16_col":8},"end":{"line_number":10388,"utf16_col":9}}},{"name":"openChild","kind":"method","ident_start":393936,"ident_end":393945,"extent_start":393931,"extent_end":393948,"fully_qualified_name":"ITracker::openChild","ident_utf16":{"start":{"line_number":10392,"utf16_col":13},"end":{"line_number":10392,"utf16_col":22}},"extent_utf16":{"start":{"line_number":10392,"utf16_col":8},"end":{"line_number":10392,"utf16_col":25}}},{"name":"isSectionTracker","kind":"method","ident_start":394178,"ident_end":394194,"extent_start":394165,"extent_end":394203,"fully_qualified_name":"ITracker::isSectionTracker","ident_utf16":{"start":{"line_number":10400,"utf16_col":21},"end":{"line_number":10400,"utf16_col":37}},"extent_utf16":{"start":{"line_number":10400,"utf16_col":8},"end":{"line_number":10400,"utf16_col":46}}},{"name":"isGeneratorTracker","kind":"method","ident_start":394434,"ident_end":394452,"extent_start":394421,"extent_end":394461,"fully_qualified_name":"ITracker::isGeneratorTracker","ident_utf16":{"start":{"line_number":10407,"utf16_col":21},"end":{"line_number":10407,"utf16_col":39}},"extent_utf16":{"start":{"line_number":10407,"utf16_col":8},"end":{"line_number":10407,"utf16_col":48}}},{"name":"TrackerContext","kind":"class","ident_start":394480,"ident_end":394494,"extent_start":394474,"extent_end":395093,"fully_qualified_name":"TrackerContext","ident_utf16":{"start":{"line_number":10410,"utf16_col":10},"end":{"line_number":10410,"utf16_col":24}},"extent_utf16":{"start":{"line_number":10410,"utf16_col":4},"end":{"line_number":10435,"utf16_col":5}}},{"name":"RunState","kind":"type","ident_start":394511,"ident_end":394519,"extent_start":394506,"extent_end":394605,"fully_qualified_name":"TrackerContext::RunState","ident_utf16":{"start":{"line_number":10412,"utf16_col":13},"end":{"line_number":10412,"utf16_col":21}},"extent_utf16":{"start":{"line_number":10412,"utf16_col":8},"end":{"line_number":10416,"utf16_col":9}}},{"name":"startCycle","kind":"function","ident_start":394789,"ident_end":394799,"extent_start":394784,"extent_end":394901,"fully_qualified_name":"TrackerContext::startCycle","ident_utf16":{"start":{"line_number":10426,"utf16_col":13},"end":{"line_number":10426,"utf16_col":23}},"extent_utf16":{"start":{"line_number":10426,"utf16_col":8},"end":{"line_number":10429,"utf16_col":9}}},{"name":"completeCycle","kind":"method","ident_start":394915,"ident_end":394928,"extent_start":394910,"extent_end":394931,"fully_qualified_name":"TrackerContext::completeCycle","ident_utf16":{"start":{"line_number":10430,"utf16_col":13},"end":{"line_number":10430,"utf16_col":26}},"extent_utf16":{"start":{"line_number":10430,"utf16_col":8},"end":{"line_number":10430,"utf16_col":29}}},{"name":"completedCycle","kind":"method","ident_start":394946,"ident_end":394960,"extent_start":394941,"extent_end":394969,"fully_qualified_name":"TrackerContext::completedCycle","ident_utf16":{"start":{"line_number":10432,"utf16_col":13},"end":{"line_number":10432,"utf16_col":27}},"extent_utf16":{"start":{"line_number":10432,"utf16_col":8},"end":{"line_number":10432,"utf16_col":36}}},{"name":"setCurrentTracker","kind":"method","ident_start":395048,"ident_end":395065,"extent_start":395043,"extent_end":395087,"fully_qualified_name":"TrackerContext::setCurrentTracker","ident_utf16":{"start":{"line_number":10434,"utf16_col":13},"end":{"line_number":10434,"utf16_col":30}},"extent_utf16":{"start":{"line_number":10434,"utf16_col":8},"end":{"line_number":10434,"utf16_col":52}}},{"name":"TrackerBase","kind":"class","ident_start":395106,"ident_end":395117,"extent_start":395100,"extent_end":395497,"fully_qualified_name":"TrackerBase","ident_utf16":{"start":{"line_number":10437,"utf16_col":10},"end":{"line_number":10437,"utf16_col":21}},"extent_utf16":{"start":{"line_number":10437,"utf16_col":4},"end":{"line_number":10455,"utf16_col":5}}},{"name":"isComplete","kind":"method","ident_start":395309,"ident_end":395319,"extent_start":395304,"extent_end":395337,"fully_qualified_name":"TrackerBase::isComplete","ident_utf16":{"start":{"line_number":10445,"utf16_col":13},"end":{"line_number":10445,"utf16_col":23}},"extent_utf16":{"start":{"line_number":10445,"utf16_col":8},"end":{"line_number":10445,"utf16_col":41}}},{"name":"open","kind":"method","ident_start":395352,"ident_end":395356,"extent_start":395347,"extent_end":395359,"fully_qualified_name":"TrackerBase::open","ident_utf16":{"start":{"line_number":10447,"utf16_col":13},"end":{"line_number":10447,"utf16_col":17}},"extent_utf16":{"start":{"line_number":10447,"utf16_col":8},"end":{"line_number":10447,"utf16_col":20}}},{"name":"close","kind":"method","ident_start":395374,"ident_end":395379,"extent_start":395369,"extent_end":395391,"fully_qualified_name":"TrackerBase::close","ident_utf16":{"start":{"line_number":10449,"utf16_col":13},"end":{"line_number":10449,"utf16_col":18}},"extent_utf16":{"start":{"line_number":10449,"utf16_col":8},"end":{"line_number":10449,"utf16_col":30}}},{"name":"fail","kind":"method","ident_start":395405,"ident_end":395409,"extent_start":395400,"extent_end":395421,"fully_qualified_name":"TrackerBase::fail","ident_utf16":{"start":{"line_number":10450,"utf16_col":13},"end":{"line_number":10450,"utf16_col":17}},"extent_utf16":{"start":{"line_number":10450,"utf16_col":8},"end":{"line_number":10450,"utf16_col":29}}},{"name":"moveToParent","kind":"method","ident_start":395449,"ident_end":395461,"extent_start":395444,"extent_end":395464,"fully_qualified_name":"TrackerBase::moveToParent","ident_utf16":{"start":{"line_number":10453,"utf16_col":13},"end":{"line_number":10453,"utf16_col":25}},"extent_utf16":{"start":{"line_number":10453,"utf16_col":8},"end":{"line_number":10453,"utf16_col":28}}},{"name":"moveToThis","kind":"method","ident_start":395478,"ident_end":395488,"extent_start":395473,"extent_end":395491,"fully_qualified_name":"TrackerBase::moveToThis","ident_utf16":{"start":{"line_number":10454,"utf16_col":13},"end":{"line_number":10454,"utf16_col":23}},"extent_utf16":{"start":{"line_number":10454,"utf16_col":8},"end":{"line_number":10454,"utf16_col":26}}},{"name":"SectionTracker","kind":"class","ident_start":395510,"ident_end":395524,"extent_start":395504,"extent_end":396661,"fully_qualified_name":"SectionTracker","ident_utf16":{"start":{"line_number":10457,"utf16_col":10},"end":{"line_number":10457,"utf16_col":24}},"extent_utf16":{"start":{"line_number":10457,"utf16_col":4},"end":{"line_number":10481,"utf16_col":5}}},{"name":"isSectionTracker","kind":"method","ident_start":396064,"ident_end":396080,"extent_start":396059,"extent_end":396098,"fully_qualified_name":"SectionTracker::isSectionTracker","ident_utf16":{"start":{"line_number":10467,"utf16_col":13},"end":{"line_number":10467,"utf16_col":29}},"extent_utf16":{"start":{"line_number":10467,"utf16_col":8},"end":{"line_number":10467,"utf16_col":47}}},{"name":"isComplete","kind":"method","ident_start":396113,"ident_end":396123,"extent_start":396108,"extent_end":396141,"fully_qualified_name":"SectionTracker::isComplete","ident_utf16":{"start":{"line_number":10469,"utf16_col":13},"end":{"line_number":10469,"utf16_col":23}},"extent_utf16":{"start":{"line_number":10469,"utf16_col":8},"end":{"line_number":10469,"utf16_col":41}}},{"name":"tryOpen","kind":"method","ident_start":396263,"ident_end":396270,"extent_start":396258,"extent_end":396273,"fully_qualified_name":"SectionTracker::tryOpen","ident_utf16":{"start":{"line_number":10473,"utf16_col":13},"end":{"line_number":10473,"utf16_col":20}},"extent_utf16":{"start":{"line_number":10473,"utf16_col":8},"end":{"line_number":10473,"utf16_col":23}}},{"name":"addInitialFilters","kind":"method","ident_start":396288,"ident_end":396305,"extent_start":396283,"extent_end":396349,"fully_qualified_name":"SectionTracker::addInitialFilters","ident_utf16":{"start":{"line_number":10475,"utf16_col":13},"end":{"line_number":10475,"utf16_col":30}},"extent_utf16":{"start":{"line_number":10475,"utf16_col":8},"end":{"line_number":10475,"utf16_col":74}}},{"name":"addNextFilters","kind":"method","ident_start":396363,"ident_end":396377,"extent_start":396358,"extent_end":396419,"fully_qualified_name":"SectionTracker::addNextFilters","ident_utf16":{"start":{"line_number":10476,"utf16_col":13},"end":{"line_number":10476,"utf16_col":27}},"extent_utf16":{"start":{"line_number":10476,"utf16_col":8},"end":{"line_number":10476,"utf16_col":69}}},{"name":"trimmedName","kind":"method","ident_start":396635,"ident_end":396646,"extent_start":396625,"extent_end":396655,"fully_qualified_name":"SectionTracker::trimmedName","ident_utf16":{"start":{"line_number":10480,"utf16_col":18},"end":{"line_number":10480,"utf16_col":29}},"extent_utf16":{"start":{"line_number":10480,"utf16_col":8},"end":{"line_number":10480,"utf16_col":38}}},{"name":"IGeneratorTracker","kind":"class","ident_start":396930,"ident_end":396947,"extent_start":396924,"extent_end":396947,"fully_qualified_name":"IGeneratorTracker","ident_utf16":{"start":{"line_number":10497,"utf16_col":10},"end":{"line_number":10497,"utf16_col":27}},"extent_utf16":{"start":{"line_number":10497,"utf16_col":4},"end":{"line_number":10497,"utf16_col":27}}},{"name":"IConfig","kind":"class","ident_start":396959,"ident_end":396966,"extent_start":396953,"extent_end":396966,"fully_qualified_name":"IConfig","ident_utf16":{"start":{"line_number":10498,"utf16_col":10},"end":{"line_number":10498,"utf16_col":17}},"extent_utf16":{"start":{"line_number":10498,"utf16_col":4},"end":{"line_number":10498,"utf16_col":17}}},{"name":"IEventListener","kind":"class","ident_start":396978,"ident_end":396992,"extent_start":396972,"extent_end":396992,"fully_qualified_name":"IEventListener","ident_utf16":{"start":{"line_number":10499,"utf16_col":10},"end":{"line_number":10499,"utf16_col":24}},"extent_utf16":{"start":{"line_number":10499,"utf16_col":4},"end":{"line_number":10499,"utf16_col":24}}},{"name":"OutputRedirect","kind":"class","ident_start":397070,"ident_end":397084,"extent_start":397064,"extent_end":397084,"fully_qualified_name":"OutputRedirect","ident_utf16":{"start":{"line_number":10501,"utf16_col":10},"end":{"line_number":10501,"utf16_col":24}},"extent_utf16":{"start":{"line_number":10501,"utf16_col":4},"end":{"line_number":10501,"utf16_col":24}}},{"name":"RunContext","kind":"class","ident_start":397178,"ident_end":397188,"extent_start":397172,"extent_end":401703,"fully_qualified_name":"RunContext","ident_utf16":{"start":{"line_number":10505,"utf16_col":10},"end":{"line_number":10505,"utf16_col":20}},"extent_utf16":{"start":{"line_number":10505,"utf16_col":4},"end":{"line_number":10626,"utf16_col":5}}},{"name":"RunContext","kind":"function","ident_start":397242,"ident_end":397252,"extent_start":397242,"extent_end":397283,"fully_qualified_name":"RunContext::RunContext","ident_utf16":{"start":{"line_number":10508,"utf16_col":8},"end":{"line_number":10508,"utf16_col":18}},"extent_utf16":{"start":{"line_number":10508,"utf16_col":8},"end":{"line_number":10508,"utf16_col":49}}},{"name":"runTest","kind":"method","ident_start":397481,"ident_end":397488,"extent_start":397474,"extent_end":397521,"fully_qualified_name":"RunContext::runTest","ident_utf16":{"start":{"line_number":10515,"utf16_col":15},"end":{"line_number":10515,"utf16_col":22}},"extent_utf16":{"start":{"line_number":10515,"utf16_col":8},"end":{"line_number":10515,"utf16_col":55}}},{"name":"handleExpr","kind":"method","ident_start":397597,"ident_end":397607,"extent_start":397592,"extent_end":397768,"fully_qualified_name":"RunContext::handleExpr","ident_utf16":{"start":{"line_number":10520,"utf16_col":13},"end":{"line_number":10520,"utf16_col":23}},"extent_utf16":{"start":{"line_number":10520,"utf16_col":8},"end":{"line_number":10523,"utf16_col":59}}},{"name":"handleMessage","kind":"method","ident_start":397782,"ident_end":397795,"extent_start":397777,"extent_end":397995,"fully_qualified_name":"RunContext::handleMessage","ident_utf16":{"start":{"line_number":10524,"utf16_col":13},"end":{"line_number":10524,"utf16_col":26}},"extent_utf16":{"start":{"line_number":10524,"utf16_col":8},"end":{"line_number":10528,"utf16_col":59}}},{"name":"handleUnexpectedExceptionNotThrown","kind":"method","ident_start":398009,"ident_end":398043,"extent_start":398004,"extent_end":398150,"fully_qualified_name":"RunContext::handleUnexpectedExceptionNotThrown","ident_utf16":{"start":{"line_number":10529,"utf16_col":13},"end":{"line_number":10529,"utf16_col":47}},"extent_utf16":{"start":{"line_number":10529,"utf16_col":8},"end":{"line_number":10531,"utf16_col":59}}},{"name":"handleUnexpectedInflightException","kind":"method","ident_start":398164,"ident_end":398197,"extent_start":398159,"extent_end":398347,"fully_qualified_name":"RunContext::handleUnexpectedInflightException","ident_utf16":{"start":{"line_number":10532,"utf16_col":13},"end":{"line_number":10532,"utf16_col":46}},"extent_utf16":{"start":{"line_number":10532,"utf16_col":8},"end":{"line_number":10535,"utf16_col":59}}},{"name":"handleIncomplete","kind":"method","ident_start":398361,"ident_end":398377,"extent_start":398356,"extent_end":398435,"fully_qualified_name":"RunContext::handleIncomplete","ident_utf16":{"start":{"line_number":10536,"utf16_col":13},"end":{"line_number":10536,"utf16_col":29}},"extent_utf16":{"start":{"line_number":10536,"utf16_col":8},"end":{"line_number":10537,"utf16_col":57}}},{"name":"handleNonExpr","kind":"method","ident_start":398449,"ident_end":398462,"extent_start":398444,"extent_end":398619,"fully_qualified_name":"RunContext::handleNonExpr","ident_utf16":{"start":{"line_number":10538,"utf16_col":13},"end":{"line_number":10538,"utf16_col":26}},"extent_utf16":{"start":{"line_number":10538,"utf16_col":8},"end":{"line_number":10541,"utf16_col":59}}},{"name":"notifyAssertionStarted","kind":"method","ident_start":398634,"ident_end":398656,"extent_start":398629,"extent_end":398695,"fully_qualified_name":"RunContext::notifyAssertionStarted","ident_utf16":{"start":{"line_number":10543,"utf16_col":13},"end":{"line_number":10543,"utf16_col":35}},"extent_utf16":{"start":{"line_number":10543,"utf16_col":8},"end":{"line_number":10543,"utf16_col":74}}},{"name":"sectionStarted","kind":"method","ident_start":398709,"ident_end":398723,"extent_start":398704,"extent_end":398875,"fully_qualified_name":"RunContext::sectionStarted","ident_utf16":{"start":{"line_number":10544,"utf16_col":13},"end":{"line_number":10544,"utf16_col":27}},"extent_utf16":{"start":{"line_number":10544,"utf16_col":8},"end":{"line_number":10546,"utf16_col":59}}},{"name":"sectionEnded","kind":"method","ident_start":398890,"ident_end":398902,"extent_start":398885,"extent_end":398940,"fully_qualified_name":"RunContext::sectionEnded","ident_utf16":{"start":{"line_number":10548,"utf16_col":13},"end":{"line_number":10548,"utf16_col":25}},"extent_utf16":{"start":{"line_number":10548,"utf16_col":8},"end":{"line_number":10548,"utf16_col":63}}},{"name":"sectionEndedEarly","kind":"method","ident_start":398954,"ident_end":398971,"extent_start":398949,"extent_end":399009,"fully_qualified_name":"RunContext::sectionEndedEarly","ident_utf16":{"start":{"line_number":10549,"utf16_col":13},"end":{"line_number":10549,"utf16_col":30}},"extent_utf16":{"start":{"line_number":10549,"utf16_col":8},"end":{"line_number":10549,"utf16_col":68}}},{"name":"benchmarkPreparing","kind":"method","ident_start":399377,"ident_end":399395,"extent_start":399372,"extent_end":399423,"fully_qualified_name":"RunContext::benchmarkPreparing","ident_utf16":{"start":{"line_number":10560,"utf16_col":13},"end":{"line_number":10560,"utf16_col":31}},"extent_utf16":{"start":{"line_number":10560,"utf16_col":8},"end":{"line_number":10560,"utf16_col":59}}},{"name":"benchmarkStarting","kind":"method","ident_start":399437,"ident_end":399454,"extent_start":399432,"extent_end":399493,"fully_qualified_name":"RunContext::benchmarkStarting","ident_utf16":{"start":{"line_number":10561,"utf16_col":13},"end":{"line_number":10561,"utf16_col":30}},"extent_utf16":{"start":{"line_number":10561,"utf16_col":8},"end":{"line_number":10561,"utf16_col":69}}},{"name":"benchmarkEnded","kind":"method","ident_start":399507,"ident_end":399521,"extent_start":399502,"extent_end":399564,"fully_qualified_name":"RunContext::benchmarkEnded","ident_utf16":{"start":{"line_number":10562,"utf16_col":13},"end":{"line_number":10562,"utf16_col":27}},"extent_utf16":{"start":{"line_number":10562,"utf16_col":8},"end":{"line_number":10562,"utf16_col":70}}},{"name":"benchmarkFailed","kind":"method","ident_start":399578,"ident_end":399593,"extent_start":399573,"extent_end":399622,"fully_qualified_name":"RunContext::benchmarkFailed","ident_utf16":{"start":{"line_number":10563,"utf16_col":13},"end":{"line_number":10563,"utf16_col":28}},"extent_utf16":{"start":{"line_number":10563,"utf16_col":8},"end":{"line_number":10563,"utf16_col":57}}},{"name":"pushScopedMessage","kind":"method","ident_start":399637,"ident_end":399654,"extent_start":399632,"extent_end":399694,"fully_qualified_name":"RunContext::pushScopedMessage","ident_utf16":{"start":{"line_number":10565,"utf16_col":13},"end":{"line_number":10565,"utf16_col":30}},"extent_utf16":{"start":{"line_number":10565,"utf16_col":8},"end":{"line_number":10565,"utf16_col":70}}},{"name":"popScopedMessage","kind":"method","ident_start":399708,"ident_end":399724,"extent_start":399703,"extent_end":399764,"fully_qualified_name":"RunContext::popScopedMessage","ident_utf16":{"start":{"line_number":10566,"utf16_col":13},"end":{"line_number":10566,"utf16_col":29}},"extent_utf16":{"start":{"line_number":10566,"utf16_col":8},"end":{"line_number":10566,"utf16_col":69}}},{"name":"emplaceUnscopedMessage","kind":"method","ident_start":399779,"ident_end":399801,"extent_start":399774,"extent_end":399839,"fully_qualified_name":"RunContext::emplaceUnscopedMessage","ident_utf16":{"start":{"line_number":10568,"utf16_col":13},"end":{"line_number":10568,"utf16_col":35}},"extent_utf16":{"start":{"line_number":10568,"utf16_col":8},"end":{"line_number":10568,"utf16_col":73}}},{"name":"getCurrentTestName","kind":"method","ident_start":399861,"ident_end":399879,"extent_start":399849,"extent_end":399897,"fully_qualified_name":"RunContext::getCurrentTestName","ident_utf16":{"start":{"line_number":10570,"utf16_col":20},"end":{"line_number":10570,"utf16_col":38}},"extent_utf16":{"start":{"line_number":10570,"utf16_col":8},"end":{"line_number":10570,"utf16_col":56}}},{"name":"exceptionEarlyReported","kind":"method","ident_start":399976,"ident_end":399998,"extent_start":399971,"extent_end":400010,"fully_qualified_name":"RunContext::exceptionEarlyReported","ident_utf16":{"start":{"line_number":10574,"utf16_col":13},"end":{"line_number":10574,"utf16_col":35}},"extent_utf16":{"start":{"line_number":10574,"utf16_col":8},"end":{"line_number":10574,"utf16_col":47}}},{"name":"handleFatalErrorCondition","kind":"method","ident_start":400025,"ident_end":400050,"extent_start":400020,"extent_end":400081,"fully_qualified_name":"RunContext::handleFatalErrorCondition","ident_utf16":{"start":{"line_number":10576,"utf16_col":13},"end":{"line_number":10576,"utf16_col":38}},"extent_utf16":{"start":{"line_number":10576,"utf16_col":8},"end":{"line_number":10576,"utf16_col":69}}},{"name":"lastAssertionPassed","kind":"method","ident_start":400096,"ident_end":400115,"extent_start":400091,"extent_end":400127,"fully_qualified_name":"RunContext::lastAssertionPassed","ident_utf16":{"start":{"line_number":10578,"utf16_col":13},"end":{"line_number":10578,"utf16_col":32}},"extent_utf16":{"start":{"line_number":10578,"utf16_col":8},"end":{"line_number":10578,"utf16_col":44}}},{"name":"assertionPassed","kind":"method","ident_start":400142,"ident_end":400157,"extent_start":400137,"extent_end":400169,"fully_qualified_name":"RunContext::assertionPassed","ident_utf16":{"start":{"line_number":10580,"utf16_col":13},"end":{"line_number":10580,"utf16_col":28}},"extent_utf16":{"start":{"line_number":10580,"utf16_col":8},"end":{"line_number":10580,"utf16_col":40}}},{"name":"aborting","kind":"method","ident_start":400244,"ident_end":400252,"extent_start":400239,"extent_end":400261,"fully_qualified_name":"RunContext::aborting","ident_utf16":{"start":{"line_number":10584,"utf16_col":13},"end":{"line_number":10584,"utf16_col":21}},"extent_utf16":{"start":{"line_number":10584,"utf16_col":8},"end":{"line_number":10584,"utf16_col":30}}},{"name":"runCurrentTest","kind":"method","ident_start":400290,"ident_end":400304,"extent_start":400285,"extent_end":400307,"fully_qualified_name":"RunContext::runCurrentTest","ident_utf16":{"start":{"line_number":10588,"utf16_col":13},"end":{"line_number":10588,"utf16_col":27}},"extent_utf16":{"start":{"line_number":10588,"utf16_col":8},"end":{"line_number":10588,"utf16_col":30}}},{"name":"invokeActiveTestCase","kind":"method","ident_start":400321,"ident_end":400341,"extent_start":400316,"extent_end":400344,"fully_qualified_name":"RunContext::invokeActiveTestCase","ident_utf16":{"start":{"line_number":10589,"utf16_col":13},"end":{"line_number":10589,"utf16_col":33}},"extent_utf16":{"start":{"line_number":10589,"utf16_col":8},"end":{"line_number":10589,"utf16_col":36}}},{"name":"resetAssertionInfo","kind":"method","ident_start":400359,"ident_end":400377,"extent_start":400354,"extent_end":400380,"fully_qualified_name":"RunContext::resetAssertionInfo","ident_utf16":{"start":{"line_number":10591,"utf16_col":13},"end":{"line_number":10591,"utf16_col":31}},"extent_utf16":{"start":{"line_number":10591,"utf16_col":8},"end":{"line_number":10591,"utf16_col":34}}},{"name":"testForMissingAssertions","kind":"method","ident_start":400394,"ident_end":400418,"extent_start":400389,"extent_end":400441,"fully_qualified_name":"RunContext::testForMissingAssertions","ident_utf16":{"start":{"line_number":10592,"utf16_col":13},"end":{"line_number":10592,"utf16_col":37}},"extent_utf16":{"start":{"line_number":10592,"utf16_col":8},"end":{"line_number":10592,"utf16_col":60}}},{"name":"assertionEnded","kind":"method","ident_start":400456,"ident_end":400470,"extent_start":400451,"extent_end":400499,"fully_qualified_name":"RunContext::assertionEnded","ident_utf16":{"start":{"line_number":10594,"utf16_col":13},"end":{"line_number":10594,"utf16_col":27}},"extent_utf16":{"start":{"line_number":10594,"utf16_col":8},"end":{"line_number":10594,"utf16_col":56}}},{"name":"reportExpr","kind":"method","ident_start":400513,"ident_end":400523,"extent_start":400508,"extent_end":400710,"fully_qualified_name":"RunContext::reportExpr","ident_utf16":{"start":{"line_number":10595,"utf16_col":13},"end":{"line_number":10595,"utf16_col":23}},"extent_utf16":{"start":{"line_number":10595,"utf16_col":8},"end":{"line_number":10599,"utf16_col":35}}},{"name":"populateReaction","kind":"method","ident_start":400725,"ident_end":400741,"extent_start":400720,"extent_end":400773,"fully_qualified_name":"RunContext::populateReaction","ident_utf16":{"start":{"line_number":10601,"utf16_col":13},"end":{"line_number":10601,"utf16_col":29}},"extent_utf16":{"start":{"line_number":10601,"utf16_col":8},"end":{"line_number":10601,"utf16_col":61}}},{"name":"handleUnfinishedSections","kind":"method","ident_start":400802,"ident_end":400826,"extent_start":400797,"extent_end":400829,"fully_qualified_name":"RunContext::handleUnfinishedSections","ident_utf16":{"start":{"line_number":10605,"utf16_col":13},"end":{"line_number":10605,"utf16_col":37}},"extent_utf16":{"start":{"line_number":10605,"utf16_col":8},"end":{"line_number":10605,"utf16_col":40}}},{"name":"createShard","kind":"function","ident_start":402041,"ident_end":402052,"extent_start":402031,"extent_end":402929,"fully_qualified_name":"createShard","ident_utf16":{"start":{"line_number":10645,"utf16_col":14},"end":{"line_number":10645,"utf16_col":25}},"extent_utf16":{"start":{"line_number":10645,"utf16_col":4},"end":{"line_number":10664,"utf16_col":5}}},{"name":"ISingleton","kind":"class","ident_start":403081,"ident_end":403091,"extent_start":403074,"extent_end":403143,"fully_qualified_name":"ISingleton","ident_utf16":{"start":{"line_number":10676,"utf16_col":11},"end":{"line_number":10676,"utf16_col":21}},"extent_utf16":{"start":{"line_number":10676,"utf16_col":4},"end":{"line_number":10678,"utf16_col":5}}},{"name":"Singleton","kind":"class","ident_start":403354,"ident_end":403363,"extent_start":403348,"extent_end":403894,"fully_qualified_name":"Singleton","ident_utf16":{"start":{"line_number":10686,"utf16_col":10},"end":{"line_number":10686,"utf16_col":19}},"extent_utf16":{"start":{"line_number":10686,"utf16_col":4},"end":{"line_number":10704,"utf16_col":5}}},{"name":"getInternal","kind":"function","ident_start":403423,"ident_end":403434,"extent_start":403411,"extent_end":403679,"fully_qualified_name":"Singleton::getInternal","ident_utf16":{"start":{"line_number":10688,"utf16_col":20},"end":{"line_number":10688,"utf16_col":31}},"extent_utf16":{"start":{"line_number":10688,"utf16_col":8},"end":{"line_number":10695,"utf16_col":9}}},{"name":"get","kind":"function","ident_start":403713,"ident_end":403716,"extent_start":403701,"extent_end":403786,"fully_qualified_name":"Singleton::get","ident_utf16":{"start":{"line_number":10698,"utf16_col":20},"end":{"line_number":10698,"utf16_col":23}},"extent_utf16":{"start":{"line_number":10698,"utf16_col":8},"end":{"line_number":10700,"utf16_col":9}}},{"name":"getMutable","kind":"function","ident_start":403807,"ident_end":403817,"extent_start":403795,"extent_end":403888,"fully_qualified_name":"Singleton::getMutable","ident_utf16":{"start":{"line_number":10701,"utf16_col":20},"end":{"line_number":10701,"utf16_col":30}},"extent_utf16":{"start":{"line_number":10701,"utf16_col":8},"end":{"line_number":10703,"utf16_col":9}}},{"name":"StartupExceptionRegistry","kind":"class","ident_start":404140,"ident_end":404164,"extent_start":404134,"extent_end":404447,"fully_qualified_name":"StartupExceptionRegistry","ident_utf16":{"start":{"line_number":10720,"utf16_col":10},"end":{"line_number":10720,"utf16_col":34}},"extent_utf16":{"start":{"line_number":10720,"utf16_col":4},"end":{"line_number":10728,"utf16_col":5}}},{"name":"pluralise","kind":"class","ident_start":406192,"ident_end":406201,"extent_start":406186,"extent_end":406506,"fully_qualified_name":"pluralise","ident_utf16":{"start":{"line_number":10790,"utf16_col":10},"end":{"line_number":10790,"utf16_col":19}},"extent_utf16":{"start":{"line_number":10790,"utf16_col":4},"end":{"line_number":10801,"utf16_col":5}}},{"name":"pluralise","kind":"function","ident_start":406293,"ident_end":406302,"extent_start":406283,"extent_end":406407,"fully_qualified_name":"pluralise::pluralise","ident_utf16":{"start":{"line_number":10795,"utf16_col":18},"end":{"line_number":10795,"utf16_col":27}},"extent_utf16":{"start":{"line_number":10795,"utf16_col":8},"end":{"line_number":10798,"utf16_col":10}}},{"name":"TagAliasRegistry","kind":"class","ident_start":406739,"ident_end":406755,"extent_start":406733,"extent_end":407172,"fully_qualified_name":"TagAliasRegistry","ident_utf16":{"start":{"line_number":10817,"utf16_col":10},"end":{"line_number":10817,"utf16_col":26}},"extent_utf16":{"start":{"line_number":10817,"utf16_col":4},"end":{"line_number":10826,"utf16_col":5}}},{"name":"expandAliases","kind":"method","ident_start":406928,"ident_end":406941,"extent_start":406916,"extent_end":406998,"fully_qualified_name":"TagAliasRegistry::expandAliases","ident_utf16":{"start":{"line_number":10821,"utf16_col":20},"end":{"line_number":10821,"utf16_col":33}},"extent_utf16":{"start":{"line_number":10821,"utf16_col":8},"end":{"line_number":10821,"utf16_col":90}}},{"name":"add","kind":"method","ident_start":407012,"ident_end":407015,"extent_start":407007,"extent_end":407100,"fully_qualified_name":"TagAliasRegistry::add","ident_utf16":{"start":{"line_number":10822,"utf16_col":13},"end":{"line_number":10822,"utf16_col":16}},"extent_utf16":{"start":{"line_number":10822,"utf16_col":8},"end":{"line_number":10822,"utf16_col":101}}},{"name":"TestCaseInfoHasher","kind":"class","ident_start":407425,"ident_end":407443,"extent_start":407419,"extent_end":407641,"fully_qualified_name":"TestCaseInfoHasher","ident_utf16":{"start":{"line_number":10842,"utf16_col":10},"end":{"line_number":10842,"utf16_col":28}},"extent_utf16":{"start":{"line_number":10842,"utf16_col":4},"end":{"line_number":10850,"utf16_col":5}}},{"name":"IConfig","kind":"class","ident_start":407874,"ident_end":407881,"extent_start":407868,"extent_end":407881,"fully_qualified_name":"IConfig","ident_utf16":{"start":{"line_number":10865,"utf16_col":10},"end":{"line_number":10865,"utf16_col":17}},"extent_utf16":{"start":{"line_number":10865,"utf16_col":4},"end":{"line_number":10865,"utf16_col":17}}},{"name":"ITestInvoker","kind":"class","ident_start":407893,"ident_end":407905,"extent_start":407887,"extent_end":407905,"fully_qualified_name":"ITestInvoker","ident_utf16":{"start":{"line_number":10866,"utf16_col":10},"end":{"line_number":10866,"utf16_col":22}},"extent_utf16":{"start":{"line_number":10866,"utf16_col":4},"end":{"line_number":10866,"utf16_col":22}}},{"name":"TestCaseHandle","kind":"class","ident_start":407917,"ident_end":407931,"extent_start":407911,"extent_end":407931,"fully_qualified_name":"TestCaseHandle","ident_utf16":{"start":{"line_number":10867,"utf16_col":10},"end":{"line_number":10867,"utf16_col":24}},"extent_utf16":{"start":{"line_number":10867,"utf16_col":4},"end":{"line_number":10867,"utf16_col":24}}},{"name":"TestSpec","kind":"class","ident_start":407943,"ident_end":407951,"extent_start":407937,"extent_end":407951,"fully_qualified_name":"TestSpec","ident_utf16":{"start":{"line_number":10868,"utf16_col":10},"end":{"line_number":10868,"utf16_col":18}},"extent_utf16":{"start":{"line_number":10868,"utf16_col":4},"end":{"line_number":10868,"utf16_col":18}}},{"name":"TestRegistry","kind":"class","ident_start":408397,"ident_end":408409,"extent_start":408391,"extent_end":409392,"fully_qualified_name":"TestRegistry","ident_utf16":{"start":{"line_number":10877,"utf16_col":10},"end":{"line_number":10877,"utf16_col":22}},"extent_utf16":{"start":{"line_number":10877,"utf16_col":4},"end":{"line_number":10897,"utf16_col":5}}},{"name":"registerTest","kind":"method","ident_start":408464,"ident_end":408476,"extent_start":408459,"extent_end":408568,"fully_qualified_name":"TestRegistry::registerTest","ident_utf16":{"start":{"line_number":10879,"utf16_col":13},"end":{"line_number":10879,"utf16_col":25}},"extent_utf16":{"start":{"line_number":10879,"utf16_col":8},"end":{"line_number":10879,"utf16_col":117}}},{"name":"ITagAliasRegistry","kind":"class","ident_start":409814,"ident_end":409831,"extent_start":409808,"extent_end":409831,"fully_qualified_name":"ITagAliasRegistry","ident_utf16":{"start":{"line_number":10922,"utf16_col":10},"end":{"line_number":10922,"utf16_col":27}},"extent_utf16":{"start":{"line_number":10922,"utf16_col":4},"end":{"line_number":10922,"utf16_col":27}}},{"name":"TestSpecParser","kind":"class","ident_start":409844,"ident_end":409858,"extent_start":409838,"extent_end":411374,"fully_qualified_name":"TestSpecParser","ident_utf16":{"start":{"line_number":10924,"utf16_col":10},"end":{"line_number":10924,"utf16_col":24}},"extent_utf16":{"start":{"line_number":10924,"utf16_col":4},"end":{"line_number":10972,"utf16_col":5}}},{"name":"Mode","kind":"type","ident_start":409874,"ident_end":409878,"extent_start":409869,"extent_end":409922,"fully_qualified_name":"TestSpecParser::Mode","ident_utf16":{"start":{"line_number":10925,"utf16_col":13},"end":{"line_number":10925,"utf16_col":17}},"extent_utf16":{"start":{"line_number":10925,"utf16_col":8},"end":{"line_number":10925,"utf16_col":61}}},{"name":"testSpec","kind":"method","ident_start":410511,"ident_end":410519,"extent_start":410502,"extent_end":410522,"fully_qualified_name":"TestSpecParser::testSpec","ident_utf16":{"start":{"line_number":10943,"utf16_col":17},"end":{"line_number":10943,"utf16_col":25}},"extent_utf16":{"start":{"line_number":10943,"utf16_col":8},"end":{"line_number":10943,"utf16_col":28}}},{"name":"visitChar","kind":"method","ident_start":410550,"ident_end":410559,"extent_start":410545,"extent_end":410570,"fully_qualified_name":"TestSpecParser::visitChar","ident_utf16":{"start":{"line_number":10946,"utf16_col":13},"end":{"line_number":10946,"utf16_col":22}},"extent_utf16":{"start":{"line_number":10946,"utf16_col":8},"end":{"line_number":10946,"utf16_col":33}}},{"name":"startNewMode","kind":"method","ident_start":410584,"ident_end":410596,"extent_start":410579,"extent_end":410610,"fully_qualified_name":"TestSpecParser::startNewMode","ident_utf16":{"start":{"line_number":10947,"utf16_col":13},"end":{"line_number":10947,"utf16_col":25}},"extent_utf16":{"start":{"line_number":10947,"utf16_col":8},"end":{"line_number":10947,"utf16_col":39}}},{"name":"processNoneChar","kind":"method","ident_start":410624,"ident_end":410639,"extent_start":410619,"extent_end":410650,"fully_qualified_name":"TestSpecParser::processNoneChar","ident_utf16":{"start":{"line_number":10948,"utf16_col":13},"end":{"line_number":10948,"utf16_col":28}},"extent_utf16":{"start":{"line_number":10948,"utf16_col":8},"end":{"line_number":10948,"utf16_col":39}}},{"name":"processNameChar","kind":"method","ident_start":410664,"ident_end":410679,"extent_start":410659,"extent_end":410690,"fully_qualified_name":"TestSpecParser::processNameChar","ident_utf16":{"start":{"line_number":10949,"utf16_col":13},"end":{"line_number":10949,"utf16_col":28}},"extent_utf16":{"start":{"line_number":10949,"utf16_col":8},"end":{"line_number":10949,"utf16_col":39}}},{"name":"processOtherChar","kind":"method","ident_start":410704,"ident_end":410720,"extent_start":410699,"extent_end":410731,"fully_qualified_name":"TestSpecParser::processOtherChar","ident_utf16":{"start":{"line_number":10950,"utf16_col":13},"end":{"line_number":10950,"utf16_col":29}},"extent_utf16":{"start":{"line_number":10950,"utf16_col":8},"end":{"line_number":10950,"utf16_col":40}}},{"name":"endMode","kind":"method","ident_start":410745,"ident_end":410752,"extent_start":410740,"extent_end":410755,"fully_qualified_name":"TestSpecParser::endMode","ident_utf16":{"start":{"line_number":10951,"utf16_col":13},"end":{"line_number":10951,"utf16_col":20}},"extent_utf16":{"start":{"line_number":10951,"utf16_col":8},"end":{"line_number":10951,"utf16_col":23}}},{"name":"escape","kind":"method","ident_start":410769,"ident_end":410775,"extent_start":410764,"extent_end":410778,"fully_qualified_name":"TestSpecParser::escape","ident_utf16":{"start":{"line_number":10952,"utf16_col":13},"end":{"line_number":10952,"utf16_col":19}},"extent_utf16":{"start":{"line_number":10952,"utf16_col":8},"end":{"line_number":10952,"utf16_col":22}}},{"name":"isControlChar","kind":"method","ident_start":410792,"ident_end":410805,"extent_start":410787,"extent_end":410822,"fully_qualified_name":"TestSpecParser::isControlChar","ident_utf16":{"start":{"line_number":10953,"utf16_col":13},"end":{"line_number":10953,"utf16_col":26}},"extent_utf16":{"start":{"line_number":10953,"utf16_col":8},"end":{"line_number":10953,"utf16_col":43}}},{"name":"saveLastMode","kind":"method","ident_start":410836,"ident_end":410848,"extent_start":410831,"extent_end":410851,"fully_qualified_name":"TestSpecParser::saveLastMode","ident_utf16":{"start":{"line_number":10954,"utf16_col":13},"end":{"line_number":10954,"utf16_col":25}},"extent_utf16":{"start":{"line_number":10954,"utf16_col":8},"end":{"line_number":10954,"utf16_col":28}}},{"name":"revertBackToLastMode","kind":"method","ident_start":410865,"ident_end":410885,"extent_start":410860,"extent_end":410888,"fully_qualified_name":"TestSpecParser::revertBackToLastMode","ident_utf16":{"start":{"line_number":10955,"utf16_col":13},"end":{"line_number":10955,"utf16_col":33}},"extent_utf16":{"start":{"line_number":10955,"utf16_col":8},"end":{"line_number":10955,"utf16_col":36}}},{"name":"addFilter","kind":"method","ident_start":410902,"ident_end":410911,"extent_start":410897,"extent_end":410914,"fully_qualified_name":"TestSpecParser::addFilter","ident_utf16":{"start":{"line_number":10956,"utf16_col":13},"end":{"line_number":10956,"utf16_col":22}},"extent_utf16":{"start":{"line_number":10956,"utf16_col":8},"end":{"line_number":10956,"utf16_col":25}}},{"name":"separate","kind":"method","ident_start":410928,"ident_end":410936,"extent_start":410923,"extent_end":410939,"fully_qualified_name":"TestSpecParser::separate","ident_utf16":{"start":{"line_number":10957,"utf16_col":13},"end":{"line_number":10957,"utf16_col":21}},"extent_utf16":{"start":{"line_number":10957,"utf16_col":8},"end":{"line_number":10957,"utf16_col":24}}},{"name":"preprocessPattern","kind":"method","ident_start":411038,"ident_end":411055,"extent_start":411026,"extent_end":411058,"fully_qualified_name":"TestSpecParser::preprocessPattern","ident_utf16":{"start":{"line_number":10960,"utf16_col":20},"end":{"line_number":10960,"utf16_col":37}},"extent_utf16":{"start":{"line_number":10960,"utf16_col":8},"end":{"line_number":10960,"utf16_col":40}}},{"name":"addNamePattern","kind":"method","ident_start":411123,"ident_end":411137,"extent_start":411118,"extent_end":411140,"fully_qualified_name":"TestSpecParser::addNamePattern","ident_utf16":{"start":{"line_number":10962,"utf16_col":13},"end":{"line_number":10962,"utf16_col":27}},"extent_utf16":{"start":{"line_number":10962,"utf16_col":8},"end":{"line_number":10962,"utf16_col":30}}},{"name":"addTagPattern","kind":"method","ident_start":411199,"ident_end":411212,"extent_start":411194,"extent_end":411215,"fully_qualified_name":"TestSpecParser::addTagPattern","ident_utf16":{"start":{"line_number":10964,"utf16_col":13},"end":{"line_number":10964,"utf16_col":26}},"extent_utf16":{"start":{"line_number":10964,"utf16_col":8},"end":{"line_number":10964,"utf16_col":29}}},{"name":"addCharToPattern","kind":"function","ident_start":411237,"ident_end":411253,"extent_start":411225,"extent_end":411367,"fully_qualified_name":"TestSpecParser::addCharToPattern","ident_utf16":{"start":{"line_number":10966,"utf16_col":20},"end":{"line_number":10966,"utf16_col":36}},"extent_utf16":{"start":{"line_number":10966,"utf16_col":8},"end":{"line_number":10970,"utf16_col":9}}},{"name":"Columns","kind":"class","ident_start":411689,"ident_end":411696,"extent_start":411683,"extent_end":411696,"fully_qualified_name":"Columns","ident_utf16":{"start":{"line_number":10994,"utf16_col":14},"end":{"line_number":10994,"utf16_col":21}},"extent_utf16":{"start":{"line_number":10994,"utf16_col":8},"end":{"line_number":10994,"utf16_col":21}}},{"name":"AnsiSkippingString","kind":"class","ident_start":412288,"ident_end":412306,"extent_start":412282,"extent_end":413167,"fully_qualified_name":"AnsiSkippingString","ident_utf16":{"start":{"line_number":11008,"utf16_col":14},"end":{"line_number":11008,"utf16_col":32}},"extent_utf16":{"start":{"line_number":11008,"utf16_col":8},"end":{"line_number":11032,"utf16_col":9}}},{"name":"preprocessString","kind":"method","ident_start":412458,"ident_end":412474,"extent_start":412453,"extent_end":412477,"fully_qualified_name":"AnsiSkippingString::preprocessString","ident_utf16":{"start":{"line_number":11013,"utf16_col":17},"end":{"line_number":11013,"utf16_col":33}},"extent_utf16":{"start":{"line_number":11013,"utf16_col":12},"end":{"line_number":11013,"utf16_col":36}}},{"name":"const_iterator","kind":"class","ident_start":412513,"ident_end":412527,"extent_start":412507,"extent_end":412527,"fully_qualified_name":"AnsiSkippingString::const_iterator","ident_utf16":{"start":{"line_number":11016,"utf16_col":18},"end":{"line_number":11016,"utf16_col":32}},"extent_utf16":{"start":{"line_number":11016,"utf16_col":12},"end":{"line_number":11016,"utf16_col":32}}},{"name":"begin","kind":"method","ident_start":412930,"ident_end":412935,"extent_start":412915,"extent_end":412944,"fully_qualified_name":"AnsiSkippingString::begin","ident_utf16":{"start":{"line_number":11025,"utf16_col":27},"end":{"line_number":11025,"utf16_col":32}},"extent_utf16":{"start":{"line_number":11025,"utf16_col":12},"end":{"line_number":11025,"utf16_col":41}}},{"name":"end","kind":"method","ident_start":412972,"ident_end":412975,"extent_start":412957,"extent_end":412984,"fully_qualified_name":"AnsiSkippingString::end","ident_utf16":{"start":{"line_number":11026,"utf16_col":27},"end":{"line_number":11026,"utf16_col":30}},"extent_utf16":{"start":{"line_number":11026,"utf16_col":12},"end":{"line_number":11026,"utf16_col":39}}},{"name":"size","kind":"function","ident_start":413005,"ident_end":413009,"extent_start":412998,"extent_end":413036,"fully_qualified_name":"AnsiSkippingString::size","ident_utf16":{"start":{"line_number":11028,"utf16_col":19},"end":{"line_number":11028,"utf16_col":23}},"extent_utf16":{"start":{"line_number":11028,"utf16_col":12},"end":{"line_number":11028,"utf16_col":50}}},{"name":"substring","kind":"method","ident_start":413062,"ident_end":413071,"extent_start":413050,"extent_end":413157,"fully_qualified_name":"AnsiSkippingString::substring","ident_utf16":{"start":{"line_number":11030,"utf16_col":24},"end":{"line_number":11030,"utf16_col":33}},"extent_utf16":{"start":{"line_number":11030,"utf16_col":12},"end":{"line_number":11031,"utf16_col":62}}},{"name":"EndTag","kind":"class","ident_start":413279,"ident_end":413285,"extent_start":413272,"extent_end":413288,"fully_qualified_name":"EndTag","ident_utf16":{"start":{"line_number":11036,"utf16_col":19},"end":{"line_number":11036,"utf16_col":25}},"extent_utf16":{"start":{"line_number":11036,"utf16_col":12},"end":{"line_number":11036,"utf16_col":28}}},{"name":"const_iterator","kind":"function","ident_start":413400,"ident_end":413414,"extent_start":413391,"extent_end":413513,"fully_qualified_name":"const_iterator","ident_utf16":{"start":{"line_number":11041,"utf16_col":21},"end":{"line_number":11041,"utf16_col":35}},"extent_utf16":{"start":{"line_number":11041,"utf16_col":12},"end":{"line_number":11042,"utf16_col":60}}},{"name":"tryParseAnsiEscapes","kind":"method","ident_start":413532,"ident_end":413551,"extent_start":413527,"extent_end":413554,"fully_qualified_name":"tryParseAnsiEscapes","ident_utf16":{"start":{"line_number":11044,"utf16_col":17},"end":{"line_number":11044,"utf16_col":36}},"extent_utf16":{"start":{"line_number":11044,"utf16_col":12},"end":{"line_number":11044,"utf16_col":39}}},{"name":"advance","kind":"method","ident_start":413572,"ident_end":413579,"extent_start":413567,"extent_end":413582,"fully_qualified_name":"advance","ident_utf16":{"start":{"line_number":11045,"utf16_col":17},"end":{"line_number":11045,"utf16_col":24}},"extent_utf16":{"start":{"line_number":11045,"utf16_col":12},"end":{"line_number":11045,"utf16_col":27}}},{"name":"unadvance","kind":"method","ident_start":413600,"ident_end":413609,"extent_start":413595,"extent_end":413612,"fully_qualified_name":"unadvance","ident_utf16":{"start":{"line_number":11046,"utf16_col":17},"end":{"line_number":11046,"utf16_col":26}},"extent_utf16":{"start":{"line_number":11046,"utf16_col":12},"end":{"line_number":11046,"utf16_col":29}}},{"name":"const_iterator","kind":"function","ident_start":413896,"ident_end":413910,"extent_start":413887,"extent_end":414055,"fully_qualified_name":"const_iterator","ident_utf16":{"start":{"line_number":11055,"utf16_col":21},"end":{"line_number":11055,"utf16_col":35}},"extent_utf16":{"start":{"line_number":11055,"utf16_col":12},"end":{"line_number":11058,"utf16_col":13}}},{"name":"oneBefore","kind":"function","ident_start":415064,"ident_end":415073,"extent_start":415049,"extent_end":415159,"fully_qualified_name":"oneBefore","ident_utf16":{"start":{"line_number":11091,"utf16_col":27},"end":{"line_number":11091,"utf16_col":36}},"extent_utf16":{"start":{"line_number":11091,"utf16_col":12},"end":{"line_number":11094,"utf16_col":13}}},{"name":"Column","kind":"class","ident_start":415460,"ident_end":415466,"extent_start":415454,"extent_end":419976,"fully_qualified_name":"Column","ident_utf16":{"start":{"line_number":11104,"utf16_col":14},"end":{"line_number":11104,"utf16_col":20}},"extent_utf16":{"start":{"line_number":11104,"utf16_col":8},"end":{"line_number":11217,"utf16_col":9}}},{"name":"const_iterator","kind":"class","ident_start":416027,"ident_end":416041,"extent_start":416021,"extent_end":418272,"fully_qualified_name":"Column::const_iterator","ident_utf16":{"start":{"line_number":11119,"utf16_col":18},"end":{"line_number":11119,"utf16_col":32}},"extent_utf16":{"start":{"line_number":11119,"utf16_col":12},"end":{"line_number":11172,"utf16_col":13}}},{"name":"EndTag","kind":"class","ident_start":416098,"ident_end":416104,"extent_start":416091,"extent_end":416107,"fully_qualified_name":"Column::const_iterator::EndTag","ident_utf16":{"start":{"line_number":11121,"utf16_col":23},"end":{"line_number":11121,"utf16_col":29}},"extent_utf16":{"start":{"line_number":11121,"utf16_col":16},"end":{"line_number":11121,"utf16_col":32}}},{"name":"const_iterator","kind":"function","ident_start":416631,"ident_end":416645,"extent_start":416631,"extent_end":416893,"fully_qualified_name":"Column::const_iterator::const_iterator","ident_utf16":{"start":{"line_number":11133,"utf16_col":16},"end":{"line_number":11133,"utf16_col":30}},"extent_utf16":{"start":{"line_number":11133,"utf16_col":16},"end":{"line_number":11137,"utf16_col":58}}},{"name":"calcLength","kind":"method","ident_start":416977,"ident_end":416987,"extent_start":416972,"extent_end":416990,"fully_qualified_name":"Column::const_iterator::calcLength","ident_utf16":{"start":{"line_number":11140,"utf16_col":21},"end":{"line_number":11140,"utf16_col":31}},"extent_utf16":{"start":{"line_number":11140,"utf16_col":16},"end":{"line_number":11140,"utf16_col":34}}},{"name":"indentSize","kind":"method","ident_start":417068,"ident_end":417078,"extent_start":417061,"extent_end":417087,"fully_qualified_name":"Column::const_iterator::indentSize","ident_utf16":{"start":{"line_number":11143,"utf16_col":23},"end":{"line_number":11143,"utf16_col":33}},"extent_utf16":{"start":{"line_number":11143,"utf16_col":16},"end":{"line_number":11143,"utf16_col":42}}},{"name":"addIndentAndSuffix","kind":"method","ident_start":417264,"ident_end":417282,"extent_start":417252,"extent_end":417413,"fully_qualified_name":"Column::const_iterator::addIndentAndSuffix","ident_utf16":{"start":{"line_number":11147,"utf16_col":28},"end":{"line_number":11147,"utf16_col":46}},"extent_utf16":{"start":{"line_number":11147,"utf16_col":16},"end":{"line_number":11149,"utf16_col":67}}},{"name":"Column","kind":"function","ident_start":418341,"ident_end":418347,"extent_start":418332,"extent_end":418395,"fully_qualified_name":"Column::Column","ident_utf16":{"start":{"line_number":11175,"utf16_col":21},"end":{"line_number":11175,"utf16_col":27}},"extent_utf16":{"start":{"line_number":11175,"utf16_col":12},"end":{"line_number":11175,"utf16_col":75}}},{"name":"Column","kind":"function","ident_start":418417,"ident_end":418423,"extent_start":418408,"extent_end":418496,"fully_qualified_name":"Column::Column","ident_utf16":{"start":{"line_number":11176,"utf16_col":21},"end":{"line_number":11176,"utf16_col":27}},"extent_utf16":{"start":{"line_number":11176,"utf16_col":12},"end":{"line_number":11177,"utf16_col":49}}},{"name":"width","kind":"function","ident_start":419464,"ident_end":419469,"extent_start":419457,"extent_end":419497,"fully_qualified_name":"Column::width","ident_utf16":{"start":{"line_number":11206,"utf16_col":19},"end":{"line_number":11206,"utf16_col":24}},"extent_utf16":{"start":{"line_number":11206,"utf16_col":12},"end":{"line_number":11206,"utf16_col":52}}},{"name":"begin","kind":"function","ident_start":419525,"ident_end":419530,"extent_start":419510,"extent_end":419574,"fully_qualified_name":"Column::begin","ident_utf16":{"start":{"line_number":11207,"utf16_col":27},"end":{"line_number":11207,"utf16_col":32}},"extent_utf16":{"start":{"line_number":11207,"utf16_col":12},"end":{"line_number":11207,"utf16_col":76}}},{"name":"end","kind":"function","ident_start":419602,"ident_end":419605,"extent_start":419587,"extent_end":419689,"fully_qualified_name":"Column::end","ident_utf16":{"start":{"line_number":11208,"utf16_col":27},"end":{"line_number":11208,"utf16_col":30}},"extent_utf16":{"start":{"line_number":11208,"utf16_col":12},"end":{"line_number":11210,"utf16_col":13}}},{"name":"Columns","kind":"class","ident_start":420115,"ident_end":420122,"extent_start":420109,"extent_end":421923,"fully_qualified_name":"Columns","ident_utf16":{"start":{"line_number":11222,"utf16_col":14},"end":{"line_number":11222,"utf16_col":21}},"extent_utf16":{"start":{"line_number":11222,"utf16_col":8},"end":{"line_number":11267,"utf16_col":9}}},{"name":"iterator","kind":"class","ident_start":420203,"ident_end":420211,"extent_start":420197,"extent_end":421300,"fully_qualified_name":"Columns::iterator","ident_utf16":{"start":{"line_number":11226,"utf16_col":18},"end":{"line_number":11226,"utf16_col":26}},"extent_utf16":{"start":{"line_number":11226,"utf16_col":12},"end":{"line_number":11254,"utf16_col":13}}},{"name":"EndTag","kind":"class","ident_start":420269,"ident_end":420275,"extent_start":420262,"extent_end":420278,"fully_qualified_name":"Columns::iterator::EndTag","ident_utf16":{"start":{"line_number":11228,"utf16_col":23},"end":{"line_number":11228,"utf16_col":29}},"extent_utf16":{"start":{"line_number":11228,"utf16_col":16},"end":{"line_number":11228,"utf16_col":32}}},{"name":"begin","kind":"function","ident_start":421369,"ident_end":421374,"extent_start":421360,"extent_end":421412,"fully_qualified_name":"Columns::begin","ident_utf16":{"start":{"line_number":11257,"utf16_col":21},"end":{"line_number":11257,"utf16_col":26}},"extent_utf16":{"start":{"line_number":11257,"utf16_col":12},"end":{"line_number":11257,"utf16_col":64}}},{"name":"end","kind":"function","ident_start":421434,"ident_end":421437,"extent_start":421425,"extent_end":421487,"fully_qualified_name":"Columns::end","ident_utf16":{"start":{"line_number":11258,"utf16_col":21},"end":{"line_number":11258,"utf16_col":24}},"extent_utf16":{"start":{"line_number":11258,"utf16_col":12},"end":{"line_number":11258,"utf16_col":74}}},{"name":"to_string","kind":"function","ident_start":422170,"ident_end":422179,"extent_start":422158,"extent_end":422366,"fully_qualified_name":"to_string","ident_utf16":{"start":{"line_number":11282,"utf16_col":16},"end":{"line_number":11282,"utf16_col":25}},"extent_utf16":{"start":{"line_number":11282,"utf16_col":4},"end":{"line_number":11290,"utf16_col":5}}},{"name":"XmlFormatting","kind":"type","ident_start":422821,"ident_end":422834,"extent_start":422810,"extent_end":422925,"fully_qualified_name":"XmlFormatting","ident_utf16":{"start":{"line_number":11315,"utf16_col":15},"end":{"line_number":11315,"utf16_col":28}},"extent_utf16":{"start":{"line_number":11315,"utf16_col":4},"end":{"line_number":11319,"utf16_col":5}}},{"name":"XmlEncode","kind":"class","ident_start":423657,"ident_end":423666,"extent_start":423651,"extent_end":424078,"fully_qualified_name":"XmlEncode","ident_utf16":{"start":{"line_number":11338,"utf16_col":10},"end":{"line_number":11338,"utf16_col":19}},"extent_utf16":{"start":{"line_number":11338,"utf16_col":4},"end":{"line_number":11353,"utf16_col":5}}},{"name":"ForWhat","kind":"type","ident_start":423694,"ident_end":423701,"extent_start":423689,"extent_end":423733,"fully_qualified_name":"XmlEncode::ForWhat","ident_utf16":{"start":{"line_number":11340,"utf16_col":13},"end":{"line_number":11340,"utf16_col":20}},"extent_utf16":{"start":{"line_number":11340,"utf16_col":8},"end":{"line_number":11340,"utf16_col":52}}},{"name":"XmlEncode","kind":"function","ident_start":423754,"ident_end":423763,"extent_start":423744,"extent_end":423863,"fully_qualified_name":"XmlEncode::XmlEncode","ident_utf16":{"start":{"line_number":11342,"utf16_col":18},"end":{"line_number":11342,"utf16_col":27}},"extent_utf16":{"start":{"line_number":11342,"utf16_col":8},"end":{"line_number":11343,"utf16_col":49}}},{"name":"encodeTo","kind":"method","ident_start":423879,"ident_end":423887,"extent_start":423874,"extent_end":423914,"fully_qualified_name":"XmlEncode::encodeTo","ident_utf16":{"start":{"line_number":11346,"utf16_col":13},"end":{"line_number":11346,"utf16_col":21}},"extent_utf16":{"start":{"line_number":11346,"utf16_col":8},"end":{"line_number":11346,"utf16_col":48}}},{"name":"XmlWriter","kind":"class","ident_start":424091,"ident_end":424100,"extent_start":424085,"extent_end":428081,"fully_qualified_name":"XmlWriter","ident_utf16":{"start":{"line_number":11355,"utf16_col":10},"end":{"line_number":11355,"utf16_col":19}},"extent_utf16":{"start":{"line_number":11355,"utf16_col":4},"end":{"line_number":11455,"utf16_col":5}}},{"name":"ScopedElement","kind":"class","ident_start":424130,"ident_end":424143,"extent_start":424124,"extent_end":425522,"fully_qualified_name":"XmlWriter::ScopedElement","ident_utf16":{"start":{"line_number":11358,"utf16_col":14},"end":{"line_number":11358,"utf16_col":27}},"extent_utf16":{"start":{"line_number":11358,"utf16_col":8},"end":{"line_number":11390,"utf16_col":9}}},{"name":"XmlWriter","kind":"function","ident_start":425595,"ident_end":425604,"extent_start":425595,"extent_end":425634,"fully_qualified_name":"XmlWriter::XmlWriter","ident_utf16":{"start":{"line_number":11395,"utf16_col":8},"end":{"line_number":11395,"utf16_col":17}},"extent_utf16":{"start":{"line_number":11395,"utf16_col":8},"end":{"line_number":11395,"utf16_col":47}}},{"name":"scopedElement","kind":"method","ident_start":425845,"ident_end":425858,"extent_start":425831,"extent_end":425953,"fully_qualified_name":"XmlWriter::scopedElement","ident_utf16":{"start":{"line_number":11400,"utf16_col":22},"end":{"line_number":11400,"utf16_col":35}},"extent_utf16":{"start":{"line_number":11400,"utf16_col":8},"end":{"line_number":11400,"utf16_col":130}}},{"name":"writeStylesheetRef","kind":"method","ident_start":427701,"ident_end":427719,"extent_start":427696,"extent_end":427737,"fully_qualified_name":"XmlWriter::writeStylesheetRef","ident_utf16":{"start":{"line_number":11438,"utf16_col":13},"end":{"line_number":11438,"utf16_col":31}},"extent_utf16":{"start":{"line_number":11438,"utf16_col":8},"end":{"line_number":11438,"utf16_col":49}}},{"name":"ensureTagClosed","kind":"method","ident_start":427752,"ident_end":427767,"extent_start":427747,"extent_end":427770,"fully_qualified_name":"XmlWriter::ensureTagClosed","ident_utf16":{"start":{"line_number":11440,"utf16_col":13},"end":{"line_number":11440,"utf16_col":28}},"extent_utf16":{"start":{"line_number":11440,"utf16_col":8},"end":{"line_number":11440,"utf16_col":31}}},{"name":"applyFormatting","kind":"method","ident_start":427799,"ident_end":427814,"extent_start":427794,"extent_end":427834,"fully_qualified_name":"XmlWriter::applyFormatting","ident_utf16":{"start":{"line_number":11444,"utf16_col":13},"end":{"line_number":11444,"utf16_col":28}},"extent_utf16":{"start":{"line_number":11444,"utf16_col":8},"end":{"line_number":11444,"utf16_col":48}}},{"name":"writeDeclaration","kind":"method","ident_start":427849,"ident_end":427865,"extent_start":427844,"extent_end":427868,"fully_qualified_name":"XmlWriter::writeDeclaration","ident_utf16":{"start":{"line_number":11446,"utf16_col":13},"end":{"line_number":11446,"utf16_col":29}},"extent_utf16":{"start":{"line_number":11446,"utf16_col":8},"end":{"line_number":11446,"utf16_col":32}}},{"name":"newlineIfNecessary","kind":"method","ident_start":427883,"ident_end":427901,"extent_start":427878,"extent_end":427904,"fully_qualified_name":"XmlWriter::newlineIfNecessary","ident_utf16":{"start":{"line_number":11448,"utf16_col":13},"end":{"line_number":11448,"utf16_col":31}},"extent_utf16":{"start":{"line_number":11448,"utf16_col":8},"end":{"line_number":11448,"utf16_col":34}}},{"name":"MatchExpr","kind":"class","ident_start":429291,"ident_end":429300,"extent_start":429285,"extent_end":429868,"fully_qualified_name":"MatchExpr","ident_utf16":{"start":{"line_number":11503,"utf16_col":10},"end":{"line_number":11503,"utf16_col":19}},"extent_utf16":{"start":{"line_number":11503,"utf16_col":4},"end":{"line_number":11518,"utf16_col":5}}},{"name":"MatchExpr","kind":"function","ident_start":429421,"ident_end":429430,"extent_start":429411,"extent_end":429657,"fully_qualified_name":"MatchExpr::MatchExpr","ident_utf16":{"start":{"line_number":11507,"utf16_col":18},"end":{"line_number":11507,"utf16_col":27}},"extent_utf16":{"start":{"line_number":11507,"utf16_col":8},"end":{"line_number":11511,"utf16_col":10}}},{"name":"streamReconstructedExpression","kind":"function","ident_start":429672,"ident_end":429701,"extent_start":429667,"extent_end":429862,"fully_qualified_name":"MatchExpr::streamReconstructedExpression","ident_utf16":{"start":{"line_number":11513,"utf16_col":13},"end":{"line_number":11513,"utf16_col":42}},"extent_utf16":{"start":{"line_number":11513,"utf16_col":8},"end":{"line_number":11517,"utf16_col":9}}},{"name":"MatcherBase","kind":"class","ident_start":430056,"ident_end":430067,"extent_start":430050,"extent_end":430067,"fully_qualified_name":"MatcherBase","ident_utf16":{"start":{"line_number":11529,"utf16_col":14},"end":{"line_number":11529,"utf16_col":25}},"extent_utf16":{"start":{"line_number":11529,"utf16_col":8},"end":{"line_number":11529,"utf16_col":25}}},{"name":"makeMatchExpr","kind":"function","ident_start":430325,"ident_end":430338,"extent_start":430285,"extent_end":430458,"fully_qualified_name":"makeMatchExpr","ident_utf16":{"start":{"line_number":11538,"utf16_col":4},"end":{"line_number":11538,"utf16_col":17}},"extent_utf16":{"start":{"line_number":11537,"utf16_col":4},"end":{"line_number":11540,"utf16_col":5}}},{"name":"MatcherUntypedBase","kind":"class","ident_start":432485,"ident_end":432503,"extent_start":432479,"extent_end":433043,"fully_qualified_name":"MatcherUntypedBase","ident_utf16":{"start":{"line_number":11588,"utf16_col":10},"end":{"line_number":11588,"utf16_col":28}},"extent_utf16":{"start":{"line_number":11588,"utf16_col":4},"end":{"line_number":11604,"utf16_col":5}}},{"name":"MatcherUntypedBase","kind":"function","ident_start":432526,"ident_end":432544,"extent_start":432526,"extent_end":432557,"fully_qualified_name":"MatcherUntypedBase::MatcherUntypedBase","ident_utf16":{"start":{"line_number":11590,"utf16_col":8},"end":{"line_number":11590,"utf16_col":26}},"extent_utf16":{"start":{"line_number":11590,"utf16_col":8},"end":{"line_number":11590,"utf16_col":39}}},{"name":"MatcherUntypedBase","kind":"function","ident_start":432567,"ident_end":432585,"extent_start":432567,"extent_end":432623,"fully_qualified_name":"MatcherUntypedBase::MatcherUntypedBase","ident_utf16":{"start":{"line_number":11592,"utf16_col":8},"end":{"line_number":11592,"utf16_col":26}},"extent_utf16":{"start":{"line_number":11592,"utf16_col":8},"end":{"line_number":11592,"utf16_col":64}}},{"name":"MatcherUntypedBase","kind":"function","ident_start":432632,"ident_end":432650,"extent_start":432632,"extent_end":432683,"fully_qualified_name":"MatcherUntypedBase::MatcherUntypedBase","ident_utf16":{"start":{"line_number":11593,"utf16_col":8},"end":{"line_number":11593,"utf16_col":26}},"extent_utf16":{"start":{"line_number":11593,"utf16_col":8},"end":{"line_number":11593,"utf16_col":59}}},{"name":"toString","kind":"method","ident_start":432855,"ident_end":432863,"extent_start":432843,"extent_end":432872,"fully_qualified_name":"MatcherUntypedBase::toString","ident_utf16":{"start":{"line_number":11598,"utf16_col":20},"end":{"line_number":11598,"utf16_col":28}},"extent_utf16":{"start":{"line_number":11598,"utf16_col":8},"end":{"line_number":11598,"utf16_col":37}}},{"name":"describe","kind":"method","ident_start":432970,"ident_end":432978,"extent_start":432950,"extent_end":432991,"fully_qualified_name":"MatcherUntypedBase::describe","ident_utf16":{"start":{"line_number":11602,"utf16_col":28},"end":{"line_number":11602,"utf16_col":36}},"extent_utf16":{"start":{"line_number":11602,"utf16_col":8},"end":{"line_number":11602,"utf16_col":49}}},{"name":"MatcherBase","kind":"class","ident_start":433082,"ident_end":433093,"extent_start":433076,"extent_end":433195,"fully_qualified_name":"MatcherBase","ident_utf16":{"start":{"line_number":11608,"utf16_col":10},"end":{"line_number":11608,"utf16_col":21}},"extent_utf16":{"start":{"line_number":11608,"utf16_col":4},"end":{"line_number":11611,"utf16_col":5}}},{"name":"match","kind":"method","ident_start":433157,"ident_end":433162,"extent_start":433144,"extent_end":433189,"fully_qualified_name":"MatcherBase::match","ident_utf16":{"start":{"line_number":11610,"utf16_col":21},"end":{"line_number":11610,"utf16_col":26}},"extent_utf16":{"start":{"line_number":11610,"utf16_col":8},"end":{"line_number":11610,"utf16_col":53}}},{"name":"MatchAllOf","kind":"class","ident_start":433268,"ident_end":433278,"extent_start":433262,"extent_end":434913,"fully_qualified_name":"MatchAllOf","ident_utf16":{"start":{"line_number":11616,"utf16_col":14},"end":{"line_number":11616,"utf16_col":24}},"extent_utf16":{"start":{"line_number":11616,"utf16_col":8},"end":{"line_number":11658,"utf16_col":9}}},{"name":"MatchAllOf","kind":"function","ident_start":433405,"ident_end":433415,"extent_start":433405,"extent_end":433428,"fully_qualified_name":"MatchAllOf::MatchAllOf","ident_utf16":{"start":{"line_number":11620,"utf16_col":12},"end":{"line_number":11620,"utf16_col":22}},"extent_utf16":{"start":{"line_number":11620,"utf16_col":12},"end":{"line_number":11620,"utf16_col":35}}},{"name":"MatchAllOf","kind":"function","ident_start":433441,"ident_end":433451,"extent_start":433441,"extent_end":433480,"fully_qualified_name":"MatchAllOf::MatchAllOf","ident_utf16":{"start":{"line_number":11621,"utf16_col":12},"end":{"line_number":11621,"utf16_col":22}},"extent_utf16":{"start":{"line_number":11621,"utf16_col":12},"end":{"line_number":11621,"utf16_col":51}}},{"name":"MatchAllOf","kind":"function","ident_start":433556,"ident_end":433566,"extent_start":433556,"extent_end":433591,"fully_qualified_name":"MatchAllOf::MatchAllOf","ident_utf16":{"start":{"line_number":11623,"utf16_col":12},"end":{"line_number":11623,"utf16_col":22}},"extent_utf16":{"start":{"line_number":11623,"utf16_col":12},"end":{"line_number":11623,"utf16_col":47}}},{"name":"match","kind":"function","ident_start":433670,"ident_end":433675,"extent_start":433665,"extent_end":433907,"fully_qualified_name":"MatchAllOf::match","ident_utf16":{"start":{"line_number":11627,"utf16_col":17},"end":{"line_number":11627,"utf16_col":22}},"extent_utf16":{"start":{"line_number":11627,"utf16_col":12},"end":{"line_number":11633,"utf16_col":13}}},{"name":"describe","kind":"function","ident_start":433932,"ident_end":433940,"extent_start":433920,"extent_end":434493,"fully_qualified_name":"MatchAllOf::describe","ident_utf16":{"start":{"line_number":11634,"utf16_col":24},"end":{"line_number":11634,"utf16_col":32}},"extent_utf16":{"start":{"line_number":11634,"utf16_col":12},"end":{"line_number":11648,"utf16_col":13}}},{"name":"MatchAnyOf","kind":"class","ident_start":435503,"ident_end":435513,"extent_start":435497,"extent_end":437144,"fully_qualified_name":"MatchAnyOf","ident_utf16":{"start":{"line_number":11670,"utf16_col":14},"end":{"line_number":11670,"utf16_col":24}},"extent_utf16":{"start":{"line_number":11670,"utf16_col":8},"end":{"line_number":11710,"utf16_col":9}}},{"name":"MatchAnyOf","kind":"function","ident_start":435639,"ident_end":435649,"extent_start":435639,"extent_end":435662,"fully_qualified_name":"MatchAnyOf::MatchAnyOf","ident_utf16":{"start":{"line_number":11673,"utf16_col":12},"end":{"line_number":11673,"utf16_col":22}},"extent_utf16":{"start":{"line_number":11673,"utf16_col":12},"end":{"line_number":11673,"utf16_col":35}}},{"name":"MatchAnyOf","kind":"function","ident_start":435675,"ident_end":435685,"extent_start":435675,"extent_end":435714,"fully_qualified_name":"MatchAnyOf::MatchAnyOf","ident_utf16":{"start":{"line_number":11674,"utf16_col":12},"end":{"line_number":11674,"utf16_col":22}},"extent_utf16":{"start":{"line_number":11674,"utf16_col":12},"end":{"line_number":11674,"utf16_col":51}}},{"name":"MatchAnyOf","kind":"function","ident_start":435790,"ident_end":435800,"extent_start":435790,"extent_end":435825,"fully_qualified_name":"MatchAnyOf::MatchAnyOf","ident_utf16":{"start":{"line_number":11676,"utf16_col":12},"end":{"line_number":11676,"utf16_col":22}},"extent_utf16":{"start":{"line_number":11676,"utf16_col":12},"end":{"line_number":11676,"utf16_col":47}}},{"name":"match","kind":"function","ident_start":435903,"ident_end":435908,"extent_start":435898,"extent_end":436139,"fully_qualified_name":"MatchAnyOf::match","ident_utf16":{"start":{"line_number":11679,"utf16_col":17},"end":{"line_number":11679,"utf16_col":22}},"extent_utf16":{"start":{"line_number":11679,"utf16_col":12},"end":{"line_number":11685,"utf16_col":13}}},{"name":"describe","kind":"function","ident_start":436164,"ident_end":436172,"extent_start":436152,"extent_end":436724,"fully_qualified_name":"MatchAnyOf::describe","ident_utf16":{"start":{"line_number":11686,"utf16_col":24},"end":{"line_number":11686,"utf16_col":32}},"extent_utf16":{"start":{"line_number":11686,"utf16_col":12},"end":{"line_number":11700,"utf16_col":13}}},{"name":"MatchNotOf","kind":"class","ident_start":437734,"ident_end":437744,"extent_start":437728,"extent_end":438278,"fully_qualified_name":"MatchNotOf","ident_utf16":{"start":{"line_number":11722,"utf16_col":14},"end":{"line_number":11722,"utf16_col":24}},"extent_utf16":{"start":{"line_number":11722,"utf16_col":8},"end":{"line_number":11737,"utf16_col":9}}},{"name":"MatchNotOf","kind":"function","ident_start":437876,"ident_end":437886,"extent_start":437867,"extent_end":438005,"fully_qualified_name":"MatchNotOf::MatchNotOf","ident_utf16":{"start":{"line_number":11726,"utf16_col":21},"end":{"line_number":11726,"utf16_col":31}},"extent_utf16":{"start":{"line_number":11726,"utf16_col":12},"end":{"line_number":11728,"utf16_col":14}}},{"name":"match","kind":"function","ident_start":438024,"ident_end":438029,"extent_start":438019,"extent_end":438137,"fully_qualified_name":"MatchNotOf::match","ident_utf16":{"start":{"line_number":11730,"utf16_col":17},"end":{"line_number":11730,"utf16_col":22}},"extent_utf16":{"start":{"line_number":11730,"utf16_col":12},"end":{"line_number":11732,"utf16_col":13}}},{"name":"describe","kind":"function","ident_start":438163,"ident_end":438171,"extent_start":438151,"extent_end":438268,"fully_qualified_name":"MatchNotOf::describe","ident_utf16":{"start":{"line_number":11734,"utf16_col":24},"end":{"line_number":11734,"utf16_col":32}},"extent_utf16":{"start":{"line_number":11734,"utf16_col":12},"end":{"line_number":11736,"utf16_col":13}}},{"name":"MatcherGenericBase","kind":"class","ident_start":442521,"ident_end":442539,"extent_start":442515,"extent_end":442953,"fully_qualified_name":"MatcherGenericBase","ident_utf16":{"start":{"line_number":11824,"utf16_col":10},"end":{"line_number":11824,"utf16_col":28}},"extent_utf16":{"start":{"line_number":11824,"utf16_col":4},"end":{"line_number":11834,"utf16_col":5}}},{"name":"MatcherGenericBase","kind":"function","ident_start":442590,"ident_end":442608,"extent_start":442590,"extent_end":442621,"fully_qualified_name":"MatcherGenericBase::MatcherGenericBase","ident_utf16":{"start":{"line_number":11826,"utf16_col":8},"end":{"line_number":11826,"utf16_col":26}},"extent_utf16":{"start":{"line_number":11826,"utf16_col":8},"end":{"line_number":11826,"utf16_col":39}}},{"name":"MatcherGenericBase","kind":"function","ident_start":442685,"ident_end":442703,"extent_start":442685,"extent_end":442741,"fully_qualified_name":"MatcherGenericBase::MatcherGenericBase","ident_utf16":{"start":{"line_number":11829,"utf16_col":8},"end":{"line_number":11829,"utf16_col":26}},"extent_utf16":{"start":{"line_number":11829,"utf16_col":8},"end":{"line_number":11829,"utf16_col":64}}},{"name":"MatcherGenericBase","kind":"function","ident_start":442750,"ident_end":442768,"extent_start":442750,"extent_end":442801,"fully_qualified_name":"MatcherGenericBase::MatcherGenericBase","ident_utf16":{"start":{"line_number":11830,"utf16_col":8},"end":{"line_number":11830,"utf16_col":26}},"extent_utf16":{"start":{"line_number":11830,"utf16_col":8},"end":{"line_number":11830,"utf16_col":59}}},{"name":"array_cat","kind":"function","ident_start":443066,"ident_end":443075,"extent_start":443035,"extent_end":443343,"fully_qualified_name":"array_cat","ident_utf16":{"start":{"line_number":11839,"utf16_col":39},"end":{"line_number":11839,"utf16_col":48}},"extent_utf16":{"start":{"line_number":11839,"utf16_col":8},"end":{"line_number":11844,"utf16_col":9}}},{"name":"array_cat","kind":"function","ident_start":443414,"ident_end":443423,"extent_start":443385,"extent_end":443639,"fully_qualified_name":"array_cat","ident_utf16":{"start":{"line_number":11847,"utf16_col":37},"end":{"line_number":11847,"utf16_col":46}},"extent_utf16":{"start":{"line_number":11847,"utf16_col":8},"end":{"line_number":11852,"utf16_col":9}}},{"name":"array_cat","kind":"function","ident_start":443710,"ident_end":443719,"extent_start":443681,"extent_end":443922,"fully_qualified_name":"array_cat","ident_utf16":{"start":{"line_number":11855,"utf16_col":37},"end":{"line_number":11855,"utf16_col":46}},"extent_utf16":{"start":{"line_number":11855,"utf16_col":8},"end":{"line_number":11859,"utf16_col":9}}},{"name":"match_all_of","kind":"function","ident_start":444500,"ident_end":444512,"extent_start":444495,"extent_end":444614,"fully_qualified_name":"match_all_of","ident_utf16":{"start":{"line_number":11878,"utf16_col":13},"end":{"line_number":11878,"utf16_col":25}},"extent_utf16":{"start":{"line_number":11878,"utf16_col":8},"end":{"line_number":11880,"utf16_col":9}}},{"name":"match_all_of","kind":"function","ident_start":444751,"ident_end":444763,"extent_start":444746,"extent_end":445017,"fully_qualified_name":"match_all_of","ident_utf16":{"start":{"line_number":11883,"utf16_col":13},"end":{"line_number":11883,"utf16_col":25}},"extent_utf16":{"start":{"line_number":11883,"utf16_col":8},"end":{"line_number":11885,"utf16_col":9}}},{"name":"match_any_of","kind":"function","ident_start":445079,"ident_end":445091,"extent_start":445074,"extent_end":445194,"fully_qualified_name":"match_any_of","ident_utf16":{"start":{"line_number":11889,"utf16_col":13},"end":{"line_number":11889,"utf16_col":25}},"extent_utf16":{"start":{"line_number":11889,"utf16_col":8},"end":{"line_number":11891,"utf16_col":9}}},{"name":"match_any_of","kind":"function","ident_start":445331,"ident_end":445343,"extent_start":445326,"extent_end":445597,"fully_qualified_name":"match_any_of","ident_utf16":{"start":{"line_number":11894,"utf16_col":13},"end":{"line_number":11894,"utf16_col":25}},"extent_utf16":{"start":{"line_number":11894,"utf16_col":8},"end":{"line_number":11896,"utf16_col":9}}},{"name":"describe_multi_matcher","kind":"function","ident_start":445819,"ident_end":445841,"extent_start":445807,"extent_end":446247,"fully_qualified_name":"describe_multi_matcher","ident_utf16":{"start":{"line_number":11901,"utf16_col":20},"end":{"line_number":11901,"utf16_col":42}},"extent_utf16":{"start":{"line_number":11901,"utf16_col":8},"end":{"line_number":11907,"utf16_col":9}}},{"name":"MatchAllOfGeneric","kind":"class","ident_start":446304,"ident_end":446321,"extent_start":446298,"extent_end":449096,"fully_qualified_name":"MatchAllOfGeneric","ident_utf16":{"start":{"line_number":11911,"utf16_col":14},"end":{"line_number":11911,"utf16_col":31}},"extent_utf16":{"start":{"line_number":11911,"utf16_col":8},"end":{"line_number":11962,"utf16_col":9}}},{"name":"MatchAllOfGeneric","kind":"function","ident_start":446386,"ident_end":446403,"extent_start":446386,"extent_end":446439,"fully_qualified_name":"MatchAllOfGeneric::MatchAllOfGeneric","ident_utf16":{"start":{"line_number":11913,"utf16_col":12},"end":{"line_number":11913,"utf16_col":29}},"extent_utf16":{"start":{"line_number":11913,"utf16_col":12},"end":{"line_number":11913,"utf16_col":65}}},{"name":"MatchAllOfGeneric","kind":"function","ident_start":446529,"ident_end":446546,"extent_start":446529,"extent_end":446578,"fully_qualified_name":"MatchAllOfGeneric::MatchAllOfGeneric","ident_utf16":{"start":{"line_number":11915,"utf16_col":12},"end":{"line_number":11915,"utf16_col":29}},"extent_utf16":{"start":{"line_number":11915,"utf16_col":12},"end":{"line_number":11915,"utf16_col":61}}},{"name":"MatchAllOfGeneric","kind":"function","ident_start":446665,"ident_end":446682,"extent_start":446665,"extent_end":446761,"fully_qualified_name":"MatchAllOfGeneric::MatchAllOfGeneric","ident_utf16":{"start":{"line_number":11918,"utf16_col":12},"end":{"line_number":11918,"utf16_col":29}},"extent_utf16":{"start":{"line_number":11918,"utf16_col":12},"end":{"line_number":11918,"utf16_col":108}}},{"name":"MatchAllOfGeneric","kind":"function","ident_start":446783,"ident_end":446800,"extent_start":446774,"extent_end":446882,"fully_qualified_name":"MatchAllOfGeneric::MatchAllOfGeneric","ident_utf16":{"start":{"line_number":11919,"utf16_col":21},"end":{"line_number":11919,"utf16_col":38}},"extent_utf16":{"start":{"line_number":11919,"utf16_col":12},"end":{"line_number":11919,"utf16_col":120}}},{"name":"match","kind":"function","ident_start":446936,"ident_end":446941,"extent_start":446931,"extent_end":447083,"fully_qualified_name":"MatchAllOfGeneric::match","ident_utf16":{"start":{"line_number":11922,"utf16_col":17},"end":{"line_number":11922,"utf16_col":22}},"extent_utf16":{"start":{"line_number":11922,"utf16_col":12},"end":{"line_number":11924,"utf16_col":13}}},{"name":"describe","kind":"function","ident_start":447109,"ident_end":447117,"extent_start":447097,"extent_end":447276,"fully_qualified_name":"MatchAllOfGeneric::describe","ident_utf16":{"start":{"line_number":11926,"utf16_col":24},"end":{"line_number":11926,"utf16_col":32}},"extent_utf16":{"start":{"line_number":11926,"utf16_col":12},"end":{"line_number":11928,"utf16_col":13}}},{"name":"MatchAnyOfGeneric","kind":"class","ident_start":449154,"ident_end":449171,"extent_start":449148,"extent_end":451940,"fully_qualified_name":"MatchAnyOfGeneric","ident_utf16":{"start":{"line_number":11966,"utf16_col":14},"end":{"line_number":11966,"utf16_col":31}},"extent_utf16":{"start":{"line_number":11966,"utf16_col":8},"end":{"line_number":12016,"utf16_col":9}}},{"name":"MatchAnyOfGeneric","kind":"function","ident_start":449236,"ident_end":449253,"extent_start":449236,"extent_end":449289,"fully_qualified_name":"MatchAnyOfGeneric::MatchAnyOfGeneric","ident_utf16":{"start":{"line_number":11968,"utf16_col":12},"end":{"line_number":11968,"utf16_col":29}},"extent_utf16":{"start":{"line_number":11968,"utf16_col":12},"end":{"line_number":11968,"utf16_col":65}}},{"name":"MatchAnyOfGeneric","kind":"function","ident_start":449379,"ident_end":449396,"extent_start":449379,"extent_end":449428,"fully_qualified_name":"MatchAnyOfGeneric::MatchAnyOfGeneric","ident_utf16":{"start":{"line_number":11970,"utf16_col":12},"end":{"line_number":11970,"utf16_col":29}},"extent_utf16":{"start":{"line_number":11970,"utf16_col":12},"end":{"line_number":11970,"utf16_col":61}}},{"name":"MatchAnyOfGeneric","kind":"function","ident_start":449515,"ident_end":449532,"extent_start":449515,"extent_end":449611,"fully_qualified_name":"MatchAnyOfGeneric::MatchAnyOfGeneric","ident_utf16":{"start":{"line_number":11973,"utf16_col":12},"end":{"line_number":11973,"utf16_col":29}},"extent_utf16":{"start":{"line_number":11973,"utf16_col":12},"end":{"line_number":11973,"utf16_col":108}}},{"name":"MatchAnyOfGeneric","kind":"function","ident_start":449633,"ident_end":449650,"extent_start":449624,"extent_end":449732,"fully_qualified_name":"MatchAnyOfGeneric::MatchAnyOfGeneric","ident_utf16":{"start":{"line_number":11974,"utf16_col":21},"end":{"line_number":11974,"utf16_col":38}},"extent_utf16":{"start":{"line_number":11974,"utf16_col":12},"end":{"line_number":11974,"utf16_col":120}}},{"name":"match","kind":"function","ident_start":449786,"ident_end":449791,"extent_start":449781,"extent_end":449933,"fully_qualified_name":"MatchAnyOfGeneric::match","ident_utf16":{"start":{"line_number":11977,"utf16_col":17},"end":{"line_number":11977,"utf16_col":22}},"extent_utf16":{"start":{"line_number":11977,"utf16_col":12},"end":{"line_number":11979,"utf16_col":13}}},{"name":"describe","kind":"function","ident_start":449959,"ident_end":449967,"extent_start":449947,"extent_end":450125,"fully_qualified_name":"MatchAnyOfGeneric::describe","ident_utf16":{"start":{"line_number":11981,"utf16_col":24},"end":{"line_number":11981,"utf16_col":32}},"extent_utf16":{"start":{"line_number":11981,"utf16_col":12},"end":{"line_number":11983,"utf16_col":13}}},{"name":"MatchNotOfGeneric","kind":"class","ident_start":451994,"ident_end":452011,"extent_start":451988,"extent_end":452969,"fully_qualified_name":"MatchNotOfGeneric","ident_utf16":{"start":{"line_number":12020,"utf16_col":14},"end":{"line_number":12020,"utf16_col":31}},"extent_utf16":{"start":{"line_number":12020,"utf16_col":8},"end":{"line_number":12044,"utf16_col":9}}},{"name":"MatchNotOfGeneric","kind":"function","ident_start":452116,"ident_end":452133,"extent_start":452116,"extent_end":452169,"fully_qualified_name":"MatchNotOfGeneric::MatchNotOfGeneric","ident_utf16":{"start":{"line_number":12024,"utf16_col":12},"end":{"line_number":12024,"utf16_col":29}},"extent_utf16":{"start":{"line_number":12024,"utf16_col":12},"end":{"line_number":12024,"utf16_col":65}}},{"name":"MatchNotOfGeneric","kind":"function","ident_start":452259,"ident_end":452276,"extent_start":452259,"extent_end":452308,"fully_qualified_name":"MatchNotOfGeneric::MatchNotOfGeneric","ident_utf16":{"start":{"line_number":12026,"utf16_col":12},"end":{"line_number":12026,"utf16_col":29}},"extent_utf16":{"start":{"line_number":12026,"utf16_col":12},"end":{"line_number":12026,"utf16_col":61}}},{"name":"MatchNotOfGeneric","kind":"function","ident_start":452404,"ident_end":452421,"extent_start":452395,"extent_end":452470,"fully_qualified_name":"MatchNotOfGeneric::MatchNotOfGeneric","ident_utf16":{"start":{"line_number":12029,"utf16_col":21},"end":{"line_number":12029,"utf16_col":38}},"extent_utf16":{"start":{"line_number":12029,"utf16_col":12},"end":{"line_number":12029,"utf16_col":87}}},{"name":"match","kind":"function","ident_start":452524,"ident_end":452529,"extent_start":452519,"extent_end":452608,"fully_qualified_name":"MatchNotOfGeneric::match","ident_utf16":{"start":{"line_number":12032,"utf16_col":17},"end":{"line_number":12032,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12032,"utf16_col":12},"end":{"line_number":12034,"utf16_col":13}}},{"name":"describe","kind":"function","ident_start":452634,"ident_end":452642,"extent_start":452622,"extent_end":452729,"fully_qualified_name":"MatchNotOfGeneric::describe","ident_utf16":{"start":{"line_number":12036,"utf16_col":24},"end":{"line_number":12036,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12036,"utf16_col":12},"end":{"line_number":12038,"utf16_col":13}}},{"name":"IsEmptyMatcher","kind":"class","ident_start":455309,"ident_end":455323,"extent_start":455303,"extent_end":455729,"fully_qualified_name":"IsEmptyMatcher","ident_utf16":{"start":{"line_number":12102,"utf16_col":14},"end":{"line_number":12102,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12102,"utf16_col":8},"end":{"line_number":12115,"utf16_col":9}}},{"name":"match","kind":"function","ident_start":455435,"ident_end":455440,"extent_start":455430,"extent_end":455667,"fully_qualified_name":"IsEmptyMatcher::match","ident_utf16":{"start":{"line_number":12105,"utf16_col":17},"end":{"line_number":12105,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12105,"utf16_col":12},"end":{"line_number":12112,"utf16_col":13}}},{"name":"describe","kind":"method","ident_start":455693,"ident_end":455701,"extent_start":455681,"extent_end":455719,"fully_qualified_name":"IsEmptyMatcher::describe","ident_utf16":{"start":{"line_number":12114,"utf16_col":24},"end":{"line_number":12114,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12114,"utf16_col":12},"end":{"line_number":12114,"utf16_col":50}}},{"name":"HasSizeMatcher","kind":"class","ident_start":455746,"ident_end":455760,"extent_start":455740,"extent_end":456340,"fully_qualified_name":"HasSizeMatcher","ident_utf16":{"start":{"line_number":12117,"utf16_col":14},"end":{"line_number":12117,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12117,"utf16_col":8},"end":{"line_number":12135,"utf16_col":9}}},{"name":"HasSizeMatcher","kind":"function","ident_start":455873,"ident_end":455887,"extent_start":455864,"extent_end":455971,"fully_qualified_name":"HasSizeMatcher::HasSizeMatcher","ident_utf16":{"start":{"line_number":12120,"utf16_col":21},"end":{"line_number":12120,"utf16_col":35}},"extent_utf16":{"start":{"line_number":12120,"utf16_col":12},"end":{"line_number":12122,"utf16_col":14}}},{"name":"match","kind":"function","ident_start":456032,"ident_end":456037,"extent_start":456027,"extent_end":456278,"fully_qualified_name":"HasSizeMatcher::match","ident_utf16":{"start":{"line_number":12125,"utf16_col":17},"end":{"line_number":12125,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12125,"utf16_col":12},"end":{"line_number":12132,"utf16_col":13}}},{"name":"describe","kind":"method","ident_start":456304,"ident_end":456312,"extent_start":456292,"extent_end":456330,"fully_qualified_name":"HasSizeMatcher::describe","ident_utf16":{"start":{"line_number":12134,"utf16_col":24},"end":{"line_number":12134,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12134,"utf16_col":12},"end":{"line_number":12134,"utf16_col":50}}},{"name":"SizeMatchesMatcher","kind":"class","ident_start":456393,"ident_end":456411,"extent_start":456387,"extent_end":457049,"fully_qualified_name":"SizeMatchesMatcher","ident_utf16":{"start":{"line_number":12138,"utf16_col":14},"end":{"line_number":12138,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12138,"utf16_col":8},"end":{"line_number":12158,"utf16_col":9}}},{"name":"SizeMatchesMatcher","kind":"function","ident_start":456516,"ident_end":456534,"extent_start":456507,"extent_end":456602,"fully_qualified_name":"SizeMatchesMatcher::SizeMatchesMatcher","ident_utf16":{"start":{"line_number":12141,"utf16_col":21},"end":{"line_number":12141,"utf16_col":39}},"extent_utf16":{"start":{"line_number":12141,"utf16_col":12},"end":{"line_number":12143,"utf16_col":14}}},{"name":"match","kind":"function","ident_start":456663,"ident_end":456668,"extent_start":456658,"extent_end":456909,"fully_qualified_name":"SizeMatchesMatcher::match","ident_utf16":{"start":{"line_number":12146,"utf16_col":17},"end":{"line_number":12146,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12146,"utf16_col":12},"end":{"line_number":12153,"utf16_col":13}}},{"name":"describe","kind":"function","ident_start":456935,"ident_end":456943,"extent_start":456923,"extent_end":457039,"fully_qualified_name":"SizeMatchesMatcher::describe","ident_utf16":{"start":{"line_number":12155,"utf16_col":24},"end":{"line_number":12155,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12155,"utf16_col":12},"end":{"line_number":12157,"utf16_col":13}}},{"name":"SizeIs","kind":"function","ident_start":457415,"ident_end":457421,"extent_start":457325,"extent_end":457512,"fully_qualified_name":"SizeIs","ident_utf16":{"start":{"line_number":12167,"utf16_col":37},"end":{"line_number":12167,"utf16_col":43}},"extent_utf16":{"start":{"line_number":12166,"utf16_col":8},"end":{"line_number":12169,"utf16_col":9}}},{"name":"ContainsElementMatcher","kind":"class","ident_start":457962,"ident_end":457984,"extent_start":457956,"extent_end":458753,"fully_qualified_name":"ContainsElementMatcher","ident_utf16":{"start":{"line_number":12188,"utf16_col":14},"end":{"line_number":12188,"utf16_col":36}},"extent_utf16":{"start":{"line_number":12188,"utf16_col":8},"end":{"line_number":12209,"utf16_col":9}}},{"name":"ContainsElementMatcher","kind":"function","ident_start":458156,"ident_end":458178,"extent_start":458156,"extent_end":458327,"fully_qualified_name":"ContainsElementMatcher::ContainsElementMatcher","ident_utf16":{"start":{"line_number":12193,"utf16_col":12},"end":{"line_number":12193,"utf16_col":34}},"extent_utf16":{"start":{"line_number":12193,"utf16_col":12},"end":{"line_number":12196,"utf16_col":14}}},{"name":"describe","kind":"function","ident_start":458353,"ident_end":458361,"extent_start":458341,"extent_end":458476,"fully_qualified_name":"ContainsElementMatcher::describe","ident_utf16":{"start":{"line_number":12198,"utf16_col":24},"end":{"line_number":12198,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12198,"utf16_col":12},"end":{"line_number":12200,"utf16_col":13}}},{"name":"match","kind":"function","ident_start":458537,"ident_end":458542,"extent_start":458532,"extent_end":458743,"fully_qualified_name":"ContainsElementMatcher::match","ident_utf16":{"start":{"line_number":12203,"utf16_col":17},"end":{"line_number":12203,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12203,"utf16_col":12},"end":{"line_number":12208,"utf16_col":13}}},{"name":"ContainsMatcherMatcher","kind":"class","ident_start":458898,"ident_end":458920,"extent_start":458892,"extent_end":459745,"fully_qualified_name":"ContainsMatcherMatcher","ident_utf16":{"start":{"line_number":12213,"utf16_col":14},"end":{"line_number":12213,"utf16_col":36}},"extent_utf16":{"start":{"line_number":12213,"utf16_col":8},"end":{"line_number":12236,"utf16_col":9}}},{"name":"ContainsMatcherMatcher","kind":"function","ident_start":459187,"ident_end":459209,"extent_start":459187,"extent_end":459289,"fully_qualified_name":"ContainsMatcherMatcher::ContainsMatcherMatcher","ident_utf16":{"start":{"line_number":12219,"utf16_col":12},"end":{"line_number":12219,"utf16_col":34}},"extent_utf16":{"start":{"line_number":12219,"utf16_col":12},"end":{"line_number":12221,"utf16_col":14}}},{"name":"match","kind":"function","ident_start":459350,"ident_end":459355,"extent_start":459345,"extent_end":459592,"fully_qualified_name":"ContainsMatcherMatcher::match","ident_utf16":{"start":{"line_number":12224,"utf16_col":17},"end":{"line_number":12224,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12224,"utf16_col":12},"end":{"line_number":12231,"utf16_col":13}}},{"name":"describe","kind":"function","ident_start":459618,"ident_end":459626,"extent_start":459606,"extent_end":459735,"fully_qualified_name":"ContainsMatcherMatcher::describe","ident_utf16":{"start":{"line_number":12233,"utf16_col":24},"end":{"line_number":12233,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12233,"utf16_col":12},"end":{"line_number":12235,"utf16_col":13}}},{"name":"Contains","kind":"function","ident_start":460060,"ident_end":460068,"extent_start":459960,"extent_end":460153,"fully_qualified_name":"Contains","ident_utf16":{"start":{"line_number":12245,"utf16_col":52},"end":{"line_number":12245,"utf16_col":60}},"extent_utf16":{"start":{"line_number":12244,"utf16_col":8},"end":{"line_number":12247,"utf16_col":9}}},{"name":"Contains","kind":"function","ident_start":460387,"ident_end":460395,"extent_start":460293,"extent_end":460473,"fully_qualified_name":"Contains","ident_utf16":{"start":{"line_number":12252,"utf16_col":41},"end":{"line_number":12252,"utf16_col":49}},"extent_utf16":{"start":{"line_number":12251,"utf16_col":8},"end":{"line_number":12254,"utf16_col":9}}},{"name":"Contains","kind":"function","ident_start":460768,"ident_end":460776,"extent_start":460732,"extent_end":460876,"fully_qualified_name":"Contains","ident_utf16":{"start":{"line_number":12262,"utf16_col":44},"end":{"line_number":12262,"utf16_col":52}},"extent_utf16":{"start":{"line_number":12262,"utf16_col":8},"end":{"line_number":12264,"utf16_col":9}}},{"name":"ExceptionMessageMatcher","kind":"class","ident_start":461076,"ident_end":461099,"extent_start":461070,"extent_end":461375,"fully_qualified_name":"ExceptionMessageMatcher","ident_utf16":{"start":{"line_number":12279,"utf16_col":6},"end":{"line_number":12279,"utf16_col":29}},"extent_utf16":{"start":{"line_number":12279,"utf16_col":0},"end":{"line_number":12290,"utf16_col":1}}},{"name":"ExceptionMessageMatcher","kind":"function","ident_start":461185,"ident_end":461208,"extent_start":461185,"extent_end":461271,"fully_qualified_name":"ExceptionMessageMatcher::ExceptionMessageMatcher","ident_utf16":{"start":{"line_number":12283,"utf16_col":4},"end":{"line_number":12283,"utf16_col":27}},"extent_utf16":{"start":{"line_number":12283,"utf16_col":4},"end":{"line_number":12285,"utf16_col":6}}},{"name":"match","kind":"method","ident_start":461282,"ident_end":461287,"extent_start":461277,"extent_end":461329,"fully_qualified_name":"ExceptionMessageMatcher::match","ident_utf16":{"start":{"line_number":12287,"utf16_col":9},"end":{"line_number":12287,"utf16_col":14}},"extent_utf16":{"start":{"line_number":12287,"utf16_col":4},"end":{"line_number":12287,"utf16_col":56}}},{"name":"describe","kind":"method","ident_start":461347,"ident_end":461355,"extent_start":461335,"extent_end":461373,"fully_qualified_name":"ExceptionMessageMatcher::describe","ident_utf16":{"start":{"line_number":12289,"utf16_col":16},"end":{"line_number":12289,"utf16_col":24}},"extent_utf16":{"start":{"line_number":12289,"utf16_col":4},"end":{"line_number":12289,"utf16_col":42}}},{"name":"ExceptionMessageMatchesMatcher","kind":"class","ident_start":461575,"ident_end":461605,"extent_start":461569,"extent_end":462031,"fully_qualified_name":"ExceptionMessageMatchesMatcher","ident_utf16":{"start":{"line_number":12296,"utf16_col":6},"end":{"line_number":12296,"utf16_col":36}},"extent_utf16":{"start":{"line_number":12296,"utf16_col":0},"end":{"line_number":12311,"utf16_col":1}}},{"name":"ExceptionMessageMatchesMatcher","kind":"function","ident_start":461701,"ident_end":461731,"extent_start":461701,"extent_end":461807,"fully_qualified_name":"ExceptionMessageMatchesMatcher::ExceptionMessageMatchesMatcher","ident_utf16":{"start":{"line_number":12301,"utf16_col":4},"end":{"line_number":12301,"utf16_col":34}},"extent_utf16":{"start":{"line_number":12301,"utf16_col":4},"end":{"line_number":12302,"utf16_col":45}}},{"name":"match","kind":"function","ident_start":461818,"ident_end":461823,"extent_start":461813,"extent_end":461919,"fully_qualified_name":"ExceptionMessageMatchesMatcher::match","ident_utf16":{"start":{"line_number":12304,"utf16_col":9},"end":{"line_number":12304,"utf16_col":14}},"extent_utf16":{"start":{"line_number":12304,"utf16_col":4},"end":{"line_number":12306,"utf16_col":5}}},{"name":"describe","kind":"function","ident_start":461937,"ident_end":461945,"extent_start":461925,"extent_end":462029,"fully_qualified_name":"ExceptionMessageMatchesMatcher::describe","ident_utf16":{"start":{"line_number":12308,"utf16_col":16},"end":{"line_number":12308,"utf16_col":24}},"extent_utf16":{"start":{"line_number":12308,"utf16_col":4},"end":{"line_number":12310,"utf16_col":5}}},{"name":"MessageMatches","kind":"function","ident_start":462235,"ident_end":462249,"extent_start":462185,"extent_end":462325,"fully_qualified_name":"MessageMatches","ident_utf16":{"start":{"line_number":12317,"utf16_col":0},"end":{"line_number":12317,"utf16_col":14}},"extent_utf16":{"start":{"line_number":12316,"utf16_col":0},"end":{"line_number":12319,"utf16_col":1}}},{"name":"FloatingPointKind","kind":"type","ident_start":462609,"ident_end":462626,"extent_start":462598,"extent_end":462636,"fully_qualified_name":"FloatingPointKind","ident_utf16":{"start":{"line_number":12335,"utf16_col":19},"end":{"line_number":12335,"utf16_col":36}},"extent_utf16":{"start":{"line_number":12335,"utf16_col":8},"end":{"line_number":12335,"utf16_col":46}}},{"name":"WithinAbsMatcher","kind":"class","ident_start":462656,"ident_end":462672,"extent_start":462649,"extent_end":462951,"fully_qualified_name":"WithinAbsMatcher","ident_utf16":{"start":{"line_number":12338,"utf16_col":11},"end":{"line_number":12338,"utf16_col":27}},"extent_utf16":{"start":{"line_number":12338,"utf16_col":4},"end":{"line_number":12346,"utf16_col":5}}},{"name":"match","kind":"method","ident_start":462791,"ident_end":462796,"extent_start":462786,"extent_end":462835,"fully_qualified_name":"WithinAbsMatcher::match","ident_utf16":{"start":{"line_number":12341,"utf16_col":13},"end":{"line_number":12341,"utf16_col":18}},"extent_utf16":{"start":{"line_number":12341,"utf16_col":8},"end":{"line_number":12341,"utf16_col":57}}},{"name":"describe","kind":"method","ident_start":462856,"ident_end":462864,"extent_start":462844,"extent_end":462882,"fully_qualified_name":"WithinAbsMatcher::describe","ident_utf16":{"start":{"line_number":12342,"utf16_col":20},"end":{"line_number":12342,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12342,"utf16_col":8},"end":{"line_number":12342,"utf16_col":46}}},{"name":"WithinUlpsMatcher","kind":"class","ident_start":463109,"ident_end":463126,"extent_start":463103,"extent_end":463540,"fully_qualified_name":"WithinUlpsMatcher","ident_utf16":{"start":{"line_number":12353,"utf16_col":10},"end":{"line_number":12353,"utf16_col":27}},"extent_utf16":{"start":{"line_number":12353,"utf16_col":4},"end":{"line_number":12364,"utf16_col":5}}},{"name":"match","kind":"method","ident_start":463338,"ident_end":463343,"extent_start":463333,"extent_end":463382,"fully_qualified_name":"WithinUlpsMatcher::match","ident_utf16":{"start":{"line_number":12358,"utf16_col":13},"end":{"line_number":12358,"utf16_col":18}},"extent_utf16":{"start":{"line_number":12358,"utf16_col":8},"end":{"line_number":12358,"utf16_col":57}}},{"name":"describe","kind":"method","ident_start":463403,"ident_end":463411,"extent_start":463391,"extent_end":463429,"fully_qualified_name":"WithinUlpsMatcher::describe","ident_utf16":{"start":{"line_number":12359,"utf16_col":20},"end":{"line_number":12359,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12359,"utf16_col":8},"end":{"line_number":12359,"utf16_col":46}}},{"name":"WithinRelMatcher","kind":"class","ident_start":464245,"ident_end":464261,"extent_start":464239,"extent_end":464544,"fully_qualified_name":"WithinRelMatcher","ident_utf16":{"start":{"line_number":12379,"utf16_col":10},"end":{"line_number":12379,"utf16_col":26}},"extent_utf16":{"start":{"line_number":12379,"utf16_col":4},"end":{"line_number":12387,"utf16_col":5}}},{"name":"match","kind":"method","ident_start":464383,"ident_end":464388,"extent_start":464378,"extent_end":464427,"fully_qualified_name":"WithinRelMatcher::match","ident_utf16":{"start":{"line_number":12382,"utf16_col":13},"end":{"line_number":12382,"utf16_col":18}},"extent_utf16":{"start":{"line_number":12382,"utf16_col":8},"end":{"line_number":12382,"utf16_col":57}}},{"name":"describe","kind":"method","ident_start":464448,"ident_end":464456,"extent_start":464436,"extent_end":464474,"fully_qualified_name":"WithinRelMatcher::describe","ident_utf16":{"start":{"line_number":12383,"utf16_col":20},"end":{"line_number":12383,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12383,"utf16_col":8},"end":{"line_number":12383,"utf16_col":46}}},{"name":"IsNaNMatcher","kind":"class","ident_start":465124,"ident_end":465136,"extent_start":465118,"extent_end":465332,"fully_qualified_name":"IsNaNMatcher","ident_utf16":{"start":{"line_number":12400,"utf16_col":10},"end":{"line_number":12400,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12400,"utf16_col":4},"end":{"line_number":12405,"utf16_col":5}}},{"name":"IsNaNMatcher","kind":"function","ident_start":465194,"ident_end":465206,"extent_start":465194,"extent_end":465219,"fully_qualified_name":"IsNaNMatcher::IsNaNMatcher","ident_utf16":{"start":{"line_number":12402,"utf16_col":8},"end":{"line_number":12402,"utf16_col":20}},"extent_utf16":{"start":{"line_number":12402,"utf16_col":8},"end":{"line_number":12402,"utf16_col":33}}},{"name":"match","kind":"method","ident_start":465233,"ident_end":465238,"extent_start":465228,"extent_end":465279,"fully_qualified_name":"IsNaNMatcher::match","ident_utf16":{"start":{"line_number":12403,"utf16_col":13},"end":{"line_number":12403,"utf16_col":18}},"extent_utf16":{"start":{"line_number":12403,"utf16_col":8},"end":{"line_number":12403,"utf16_col":59}}},{"name":"describe","kind":"method","ident_start":465300,"ident_end":465308,"extent_start":465288,"extent_end":465326,"fully_qualified_name":"IsNaNMatcher::describe","ident_utf16":{"start":{"line_number":12404,"utf16_col":20},"end":{"line_number":12404,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12404,"utf16_col":8},"end":{"line_number":12404,"utf16_col":46}}},{"name":"PredicateMatcher","kind":"class","ident_start":465768,"ident_end":465784,"extent_start":465762,"extent_end":466229,"fully_qualified_name":"PredicateMatcher","ident_utf16":{"start":{"line_number":12429,"utf16_col":6},"end":{"line_number":12429,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12429,"utf16_col":0},"end":{"line_number":12446,"utf16_col":1}}},{"name":"PredicateMatcher","kind":"function","ident_start":465888,"ident_end":465904,"extent_start":465888,"extent_end":466056,"fully_qualified_name":"PredicateMatcher::PredicateMatcher","ident_utf16":{"start":{"line_number":12434,"utf16_col":4},"end":{"line_number":12434,"utf16_col":20}},"extent_utf16":{"start":{"line_number":12434,"utf16_col":4},"end":{"line_number":12437,"utf16_col":6}}},{"name":"match","kind":"function","ident_start":466067,"ident_end":466072,"extent_start":466062,"extent_end":466146,"fully_qualified_name":"PredicateMatcher::match","ident_utf16":{"start":{"line_number":12439,"utf16_col":9},"end":{"line_number":12439,"utf16_col":14}},"extent_utf16":{"start":{"line_number":12439,"utf16_col":4},"end":{"line_number":12441,"utf16_col":5}}},{"name":"describe","kind":"function","ident_start":466164,"ident_end":466172,"extent_start":466152,"extent_end":466227,"fully_qualified_name":"PredicateMatcher::describe","ident_utf16":{"start":{"line_number":12443,"utf16_col":16},"end":{"line_number":12443,"utf16_col":24}},"extent_utf16":{"start":{"line_number":12443,"utf16_col":4},"end":{"line_number":12445,"utf16_col":5}}},{"name":"Predicate","kind":"function","ident_start":466481,"ident_end":466490,"extent_start":466455,"extent_end":466841,"fully_qualified_name":"Predicate","ident_utf16":{"start":{"line_number":12454,"utf16_col":30},"end":{"line_number":12454,"utf16_col":39}},"extent_utf16":{"start":{"line_number":12454,"utf16_col":4},"end":{"line_number":12458,"utf16_col":5}}},{"name":"AllMatchMatcher","kind":"class","ident_start":467214,"ident_end":467229,"extent_start":467208,"extent_end":467861,"fully_qualified_name":"AllMatchMatcher","ident_utf16":{"start":{"line_number":12474,"utf16_col":14},"end":{"line_number":12474,"utf16_col":29}},"extent_utf16":{"start":{"line_number":12474,"utf16_col":8},"end":{"line_number":12494,"utf16_col":9}}},{"name":"AllMatchMatcher","kind":"function","ident_start":467325,"ident_end":467340,"extent_start":467325,"extent_end":467420,"fully_qualified_name":"AllMatchMatcher::AllMatchMatcher","ident_utf16":{"start":{"line_number":12477,"utf16_col":12},"end":{"line_number":12477,"utf16_col":27}},"extent_utf16":{"start":{"line_number":12477,"utf16_col":12},"end":{"line_number":12479,"utf16_col":14}}},{"name":"describe","kind":"function","ident_start":467446,"ident_end":467454,"extent_start":467434,"extent_end":467547,"fully_qualified_name":"AllMatchMatcher::describe","ident_utf16":{"start":{"line_number":12481,"utf16_col":24},"end":{"line_number":12481,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12481,"utf16_col":12},"end":{"line_number":12483,"utf16_col":13}}},{"name":"match","kind":"function","ident_start":467608,"ident_end":467613,"extent_start":467603,"extent_end":467851,"fully_qualified_name":"AllMatchMatcher::match","ident_utf16":{"start":{"line_number":12486,"utf16_col":17},"end":{"line_number":12486,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12486,"utf16_col":12},"end":{"line_number":12493,"utf16_col":13}}},{"name":"NoneMatchMatcher","kind":"class","ident_start":467996,"ident_end":468012,"extent_start":467990,"extent_end":468645,"fully_qualified_name":"NoneMatchMatcher","ident_utf16":{"start":{"line_number":12498,"utf16_col":14},"end":{"line_number":12498,"utf16_col":30}},"extent_utf16":{"start":{"line_number":12498,"utf16_col":8},"end":{"line_number":12518,"utf16_col":9}}},{"name":"NoneMatchMatcher","kind":"function","ident_start":468108,"ident_end":468124,"extent_start":468108,"extent_end":468204,"fully_qualified_name":"NoneMatchMatcher::NoneMatchMatcher","ident_utf16":{"start":{"line_number":12501,"utf16_col":12},"end":{"line_number":12501,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12501,"utf16_col":12},"end":{"line_number":12503,"utf16_col":14}}},{"name":"describe","kind":"function","ident_start":468230,"ident_end":468238,"extent_start":468218,"extent_end":468332,"fully_qualified_name":"NoneMatchMatcher::describe","ident_utf16":{"start":{"line_number":12505,"utf16_col":24},"end":{"line_number":12505,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12505,"utf16_col":12},"end":{"line_number":12507,"utf16_col":13}}},{"name":"match","kind":"function","ident_start":468393,"ident_end":468398,"extent_start":468388,"extent_end":468635,"fully_qualified_name":"NoneMatchMatcher::match","ident_utf16":{"start":{"line_number":12510,"utf16_col":17},"end":{"line_number":12510,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12510,"utf16_col":12},"end":{"line_number":12517,"utf16_col":13}}},{"name":"AnyMatchMatcher","kind":"class","ident_start":468790,"ident_end":468805,"extent_start":468784,"extent_end":469436,"fully_qualified_name":"AnyMatchMatcher","ident_utf16":{"start":{"line_number":12522,"utf16_col":14},"end":{"line_number":12522,"utf16_col":29}},"extent_utf16":{"start":{"line_number":12522,"utf16_col":8},"end":{"line_number":12542,"utf16_col":9}}},{"name":"AnyMatchMatcher","kind":"function","ident_start":468901,"ident_end":468916,"extent_start":468901,"extent_end":468996,"fully_qualified_name":"AnyMatchMatcher::AnyMatchMatcher","ident_utf16":{"start":{"line_number":12525,"utf16_col":12},"end":{"line_number":12525,"utf16_col":27}},"extent_utf16":{"start":{"line_number":12525,"utf16_col":12},"end":{"line_number":12527,"utf16_col":14}}},{"name":"describe","kind":"function","ident_start":469022,"ident_end":469030,"extent_start":469010,"extent_end":469123,"fully_qualified_name":"AnyMatchMatcher::describe","ident_utf16":{"start":{"line_number":12529,"utf16_col":24},"end":{"line_number":12529,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12529,"utf16_col":12},"end":{"line_number":12531,"utf16_col":13}}},{"name":"match","kind":"function","ident_start":469184,"ident_end":469189,"extent_start":469179,"extent_end":469426,"fully_qualified_name":"AnyMatchMatcher::match","ident_utf16":{"start":{"line_number":12534,"utf16_col":17},"end":{"line_number":12534,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12534,"utf16_col":12},"end":{"line_number":12541,"utf16_col":13}}},{"name":"AllTrueMatcher","kind":"class","ident_start":469522,"ident_end":469536,"extent_start":469516,"extent_end":469936,"fully_qualified_name":"AllTrueMatcher","ident_utf16":{"start":{"line_number":12545,"utf16_col":14},"end":{"line_number":12545,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12545,"utf16_col":8},"end":{"line_number":12558,"utf16_col":9}}},{"name":"describe","kind":"method","ident_start":469613,"ident_end":469621,"extent_start":469601,"extent_end":469639,"fully_qualified_name":"AllTrueMatcher::describe","ident_utf16":{"start":{"line_number":12547,"utf16_col":24},"end":{"line_number":12547,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12547,"utf16_col":12},"end":{"line_number":12547,"utf16_col":50}}},{"name":"match","kind":"function","ident_start":469700,"ident_end":469705,"extent_start":469695,"extent_end":469926,"fully_qualified_name":"AllTrueMatcher::match","ident_utf16":{"start":{"line_number":12550,"utf16_col":17},"end":{"line_number":12550,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12550,"utf16_col":12},"end":{"line_number":12557,"utf16_col":13}}},{"name":"NoneTrueMatcher","kind":"class","ident_start":470019,"ident_end":470034,"extent_start":470013,"extent_end":470433,"fully_qualified_name":"NoneTrueMatcher","ident_utf16":{"start":{"line_number":12561,"utf16_col":14},"end":{"line_number":12561,"utf16_col":29}},"extent_utf16":{"start":{"line_number":12561,"utf16_col":8},"end":{"line_number":12574,"utf16_col":9}}},{"name":"describe","kind":"method","ident_start":470111,"ident_end":470119,"extent_start":470099,"extent_end":470137,"fully_qualified_name":"NoneTrueMatcher::describe","ident_utf16":{"start":{"line_number":12563,"utf16_col":24},"end":{"line_number":12563,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12563,"utf16_col":12},"end":{"line_number":12563,"utf16_col":50}}},{"name":"match","kind":"function","ident_start":470198,"ident_end":470203,"extent_start":470193,"extent_end":470423,"fully_qualified_name":"NoneTrueMatcher::match","ident_utf16":{"start":{"line_number":12566,"utf16_col":17},"end":{"line_number":12566,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12566,"utf16_col":12},"end":{"line_number":12573,"utf16_col":13}}},{"name":"AnyTrueMatcher","kind":"class","ident_start":470517,"ident_end":470531,"extent_start":470511,"extent_end":470930,"fully_qualified_name":"AnyTrueMatcher","ident_utf16":{"start":{"line_number":12577,"utf16_col":14},"end":{"line_number":12577,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12577,"utf16_col":8},"end":{"line_number":12590,"utf16_col":9}}},{"name":"describe","kind":"method","ident_start":470608,"ident_end":470616,"extent_start":470596,"extent_end":470634,"fully_qualified_name":"AnyTrueMatcher::describe","ident_utf16":{"start":{"line_number":12579,"utf16_col":24},"end":{"line_number":12579,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12579,"utf16_col":12},"end":{"line_number":12579,"utf16_col":50}}},{"name":"match","kind":"function","ident_start":470695,"ident_end":470700,"extent_start":470690,"extent_end":470920,"fully_qualified_name":"AnyTrueMatcher::match","ident_utf16":{"start":{"line_number":12582,"utf16_col":17},"end":{"line_number":12582,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12582,"utf16_col":12},"end":{"line_number":12589,"utf16_col":13}}},{"name":"AllMatch","kind":"function","ident_start":471091,"ident_end":471099,"extent_start":471066,"extent_end":471177,"fully_qualified_name":"AllMatch","ident_utf16":{"start":{"line_number":12594,"utf16_col":33},"end":{"line_number":12594,"utf16_col":41}},"extent_utf16":{"start":{"line_number":12594,"utf16_col":8},"end":{"line_number":12596,"utf16_col":9}}},{"name":"NoneMatch","kind":"function","ident_start":471339,"ident_end":471348,"extent_start":471313,"extent_end":471426,"fully_qualified_name":"NoneMatch","ident_utf16":{"start":{"line_number":12600,"utf16_col":34},"end":{"line_number":12600,"utf16_col":43}},"extent_utf16":{"start":{"line_number":12600,"utf16_col":8},"end":{"line_number":12602,"utf16_col":9}}},{"name":"AnyMatch","kind":"function","ident_start":471588,"ident_end":471596,"extent_start":471563,"extent_end":471674,"fully_qualified_name":"AnyMatch","ident_utf16":{"start":{"line_number":12606,"utf16_col":33},"end":{"line_number":12606,"utf16_col":41}},"extent_utf16":{"start":{"line_number":12606,"utf16_col":8},"end":{"line_number":12608,"utf16_col":9}}},{"name":"RangeEqualsMatcher","kind":"class","ident_start":472474,"ident_end":472492,"extent_start":472468,"extent_end":473801,"fully_qualified_name":"RangeEqualsMatcher","ident_utf16":{"start":{"line_number":12639,"utf16_col":14},"end":{"line_number":12639,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12639,"utf16_col":8},"end":{"line_number":12672,"utf16_col":9}}},{"name":"RangeEqualsMatcher","kind":"function","ident_start":472722,"ident_end":472740,"extent_start":472700,"extent_end":472938,"fully_qualified_name":"RangeEqualsMatcher::RangeEqualsMatcher","ident_utf16":{"start":{"line_number":12646,"utf16_col":12},"end":{"line_number":12646,"utf16_col":30}},"extent_utf16":{"start":{"line_number":12645,"utf16_col":12},"end":{"line_number":12649,"utf16_col":60}}},{"name":"match","kind":"function","ident_start":473021,"ident_end":473026,"extent_start":472994,"extent_end":473644,"fully_qualified_name":"RangeEqualsMatcher::match","ident_utf16":{"start":{"line_number":12653,"utf16_col":17},"end":{"line_number":12653,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12652,"utf16_col":12},"end":{"line_number":12667,"utf16_col":13}}},{"name":"describe","kind":"function","ident_start":473670,"ident_end":473678,"extent_start":473658,"extent_end":473791,"fully_qualified_name":"RangeEqualsMatcher::describe","ident_utf16":{"start":{"line_number":12669,"utf16_col":24},"end":{"line_number":12669,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12669,"utf16_col":12},"end":{"line_number":12671,"utf16_col":13}}},{"name":"UnorderedRangeEqualsMatcher","kind":"class","ident_start":474031,"ident_end":474058,"extent_start":474025,"extent_end":475258,"fully_qualified_name":"UnorderedRangeEqualsMatcher","ident_utf16":{"start":{"line_number":12679,"utf16_col":14},"end":{"line_number":12679,"utf16_col":41}},"extent_utf16":{"start":{"line_number":12679,"utf16_col":8},"end":{"line_number":12707,"utf16_col":9}}},{"name":"UnorderedRangeEqualsMatcher","kind":"function","ident_start":474288,"ident_end":474315,"extent_start":474266,"extent_end":474522,"fully_qualified_name":"UnorderedRangeEqualsMatcher::UnorderedRangeEqualsMatcher","ident_utf16":{"start":{"line_number":12686,"utf16_col":12},"end":{"line_number":12686,"utf16_col":39}},"extent_utf16":{"start":{"line_number":12685,"utf16_col":12},"end":{"line_number":12689,"utf16_col":60}}},{"name":"match","kind":"function","ident_start":474605,"ident_end":474610,"extent_start":474578,"extent_end":475066,"fully_qualified_name":"UnorderedRangeEqualsMatcher::match","ident_utf16":{"start":{"line_number":12693,"utf16_col":17},"end":{"line_number":12693,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12692,"utf16_col":12},"end":{"line_number":12701,"utf16_col":13}}},{"name":"describe","kind":"function","ident_start":475092,"ident_end":475100,"extent_start":475080,"extent_end":475248,"fully_qualified_name":"UnorderedRangeEqualsMatcher::describe","ident_utf16":{"start":{"line_number":12703,"utf16_col":24},"end":{"line_number":12703,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12703,"utf16_col":12},"end":{"line_number":12706,"utf16_col":13}}},{"name":"RangeEquals","kind":"function","ident_start":475716,"ident_end":475727,"extent_start":475650,"extent_end":475898,"fully_qualified_name":"RangeEquals","ident_utf16":{"start":{"line_number":12720,"utf16_col":8},"end":{"line_number":12720,"utf16_col":19}},"extent_utf16":{"start":{"line_number":12718,"utf16_col":8},"end":{"line_number":12723,"utf16_col":9}}},{"name":"RangeEquals","kind":"function","ident_start":476368,"ident_end":476379,"extent_start":476287,"extent_end":476546,"fully_qualified_name":"RangeEquals","ident_utf16":{"start":{"line_number":12736,"utf16_col":8},"end":{"line_number":12736,"utf16_col":19}},"extent_utf16":{"start":{"line_number":12734,"utf16_col":8},"end":{"line_number":12739,"utf16_col":9}}},{"name":"UnorderedRangeEquals","kind":"function","ident_start":477033,"ident_end":477053,"extent_start":476958,"extent_end":477233,"fully_qualified_name":"UnorderedRangeEquals","ident_utf16":{"start":{"line_number":12752,"utf16_col":8},"end":{"line_number":12752,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12750,"utf16_col":8},"end":{"line_number":12755,"utf16_col":9}}},{"name":"UnorderedRangeEquals","kind":"function","ident_start":477733,"ident_end":477753,"extent_start":477643,"extent_end":477929,"fully_qualified_name":"UnorderedRangeEquals","ident_utf16":{"start":{"line_number":12768,"utf16_col":8},"end":{"line_number":12768,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12766,"utf16_col":8},"end":{"line_number":12771,"utf16_col":9}}},{"name":"CasedString","kind":"class","ident_start":478191,"ident_end":478202,"extent_start":478184,"extent_end":478472,"fully_qualified_name":"CasedString","ident_utf16":{"start":{"line_number":12787,"utf16_col":11},"end":{"line_number":12787,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12787,"utf16_col":4},"end":{"line_number":12794,"utf16_col":5}}},{"name":"StringMatcherBase","kind":"class","ident_start":478485,"ident_end":478502,"extent_start":478479,"extent_end":478792,"fully_qualified_name":"StringMatcherBase","ident_utf16":{"start":{"line_number":12796,"utf16_col":10},"end":{"line_number":12796,"utf16_col":27}},"extent_utf16":{"start":{"line_number":12796,"utf16_col":4},"end":{"line_number":12805,"utf16_col":5}}},{"name":"describe","kind":"method","ident_start":478760,"ident_end":478768,"extent_start":478748,"extent_end":478786,"fully_qualified_name":"StringMatcherBase::describe","ident_utf16":{"start":{"line_number":12804,"utf16_col":20},"end":{"line_number":12804,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12804,"utf16_col":8},"end":{"line_number":12804,"utf16_col":46}}},{"name":"StringEqualsMatcher","kind":"class","ident_start":478805,"ident_end":478824,"extent_start":478799,"extent_end":479003,"fully_qualified_name":"StringEqualsMatcher","ident_utf16":{"start":{"line_number":12807,"utf16_col":10},"end":{"line_number":12807,"utf16_col":29}},"extent_utf16":{"start":{"line_number":12807,"utf16_col":4},"end":{"line_number":12811,"utf16_col":5}}},{"name":"match","kind":"method","ident_start":478947,"ident_end":478952,"extent_start":478942,"extent_end":478997,"fully_qualified_name":"StringEqualsMatcher::match","ident_utf16":{"start":{"line_number":12810,"utf16_col":13},"end":{"line_number":12810,"utf16_col":18}},"extent_utf16":{"start":{"line_number":12810,"utf16_col":8},"end":{"line_number":12810,"utf16_col":63}}},{"name":"StringContainsMatcher","kind":"class","ident_start":479015,"ident_end":479036,"extent_start":479009,"extent_end":479217,"fully_qualified_name":"StringContainsMatcher","ident_utf16":{"start":{"line_number":12812,"utf16_col":10},"end":{"line_number":12812,"utf16_col":31}},"extent_utf16":{"start":{"line_number":12812,"utf16_col":4},"end":{"line_number":12816,"utf16_col":5}}},{"name":"match","kind":"method","ident_start":479161,"ident_end":479166,"extent_start":479156,"extent_end":479211,"fully_qualified_name":"StringContainsMatcher::match","ident_utf16":{"start":{"line_number":12815,"utf16_col":13},"end":{"line_number":12815,"utf16_col":18}},"extent_utf16":{"start":{"line_number":12815,"utf16_col":8},"end":{"line_number":12815,"utf16_col":63}}},{"name":"StartsWithMatcher","kind":"class","ident_start":479229,"ident_end":479246,"extent_start":479223,"extent_end":479423,"fully_qualified_name":"StartsWithMatcher","ident_utf16":{"start":{"line_number":12817,"utf16_col":10},"end":{"line_number":12817,"utf16_col":27}},"extent_utf16":{"start":{"line_number":12817,"utf16_col":4},"end":{"line_number":12821,"utf16_col":5}}},{"name":"match","kind":"method","ident_start":479367,"ident_end":479372,"extent_start":479362,"extent_end":479417,"fully_qualified_name":"StartsWithMatcher::match","ident_utf16":{"start":{"line_number":12820,"utf16_col":13},"end":{"line_number":12820,"utf16_col":18}},"extent_utf16":{"start":{"line_number":12820,"utf16_col":8},"end":{"line_number":12820,"utf16_col":63}}},{"name":"EndsWithMatcher","kind":"class","ident_start":479435,"ident_end":479450,"extent_start":479429,"extent_end":479625,"fully_qualified_name":"EndsWithMatcher","ident_utf16":{"start":{"line_number":12822,"utf16_col":10},"end":{"line_number":12822,"utf16_col":25}},"extent_utf16":{"start":{"line_number":12822,"utf16_col":4},"end":{"line_number":12826,"utf16_col":5}}},{"name":"match","kind":"method","ident_start":479569,"ident_end":479574,"extent_start":479564,"extent_end":479619,"fully_qualified_name":"EndsWithMatcher::match","ident_utf16":{"start":{"line_number":12825,"utf16_col":13},"end":{"line_number":12825,"utf16_col":18}},"extent_utf16":{"start":{"line_number":12825,"utf16_col":8},"end":{"line_number":12825,"utf16_col":63}}},{"name":"RegexMatcher","kind":"class","ident_start":479638,"ident_end":479650,"extent_start":479632,"extent_end":479967,"fully_qualified_name":"RegexMatcher","ident_utf16":{"start":{"line_number":12828,"utf16_col":10},"end":{"line_number":12828,"utf16_col":22}},"extent_utf16":{"start":{"line_number":12828,"utf16_col":4},"end":{"line_number":12836,"utf16_col":5}}},{"name":"match","kind":"method","ident_start":479863,"ident_end":479868,"extent_start":479858,"extent_end":479914,"fully_qualified_name":"RegexMatcher::match","ident_utf16":{"start":{"line_number":12834,"utf16_col":13},"end":{"line_number":12834,"utf16_col":18}},"extent_utf16":{"start":{"line_number":12834,"utf16_col":8},"end":{"line_number":12834,"utf16_col":64}}},{"name":"describe","kind":"method","ident_start":479935,"ident_end":479943,"extent_start":479923,"extent_end":479961,"fully_qualified_name":"RegexMatcher::describe","ident_utf16":{"start":{"line_number":12835,"utf16_col":20},"end":{"line_number":12835,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12835,"utf16_col":8},"end":{"line_number":12835,"utf16_col":46}}},{"name":"VectorContainsElementMatcher","kind":"class","ident_start":481163,"ident_end":481191,"extent_start":481157,"extent_end":481788,"fully_qualified_name":"VectorContainsElementMatcher","ident_utf16":{"start":{"line_number":12865,"utf16_col":10},"end":{"line_number":12865,"utf16_col":38}},"extent_utf16":{"start":{"line_number":12865,"utf16_col":4},"end":{"line_number":12885,"utf16_col":5}}},{"name":"VectorContainsElementMatcher","kind":"function","ident_start":481296,"ident_end":481324,"extent_start":481296,"extent_end":481394,"fully_qualified_name":"VectorContainsElementMatcher::VectorContainsElementMatcher","ident_utf16":{"start":{"line_number":12869,"utf16_col":8},"end":{"line_number":12869,"utf16_col":36}},"extent_utf16":{"start":{"line_number":12869,"utf16_col":8},"end":{"line_number":12871,"utf16_col":10}}},{"name":"match","kind":"function","ident_start":481409,"ident_end":481414,"extent_start":481404,"extent_end":481645,"fully_qualified_name":"VectorContainsElementMatcher::match","ident_utf16":{"start":{"line_number":12873,"utf16_col":13},"end":{"line_number":12873,"utf16_col":18}},"extent_utf16":{"start":{"line_number":12873,"utf16_col":8},"end":{"line_number":12880,"utf16_col":9}}},{"name":"describe","kind":"function","ident_start":481667,"ident_end":481675,"extent_start":481655,"extent_end":481782,"fully_qualified_name":"VectorContainsElementMatcher::describe","ident_utf16":{"start":{"line_number":12882,"utf16_col":20},"end":{"line_number":12882,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12882,"utf16_col":8},"end":{"line_number":12884,"utf16_col":9}}},{"name":"ContainsMatcher","kind":"class","ident_start":481867,"ident_end":481882,"extent_start":481861,"extent_end":482895,"fully_qualified_name":"ContainsMatcher","ident_utf16":{"start":{"line_number":12888,"utf16_col":10},"end":{"line_number":12888,"utf16_col":25}},"extent_utf16":{"start":{"line_number":12888,"utf16_col":4},"end":{"line_number":12917,"utf16_col":5}}},{"name":"ContainsMatcher","kind":"function","ident_start":482016,"ident_end":482031,"extent_start":482016,"extent_end":482127,"fully_qualified_name":"ContainsMatcher::ContainsMatcher","ident_utf16":{"start":{"line_number":12892,"utf16_col":8},"end":{"line_number":12892,"utf16_col":23}},"extent_utf16":{"start":{"line_number":12892,"utf16_col":8},"end":{"line_number":12894,"utf16_col":10}}},{"name":"match","kind":"function","ident_start":482142,"ident_end":482147,"extent_start":482137,"extent_end":482753,"fully_qualified_name":"ContainsMatcher::match","ident_utf16":{"start":{"line_number":12896,"utf16_col":13},"end":{"line_number":12896,"utf16_col":18}},"extent_utf16":{"start":{"line_number":12896,"utf16_col":8},"end":{"line_number":12913,"utf16_col":9}}},{"name":"describe","kind":"function","ident_start":482774,"ident_end":482782,"extent_start":482762,"extent_end":482889,"fully_qualified_name":"ContainsMatcher::describe","ident_utf16":{"start":{"line_number":12914,"utf16_col":20},"end":{"line_number":12914,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12914,"utf16_col":8},"end":{"line_number":12916,"utf16_col":9}}},{"name":"EqualsMatcher","kind":"class","ident_start":482974,"ident_end":482987,"extent_start":482968,"extent_end":483989,"fully_qualified_name":"EqualsMatcher","ident_utf16":{"start":{"line_number":12920,"utf16_col":10},"end":{"line_number":12920,"utf16_col":23}},"extent_utf16":{"start":{"line_number":12920,"utf16_col":4},"end":{"line_number":12942,"utf16_col":5}}},{"name":"EqualsMatcher","kind":"function","ident_start":483121,"ident_end":483134,"extent_start":483121,"extent_end":483230,"fully_qualified_name":"EqualsMatcher::EqualsMatcher","ident_utf16":{"start":{"line_number":12924,"utf16_col":8},"end":{"line_number":12924,"utf16_col":21}},"extent_utf16":{"start":{"line_number":12924,"utf16_col":8},"end":{"line_number":12926,"utf16_col":10}}},{"name":"match","kind":"function","ident_start":483245,"ident_end":483250,"extent_start":483240,"extent_end":483849,"fully_qualified_name":"EqualsMatcher::match","ident_utf16":{"start":{"line_number":12928,"utf16_col":13},"end":{"line_number":12928,"utf16_col":18}},"extent_utf16":{"start":{"line_number":12928,"utf16_col":8},"end":{"line_number":12938,"utf16_col":9}}},{"name":"describe","kind":"function","ident_start":483870,"ident_end":483878,"extent_start":483858,"extent_end":483983,"fully_qualified_name":"EqualsMatcher::describe","ident_utf16":{"start":{"line_number":12939,"utf16_col":20},"end":{"line_number":12939,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12939,"utf16_col":8},"end":{"line_number":12941,"utf16_col":9}}},{"name":"ApproxMatcher","kind":"class","ident_start":484068,"ident_end":484081,"extent_start":484062,"extent_end":485572,"fully_qualified_name":"ApproxMatcher","ident_utf16":{"start":{"line_number":12945,"utf16_col":10},"end":{"line_number":12945,"utf16_col":23}},"extent_utf16":{"start":{"line_number":12945,"utf16_col":4},"end":{"line_number":12980,"utf16_col":5}}},{"name":"ApproxMatcher","kind":"function","ident_start":484279,"ident_end":484292,"extent_start":484279,"extent_end":484388,"fully_qualified_name":"ApproxMatcher::ApproxMatcher","ident_utf16":{"start":{"line_number":12950,"utf16_col":8},"end":{"line_number":12950,"utf16_col":21}},"extent_utf16":{"start":{"line_number":12950,"utf16_col":8},"end":{"line_number":12952,"utf16_col":10}}},{"name":"match","kind":"function","ident_start":484403,"ident_end":484408,"extent_start":484398,"extent_end":484718,"fully_qualified_name":"ApproxMatcher::match","ident_utf16":{"start":{"line_number":12954,"utf16_col":13},"end":{"line_number":12954,"utf16_col":18}},"extent_utf16":{"start":{"line_number":12954,"utf16_col":8},"end":{"line_number":12961,"utf16_col":9}}},{"name":"describe","kind":"function","ident_start":484739,"ident_end":484747,"extent_start":484727,"extent_end":484855,"fully_qualified_name":"ApproxMatcher::describe","ident_utf16":{"start":{"line_number":12962,"utf16_col":20},"end":{"line_number":12962,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12962,"utf16_col":8},"end":{"line_number":12964,"utf16_col":9}}},{"name":"UnorderedEqualsMatcher","kind":"class","ident_start":485651,"ident_end":485673,"extent_start":485645,"extent_end":486316,"fully_qualified_name":"UnorderedEqualsMatcher","ident_utf16":{"start":{"line_number":12983,"utf16_col":10},"end":{"line_number":12983,"utf16_col":32}},"extent_utf16":{"start":{"line_number":12983,"utf16_col":4},"end":{"line_number":13000,"utf16_col":5}}},{"name":"UnorderedEqualsMatcher","kind":"function","ident_start":485803,"ident_end":485825,"extent_start":485803,"extent_end":485907,"fully_qualified_name":"UnorderedEqualsMatcher::UnorderedEqualsMatcher","ident_utf16":{"start":{"line_number":12987,"utf16_col":8},"end":{"line_number":12987,"utf16_col":30}},"extent_utf16":{"start":{"line_number":12987,"utf16_col":8},"end":{"line_number":12989,"utf16_col":10}}},{"name":"match","kind":"function","ident_start":485921,"ident_end":485926,"extent_start":485916,"extent_end":486172,"fully_qualified_name":"UnorderedEqualsMatcher::match","ident_utf16":{"start":{"line_number":12990,"utf16_col":13},"end":{"line_number":12990,"utf16_col":18}},"extent_utf16":{"start":{"line_number":12990,"utf16_col":8},"end":{"line_number":12995,"utf16_col":9}}},{"name":"describe","kind":"function","ident_start":486194,"ident_end":486202,"extent_start":486182,"extent_end":486310,"fully_qualified_name":"UnorderedEqualsMatcher::describe","ident_utf16":{"start":{"line_number":12997,"utf16_col":20},"end":{"line_number":12997,"utf16_col":28}},"extent_utf16":{"start":{"line_number":12997,"utf16_col":8},"end":{"line_number":12999,"utf16_col":9}}},{"name":"Contains","kind":"function","ident_start":486664,"ident_end":486672,"extent_start":486622,"extent_end":486797,"fully_qualified_name":"Contains","ident_utf16":{"start":{"line_number":13008,"utf16_col":46},"end":{"line_number":13008,"utf16_col":54}},"extent_utf16":{"start":{"line_number":13008,"utf16_col":4},"end":{"line_number":13010,"utf16_col":5}}},{"name":"VectorContains","kind":"function","ident_start":486990,"ident_end":487004,"extent_start":486951,"extent_end":487102,"fully_qualified_name":"VectorContains","ident_utf16":{"start":{"line_number":13014,"utf16_col":43},"end":{"line_number":13014,"utf16_col":57}},"extent_utf16":{"start":{"line_number":13014,"utf16_col":4},"end":{"line_number":13016,"utf16_col":5}}},{"name":"Equals","kind":"function","ident_start":487332,"ident_end":487338,"extent_start":487292,"extent_end":487461,"fully_qualified_name":"Equals","ident_utf16":{"start":{"line_number":13020,"utf16_col":44},"end":{"line_number":13020,"utf16_col":50}},"extent_utf16":{"start":{"line_number":13020,"utf16_col":4},"end":{"line_number":13022,"utf16_col":5}}},{"name":"Approx","kind":"function","ident_start":487684,"ident_end":487690,"extent_start":487644,"extent_end":487813,"fully_qualified_name":"Approx","ident_utf16":{"start":{"line_number":13026,"utf16_col":44},"end":{"line_number":13026,"utf16_col":50}},"extent_utf16":{"start":{"line_number":13026,"utf16_col":4},"end":{"line_number":13028,"utf16_col":5}}},{"name":"UnorderedEquals","kind":"function","ident_start":488058,"ident_end":488073,"extent_start":488009,"extent_end":488195,"fully_qualified_name":"UnorderedEquals","ident_utf16":{"start":{"line_number":13032,"utf16_col":53},"end":{"line_number":13032,"utf16_col":68}},"extent_utf16":{"start":{"line_number":13032,"utf16_col":4},"end":{"line_number":13034,"utf16_col":5}}},{"name":"ColourImpl","kind":"class","ident_start":489325,"ident_end":489335,"extent_start":489319,"extent_end":489335,"fully_qualified_name":"ColourImpl","ident_utf16":{"start":{"line_number":13080,"utf16_col":10},"end":{"line_number":13080,"utf16_col":20}},"extent_utf16":{"start":{"line_number":13080,"utf16_col":4},"end":{"line_number":13080,"utf16_col":20}}},{"name":"ReporterBase","kind":"class","ident_start":489797,"ident_end":489809,"extent_start":489791,"extent_end":491741,"fully_qualified_name":"ReporterBase","ident_utf16":{"start":{"line_number":13092,"utf16_col":10},"end":{"line_number":13092,"utf16_col":22}},"extent_utf16":{"start":{"line_number":13092,"utf16_col":4},"end":{"line_number":13139,"utf16_col":5}}},{"name":"listReporters","kind":"method","ident_start":490701,"ident_end":490714,"extent_start":490696,"extent_end":490792,"fully_qualified_name":"ReporterBase::listReporters","ident_utf16":{"start":{"line_number":13114,"utf16_col":13},"end":{"line_number":13114,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13114,"utf16_col":8},"end":{"line_number":13115,"utf16_col":76}}},{"name":"listListeners","kind":"method","ident_start":491011,"ident_end":491024,"extent_start":491006,"extent_end":491102,"fully_qualified_name":"ReporterBase::listListeners","ident_utf16":{"start":{"line_number":13122,"utf16_col":13},"end":{"line_number":13122,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13122,"utf16_col":8},"end":{"line_number":13123,"utf16_col":76}}},{"name":"listTests","kind":"method","ident_start":491414,"ident_end":491423,"extent_start":491409,"extent_end":491477,"fully_qualified_name":"ReporterBase::listTests","ident_utf16":{"start":{"line_number":13131,"utf16_col":13},"end":{"line_number":13131,"utf16_col":22}},"extent_utf16":{"start":{"line_number":13131,"utf16_col":8},"end":{"line_number":13131,"utf16_col":76}}},{"name":"listTags","kind":"method","ident_start":491681,"ident_end":491689,"extent_start":491676,"extent_end":491735,"fully_qualified_name":"ReporterBase::listTags","ident_utf16":{"start":{"line_number":13138,"utf16_col":13},"end":{"line_number":13138,"utf16_col":21}},"extent_utf16":{"start":{"line_number":13138,"utf16_col":8},"end":{"line_number":13138,"utf16_col":67}}},{"name":"StreamingReporterBase","kind":"class","ident_start":491864,"ident_end":491885,"extent_start":491858,"extent_end":494126,"fully_qualified_name":"StreamingReporterBase","ident_utf16":{"start":{"line_number":13148,"utf16_col":10},"end":{"line_number":13148,"utf16_col":31}},"extent_utf16":{"start":{"line_number":13148,"utf16_col":4},"end":{"line_number":13199,"utf16_col":5}}},{"name":"StreamingReporterBase","kind":"function","ident_start":492062,"ident_end":492083,"extent_start":492062,"extent_end":492167,"fully_qualified_name":"StreamingReporterBase::StreamingReporterBase","ident_utf16":{"start":{"line_number":13152,"utf16_col":8},"end":{"line_number":13152,"utf16_col":29}},"extent_utf16":{"start":{"line_number":13152,"utf16_col":8},"end":{"line_number":13154,"utf16_col":10}}},{"name":"benchmarkPreparing","kind":"function","ident_start":492225,"ident_end":492243,"extent_start":492220,"extent_end":492268,"fully_qualified_name":"StreamingReporterBase::benchmarkPreparing","ident_utf16":{"start":{"line_number":13157,"utf16_col":13},"end":{"line_number":13157,"utf16_col":31}},"extent_utf16":{"start":{"line_number":13157,"utf16_col":8},"end":{"line_number":13157,"utf16_col":56}}},{"name":"benchmarkStarting","kind":"function","ident_start":492282,"ident_end":492299,"extent_start":492277,"extent_end":492335,"fully_qualified_name":"StreamingReporterBase::benchmarkStarting","ident_utf16":{"start":{"line_number":13158,"utf16_col":13},"end":{"line_number":13158,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13158,"utf16_col":8},"end":{"line_number":13158,"utf16_col":66}}},{"name":"benchmarkEnded","kind":"function","ident_start":492349,"ident_end":492363,"extent_start":492344,"extent_end":492402,"fully_qualified_name":"StreamingReporterBase::benchmarkEnded","ident_utf16":{"start":{"line_number":13159,"utf16_col":13},"end":{"line_number":13159,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13159,"utf16_col":8},"end":{"line_number":13159,"utf16_col":66}}},{"name":"benchmarkFailed","kind":"function","ident_start":492416,"ident_end":492431,"extent_start":492411,"extent_end":492456,"fully_qualified_name":"StreamingReporterBase::benchmarkFailed","ident_utf16":{"start":{"line_number":13160,"utf16_col":13},"end":{"line_number":13160,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13160,"utf16_col":8},"end":{"line_number":13160,"utf16_col":53}}},{"name":"fatalErrorEncountered","kind":"function","ident_start":492471,"ident_end":492492,"extent_start":492466,"extent_end":492527,"fully_qualified_name":"StreamingReporterBase::fatalErrorEncountered","ident_utf16":{"start":{"line_number":13162,"utf16_col":13},"end":{"line_number":13162,"utf16_col":34}},"extent_utf16":{"start":{"line_number":13162,"utf16_col":8},"end":{"line_number":13162,"utf16_col":69}}},{"name":"noMatchingTestCases","kind":"function","ident_start":492541,"ident_end":492560,"extent_start":492536,"extent_end":492603,"fully_qualified_name":"StreamingReporterBase::noMatchingTestCases","ident_utf16":{"start":{"line_number":13163,"utf16_col":13},"end":{"line_number":13163,"utf16_col":32}},"extent_utf16":{"start":{"line_number":13163,"utf16_col":8},"end":{"line_number":13163,"utf16_col":75}}},{"name":"reportInvalidTestSpec","kind":"function","ident_start":492617,"ident_end":492638,"extent_start":492612,"extent_end":492683,"fully_qualified_name":"StreamingReporterBase::reportInvalidTestSpec","ident_utf16":{"start":{"line_number":13164,"utf16_col":13},"end":{"line_number":13164,"utf16_col":34}},"extent_utf16":{"start":{"line_number":13164,"utf16_col":8},"end":{"line_number":13164,"utf16_col":79}}},{"name":"testRunStarting","kind":"method","ident_start":492698,"ident_end":492713,"extent_start":492693,"extent_end":492758,"fully_qualified_name":"StreamingReporterBase::testRunStarting","ident_utf16":{"start":{"line_number":13166,"utf16_col":13},"end":{"line_number":13166,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13166,"utf16_col":8},"end":{"line_number":13166,"utf16_col":73}}},{"name":"testCaseStarting","kind":"function","ident_start":492773,"ident_end":492789,"extent_start":492768,"extent_end":492888,"fully_qualified_name":"StreamingReporterBase::testCaseStarting","ident_utf16":{"start":{"line_number":13168,"utf16_col":13},"end":{"line_number":13168,"utf16_col":29}},"extent_utf16":{"start":{"line_number":13168,"utf16_col":8},"end":{"line_number":13170,"utf16_col":9}}},{"name":"testCasePartialStarting","kind":"function","ident_start":492902,"ident_end":492925,"extent_start":492897,"extent_end":492970,"fully_qualified_name":"StreamingReporterBase::testCasePartialStarting","ident_utf16":{"start":{"line_number":13171,"utf16_col":13},"end":{"line_number":13171,"utf16_col":36}},"extent_utf16":{"start":{"line_number":13171,"utf16_col":8},"end":{"line_number":13171,"utf16_col":81}}},{"name":"sectionStarting","kind":"function","ident_start":492984,"ident_end":492999,"extent_start":492979,"extent_end":493105,"fully_qualified_name":"StreamingReporterBase::sectionStarting","ident_utf16":{"start":{"line_number":13172,"utf16_col":13},"end":{"line_number":13172,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13172,"utf16_col":8},"end":{"line_number":13174,"utf16_col":9}}},{"name":"assertionStarting","kind":"function","ident_start":493120,"ident_end":493137,"extent_start":493115,"extent_end":493173,"fully_qualified_name":"StreamingReporterBase::assertionStarting","ident_utf16":{"start":{"line_number":13176,"utf16_col":13},"end":{"line_number":13176,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13176,"utf16_col":8},"end":{"line_number":13176,"utf16_col":66}}},{"name":"assertionEnded","kind":"function","ident_start":493187,"ident_end":493201,"extent_start":493182,"extent_end":493238,"fully_qualified_name":"StreamingReporterBase::assertionEnded","ident_utf16":{"start":{"line_number":13177,"utf16_col":13},"end":{"line_number":13177,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13177,"utf16_col":8},"end":{"line_number":13177,"utf16_col":64}}},{"name":"sectionEnded","kind":"function","ident_start":493253,"ident_end":493265,"extent_start":493248,"extent_end":493366,"fully_qualified_name":"StreamingReporterBase::sectionEnded","ident_utf16":{"start":{"line_number":13179,"utf16_col":13},"end":{"line_number":13179,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13179,"utf16_col":8},"end":{"line_number":13181,"utf16_col":9}}},{"name":"testCasePartialEnded","kind":"function","ident_start":493380,"ident_end":493400,"extent_start":493375,"extent_end":493446,"fully_qualified_name":"StreamingReporterBase::testCasePartialEnded","ident_utf16":{"start":{"line_number":13182,"utf16_col":13},"end":{"line_number":13182,"utf16_col":33}},"extent_utf16":{"start":{"line_number":13182,"utf16_col":8},"end":{"line_number":13182,"utf16_col":79}}},{"name":"testCaseEnded","kind":"function","ident_start":493460,"ident_end":493473,"extent_start":493455,"extent_end":493580,"fully_qualified_name":"StreamingReporterBase::testCaseEnded","ident_utf16":{"start":{"line_number":13183,"utf16_col":13},"end":{"line_number":13183,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13183,"utf16_col":8},"end":{"line_number":13185,"utf16_col":9}}},{"name":"testRunEnded","kind":"method","ident_start":493594,"ident_end":493606,"extent_start":493589,"extent_end":493659,"fully_qualified_name":"StreamingReporterBase::testRunEnded","ident_utf16":{"start":{"line_number":13186,"utf16_col":13},"end":{"line_number":13186,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13186,"utf16_col":8},"end":{"line_number":13186,"utf16_col":78}}},{"name":"skipTest","kind":"function","ident_start":493674,"ident_end":493682,"extent_start":493669,"extent_end":493848,"fully_qualified_name":"StreamingReporterBase::skipTest","ident_utf16":{"start":{"line_number":13188,"utf16_col":13},"end":{"line_number":13188,"utf16_col":21}},"extent_utf16":{"start":{"line_number":13188,"utf16_col":8},"end":{"line_number":13191,"utf16_col":9}}},{"name":"AutomakeReporter","kind":"class","ident_start":494257,"ident_end":494273,"extent_start":494251,"extent_end":494943,"fully_qualified_name":"AutomakeReporter","ident_utf16":{"start":{"line_number":13209,"utf16_col":10},"end":{"line_number":13209,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13209,"utf16_col":4},"end":{"line_number":13225,"utf16_col":5}}},{"name":"AutomakeReporter","kind":"function","ident_start":494465,"ident_end":494481,"extent_start":494465,"extent_end":494574,"fully_qualified_name":"AutomakeReporter::AutomakeReporter","ident_utf16":{"start":{"line_number":13213,"utf16_col":8},"end":{"line_number":13213,"utf16_col":24}},"extent_utf16":{"start":{"line_number":13213,"utf16_col":8},"end":{"line_number":13215,"utf16_col":10}}},{"name":"getDescription","kind":"function","ident_start":494641,"ident_end":494655,"extent_start":494622,"extent_end":494800,"fully_qualified_name":"AutomakeReporter::getDescription","ident_utf16":{"start":{"line_number":13218,"utf16_col":27},"end":{"line_number":13218,"utf16_col":41}},"extent_utf16":{"start":{"line_number":13218,"utf16_col":8},"end":{"line_number":13221,"utf16_col":9}}},{"name":"testCaseEnded","kind":"method","ident_start":494815,"ident_end":494828,"extent_start":494810,"extent_end":494875,"fully_qualified_name":"AutomakeReporter::testCaseEnded","ident_utf16":{"start":{"line_number":13223,"utf16_col":13},"end":{"line_number":13223,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13223,"utf16_col":8},"end":{"line_number":13223,"utf16_col":73}}},{"name":"skipTest","kind":"method","ident_start":494889,"ident_end":494897,"extent_start":494884,"extent_end":494937,"fully_qualified_name":"AutomakeReporter::skipTest","ident_utf16":{"start":{"line_number":13224,"utf16_col":13},"end":{"line_number":13224,"utf16_col":21}},"extent_utf16":{"start":{"line_number":13224,"utf16_col":8},"end":{"line_number":13224,"utf16_col":61}}},{"name":"CompactReporter","kind":"class","ident_start":495142,"ident_end":495157,"extent_start":495136,"extent_end":495724,"fully_qualified_name":"CompactReporter","ident_utf16":{"start":{"line_number":13240,"utf16_col":10},"end":{"line_number":13240,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13240,"utf16_col":4},"end":{"line_number":13258,"utf16_col":5}}},{"name":"getDescription","kind":"method","ident_start":495335,"ident_end":495349,"extent_start":495316,"extent_end":495352,"fully_qualified_name":"CompactReporter::getDescription","ident_utf16":{"start":{"line_number":13246,"utf16_col":27},"end":{"line_number":13246,"utf16_col":41}},"extent_utf16":{"start":{"line_number":13246,"utf16_col":8},"end":{"line_number":13246,"utf16_col":44}}},{"name":"noMatchingTestCases","kind":"method","ident_start":495367,"ident_end":495386,"extent_start":495362,"extent_end":495423,"fully_qualified_name":"CompactReporter::noMatchingTestCases","ident_utf16":{"start":{"line_number":13248,"utf16_col":13},"end":{"line_number":13248,"utf16_col":32}},"extent_utf16":{"start":{"line_number":13248,"utf16_col":8},"end":{"line_number":13248,"utf16_col":69}}},{"name":"testRunStarting","kind":"method","ident_start":495438,"ident_end":495453,"extent_start":495433,"extent_end":495495,"fully_qualified_name":"CompactReporter::testRunStarting","ident_utf16":{"start":{"line_number":13250,"utf16_col":13},"end":{"line_number":13250,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13250,"utf16_col":8},"end":{"line_number":13250,"utf16_col":70}}},{"name":"assertionEnded","kind":"method","ident_start":495510,"ident_end":495524,"extent_start":495505,"extent_end":495573,"fully_qualified_name":"CompactReporter::assertionEnded","ident_utf16":{"start":{"line_number":13252,"utf16_col":13},"end":{"line_number":13252,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13252,"utf16_col":8},"end":{"line_number":13252,"utf16_col":76}}},{"name":"sectionEnded","kind":"method","ident_start":495588,"ident_end":495600,"extent_start":495583,"extent_end":495645,"fully_qualified_name":"CompactReporter::sectionEnded","ident_utf16":{"start":{"line_number":13254,"utf16_col":13},"end":{"line_number":13254,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13254,"utf16_col":8},"end":{"line_number":13254,"utf16_col":70}}},{"name":"testRunEnded","kind":"method","ident_start":495660,"ident_end":495672,"extent_start":495655,"extent_end":495717,"fully_qualified_name":"CompactReporter::testRunEnded","ident_utf16":{"start":{"line_number":13256,"utf16_col":13},"end":{"line_number":13256,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13256,"utf16_col":8},"end":{"line_number":13256,"utf16_col":70}}},{"name":"TablePrinter","kind":"class","ident_start":495936,"ident_end":495948,"extent_start":495930,"extent_end":495948,"fully_qualified_name":"TablePrinter","ident_utf16":{"start":{"line_number":13271,"utf16_col":10},"end":{"line_number":13271,"utf16_col":22}},"extent_utf16":{"start":{"line_number":13271,"utf16_col":4},"end":{"line_number":13271,"utf16_col":22}}},{"name":"ConsoleReporter","kind":"class","ident_start":495961,"ident_end":495976,"extent_start":495955,"extent_end":497731,"fully_qualified_name":"ConsoleReporter","ident_utf16":{"start":{"line_number":13273,"utf16_col":10},"end":{"line_number":13273,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13273,"utf16_col":4},"end":{"line_number":13318,"utf16_col":5}}},{"name":"getDescription","kind":"method","ident_start":496200,"ident_end":496214,"extent_start":496181,"extent_end":496217,"fully_qualified_name":"ConsoleReporter::getDescription","ident_utf16":{"start":{"line_number":13279,"utf16_col":27},"end":{"line_number":13279,"utf16_col":41}},"extent_utf16":{"start":{"line_number":13279,"utf16_col":8},"end":{"line_number":13279,"utf16_col":44}}},{"name":"noMatchingTestCases","kind":"method","ident_start":496232,"ident_end":496251,"extent_start":496227,"extent_end":496288,"fully_qualified_name":"ConsoleReporter::noMatchingTestCases","ident_utf16":{"start":{"line_number":13281,"utf16_col":13},"end":{"line_number":13281,"utf16_col":32}},"extent_utf16":{"start":{"line_number":13281,"utf16_col":8},"end":{"line_number":13281,"utf16_col":69}}},{"name":"reportInvalidTestSpec","kind":"method","ident_start":496302,"ident_end":496323,"extent_start":496297,"extent_end":496350,"fully_qualified_name":"ConsoleReporter::reportInvalidTestSpec","ident_utf16":{"start":{"line_number":13282,"utf16_col":13},"end":{"line_number":13282,"utf16_col":34}},"extent_utf16":{"start":{"line_number":13282,"utf16_col":8},"end":{"line_number":13282,"utf16_col":61}}},{"name":"assertionStarting","kind":"method","ident_start":496365,"ident_end":496382,"extent_start":496360,"extent_end":496414,"fully_qualified_name":"ConsoleReporter::assertionStarting","ident_utf16":{"start":{"line_number":13284,"utf16_col":13},"end":{"line_number":13284,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13284,"utf16_col":8},"end":{"line_number":13284,"utf16_col":62}}},{"name":"assertionEnded","kind":"method","ident_start":496429,"ident_end":496443,"extent_start":496424,"extent_end":496492,"fully_qualified_name":"ConsoleReporter::assertionEnded","ident_utf16":{"start":{"line_number":13286,"utf16_col":13},"end":{"line_number":13286,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13286,"utf16_col":8},"end":{"line_number":13286,"utf16_col":76}}},{"name":"sectionStarting","kind":"method","ident_start":496507,"ident_end":496522,"extent_start":496502,"extent_end":496565,"fully_qualified_name":"ConsoleReporter::sectionStarting","ident_utf16":{"start":{"line_number":13288,"utf16_col":13},"end":{"line_number":13288,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13288,"utf16_col":8},"end":{"line_number":13288,"utf16_col":71}}},{"name":"sectionEnded","kind":"method","ident_start":496579,"ident_end":496591,"extent_start":496574,"extent_end":496636,"fully_qualified_name":"ConsoleReporter::sectionEnded","ident_utf16":{"start":{"line_number":13289,"utf16_col":13},"end":{"line_number":13289,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13289,"utf16_col":8},"end":{"line_number":13289,"utf16_col":70}}},{"name":"benchmarkPreparing","kind":"method","ident_start":496651,"ident_end":496669,"extent_start":496646,"extent_end":496697,"fully_qualified_name":"ConsoleReporter::benchmarkPreparing","ident_utf16":{"start":{"line_number":13291,"utf16_col":13},"end":{"line_number":13291,"utf16_col":31}},"extent_utf16":{"start":{"line_number":13291,"utf16_col":8},"end":{"line_number":13291,"utf16_col":59}}},{"name":"benchmarkStarting","kind":"method","ident_start":496711,"ident_end":496728,"extent_start":496706,"extent_end":496765,"fully_qualified_name":"ConsoleReporter::benchmarkStarting","ident_utf16":{"start":{"line_number":13292,"utf16_col":13},"end":{"line_number":13292,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13292,"utf16_col":8},"end":{"line_number":13292,"utf16_col":67}}},{"name":"benchmarkEnded","kind":"method","ident_start":496779,"ident_end":496793,"extent_start":496774,"extent_end":496834,"fully_qualified_name":"ConsoleReporter::benchmarkEnded","ident_utf16":{"start":{"line_number":13293,"utf16_col":13},"end":{"line_number":13293,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13293,"utf16_col":8},"end":{"line_number":13293,"utf16_col":68}}},{"name":"benchmarkFailed","kind":"method","ident_start":496848,"ident_end":496863,"extent_start":496843,"extent_end":496892,"fully_qualified_name":"ConsoleReporter::benchmarkFailed","ident_utf16":{"start":{"line_number":13294,"utf16_col":13},"end":{"line_number":13294,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13294,"utf16_col":8},"end":{"line_number":13294,"utf16_col":57}}},{"name":"testCaseEnded","kind":"method","ident_start":496907,"ident_end":496920,"extent_start":496902,"extent_end":496967,"fully_qualified_name":"ConsoleReporter::testCaseEnded","ident_utf16":{"start":{"line_number":13296,"utf16_col":13},"end":{"line_number":13296,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13296,"utf16_col":8},"end":{"line_number":13296,"utf16_col":73}}},{"name":"testRunEnded","kind":"method","ident_start":496981,"ident_end":496993,"extent_start":496976,"extent_end":497038,"fully_qualified_name":"ConsoleReporter::testRunEnded","ident_utf16":{"start":{"line_number":13297,"utf16_col":13},"end":{"line_number":13297,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13297,"utf16_col":8},"end":{"line_number":13297,"utf16_col":70}}},{"name":"testRunStarting","kind":"method","ident_start":497052,"ident_end":497067,"extent_start":497047,"extent_end":497110,"fully_qualified_name":"ConsoleReporter::testRunStarting","ident_utf16":{"start":{"line_number":13298,"utf16_col":13},"end":{"line_number":13298,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13298,"utf16_col":8},"end":{"line_number":13298,"utf16_col":71}}},{"name":"lazyPrint","kind":"method","ident_start":497138,"ident_end":497147,"extent_start":497133,"extent_end":497150,"fully_qualified_name":"ConsoleReporter::lazyPrint","ident_utf16":{"start":{"line_number":13301,"utf16_col":13},"end":{"line_number":13301,"utf16_col":22}},"extent_utf16":{"start":{"line_number":13301,"utf16_col":8},"end":{"line_number":13301,"utf16_col":25}}},{"name":"lazyPrintWithoutClosingBenchmarkTable","kind":"method","ident_start":497165,"ident_end":497202,"extent_start":497160,"extent_end":497205,"fully_qualified_name":"ConsoleReporter::lazyPrintWithoutClosingBenchmarkTable","ident_utf16":{"start":{"line_number":13303,"utf16_col":13},"end":{"line_number":13303,"utf16_col":50}},"extent_utf16":{"start":{"line_number":13303,"utf16_col":8},"end":{"line_number":13303,"utf16_col":53}}},{"name":"lazyPrintRunInfo","kind":"method","ident_start":497219,"ident_end":497235,"extent_start":497214,"extent_end":497238,"fully_qualified_name":"ConsoleReporter::lazyPrintRunInfo","ident_utf16":{"start":{"line_number":13304,"utf16_col":13},"end":{"line_number":13304,"utf16_col":29}},"extent_utf16":{"start":{"line_number":13304,"utf16_col":8},"end":{"line_number":13304,"utf16_col":32}}},{"name":"printTestCaseAndSectionHeader","kind":"method","ident_start":497252,"ident_end":497281,"extent_start":497247,"extent_end":497284,"fully_qualified_name":"ConsoleReporter::printTestCaseAndSectionHeader","ident_utf16":{"start":{"line_number":13305,"utf16_col":13},"end":{"line_number":13305,"utf16_col":42}},"extent_utf16":{"start":{"line_number":13305,"utf16_col":8},"end":{"line_number":13305,"utf16_col":45}}},{"name":"printClosedHeader","kind":"method","ident_start":497299,"ident_end":497316,"extent_start":497294,"extent_end":497343,"fully_qualified_name":"ConsoleReporter::printClosedHeader","ident_utf16":{"start":{"line_number":13307,"utf16_col":13},"end":{"line_number":13307,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13307,"utf16_col":8},"end":{"line_number":13307,"utf16_col":57}}},{"name":"printOpenHeader","kind":"method","ident_start":497357,"ident_end":497372,"extent_start":497352,"extent_end":497399,"fully_qualified_name":"ConsoleReporter::printOpenHeader","ident_utf16":{"start":{"line_number":13308,"utf16_col":13},"end":{"line_number":13308,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13308,"utf16_col":8},"end":{"line_number":13308,"utf16_col":55}}},{"name":"printHeaderString","kind":"method","ident_start":497517,"ident_end":497534,"extent_start":497512,"extent_end":497587,"fully_qualified_name":"ConsoleReporter::printHeaderString","ident_utf16":{"start":{"line_number":13312,"utf16_col":13},"end":{"line_number":13312,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13312,"utf16_col":8},"end":{"line_number":13312,"utf16_col":83}}},{"name":"printTotalsDivider","kind":"method","ident_start":497602,"ident_end":497620,"extent_start":497597,"extent_end":497643,"fully_qualified_name":"ConsoleReporter::printTotalsDivider","ident_utf16":{"start":{"line_number":13314,"utf16_col":13},"end":{"line_number":13314,"utf16_col":31}},"extent_utf16":{"start":{"line_number":13314,"utf16_col":8},"end":{"line_number":13314,"utf16_col":54}}},{"name":"AssertionOrBenchmarkResult","kind":"class","ident_start":498116,"ident_end":498142,"extent_start":498110,"extent_end":498824,"fully_qualified_name":"AssertionOrBenchmarkResult","ident_utf16":{"start":{"line_number":13337,"utf16_col":14},"end":{"line_number":13337,"utf16_col":40}},"extent_utf16":{"start":{"line_number":13337,"utf16_col":8},"end":{"line_number":13352,"utf16_col":9}}},{"name":"isAssertion","kind":"method","ident_start":498643,"ident_end":498654,"extent_start":498638,"extent_end":498663,"fully_qualified_name":"AssertionOrBenchmarkResult::isAssertion","ident_utf16":{"start":{"line_number":13347,"utf16_col":17},"end":{"line_number":13347,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13347,"utf16_col":12},"end":{"line_number":13347,"utf16_col":37}}},{"name":"isBenchmark","kind":"method","ident_start":498681,"ident_end":498692,"extent_start":498676,"extent_end":498701,"fully_qualified_name":"AssertionOrBenchmarkResult::isBenchmark","ident_utf16":{"start":{"line_number":13348,"utf16_col":17},"end":{"line_number":13348,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13348,"utf16_col":12},"end":{"line_number":13348,"utf16_col":37}}},{"name":"CumulativeReporterBase","kind":"class","ident_start":499902,"ident_end":499924,"extent_start":499896,"extent_end":503711,"fully_qualified_name":"CumulativeReporterBase","ident_utf16":{"start":{"line_number":13375,"utf16_col":10},"end":{"line_number":13375,"utf16_col":32}},"extent_utf16":{"start":{"line_number":13375,"utf16_col":4},"end":{"line_number":13460,"utf16_col":5}}},{"name":"Node","kind":"class","ident_start":500026,"ident_end":500030,"extent_start":500019,"extent_end":500239,"fully_qualified_name":"CumulativeReporterBase::Node","ident_utf16":{"start":{"line_number":13378,"utf16_col":15},"end":{"line_number":13378,"utf16_col":19}},"extent_utf16":{"start":{"line_number":13378,"utf16_col":8},"end":{"line_number":13384,"utf16_col":9}}},{"name":"Node","kind":"function","ident_start":500054,"ident_end":500058,"extent_start":500045,"extent_end":500098,"fully_qualified_name":"CumulativeReporterBase::Node::Node","ident_utf16":{"start":{"line_number":13379,"utf16_col":21},"end":{"line_number":13379,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13379,"utf16_col":12},"end":{"line_number":13379,"utf16_col":65}}},{"name":"SectionNode","kind":"class","ident_start":500256,"ident_end":500267,"extent_start":500249,"extent_end":500823,"fully_qualified_name":"CumulativeReporterBase::SectionNode","ident_utf16":{"start":{"line_number":13385,"utf16_col":15},"end":{"line_number":13385,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13385,"utf16_col":8},"end":{"line_number":13399,"utf16_col":9}}},{"name":"SectionNode","kind":"function","ident_start":500291,"ident_end":500302,"extent_start":500282,"extent_end":500349,"fully_qualified_name":"CumulativeReporterBase::SectionNode::SectionNode","ident_utf16":{"start":{"line_number":13386,"utf16_col":21},"end":{"line_number":13386,"utf16_col":32}},"extent_utf16":{"start":{"line_number":13386,"utf16_col":12},"end":{"line_number":13386,"utf16_col":79}}},{"name":"CumulativeReporterBase","kind":"function","ident_start":501093,"ident_end":501115,"extent_start":501093,"extent_end":501199,"fully_qualified_name":"CumulativeReporterBase::CumulativeReporterBase","ident_utf16":{"start":{"line_number":13407,"utf16_col":8},"end":{"line_number":13407,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13407,"utf16_col":8},"end":{"line_number":13409,"utf16_col":10}}},{"name":"benchmarkPreparing","kind":"function","ident_start":501258,"ident_end":501276,"extent_start":501253,"extent_end":501301,"fully_qualified_name":"CumulativeReporterBase::benchmarkPreparing","ident_utf16":{"start":{"line_number":13412,"utf16_col":13},"end":{"line_number":13412,"utf16_col":31}},"extent_utf16":{"start":{"line_number":13412,"utf16_col":8},"end":{"line_number":13412,"utf16_col":56}}},{"name":"benchmarkStarting","kind":"function","ident_start":501315,"ident_end":501332,"extent_start":501310,"extent_end":501368,"fully_qualified_name":"CumulativeReporterBase::benchmarkStarting","ident_utf16":{"start":{"line_number":13413,"utf16_col":13},"end":{"line_number":13413,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13413,"utf16_col":8},"end":{"line_number":13413,"utf16_col":66}}},{"name":"benchmarkEnded","kind":"method","ident_start":501382,"ident_end":501396,"extent_start":501377,"extent_end":501448,"fully_qualified_name":"CumulativeReporterBase::benchmarkEnded","ident_utf16":{"start":{"line_number":13414,"utf16_col":13},"end":{"line_number":13414,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13414,"utf16_col":8},"end":{"line_number":13414,"utf16_col":79}}},{"name":"benchmarkFailed","kind":"function","ident_start":501462,"ident_end":501477,"extent_start":501457,"extent_end":501502,"fully_qualified_name":"CumulativeReporterBase::benchmarkFailed","ident_utf16":{"start":{"line_number":13415,"utf16_col":13},"end":{"line_number":13415,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13415,"utf16_col":8},"end":{"line_number":13415,"utf16_col":53}}},{"name":"noMatchingTestCases","kind":"function","ident_start":501517,"ident_end":501536,"extent_start":501512,"extent_end":501561,"fully_qualified_name":"CumulativeReporterBase::noMatchingTestCases","ident_utf16":{"start":{"line_number":13417,"utf16_col":13},"end":{"line_number":13417,"utf16_col":32}},"extent_utf16":{"start":{"line_number":13417,"utf16_col":8},"end":{"line_number":13417,"utf16_col":57}}},{"name":"reportInvalidTestSpec","kind":"function","ident_start":501575,"ident_end":501596,"extent_start":501570,"extent_end":501621,"fully_qualified_name":"CumulativeReporterBase::reportInvalidTestSpec","ident_utf16":{"start":{"line_number":13418,"utf16_col":13},"end":{"line_number":13418,"utf16_col":34}},"extent_utf16":{"start":{"line_number":13418,"utf16_col":8},"end":{"line_number":13418,"utf16_col":59}}},{"name":"fatalErrorEncountered","kind":"function","ident_start":501635,"ident_end":501656,"extent_start":501630,"extent_end":501691,"fully_qualified_name":"CumulativeReporterBase::fatalErrorEncountered","ident_utf16":{"start":{"line_number":13419,"utf16_col":13},"end":{"line_number":13419,"utf16_col":34}},"extent_utf16":{"start":{"line_number":13419,"utf16_col":8},"end":{"line_number":13419,"utf16_col":69}}},{"name":"testRunStarting","kind":"function","ident_start":501706,"ident_end":501721,"extent_start":501701,"extent_end":501755,"fully_qualified_name":"CumulativeReporterBase::testRunStarting","ident_utf16":{"start":{"line_number":13421,"utf16_col":13},"end":{"line_number":13421,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13421,"utf16_col":8},"end":{"line_number":13421,"utf16_col":62}}},{"name":"testCaseStarting","kind":"function","ident_start":501770,"ident_end":501786,"extent_start":501765,"extent_end":501821,"fully_qualified_name":"CumulativeReporterBase::testCaseStarting","ident_utf16":{"start":{"line_number":13423,"utf16_col":13},"end":{"line_number":13423,"utf16_col":29}},"extent_utf16":{"start":{"line_number":13423,"utf16_col":8},"end":{"line_number":13423,"utf16_col":64}}},{"name":"testCasePartialStarting","kind":"function","ident_start":501835,"ident_end":501858,"extent_start":501830,"extent_end":501903,"fully_qualified_name":"CumulativeReporterBase::testCasePartialStarting","ident_utf16":{"start":{"line_number":13424,"utf16_col":13},"end":{"line_number":13424,"utf16_col":36}},"extent_utf16":{"start":{"line_number":13424,"utf16_col":8},"end":{"line_number":13424,"utf16_col":81}}},{"name":"sectionStarting","kind":"method","ident_start":501917,"ident_end":501932,"extent_start":501912,"extent_end":501976,"fully_qualified_name":"CumulativeReporterBase::sectionStarting","ident_utf16":{"start":{"line_number":13425,"utf16_col":13},"end":{"line_number":13425,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13425,"utf16_col":8},"end":{"line_number":13425,"utf16_col":72}}},{"name":"assertionStarting","kind":"function","ident_start":501991,"ident_end":502008,"extent_start":501986,"extent_end":502044,"fully_qualified_name":"CumulativeReporterBase::assertionStarting","ident_utf16":{"start":{"line_number":13427,"utf16_col":13},"end":{"line_number":13427,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13427,"utf16_col":8},"end":{"line_number":13427,"utf16_col":66}}},{"name":"assertionEnded","kind":"method","ident_start":502059,"ident_end":502073,"extent_start":502054,"extent_end":502123,"fully_qualified_name":"CumulativeReporterBase::assertionEnded","ident_utf16":{"start":{"line_number":13429,"utf16_col":13},"end":{"line_number":13429,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13429,"utf16_col":8},"end":{"line_number":13429,"utf16_col":77}}},{"name":"sectionEnded","kind":"method","ident_start":502137,"ident_end":502149,"extent_start":502132,"extent_end":502195,"fully_qualified_name":"CumulativeReporterBase::sectionEnded","ident_utf16":{"start":{"line_number":13430,"utf16_col":13},"end":{"line_number":13430,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13430,"utf16_col":8},"end":{"line_number":13430,"utf16_col":71}}},{"name":"testCasePartialEnded","kind":"function","ident_start":502209,"ident_end":502229,"extent_start":502204,"extent_end":502275,"fully_qualified_name":"CumulativeReporterBase::testCasePartialEnded","ident_utf16":{"start":{"line_number":13431,"utf16_col":13},"end":{"line_number":13431,"utf16_col":33}},"extent_utf16":{"start":{"line_number":13431,"utf16_col":8},"end":{"line_number":13431,"utf16_col":79}}},{"name":"testCaseEnded","kind":"method","ident_start":502289,"ident_end":502302,"extent_start":502284,"extent_end":502350,"fully_qualified_name":"CumulativeReporterBase::testCaseEnded","ident_utf16":{"start":{"line_number":13432,"utf16_col":13},"end":{"line_number":13432,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13432,"utf16_col":8},"end":{"line_number":13432,"utf16_col":74}}},{"name":"testRunEnded","kind":"method","ident_start":502364,"ident_end":502376,"extent_start":502359,"extent_end":502422,"fully_qualified_name":"CumulativeReporterBase::testRunEnded","ident_utf16":{"start":{"line_number":13433,"utf16_col":13},"end":{"line_number":13433,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13433,"utf16_col":8},"end":{"line_number":13433,"utf16_col":71}}},{"name":"testRunEndedCumulative","kind":"method","ident_start":502541,"ident_end":502563,"extent_start":502528,"extent_end":502570,"fully_qualified_name":"CumulativeReporterBase::testRunEndedCumulative","ident_utf16":{"start":{"line_number":13435,"utf16_col":21},"end":{"line_number":13435,"utf16_col":43}},"extent_utf16":{"start":{"line_number":13435,"utf16_col":8},"end":{"line_number":13435,"utf16_col":50}}},{"name":"skipTest","kind":"function","ident_start":502585,"ident_end":502593,"extent_start":502580,"extent_end":502626,"fully_qualified_name":"CumulativeReporterBase::skipTest","ident_utf16":{"start":{"line_number":13437,"utf16_col":13},"end":{"line_number":13437,"utf16_col":21}},"extent_utf16":{"start":{"line_number":13437,"utf16_col":8},"end":{"line_number":13437,"utf16_col":54}}},{"name":"EventListenerBase","kind":"class","ident_start":504197,"ident_end":504214,"extent_start":504191,"extent_end":506085,"fully_qualified_name":"EventListenerBase","ident_utf16":{"start":{"line_number":13480,"utf16_col":10},"end":{"line_number":13480,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13480,"utf16_col":4},"end":{"line_number":13514,"utf16_col":5}}},{"name":"reportInvalidTestSpec","kind":"method","ident_start":504313,"ident_end":504334,"extent_start":504308,"extent_end":504371,"fully_qualified_name":"EventListenerBase::reportInvalidTestSpec","ident_utf16":{"start":{"line_number":13484,"utf16_col":13},"end":{"line_number":13484,"utf16_col":34}},"extent_utf16":{"start":{"line_number":13484,"utf16_col":8},"end":{"line_number":13484,"utf16_col":71}}},{"name":"fatalErrorEncountered","kind":"method","ident_start":504385,"ident_end":504406,"extent_start":504380,"extent_end":504435,"fully_qualified_name":"EventListenerBase::fatalErrorEncountered","ident_utf16":{"start":{"line_number":13485,"utf16_col":13},"end":{"line_number":13485,"utf16_col":34}},"extent_utf16":{"start":{"line_number":13485,"utf16_col":8},"end":{"line_number":13485,"utf16_col":63}}},{"name":"benchmarkPreparing","kind":"method","ident_start":504450,"ident_end":504468,"extent_start":504445,"extent_end":504496,"fully_qualified_name":"EventListenerBase::benchmarkPreparing","ident_utf16":{"start":{"line_number":13487,"utf16_col":13},"end":{"line_number":13487,"utf16_col":31}},"extent_utf16":{"start":{"line_number":13487,"utf16_col":8},"end":{"line_number":13487,"utf16_col":59}}},{"name":"benchmarkStarting","kind":"method","ident_start":504510,"ident_end":504527,"extent_start":504505,"extent_end":504575,"fully_qualified_name":"EventListenerBase::benchmarkStarting","ident_utf16":{"start":{"line_number":13488,"utf16_col":13},"end":{"line_number":13488,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13488,"utf16_col":8},"end":{"line_number":13488,"utf16_col":78}}},{"name":"benchmarkEnded","kind":"method","ident_start":504589,"ident_end":504603,"extent_start":504584,"extent_end":504655,"fully_qualified_name":"EventListenerBase::benchmarkEnded","ident_utf16":{"start":{"line_number":13489,"utf16_col":13},"end":{"line_number":13489,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13489,"utf16_col":8},"end":{"line_number":13489,"utf16_col":79}}},{"name":"benchmarkFailed","kind":"method","ident_start":504669,"ident_end":504684,"extent_start":504664,"extent_end":504713,"fully_qualified_name":"EventListenerBase::benchmarkFailed","ident_utf16":{"start":{"line_number":13490,"utf16_col":13},"end":{"line_number":13490,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13490,"utf16_col":8},"end":{"line_number":13490,"utf16_col":57}}},{"name":"assertionStarting","kind":"method","ident_start":504728,"ident_end":504745,"extent_start":504723,"extent_end":504793,"fully_qualified_name":"EventListenerBase::assertionStarting","ident_utf16":{"start":{"line_number":13492,"utf16_col":13},"end":{"line_number":13492,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13492,"utf16_col":8},"end":{"line_number":13492,"utf16_col":78}}},{"name":"assertionEnded","kind":"method","ident_start":504807,"ident_end":504821,"extent_start":504802,"extent_end":504871,"fully_qualified_name":"EventListenerBase::assertionEnded","ident_utf16":{"start":{"line_number":13493,"utf16_col":13},"end":{"line_number":13493,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13493,"utf16_col":8},"end":{"line_number":13493,"utf16_col":77}}},{"name":"listReporters","kind":"method","ident_start":504886,"ident_end":504899,"extent_start":504881,"extent_end":504977,"fully_qualified_name":"EventListenerBase::listReporters","ident_utf16":{"start":{"line_number":13495,"utf16_col":13},"end":{"line_number":13495,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13495,"utf16_col":8},"end":{"line_number":13496,"utf16_col":76}}},{"name":"listListeners","kind":"method","ident_start":504991,"ident_end":505004,"extent_start":504986,"extent_end":505082,"fully_qualified_name":"EventListenerBase::listListeners","ident_utf16":{"start":{"line_number":13497,"utf16_col":13},"end":{"line_number":13497,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13497,"utf16_col":8},"end":{"line_number":13498,"utf16_col":76}}},{"name":"listTests","kind":"method","ident_start":505096,"ident_end":505105,"extent_start":505091,"extent_end":505159,"fully_qualified_name":"EventListenerBase::listTests","ident_utf16":{"start":{"line_number":13499,"utf16_col":13},"end":{"line_number":13499,"utf16_col":22}},"extent_utf16":{"start":{"line_number":13499,"utf16_col":8},"end":{"line_number":13499,"utf16_col":76}}},{"name":"listTags","kind":"method","ident_start":505173,"ident_end":505181,"extent_start":505168,"extent_end":505231,"fully_qualified_name":"EventListenerBase::listTags","ident_utf16":{"start":{"line_number":13500,"utf16_col":13},"end":{"line_number":13500,"utf16_col":21}},"extent_utf16":{"start":{"line_number":13500,"utf16_col":8},"end":{"line_number":13500,"utf16_col":71}}},{"name":"noMatchingTestCases","kind":"method","ident_start":505246,"ident_end":505265,"extent_start":505241,"extent_end":505302,"fully_qualified_name":"EventListenerBase::noMatchingTestCases","ident_utf16":{"start":{"line_number":13502,"utf16_col":13},"end":{"line_number":13502,"utf16_col":32}},"extent_utf16":{"start":{"line_number":13502,"utf16_col":8},"end":{"line_number":13502,"utf16_col":69}}},{"name":"testRunStarting","kind":"method","ident_start":505316,"ident_end":505331,"extent_start":505311,"extent_end":505375,"fully_qualified_name":"EventListenerBase::testRunStarting","ident_utf16":{"start":{"line_number":13503,"utf16_col":13},"end":{"line_number":13503,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13503,"utf16_col":8},"end":{"line_number":13503,"utf16_col":72}}},{"name":"testCaseStarting","kind":"method","ident_start":505389,"ident_end":505405,"extent_start":505384,"extent_end":505447,"fully_qualified_name":"EventListenerBase::testCaseStarting","ident_utf16":{"start":{"line_number":13504,"utf16_col":13},"end":{"line_number":13504,"utf16_col":29}},"extent_utf16":{"start":{"line_number":13504,"utf16_col":8},"end":{"line_number":13504,"utf16_col":71}}},{"name":"testCasePartialStarting","kind":"method","ident_start":505461,"ident_end":505484,"extent_start":505456,"extent_end":505585,"fully_qualified_name":"EventListenerBase::testCasePartialStarting","ident_utf16":{"start":{"line_number":13505,"utf16_col":13},"end":{"line_number":13505,"utf16_col":36}},"extent_utf16":{"start":{"line_number":13505,"utf16_col":8},"end":{"line_number":13506,"utf16_col":69}}},{"name":"sectionStarting","kind":"method","ident_start":505599,"ident_end":505614,"extent_start":505594,"extent_end":505658,"fully_qualified_name":"EventListenerBase::sectionStarting","ident_utf16":{"start":{"line_number":13507,"utf16_col":13},"end":{"line_number":13507,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13507,"utf16_col":8},"end":{"line_number":13507,"utf16_col":72}}},{"name":"sectionEnded","kind":"method","ident_start":505672,"ident_end":505684,"extent_start":505667,"extent_end":505730,"fully_qualified_name":"EventListenerBase::sectionEnded","ident_utf16":{"start":{"line_number":13508,"utf16_col":13},"end":{"line_number":13508,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13508,"utf16_col":8},"end":{"line_number":13508,"utf16_col":71}}},{"name":"testCasePartialEnded","kind":"method","ident_start":505744,"ident_end":505764,"extent_start":505739,"extent_end":505868,"fully_qualified_name":"EventListenerBase::testCasePartialEnded","ident_utf16":{"start":{"line_number":13509,"utf16_col":13},"end":{"line_number":13509,"utf16_col":33}},"extent_utf16":{"start":{"line_number":13509,"utf16_col":8},"end":{"line_number":13510,"utf16_col":66}}},{"name":"testCaseEnded","kind":"method","ident_start":505882,"ident_end":505895,"extent_start":505877,"extent_end":505943,"fully_qualified_name":"EventListenerBase::testCaseEnded","ident_utf16":{"start":{"line_number":13511,"utf16_col":13},"end":{"line_number":13511,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13511,"utf16_col":8},"end":{"line_number":13511,"utf16_col":74}}},{"name":"testRunEnded","kind":"method","ident_start":505957,"ident_end":505969,"extent_start":505952,"extent_end":506015,"fully_qualified_name":"EventListenerBase::testRunEnded","ident_utf16":{"start":{"line_number":13512,"utf16_col":13},"end":{"line_number":13512,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13512,"utf16_col":8},"end":{"line_number":13512,"utf16_col":71}}},{"name":"skipTest","kind":"method","ident_start":506029,"ident_end":506037,"extent_start":506024,"extent_end":506079,"fully_qualified_name":"EventListenerBase::skipTest","ident_utf16":{"start":{"line_number":13513,"utf16_col":13},"end":{"line_number":13513,"utf16_col":21}},"extent_utf16":{"start":{"line_number":13513,"utf16_col":8},"end":{"line_number":13513,"utf16_col":63}}},{"name":"IConfig","kind":"class","ident_start":506343,"ident_end":506350,"extent_start":506337,"extent_end":506350,"fully_qualified_name":"IConfig","ident_utf16":{"start":{"line_number":13531,"utf16_col":10},"end":{"line_number":13531,"utf16_col":17}},"extent_utf16":{"start":{"line_number":13531,"utf16_col":4},"end":{"line_number":13531,"utf16_col":17}}},{"name":"TestCaseHandle","kind":"class","ident_start":506362,"ident_end":506376,"extent_start":506356,"extent_end":506376,"fully_qualified_name":"TestCaseHandle","ident_utf16":{"start":{"line_number":13532,"utf16_col":10},"end":{"line_number":13532,"utf16_col":24}},"extent_utf16":{"start":{"line_number":13532,"utf16_col":4},"end":{"line_number":13532,"utf16_col":24}}},{"name":"ColourImpl","kind":"class","ident_start":506388,"ident_end":506398,"extent_start":506382,"extent_end":506398,"fully_qualified_name":"ColourImpl","ident_utf16":{"start":{"line_number":13533,"utf16_col":10},"end":{"line_number":13533,"utf16_col":20}},"extent_utf16":{"start":{"line_number":13533,"utf16_col":4},"end":{"line_number":13533,"utf16_col":20}}},{"name":"lineOfChars","kind":"class","ident_start":506767,"ident_end":506778,"extent_start":506760,"extent_end":506937,"fully_qualified_name":"lineOfChars","ident_utf16":{"start":{"line_number":13543,"utf16_col":11},"end":{"line_number":13543,"utf16_col":22}},"extent_utf16":{"start":{"line_number":13543,"utf16_col":4},"end":{"line_number":13548,"utf16_col":5}}},{"name":"lineOfChars","kind":"function","ident_start":506815,"ident_end":506826,"extent_start":506805,"extent_end":506849,"fully_qualified_name":"lineOfChars::lineOfChars","ident_utf16":{"start":{"line_number":13545,"utf16_col":18},"end":{"line_number":13545,"utf16_col":29}},"extent_utf16":{"start":{"line_number":13545,"utf16_col":8},"end":{"line_number":13545,"utf16_col":52}}},{"name":"JsonReporter","kind":"class","ident_start":509216,"ident_end":509228,"extent_start":509210,"extent_end":511905,"fully_qualified_name":"JsonReporter","ident_utf16":{"start":{"line_number":13616,"utf16_col":10},"end":{"line_number":13616,"utf16_col":22}},"extent_utf16":{"start":{"line_number":13616,"utf16_col":4},"end":{"line_number":13689,"utf16_col":5}}},{"name":"getDescription","kind":"method","ident_start":509386,"ident_end":509400,"extent_start":509367,"extent_end":509403,"fully_qualified_name":"JsonReporter::getDescription","ident_utf16":{"start":{"line_number":13622,"utf16_col":27},"end":{"line_number":13622,"utf16_col":41}},"extent_utf16":{"start":{"line_number":13622,"utf16_col":8},"end":{"line_number":13622,"utf16_col":44}}},{"name":"testRunStarting","kind":"method","ident_start":509455,"ident_end":509470,"extent_start":509450,"extent_end":509510,"fully_qualified_name":"JsonReporter::testRunStarting","ident_utf16":{"start":{"line_number":13625,"utf16_col":13},"end":{"line_number":13625,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13625,"utf16_col":8},"end":{"line_number":13625,"utf16_col":68}}},{"name":"testRunEnded","kind":"method","ident_start":509524,"ident_end":509536,"extent_start":509519,"extent_end":509578,"fully_qualified_name":"JsonReporter::testRunEnded","ident_utf16":{"start":{"line_number":13626,"utf16_col":13},"end":{"line_number":13626,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13626,"utf16_col":8},"end":{"line_number":13626,"utf16_col":67}}},{"name":"testCaseStarting","kind":"method","ident_start":509593,"ident_end":509609,"extent_start":509588,"extent_end":509649,"fully_qualified_name":"JsonReporter::testCaseStarting","ident_utf16":{"start":{"line_number":13628,"utf16_col":13},"end":{"line_number":13628,"utf16_col":29}},"extent_utf16":{"start":{"line_number":13628,"utf16_col":8},"end":{"line_number":13628,"utf16_col":69}}},{"name":"testCaseEnded","kind":"method","ident_start":509663,"ident_end":509676,"extent_start":509658,"extent_end":509718,"fully_qualified_name":"JsonReporter::testCaseEnded","ident_utf16":{"start":{"line_number":13629,"utf16_col":13},"end":{"line_number":13629,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13629,"utf16_col":8},"end":{"line_number":13629,"utf16_col":68}}},{"name":"testCasePartialStarting","kind":"method","ident_start":509733,"ident_end":509756,"extent_start":509728,"extent_end":509850,"fully_qualified_name":"JsonReporter::testCasePartialStarting","ident_utf16":{"start":{"line_number":13631,"utf16_col":13},"end":{"line_number":13631,"utf16_col":36}},"extent_utf16":{"start":{"line_number":13631,"utf16_col":8},"end":{"line_number":13632,"utf16_col":64}}},{"name":"testCasePartialEnded","kind":"method","ident_start":509864,"ident_end":509884,"extent_start":509859,"extent_end":509977,"fully_qualified_name":"JsonReporter::testCasePartialEnded","ident_utf16":{"start":{"line_number":13633,"utf16_col":13},"end":{"line_number":13633,"utf16_col":33}},"extent_utf16":{"start":{"line_number":13633,"utf16_col":8},"end":{"line_number":13634,"utf16_col":61}}},{"name":"sectionStarting","kind":"method","ident_start":509992,"ident_end":510007,"extent_start":509987,"extent_end":510051,"fully_qualified_name":"JsonReporter::sectionStarting","ident_utf16":{"start":{"line_number":13636,"utf16_col":13},"end":{"line_number":13636,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13636,"utf16_col":8},"end":{"line_number":13636,"utf16_col":72}}},{"name":"sectionEnded","kind":"method","ident_start":510065,"ident_end":510077,"extent_start":510060,"extent_end":510123,"fully_qualified_name":"JsonReporter::sectionEnded","ident_utf16":{"start":{"line_number":13637,"utf16_col":13},"end":{"line_number":13637,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13637,"utf16_col":8},"end":{"line_number":13637,"utf16_col":71}}},{"name":"assertionStarting","kind":"method","ident_start":510138,"ident_end":510155,"extent_start":510133,"extent_end":510203,"fully_qualified_name":"JsonReporter::assertionStarting","ident_utf16":{"start":{"line_number":13639,"utf16_col":13},"end":{"line_number":13639,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13639,"utf16_col":8},"end":{"line_number":13639,"utf16_col":78}}},{"name":"assertionEnded","kind":"method","ident_start":510217,"ident_end":510231,"extent_start":510212,"extent_end":510281,"fully_qualified_name":"JsonReporter::assertionEnded","ident_utf16":{"start":{"line_number":13640,"utf16_col":13},"end":{"line_number":13640,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13640,"utf16_col":8},"end":{"line_number":13640,"utf16_col":77}}},{"name":"benchmarkPreparing","kind":"method","ident_start":510347,"ident_end":510365,"extent_start":510342,"extent_end":510393,"fully_qualified_name":"JsonReporter::benchmarkPreparing","ident_utf16":{"start":{"line_number":13644,"utf16_col":13},"end":{"line_number":13644,"utf16_col":31}},"extent_utf16":{"start":{"line_number":13644,"utf16_col":8},"end":{"line_number":13644,"utf16_col":59}}},{"name":"benchmarkStarting","kind":"method","ident_start":510407,"ident_end":510424,"extent_start":510402,"extent_end":510458,"fully_qualified_name":"JsonReporter::benchmarkStarting","ident_utf16":{"start":{"line_number":13645,"utf16_col":13},"end":{"line_number":13645,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13645,"utf16_col":8},"end":{"line_number":13645,"utf16_col":64}}},{"name":"benchmarkEnded","kind":"method","ident_start":510472,"ident_end":510486,"extent_start":510467,"extent_end":510523,"fully_qualified_name":"JsonReporter::benchmarkEnded","ident_utf16":{"start":{"line_number":13646,"utf16_col":13},"end":{"line_number":13646,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13646,"utf16_col":8},"end":{"line_number":13646,"utf16_col":64}}},{"name":"benchmarkFailed","kind":"method","ident_start":510537,"ident_end":510552,"extent_start":510532,"extent_end":510581,"fully_qualified_name":"JsonReporter::benchmarkFailed","ident_utf16":{"start":{"line_number":13647,"utf16_col":13},"end":{"line_number":13647,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13647,"utf16_col":8},"end":{"line_number":13647,"utf16_col":57}}},{"name":"listReporters","kind":"method","ident_start":510596,"ident_end":510609,"extent_start":510591,"extent_end":510687,"fully_qualified_name":"JsonReporter::listReporters","ident_utf16":{"start":{"line_number":13649,"utf16_col":13},"end":{"line_number":13649,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13649,"utf16_col":8},"end":{"line_number":13650,"utf16_col":76}}},{"name":"listListeners","kind":"method","ident_start":510701,"ident_end":510714,"extent_start":510696,"extent_end":510792,"fully_qualified_name":"JsonReporter::listListeners","ident_utf16":{"start":{"line_number":13651,"utf16_col":13},"end":{"line_number":13651,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13651,"utf16_col":8},"end":{"line_number":13652,"utf16_col":76}}},{"name":"listTests","kind":"method","ident_start":510806,"ident_end":510815,"extent_start":510801,"extent_end":510869,"fully_qualified_name":"JsonReporter::listTests","ident_utf16":{"start":{"line_number":13653,"utf16_col":13},"end":{"line_number":13653,"utf16_col":22}},"extent_utf16":{"start":{"line_number":13653,"utf16_col":8},"end":{"line_number":13653,"utf16_col":76}}},{"name":"listTags","kind":"method","ident_start":510883,"ident_end":510891,"extent_start":510878,"extent_end":510937,"fully_qualified_name":"JsonReporter::listTags","ident_utf16":{"start":{"line_number":13654,"utf16_col":13},"end":{"line_number":13654,"utf16_col":21}},"extent_utf16":{"start":{"line_number":13654,"utf16_col":8},"end":{"line_number":13654,"utf16_col":67}}},{"name":"Writer","kind":"type","ident_start":511002,"ident_end":511008,"extent_start":510991,"extent_end":511058,"fully_qualified_name":"JsonReporter::Writer","ident_utf16":{"start":{"line_number":13658,"utf16_col":19},"end":{"line_number":13658,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13658,"utf16_col":8},"end":{"line_number":13661,"utf16_col":9}}},{"name":"endObject","kind":"method","ident_start":511266,"ident_end":511275,"extent_start":511261,"extent_end":511278,"fully_qualified_name":"JsonReporter::endObject","ident_utf16":{"start":{"line_number":13669,"utf16_col":13},"end":{"line_number":13669,"utf16_col":22}},"extent_utf16":{"start":{"line_number":13669,"utf16_col":8},"end":{"line_number":13669,"utf16_col":25}}},{"name":"endArray","kind":"method","ident_start":511292,"ident_end":511300,"extent_start":511287,"extent_end":511303,"fully_qualified_name":"JsonReporter::endArray","ident_utf16":{"start":{"line_number":13670,"utf16_col":13},"end":{"line_number":13670,"utf16_col":21}},"extent_utf16":{"start":{"line_number":13670,"utf16_col":8},"end":{"line_number":13670,"utf16_col":24}}},{"name":"isInside","kind":"method","ident_start":511318,"ident_end":511326,"extent_start":511313,"extent_end":511344,"fully_qualified_name":"JsonReporter::isInside","ident_utf16":{"start":{"line_number":13672,"utf16_col":13},"end":{"line_number":13672,"utf16_col":21}},"extent_utf16":{"start":{"line_number":13672,"utf16_col":8},"end":{"line_number":13672,"utf16_col":39}}},{"name":"startListing","kind":"method","ident_start":511359,"ident_end":511371,"extent_start":511354,"extent_end":511374,"fully_qualified_name":"JsonReporter::startListing","ident_utf16":{"start":{"line_number":13674,"utf16_col":13},"end":{"line_number":13674,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13674,"utf16_col":8},"end":{"line_number":13674,"utf16_col":28}}},{"name":"endListing","kind":"method","ident_start":511388,"ident_end":511398,"extent_start":511383,"extent_end":511401,"fully_qualified_name":"JsonReporter::endListing","ident_utf16":{"start":{"line_number":13675,"utf16_col":13},"end":{"line_number":13675,"utf16_col":23}},"extent_utf16":{"start":{"line_number":13675,"utf16_col":8},"end":{"line_number":13675,"utf16_col":26}}},{"name":"JunitReporter","kind":"class","ident_start":512090,"ident_end":512103,"extent_start":512084,"extent_end":513292,"fully_qualified_name":"JunitReporter","ident_utf16":{"start":{"line_number":13702,"utf16_col":10},"end":{"line_number":13702,"utf16_col":23}},"extent_utf16":{"start":{"line_number":13702,"utf16_col":4},"end":{"line_number":13736,"utf16_col":5}}},{"name":"getDescription","kind":"method","ident_start":512233,"ident_end":512247,"extent_start":512214,"extent_end":512250,"fully_qualified_name":"JunitReporter::getDescription","ident_utf16":{"start":{"line_number":13706,"utf16_col":27},"end":{"line_number":13706,"utf16_col":41}},"extent_utf16":{"start":{"line_number":13706,"utf16_col":8},"end":{"line_number":13706,"utf16_col":44}}},{"name":"testRunStarting","kind":"method","ident_start":512265,"ident_end":512280,"extent_start":512260,"extent_end":512318,"fully_qualified_name":"JunitReporter::testRunStarting","ident_utf16":{"start":{"line_number":13708,"utf16_col":13},"end":{"line_number":13708,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13708,"utf16_col":8},"end":{"line_number":13708,"utf16_col":66}}},{"name":"testCaseStarting","kind":"method","ident_start":512333,"ident_end":512349,"extent_start":512328,"extent_end":512393,"fully_qualified_name":"JunitReporter::testCaseStarting","ident_utf16":{"start":{"line_number":13710,"utf16_col":13},"end":{"line_number":13710,"utf16_col":29}},"extent_utf16":{"start":{"line_number":13710,"utf16_col":8},"end":{"line_number":13710,"utf16_col":73}}},{"name":"assertionEnded","kind":"method","ident_start":512407,"ident_end":512421,"extent_start":512402,"extent_end":512469,"fully_qualified_name":"JunitReporter::assertionEnded","ident_utf16":{"start":{"line_number":13711,"utf16_col":13},"end":{"line_number":13711,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13711,"utf16_col":8},"end":{"line_number":13711,"utf16_col":75}}},{"name":"testCaseEnded","kind":"method","ident_start":512484,"ident_end":512497,"extent_start":512479,"extent_end":512543,"fully_qualified_name":"JunitReporter::testCaseEnded","ident_utf16":{"start":{"line_number":13713,"utf16_col":13},"end":{"line_number":13713,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13713,"utf16_col":8},"end":{"line_number":13713,"utf16_col":72}}},{"name":"testRunEndedCumulative","kind":"method","ident_start":512558,"ident_end":512580,"extent_start":512553,"extent_end":512592,"fully_qualified_name":"JunitReporter::testRunEndedCumulative","ident_utf16":{"start":{"line_number":13715,"utf16_col":13},"end":{"line_number":13715,"utf16_col":35}},"extent_utf16":{"start":{"line_number":13715,"utf16_col":8},"end":{"line_number":13715,"utf16_col":47}}},{"name":"writeRun","kind":"method","ident_start":512620,"ident_end":512628,"extent_start":512615,"extent_end":512679,"fully_qualified_name":"JunitReporter::writeRun","ident_utf16":{"start":{"line_number":13718,"utf16_col":13},"end":{"line_number":13718,"utf16_col":21}},"extent_utf16":{"start":{"line_number":13718,"utf16_col":8},"end":{"line_number":13718,"utf16_col":72}}},{"name":"writeTestCase","kind":"method","ident_start":512694,"ident_end":512707,"extent_start":512689,"extent_end":512742,"fully_qualified_name":"JunitReporter::writeTestCase","ident_utf16":{"start":{"line_number":13720,"utf16_col":13},"end":{"line_number":13720,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13720,"utf16_col":8},"end":{"line_number":13720,"utf16_col":61}}},{"name":"writeSection","kind":"method","ident_start":512757,"ident_end":512769,"extent_start":512752,"extent_end":512963,"fully_qualified_name":"JunitReporter::writeSection","ident_utf16":{"start":{"line_number":13722,"utf16_col":13},"end":{"line_number":13722,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13722,"utf16_col":8},"end":{"line_number":13725,"utf16_col":47}}},{"name":"writeAssertions","kind":"method","ident_start":512978,"ident_end":512993,"extent_start":512973,"extent_end":513026,"fully_qualified_name":"JunitReporter::writeAssertions","ident_utf16":{"start":{"line_number":13727,"utf16_col":13},"end":{"line_number":13727,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13727,"utf16_col":8},"end":{"line_number":13727,"utf16_col":61}}},{"name":"writeAssertion","kind":"method","ident_start":513040,"ident_end":513054,"extent_start":513035,"extent_end":513084,"fully_qualified_name":"JunitReporter::writeAssertion","ident_utf16":{"start":{"line_number":13728,"utf16_col":13},"end":{"line_number":13728,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13728,"utf16_col":8},"end":{"line_number":13728,"utf16_col":57}}},{"name":"MultiReporter","kind":"class","ident_start":513482,"ident_end":513495,"extent_start":513476,"extent_end":515984,"fully_qualified_name":"MultiReporter","ident_utf16":{"start":{"line_number":13749,"utf16_col":10},"end":{"line_number":13749,"utf16_col":23}},"extent_utf16":{"start":{"line_number":13749,"utf16_col":4},"end":{"line_number":13802,"utf16_col":5}}},{"name":"updatePreferences","kind":"method","ident_start":514061,"ident_end":514078,"extent_start":514056,"extent_end":514114,"fully_qualified_name":"MultiReporter::updatePreferences","ident_utf16":{"start":{"line_number":13763,"utf16_col":13},"end":{"line_number":13763,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13763,"utf16_col":8},"end":{"line_number":13763,"utf16_col":66}}},{"name":"addListener","kind":"method","ident_start":514188,"ident_end":514199,"extent_start":514183,"extent_end":514232,"fully_qualified_name":"MultiReporter::addListener","ident_utf16":{"start":{"line_number":13768,"utf16_col":13},"end":{"line_number":13768,"utf16_col":24}},"extent_utf16":{"start":{"line_number":13768,"utf16_col":8},"end":{"line_number":13768,"utf16_col":57}}},{"name":"addReporter","kind":"method","ident_start":514246,"ident_end":514257,"extent_start":514241,"extent_end":514290,"fully_qualified_name":"MultiReporter::addReporter","ident_utf16":{"start":{"line_number":13769,"utf16_col":13},"end":{"line_number":13769,"utf16_col":24}},"extent_utf16":{"start":{"line_number":13769,"utf16_col":8},"end":{"line_number":13769,"utf16_col":57}}},{"name":"noMatchingTestCases","kind":"method","ident_start":514336,"ident_end":514355,"extent_start":514331,"extent_end":514392,"fully_qualified_name":"MultiReporter::noMatchingTestCases","ident_utf16":{"start":{"line_number":13773,"utf16_col":13},"end":{"line_number":13773,"utf16_col":32}},"extent_utf16":{"start":{"line_number":13773,"utf16_col":8},"end":{"line_number":13773,"utf16_col":69}}},{"name":"fatalErrorEncountered","kind":"method","ident_start":514406,"ident_end":514427,"extent_start":514401,"extent_end":514456,"fully_qualified_name":"MultiReporter::fatalErrorEncountered","ident_utf16":{"start":{"line_number":13774,"utf16_col":13},"end":{"line_number":13774,"utf16_col":34}},"extent_utf16":{"start":{"line_number":13774,"utf16_col":8},"end":{"line_number":13774,"utf16_col":63}}},{"name":"reportInvalidTestSpec","kind":"method","ident_start":514470,"ident_end":514491,"extent_start":514465,"extent_end":514518,"fully_qualified_name":"MultiReporter::reportInvalidTestSpec","ident_utf16":{"start":{"line_number":13775,"utf16_col":13},"end":{"line_number":13775,"utf16_col":34}},"extent_utf16":{"start":{"line_number":13775,"utf16_col":8},"end":{"line_number":13775,"utf16_col":61}}},{"name":"benchmarkPreparing","kind":"method","ident_start":514533,"ident_end":514551,"extent_start":514528,"extent_end":514579,"fully_qualified_name":"MultiReporter::benchmarkPreparing","ident_utf16":{"start":{"line_number":13777,"utf16_col":13},"end":{"line_number":13777,"utf16_col":31}},"extent_utf16":{"start":{"line_number":13777,"utf16_col":8},"end":{"line_number":13777,"utf16_col":59}}},{"name":"benchmarkStarting","kind":"method","ident_start":514593,"ident_end":514610,"extent_start":514588,"extent_end":514658,"fully_qualified_name":"MultiReporter::benchmarkStarting","ident_utf16":{"start":{"line_number":13778,"utf16_col":13},"end":{"line_number":13778,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13778,"utf16_col":8},"end":{"line_number":13778,"utf16_col":78}}},{"name":"benchmarkEnded","kind":"method","ident_start":514672,"ident_end":514686,"extent_start":514667,"extent_end":514738,"fully_qualified_name":"MultiReporter::benchmarkEnded","ident_utf16":{"start":{"line_number":13779,"utf16_col":13},"end":{"line_number":13779,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13779,"utf16_col":8},"end":{"line_number":13779,"utf16_col":79}}},{"name":"benchmarkFailed","kind":"method","ident_start":514752,"ident_end":514767,"extent_start":514747,"extent_end":514796,"fully_qualified_name":"MultiReporter::benchmarkFailed","ident_utf16":{"start":{"line_number":13780,"utf16_col":13},"end":{"line_number":13780,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13780,"utf16_col":8},"end":{"line_number":13780,"utf16_col":57}}},{"name":"testRunStarting","kind":"method","ident_start":514811,"ident_end":514826,"extent_start":514806,"extent_end":514870,"fully_qualified_name":"MultiReporter::testRunStarting","ident_utf16":{"start":{"line_number":13782,"utf16_col":13},"end":{"line_number":13782,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13782,"utf16_col":8},"end":{"line_number":13782,"utf16_col":72}}},{"name":"testCaseStarting","kind":"method","ident_start":514884,"ident_end":514900,"extent_start":514879,"extent_end":514942,"fully_qualified_name":"MultiReporter::testCaseStarting","ident_utf16":{"start":{"line_number":13783,"utf16_col":13},"end":{"line_number":13783,"utf16_col":29}},"extent_utf16":{"start":{"line_number":13783,"utf16_col":8},"end":{"line_number":13783,"utf16_col":71}}},{"name":"testCasePartialStarting","kind":"method","ident_start":514956,"ident_end":514979,"extent_start":514951,"extent_end":515040,"fully_qualified_name":"MultiReporter::testCasePartialStarting","ident_utf16":{"start":{"line_number":13784,"utf16_col":13},"end":{"line_number":13784,"utf16_col":36}},"extent_utf16":{"start":{"line_number":13784,"utf16_col":8},"end":{"line_number":13784,"utf16_col":97}}},{"name":"sectionStarting","kind":"method","ident_start":515054,"ident_end":515069,"extent_start":515049,"extent_end":515113,"fully_qualified_name":"MultiReporter::sectionStarting","ident_utf16":{"start":{"line_number":13785,"utf16_col":13},"end":{"line_number":13785,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13785,"utf16_col":8},"end":{"line_number":13785,"utf16_col":72}}},{"name":"assertionStarting","kind":"method","ident_start":515127,"ident_end":515144,"extent_start":515122,"extent_end":515192,"fully_qualified_name":"MultiReporter::assertionStarting","ident_utf16":{"start":{"line_number":13786,"utf16_col":13},"end":{"line_number":13786,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13786,"utf16_col":8},"end":{"line_number":13786,"utf16_col":78}}},{"name":"assertionEnded","kind":"method","ident_start":515207,"ident_end":515221,"extent_start":515202,"extent_end":515271,"fully_qualified_name":"MultiReporter::assertionEnded","ident_utf16":{"start":{"line_number":13788,"utf16_col":13},"end":{"line_number":13788,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13788,"utf16_col":8},"end":{"line_number":13788,"utf16_col":77}}},{"name":"sectionEnded","kind":"method","ident_start":515285,"ident_end":515297,"extent_start":515280,"extent_end":515343,"fully_qualified_name":"MultiReporter::sectionEnded","ident_utf16":{"start":{"line_number":13789,"utf16_col":13},"end":{"line_number":13789,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13789,"utf16_col":8},"end":{"line_number":13789,"utf16_col":71}}},{"name":"testCasePartialEnded","kind":"method","ident_start":515357,"ident_end":515377,"extent_start":515352,"extent_end":515440,"fully_qualified_name":"MultiReporter::testCasePartialEnded","ident_utf16":{"start":{"line_number":13790,"utf16_col":13},"end":{"line_number":13790,"utf16_col":33}},"extent_utf16":{"start":{"line_number":13790,"utf16_col":8},"end":{"line_number":13790,"utf16_col":96}}},{"name":"testCaseEnded","kind":"method","ident_start":515454,"ident_end":515467,"extent_start":515449,"extent_end":515515,"fully_qualified_name":"MultiReporter::testCaseEnded","ident_utf16":{"start":{"line_number":13791,"utf16_col":13},"end":{"line_number":13791,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13791,"utf16_col":8},"end":{"line_number":13791,"utf16_col":74}}},{"name":"testRunEnded","kind":"method","ident_start":515529,"ident_end":515541,"extent_start":515524,"extent_end":515587,"fully_qualified_name":"MultiReporter::testRunEnded","ident_utf16":{"start":{"line_number":13792,"utf16_col":13},"end":{"line_number":13792,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13792,"utf16_col":8},"end":{"line_number":13792,"utf16_col":71}}},{"name":"skipTest","kind":"method","ident_start":515602,"ident_end":515610,"extent_start":515597,"extent_end":515652,"fully_qualified_name":"MultiReporter::skipTest","ident_utf16":{"start":{"line_number":13794,"utf16_col":13},"end":{"line_number":13794,"utf16_col":21}},"extent_utf16":{"start":{"line_number":13794,"utf16_col":8},"end":{"line_number":13794,"utf16_col":63}}},{"name":"listReporters","kind":"method","ident_start":515667,"ident_end":515680,"extent_start":515662,"extent_end":515744,"fully_qualified_name":"MultiReporter::listReporters","ident_utf16":{"start":{"line_number":13796,"utf16_col":13},"end":{"line_number":13796,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13796,"utf16_col":8},"end":{"line_number":13796,"utf16_col":90}}},{"name":"listListeners","kind":"method","ident_start":515758,"ident_end":515771,"extent_start":515753,"extent_end":515835,"fully_qualified_name":"MultiReporter::listListeners","ident_utf16":{"start":{"line_number":13797,"utf16_col":13},"end":{"line_number":13797,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13797,"utf16_col":8},"end":{"line_number":13797,"utf16_col":90}}},{"name":"listTests","kind":"method","ident_start":515849,"ident_end":515858,"extent_start":515844,"extent_end":515910,"fully_qualified_name":"MultiReporter::listTests","ident_utf16":{"start":{"line_number":13798,"utf16_col":13},"end":{"line_number":13798,"utf16_col":22}},"extent_utf16":{"start":{"line_number":13798,"utf16_col":8},"end":{"line_number":13798,"utf16_col":74}}},{"name":"listTags","kind":"method","ident_start":515924,"ident_end":515932,"extent_start":515919,"extent_end":515976,"fully_qualified_name":"MultiReporter::listTags","ident_utf16":{"start":{"line_number":13799,"utf16_col":13},"end":{"line_number":13799,"utf16_col":21}},"extent_utf16":{"start":{"line_number":13799,"utf16_col":8},"end":{"line_number":13799,"utf16_col":65}}},{"name":"has_description","kind":"class","ident_start":516284,"ident_end":516299,"extent_start":516277,"extent_end":516320,"fully_qualified_name":"has_description","ident_utf16":{"start":{"line_number":13820,"utf16_col":15},"end":{"line_number":13820,"utf16_col":30}},"extent_utf16":{"start":{"line_number":13820,"utf16_col":8},"end":{"line_number":13820,"utf16_col":51}}},{"name":"IEventListener","kind":"class","ident_start":516970,"ident_end":516984,"extent_start":516964,"extent_end":516984,"fully_qualified_name":"IEventListener","ident_utf16":{"start":{"line_number":13836,"utf16_col":10},"end":{"line_number":13836,"utf16_col":24}},"extent_utf16":{"start":{"line_number":13836,"utf16_col":4},"end":{"line_number":13836,"utf16_col":24}}},{"name":"ReporterFactory","kind":"class","ident_start":517089,"ident_end":517104,"extent_start":517083,"extent_end":517396,"fully_qualified_name":"ReporterFactory","ident_utf16":{"start":{"line_number":13840,"utf16_col":10},"end":{"line_number":13840,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13840,"utf16_col":4},"end":{"line_number":13849,"utf16_col":5}}},{"name":"create","kind":"function","ident_start":517160,"ident_end":517166,"extent_start":517142,"extent_end":517285,"fully_qualified_name":"ReporterFactory::create","ident_utf16":{"start":{"line_number":13842,"utf16_col":26},"end":{"line_number":13842,"utf16_col":32}},"extent_utf16":{"start":{"line_number":13842,"utf16_col":8},"end":{"line_number":13844,"utf16_col":9}}},{"name":"getDescription","kind":"function","ident_start":517307,"ident_end":517321,"extent_start":517295,"extent_end":517390,"fully_qualified_name":"ReporterFactory::getDescription","ident_utf16":{"start":{"line_number":13846,"utf16_col":20},"end":{"line_number":13846,"utf16_col":34}},"extent_utf16":{"start":{"line_number":13846,"utf16_col":8},"end":{"line_number":13848,"utf16_col":9}}},{"name":"ReporterRegistrar","kind":"class","ident_start":517435,"ident_end":517452,"extent_start":517429,"extent_end":517665,"fully_qualified_name":"ReporterRegistrar","ident_utf16":{"start":{"line_number":13853,"utf16_col":10},"end":{"line_number":13853,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13853,"utf16_col":4},"end":{"line_number":13859,"utf16_col":5}}},{"name":"ReporterRegistrar","kind":"function","ident_start":517484,"ident_end":517501,"extent_start":517475,"extent_end":517659,"fully_qualified_name":"ReporterRegistrar::ReporterRegistrar","ident_utf16":{"start":{"line_number":13855,"utf16_col":17},"end":{"line_number":13855,"utf16_col":34}},"extent_utf16":{"start":{"line_number":13855,"utf16_col":8},"end":{"line_number":13858,"utf16_col":9}}},{"name":"ListenerRegistrar","kind":"class","ident_start":517703,"ident_end":517720,"extent_start":517697,"extent_end":518807,"fully_qualified_name":"ListenerRegistrar","ident_utf16":{"start":{"line_number":13862,"utf16_col":10},"end":{"line_number":13862,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13862,"utf16_col":4},"end":{"line_number":13896,"utf16_col":5}}},{"name":"TypedListenerFactory","kind":"class","ident_start":517738,"ident_end":517758,"extent_start":517732,"extent_end":518632,"fully_qualified_name":"ListenerRegistrar::TypedListenerFactory","ident_utf16":{"start":{"line_number":13864,"utf16_col":14},"end":{"line_number":13864,"utf16_col":34}},"extent_utf16":{"start":{"line_number":13864,"utf16_col":8},"end":{"line_number":13890,"utf16_col":9}}},{"name":"getDescriptionImpl","kind":"function","ident_start":517854,"ident_end":517872,"extent_start":517842,"extent_end":517956,"fully_qualified_name":"ListenerRegistrar::TypedListenerFactory::getDescriptionImpl","ident_utf16":{"start":{"line_number":13867,"utf16_col":24},"end":{"line_number":13867,"utf16_col":42}},"extent_utf16":{"start":{"line_number":13867,"utf16_col":12},"end":{"line_number":13869,"utf16_col":13}}},{"name":"getDescriptionImpl","kind":"function","ident_start":517982,"ident_end":518000,"extent_start":517970,"extent_end":518093,"fully_qualified_name":"ListenerRegistrar::TypedListenerFactory::getDescriptionImpl","ident_utf16":{"start":{"line_number":13871,"utf16_col":24},"end":{"line_number":13871,"utf16_col":42}},"extent_utf16":{"start":{"line_number":13871,"utf16_col":12},"end":{"line_number":13873,"utf16_col":13}}},{"name":"TypedListenerFactory","kind":"function","ident_start":518123,"ident_end":518143,"extent_start":518123,"extent_end":518220,"fully_qualified_name":"ListenerRegistrar::TypedListenerFactory::TypedListenerFactory","ident_utf16":{"start":{"line_number":13876,"utf16_col":12},"end":{"line_number":13876,"utf16_col":32}},"extent_utf16":{"start":{"line_number":13876,"utf16_col":12},"end":{"line_number":13877,"utf16_col":49}}},{"name":"create","kind":"function","ident_start":518252,"ident_end":518258,"extent_start":518234,"extent_end":518371,"fully_qualified_name":"ListenerRegistrar::TypedListenerFactory::create","ident_utf16":{"start":{"line_number":13879,"utf16_col":30},"end":{"line_number":13879,"utf16_col":36}},"extent_utf16":{"start":{"line_number":13879,"utf16_col":12},"end":{"line_number":13881,"utf16_col":13}}},{"name":"getName","kind":"function","ident_start":518395,"ident_end":518402,"extent_start":518385,"extent_end":518474,"fully_qualified_name":"ListenerRegistrar::TypedListenerFactory::getName","ident_utf16":{"start":{"line_number":13883,"utf16_col":22},"end":{"line_number":13883,"utf16_col":29}},"extent_utf16":{"start":{"line_number":13883,"utf16_col":12},"end":{"line_number":13885,"utf16_col":13}}},{"name":"getDescription","kind":"function","ident_start":518500,"ident_end":518514,"extent_start":518488,"extent_end":518622,"fully_qualified_name":"ListenerRegistrar::TypedListenerFactory::getDescription","ident_utf16":{"start":{"line_number":13887,"utf16_col":24},"end":{"line_number":13887,"utf16_col":38}},"extent_utf16":{"start":{"line_number":13887,"utf16_col":12},"end":{"line_number":13889,"utf16_col":13}}},{"name":"ListenerRegistrar","kind":"function","ident_start":518655,"ident_end":518672,"extent_start":518655,"extent_end":518801,"fully_qualified_name":"ListenerRegistrar::ListenerRegistrar","ident_utf16":{"start":{"line_number":13893,"utf16_col":8},"end":{"line_number":13893,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13893,"utf16_col":8},"end":{"line_number":13895,"utf16_col":9}}},{"name":"SonarQubeReporter","kind":"class","ident_start":520419,"ident_end":520436,"extent_start":520413,"extent_end":521715,"fully_qualified_name":"SonarQubeReporter","ident_utf16":{"start":{"line_number":13936,"utf16_col":10},"end":{"line_number":13936,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13936,"utf16_col":4},"end":{"line_number":13972,"utf16_col":5}}},{"name":"SonarQubeReporter","kind":"function","ident_start":520497,"ident_end":520514,"extent_start":520497,"extent_end":520798,"fully_qualified_name":"SonarQubeReporter::SonarQubeReporter","ident_utf16":{"start":{"line_number":13938,"utf16_col":8},"end":{"line_number":13938,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13938,"utf16_col":8},"end":{"line_number":13944,"utf16_col":9}}},{"name":"getDescription","kind":"function","ident_start":520827,"ident_end":520841,"extent_start":520808,"extent_end":520995,"fully_qualified_name":"SonarQubeReporter::getDescription","ident_utf16":{"start":{"line_number":13946,"utf16_col":27},"end":{"line_number":13946,"utf16_col":41}},"extent_utf16":{"start":{"line_number":13946,"utf16_col":8},"end":{"line_number":13949,"utf16_col":9}}},{"name":"testRunStarting","kind":"method","ident_start":521010,"ident_end":521025,"extent_start":521005,"extent_end":521069,"fully_qualified_name":"SonarQubeReporter::testRunStarting","ident_utf16":{"start":{"line_number":13951,"utf16_col":13},"end":{"line_number":13951,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13951,"utf16_col":8},"end":{"line_number":13951,"utf16_col":72}}},{"name":"testRunEndedCumulative","kind":"function","ident_start":521084,"ident_end":521106,"extent_start":521079,"extent_end":521195,"fully_qualified_name":"SonarQubeReporter::testRunEndedCumulative","ident_utf16":{"start":{"line_number":13953,"utf16_col":13},"end":{"line_number":13953,"utf16_col":35}},"extent_utf16":{"start":{"line_number":13953,"utf16_col":8},"end":{"line_number":13956,"utf16_col":9}}},{"name":"writeRun","kind":"method","ident_start":521210,"ident_end":521218,"extent_start":521205,"extent_end":521249,"fully_qualified_name":"SonarQubeReporter::writeRun","ident_utf16":{"start":{"line_number":13958,"utf16_col":13},"end":{"line_number":13958,"utf16_col":21}},"extent_utf16":{"start":{"line_number":13958,"utf16_col":8},"end":{"line_number":13958,"utf16_col":52}}},{"name":"writeTestFile","kind":"method","ident_start":521264,"ident_end":521277,"extent_start":521259,"extent_end":521353,"fully_qualified_name":"SonarQubeReporter::writeTestFile","ident_utf16":{"start":{"line_number":13960,"utf16_col":13},"end":{"line_number":13960,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13960,"utf16_col":8},"end":{"line_number":13960,"utf16_col":102}}},{"name":"writeTestCase","kind":"method","ident_start":521368,"ident_end":521381,"extent_start":521363,"extent_end":521416,"fully_qualified_name":"SonarQubeReporter::writeTestCase","ident_utf16":{"start":{"line_number":13962,"utf16_col":13},"end":{"line_number":13962,"utf16_col":26}},"extent_utf16":{"start":{"line_number":13962,"utf16_col":8},"end":{"line_number":13962,"utf16_col":61}}},{"name":"writeSection","kind":"method","ident_start":521431,"ident_end":521443,"extent_start":521426,"extent_end":521520,"fully_qualified_name":"SonarQubeReporter::writeSection","ident_utf16":{"start":{"line_number":13964,"utf16_col":13},"end":{"line_number":13964,"utf16_col":25}},"extent_utf16":{"start":{"line_number":13964,"utf16_col":8},"end":{"line_number":13964,"utf16_col":102}}},{"name":"writeAssertions","kind":"method","ident_start":521535,"ident_end":521550,"extent_start":521530,"extent_end":521598,"fully_qualified_name":"SonarQubeReporter::writeAssertions","ident_utf16":{"start":{"line_number":13966,"utf16_col":13},"end":{"line_number":13966,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13966,"utf16_col":8},"end":{"line_number":13966,"utf16_col":76}}},{"name":"writeAssertion","kind":"method","ident_start":521613,"ident_end":521627,"extent_start":521608,"extent_end":521672,"fully_qualified_name":"SonarQubeReporter::writeAssertion","ident_utf16":{"start":{"line_number":13968,"utf16_col":13},"end":{"line_number":13968,"utf16_col":27}},"extent_utf16":{"start":{"line_number":13968,"utf16_col":8},"end":{"line_number":13968,"utf16_col":72}}},{"name":"TAPReporter","kind":"class","ident_start":521906,"ident_end":521917,"extent_start":521900,"extent_end":522683,"fully_qualified_name":"TAPReporter","ident_utf16":{"start":{"line_number":13986,"utf16_col":10},"end":{"line_number":13986,"utf16_col":21}},"extent_utf16":{"start":{"line_number":13986,"utf16_col":4},"end":{"line_number":14008,"utf16_col":5}}},{"name":"TAPReporter","kind":"function","ident_start":521977,"ident_end":521988,"extent_start":521977,"extent_end":522144,"fully_qualified_name":"TAPReporter::TAPReporter","ident_utf16":{"start":{"line_number":13988,"utf16_col":8},"end":{"line_number":13988,"utf16_col":19}},"extent_utf16":{"start":{"line_number":13988,"utf16_col":8},"end":{"line_number":13991,"utf16_col":9}}},{"name":"getDescription","kind":"function","ident_start":522173,"ident_end":522187,"extent_start":522154,"extent_end":522338,"fully_qualified_name":"TAPReporter::getDescription","ident_utf16":{"start":{"line_number":13993,"utf16_col":27},"end":{"line_number":13993,"utf16_col":41}},"extent_utf16":{"start":{"line_number":13993,"utf16_col":8},"end":{"line_number":13996,"utf16_col":9}}},{"name":"testRunStarting","kind":"method","ident_start":522353,"ident_end":522368,"extent_start":522348,"extent_end":522409,"fully_qualified_name":"TAPReporter::testRunStarting","ident_utf16":{"start":{"line_number":13998,"utf16_col":13},"end":{"line_number":13998,"utf16_col":28}},"extent_utf16":{"start":{"line_number":13998,"utf16_col":8},"end":{"line_number":13998,"utf16_col":69}}},{"name":"noMatchingTestCases","kind":"method","ident_start":522424,"ident_end":522443,"extent_start":522419,"extent_end":522480,"fully_qualified_name":"TAPReporter::noMatchingTestCases","ident_utf16":{"start":{"line_number":14000,"utf16_col":13},"end":{"line_number":14000,"utf16_col":32}},"extent_utf16":{"start":{"line_number":14000,"utf16_col":8},"end":{"line_number":14000,"utf16_col":69}}},{"name":"assertionEnded","kind":"method","ident_start":522495,"ident_end":522509,"extent_start":522490,"extent_end":522558,"fully_qualified_name":"TAPReporter::assertionEnded","ident_utf16":{"start":{"line_number":14002,"utf16_col":13},"end":{"line_number":14002,"utf16_col":27}},"extent_utf16":{"start":{"line_number":14002,"utf16_col":8},"end":{"line_number":14002,"utf16_col":76}}},{"name":"testRunEnded","kind":"method","ident_start":522573,"ident_end":522585,"extent_start":522568,"extent_end":522630,"fully_qualified_name":"TAPReporter::testRunEnded","ident_utf16":{"start":{"line_number":14004,"utf16_col":13},"end":{"line_number":14004,"utf16_col":25}},"extent_utf16":{"start":{"line_number":14004,"utf16_col":8},"end":{"line_number":14004,"utf16_col":70}}},{"name":"TeamCityReporter","kind":"class","ident_start":523002,"ident_end":523018,"extent_start":522996,"extent_end":524186,"fully_qualified_name":"TeamCityReporter","ident_utf16":{"start":{"line_number":14028,"utf16_col":10},"end":{"line_number":14028,"utf16_col":26}},"extent_utf16":{"start":{"line_number":14028,"utf16_col":4},"end":{"line_number":14063,"utf16_col":5}}},{"name":"TeamCityReporter","kind":"function","ident_start":523078,"ident_end":523094,"extent_start":523078,"extent_end":523254,"fully_qualified_name":"TeamCityReporter::TeamCityReporter","ident_utf16":{"start":{"line_number":14030,"utf16_col":8},"end":{"line_number":14030,"utf16_col":24}},"extent_utf16":{"start":{"line_number":14030,"utf16_col":8},"end":{"line_number":14034,"utf16_col":9}}},{"name":"getDescription","kind":"function","ident_start":523322,"ident_end":523336,"extent_start":523303,"extent_end":523473,"fully_qualified_name":"TeamCityReporter::getDescription","ident_utf16":{"start":{"line_number":14038,"utf16_col":27},"end":{"line_number":14038,"utf16_col":41}},"extent_utf16":{"start":{"line_number":14038,"utf16_col":8},"end":{"line_number":14041,"utf16_col":9}}},{"name":"testRunStarting","kind":"method","ident_start":523488,"ident_end":523503,"extent_start":523483,"extent_end":523543,"fully_qualified_name":"TeamCityReporter::testRunStarting","ident_utf16":{"start":{"line_number":14043,"utf16_col":13},"end":{"line_number":14043,"utf16_col":28}},"extent_utf16":{"start":{"line_number":14043,"utf16_col":8},"end":{"line_number":14043,"utf16_col":68}}},{"name":"testRunEnded","kind":"method","ident_start":523557,"ident_end":523569,"extent_start":523552,"extent_end":523611,"fully_qualified_name":"TeamCityReporter::testRunEnded","ident_utf16":{"start":{"line_number":14044,"utf16_col":13},"end":{"line_number":14044,"utf16_col":25}},"extent_utf16":{"start":{"line_number":14044,"utf16_col":8},"end":{"line_number":14044,"utf16_col":67}}},{"name":"assertionEnded","kind":"method","ident_start":523627,"ident_end":523641,"extent_start":523622,"extent_end":523689,"fully_qualified_name":"TeamCityReporter::assertionEnded","ident_utf16":{"start":{"line_number":14047,"utf16_col":13},"end":{"line_number":14047,"utf16_col":27}},"extent_utf16":{"start":{"line_number":14047,"utf16_col":8},"end":{"line_number":14047,"utf16_col":75}}},{"name":"sectionStarting","kind":"function","ident_start":523704,"ident_end":523719,"extent_start":523699,"extent_end":523890,"fully_qualified_name":"TeamCityReporter::sectionStarting","ident_utf16":{"start":{"line_number":14049,"utf16_col":13},"end":{"line_number":14049,"utf16_col":28}},"extent_utf16":{"start":{"line_number":14049,"utf16_col":8},"end":{"line_number":14052,"utf16_col":9}}},{"name":"testCaseStarting","kind":"method","ident_start":523905,"ident_end":523921,"extent_start":523900,"extent_end":523961,"fully_qualified_name":"TeamCityReporter::testCaseStarting","ident_utf16":{"start":{"line_number":14054,"utf16_col":13},"end":{"line_number":14054,"utf16_col":29}},"extent_utf16":{"start":{"line_number":14054,"utf16_col":8},"end":{"line_number":14054,"utf16_col":69}}},{"name":"testCaseEnded","kind":"method","ident_start":523976,"ident_end":523989,"extent_start":523971,"extent_end":524035,"fully_qualified_name":"TeamCityReporter::testCaseEnded","ident_utf16":{"start":{"line_number":14056,"utf16_col":13},"end":{"line_number":14056,"utf16_col":26}},"extent_utf16":{"start":{"line_number":14056,"utf16_col":8},"end":{"line_number":14056,"utf16_col":72}}},{"name":"printSectionHeader","kind":"method","ident_start":524063,"ident_end":524081,"extent_start":524058,"extent_end":524100,"fully_qualified_name":"TeamCityReporter::printSectionHeader","ident_utf16":{"start":{"line_number":14059,"utf16_col":13},"end":{"line_number":14059,"utf16_col":31}},"extent_utf16":{"start":{"line_number":14059,"utf16_col":8},"end":{"line_number":14059,"utf16_col":50}}},{"name":"XmlReporter","kind":"class","ident_start":524433,"ident_end":524444,"extent_start":524427,"extent_end":526020,"fully_qualified_name":"XmlReporter","ident_utf16":{"start":{"line_number":14081,"utf16_col":10},"end":{"line_number":14081,"utf16_col":21}},"extent_utf16":{"start":{"line_number":14081,"utf16_col":4},"end":{"line_number":14125,"utf16_col":5}}},{"name":"getDescription","kind":"method","ident_start":524599,"ident_end":524613,"extent_start":524580,"extent_end":524616,"fully_qualified_name":"XmlReporter::getDescription","ident_utf16":{"start":{"line_number":14087,"utf16_col":27},"end":{"line_number":14087,"utf16_col":41}},"extent_utf16":{"start":{"line_number":14087,"utf16_col":8},"end":{"line_number":14087,"utf16_col":44}}},{"name":"getStylesheetRef","kind":"method","ident_start":524646,"ident_end":524662,"extent_start":524626,"extent_end":524671,"fully_qualified_name":"XmlReporter::getStylesheetRef","ident_utf16":{"start":{"line_number":14089,"utf16_col":28},"end":{"line_number":14089,"utf16_col":44}},"extent_utf16":{"start":{"line_number":14089,"utf16_col":8},"end":{"line_number":14089,"utf16_col":53}}},{"name":"writeSourceInfo","kind":"method","ident_start":524686,"ident_end":524701,"extent_start":524681,"extent_end":524736,"fully_qualified_name":"XmlReporter::writeSourceInfo","ident_utf16":{"start":{"line_number":14091,"utf16_col":13},"end":{"line_number":14091,"utf16_col":28}},"extent_utf16":{"start":{"line_number":14091,"utf16_col":8},"end":{"line_number":14091,"utf16_col":63}}},{"name":"testRunStarting","kind":"method","ident_start":524789,"ident_end":524804,"extent_start":524784,"extent_end":524843,"fully_qualified_name":"XmlReporter::testRunStarting","ident_utf16":{"start":{"line_number":14095,"utf16_col":13},"end":{"line_number":14095,"utf16_col":28}},"extent_utf16":{"start":{"line_number":14095,"utf16_col":8},"end":{"line_number":14095,"utf16_col":67}}},{"name":"testCaseStarting","kind":"method","ident_start":524858,"ident_end":524874,"extent_start":524853,"extent_end":524914,"fully_qualified_name":"XmlReporter::testCaseStarting","ident_utf16":{"start":{"line_number":14097,"utf16_col":13},"end":{"line_number":14097,"utf16_col":29}},"extent_utf16":{"start":{"line_number":14097,"utf16_col":8},"end":{"line_number":14097,"utf16_col":69}}},{"name":"sectionStarting","kind":"method","ident_start":524929,"ident_end":524944,"extent_start":524924,"extent_end":524986,"fully_qualified_name":"XmlReporter::sectionStarting","ident_utf16":{"start":{"line_number":14099,"utf16_col":13},"end":{"line_number":14099,"utf16_col":28}},"extent_utf16":{"start":{"line_number":14099,"utf16_col":8},"end":{"line_number":14099,"utf16_col":70}}},{"name":"assertionStarting","kind":"method","ident_start":525001,"ident_end":525018,"extent_start":524996,"extent_end":525050,"fully_qualified_name":"XmlReporter::assertionStarting","ident_utf16":{"start":{"line_number":14101,"utf16_col":13},"end":{"line_number":14101,"utf16_col":30}},"extent_utf16":{"start":{"line_number":14101,"utf16_col":8},"end":{"line_number":14101,"utf16_col":62}}},{"name":"assertionEnded","kind":"method","ident_start":525065,"ident_end":525079,"extent_start":525060,"extent_end":525127,"fully_qualified_name":"XmlReporter::assertionEnded","ident_utf16":{"start":{"line_number":14103,"utf16_col":13},"end":{"line_number":14103,"utf16_col":27}},"extent_utf16":{"start":{"line_number":14103,"utf16_col":8},"end":{"line_number":14103,"utf16_col":75}}},{"name":"sectionEnded","kind":"method","ident_start":525142,"ident_end":525154,"extent_start":525137,"extent_end":525198,"fully_qualified_name":"XmlReporter::sectionEnded","ident_utf16":{"start":{"line_number":14105,"utf16_col":13},"end":{"line_number":14105,"utf16_col":25}},"extent_utf16":{"start":{"line_number":14105,"utf16_col":8},"end":{"line_number":14105,"utf16_col":69}}},{"name":"testCaseEnded","kind":"method","ident_start":525213,"ident_end":525226,"extent_start":525208,"extent_end":525272,"fully_qualified_name":"XmlReporter::testCaseEnded","ident_utf16":{"start":{"line_number":14107,"utf16_col":13},"end":{"line_number":14107,"utf16_col":26}},"extent_utf16":{"start":{"line_number":14107,"utf16_col":8},"end":{"line_number":14107,"utf16_col":72}}},{"name":"testRunEnded","kind":"method","ident_start":525287,"ident_end":525299,"extent_start":525282,"extent_end":525343,"fully_qualified_name":"XmlReporter::testRunEnded","ident_utf16":{"start":{"line_number":14109,"utf16_col":13},"end":{"line_number":14109,"utf16_col":25}},"extent_utf16":{"start":{"line_number":14109,"utf16_col":8},"end":{"line_number":14109,"utf16_col":69}}},{"name":"benchmarkPreparing","kind":"method","ident_start":525358,"ident_end":525376,"extent_start":525353,"extent_end":525404,"fully_qualified_name":"XmlReporter::benchmarkPreparing","ident_utf16":{"start":{"line_number":14111,"utf16_col":13},"end":{"line_number":14111,"utf16_col":31}},"extent_utf16":{"start":{"line_number":14111,"utf16_col":8},"end":{"line_number":14111,"utf16_col":59}}},{"name":"benchmarkStarting","kind":"method","ident_start":525418,"ident_end":525435,"extent_start":525413,"extent_end":525467,"fully_qualified_name":"XmlReporter::benchmarkStarting","ident_utf16":{"start":{"line_number":14112,"utf16_col":13},"end":{"line_number":14112,"utf16_col":30}},"extent_utf16":{"start":{"line_number":14112,"utf16_col":8},"end":{"line_number":14112,"utf16_col":62}}},{"name":"benchmarkEnded","kind":"method","ident_start":525481,"ident_end":525495,"extent_start":525476,"extent_end":525530,"fully_qualified_name":"XmlReporter::benchmarkEnded","ident_utf16":{"start":{"line_number":14113,"utf16_col":13},"end":{"line_number":14113,"utf16_col":27}},"extent_utf16":{"start":{"line_number":14113,"utf16_col":8},"end":{"line_number":14113,"utf16_col":62}}},{"name":"benchmarkFailed","kind":"method","ident_start":525544,"ident_end":525559,"extent_start":525539,"extent_end":525588,"fully_qualified_name":"XmlReporter::benchmarkFailed","ident_utf16":{"start":{"line_number":14114,"utf16_col":13},"end":{"line_number":14114,"utf16_col":28}},"extent_utf16":{"start":{"line_number":14114,"utf16_col":8},"end":{"line_number":14114,"utf16_col":57}}},{"name":"listReporters","kind":"method","ident_start":525603,"ident_end":525616,"extent_start":525598,"extent_end":525680,"fully_qualified_name":"XmlReporter::listReporters","ident_utf16":{"start":{"line_number":14116,"utf16_col":13},"end":{"line_number":14116,"utf16_col":26}},"extent_utf16":{"start":{"line_number":14116,"utf16_col":8},"end":{"line_number":14116,"utf16_col":90}}},{"name":"listListeners","kind":"method","ident_start":525694,"ident_end":525707,"extent_start":525689,"extent_end":525771,"fully_qualified_name":"XmlReporter::listListeners","ident_utf16":{"start":{"line_number":14117,"utf16_col":13},"end":{"line_number":14117,"utf16_col":26}},"extent_utf16":{"start":{"line_number":14117,"utf16_col":8},"end":{"line_number":14117,"utf16_col":90}}},{"name":"listTests","kind":"method","ident_start":525785,"ident_end":525794,"extent_start":525780,"extent_end":525846,"fully_qualified_name":"XmlReporter::listTests","ident_utf16":{"start":{"line_number":14118,"utf16_col":13},"end":{"line_number":14118,"utf16_col":22}},"extent_utf16":{"start":{"line_number":14118,"utf16_col":8},"end":{"line_number":14118,"utf16_col":74}}},{"name":"listTags","kind":"method","ident_start":525860,"ident_end":525868,"extent_start":525855,"extent_end":525912,"fully_qualified_name":"XmlReporter::listTags","ident_utf16":{"start":{"line_number":14119,"utf16_col":13},"end":{"line_number":14119,"utf16_col":21}},"extent_utf16":{"start":{"line_number":14119,"utf16_col":8},"end":{"line_number":14119,"utf16_col":65}}}]}},"copilotInfo":null,"copilotAccessAllowed":false,"modelsAccessAllowed":false,"modelsRepoIntegrationEnabled":false,"isMarketplaceEnabled":true,"csrf_tokens":{"/catchorg/Catch2/branches":{"post":"6R0mG1GdmzrGiL7PYra-pWlpBRh2qUmbbftG0STpsp9lMGnlSFO1v09xG7p_tM4ko9AqyH2zQiVIkgeEoUPhIQ"},"/repos/preferences":{"post":"edHJRUxu1r6SzBwfrcUoRprVT5odMtOaZgoUnx6tXX7tlEZI-QIyIWtx6Qkk6QtzzI-zQ5q0ua8eD41ilgBjJw"}}},"title":"Catch2/extras/catch_amalgamated.hpp at devel · catchorg/Catch2","appPayload":{"helpUrl":"https://docs.github.com","findFileWorkerPath":"/assets-cdn/worker/find-file-worker-263cab1760dd.js","findInFileWorkerPath":"/assets-cdn/worker/find-in-file-worker-41d93d549163.js","githubDevUrl":null,"enabled_features":{"code_nav_ui_events":false,"react_blob_overlay":false,"accessible_code_button":true}}}</script>
  <div data-target="react-app.reactRoot"></div>
</react-app>
</turbo-frame>



  </div>

</turbo-frame>

    </main>
  </div>

  </div>

          <footer class="footer pt-8 pb-6 f6 color-fg-muted p-responsive" role="contentinfo" >
  <h2 class='sr-only'>Footer</h2>

  


  <div class="d-flex flex-justify-center flex-items-center flex-column-reverse flex-lg-row flex-wrap flex-lg-nowrap">
    <div class="d-flex flex-items-center flex-shrink-0 mx-2">
      <a aria-label="GitHub Homepage" class="footer-octicon mr-2" href="https://github.com">
        <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-mark-github">
    <path d="M12 1C5.923 1 1 5.923 1 12c0 4.867 3.149 8.979 7.521 10.436.55.096.756-.233.756-.522 0-.262-.013-1.128-.013-2.049-2.764.509-3.479-.674-3.699-1.292-.124-.317-.66-1.293-1.127-1.554-.385-.207-.936-.715-.014-.729.866-.014 1.485.797 1.691 1.128.99 1.663 2.571 1.196 3.204.907.096-.715.385-1.196.701-1.471-2.448-.275-5.005-1.224-5.005-5.432 0-1.196.426-2.186 1.128-2.956-.111-.275-.496-1.402.11-2.915 0 0 .921-.288 3.024 1.128a10.193 10.193 0 0 1 2.75-.371c.936 0 1.871.123 2.75.371 2.104-1.43 3.025-1.128 3.025-1.128.605 1.513.221 2.64.111 2.915.701.77 1.127 1.747 1.127 2.956 0 4.222-2.571 5.157-5.019 5.432.399.344.743 1.004.743 2.035 0 1.471-.014 2.654-.014 3.025 0 .289.206.632.756.522C19.851 20.979 23 16.854 23 12c0-6.077-4.922-11-11-11Z"></path>
</svg>
</a>
      <span>
        &copy; 2025 GitHub,&nbsp;Inc.
      </span>
    </div>

    <nav aria-label="Footer">
      <h3 class="sr-only" id="sr-footer-heading">Footer navigation</h3>

      <ul class="list-style-none d-flex flex-justify-center flex-wrap mb-2 mb-lg-0" aria-labelledby="sr-footer-heading">

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to Terms&quot;,&quot;label&quot;:&quot;text:terms&quot;}" href="https://docs.github.com/site-policy/github-terms/github-terms-of-service" data-view-component="true" class="Link--secondary Link">Terms</a>
          </li>

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to privacy&quot;,&quot;label&quot;:&quot;text:privacy&quot;}" href="https://docs.github.com/site-policy/privacy-policies/github-privacy-statement" data-view-component="true" class="Link--secondary Link">Privacy</a>
          </li>

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to security&quot;,&quot;label&quot;:&quot;text:security&quot;}" href="https://github.com/security" data-view-component="true" class="Link--secondary Link">Security</a>
          </li>

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to status&quot;,&quot;label&quot;:&quot;text:status&quot;}" href="https://www.githubstatus.com/" data-view-component="true" class="Link--secondary Link">Status</a>
          </li>

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to docs&quot;,&quot;label&quot;:&quot;text:docs&quot;}" href="https://docs.github.com/" data-view-component="true" class="Link--secondary Link">Docs</a>
          </li>

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to contact&quot;,&quot;label&quot;:&quot;text:contact&quot;}" href="https://support.github.com?tags=dotcom-footer" data-view-component="true" class="Link--secondary Link">Contact</a>
          </li>

          <li class="mx-2" >
  <cookie-consent-link>
    <button
      type="button"
      class="Link--secondary underline-on-hover border-0 p-0 color-bg-transparent"
      data-action="click:cookie-consent-link#showConsentManagement"
      data-analytics-event="{&quot;location&quot;:&quot;footer&quot;,&quot;action&quot;:&quot;cookies&quot;,&quot;context&quot;:&quot;subfooter&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;cookies_link_subfooter_footer&quot;}"
    >
       Manage cookies
    </button>
  </cookie-consent-link>
</li>

<li class="mx-2">
  <cookie-consent-link>
    <button
      type="button"
      class="Link--secondary underline-on-hover border-0 p-0 color-bg-transparent text-left"
      data-action="click:cookie-consent-link#showConsentManagement"
      data-analytics-event="{&quot;location&quot;:&quot;footer&quot;,&quot;action&quot;:&quot;dont_share_info&quot;,&quot;context&quot;:&quot;subfooter&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;dont_share_info_link_subfooter_footer&quot;}"
    >
      Do not share my personal information
    </button>
  </cookie-consent-link>
</li>

      </ul>
    </nav>
  </div>
</footer>



    <ghcc-consent id="ghcc" class="position-fixed bottom-0 left-0" style="z-index: 999999"
      data-locale="en"
      data-initial-cookie-consent-allowed=""
      data-cookie-consent-required="true"
    ></ghcc-consent>



  <div id="ajax-error-message" class="ajax-error-message flash flash-error" hidden>
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
    <button type="button" class="flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
    </button>
    You can’t perform that action at this time.
  </div>

    <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm" open>
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog>
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

    <div class="Popover js-hovercard-content position-absolute" style="display: none; outline: none;">
  <div class="Popover-message Popover-message--bottom-left Popover-message--large Box color-shadow-large" style="width:360px;">
  </div>
</div>

    <template id="snippet-clipboard-copy-button">
  <div class="zeroclipboard-container position-absolute right-0 top-0">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn js-clipboard-copy m-2 p-0" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon m-2">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none m-2">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>
<template id="snippet-clipboard-copy-button-unpositioned">
  <div class="zeroclipboard-container">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn btn-invisible js-clipboard-copy m-2 p-0 d-flex flex-justify-center flex-items-center" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>




    </div>
    <div id="js-global-screen-reader-notice" class="sr-only mt-n1" aria-live="polite" aria-atomic="true" ></div>
    <div id="js-global-screen-reader-notice-assertive" class="sr-only mt-n1" aria-live="assertive" aria-atomic="true"></div>
  </body>
</html>

