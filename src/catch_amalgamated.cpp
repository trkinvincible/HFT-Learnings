





<!DOCTYPE html>
<html
  lang="en"
  
  data-color-mode="auto" data-light-theme="light" data-dark-theme="dark"
  data-a11y-animated-images="system" data-a11y-link-underlines="true"
  
  >



  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://github.githubassets.com">
  <link rel="dns-prefetch" href="https://avatars.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">
  <link rel="preconnect" href="https://github.githubassets.com" crossorigin>
  <link rel="preconnect" href="https://avatars.githubusercontent.com">

  


  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/light-d1334f2b22bf.css" /><link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/light_high_contrast-f695a361c6b2.css" /><link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/dark-f73a069fd33e.css" /><link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/dark_high_contrast-3a0d87f72ad4.css" /><link data-color-theme="light" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light-d1334f2b22bf.css" /><link data-color-theme="light_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_high_contrast-f695a361c6b2.css" /><link data-color-theme="light_colorblind" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_colorblind-367eb9a4565a.css" /><link data-color-theme="light_colorblind_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_colorblind_high_contrast-183adc0db479.css" /><link data-color-theme="light_tritanopia" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_tritanopia-2ddc677c041d.css" /><link data-color-theme="light_tritanopia_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/light_tritanopia_high_contrast-649962a5702a.css" /><link data-color-theme="dark" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark-f73a069fd33e.css" /><link data-color-theme="dark_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_high_contrast-3a0d87f72ad4.css" /><link data-color-theme="dark_colorblind" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_colorblind-b17a8392e6c4.css" /><link data-color-theme="dark_colorblind_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_colorblind_high_contrast-e9ff47cedc2b.css" /><link data-color-theme="dark_tritanopia" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_tritanopia-a1cc7dba9f73.css" /><link data-color-theme="dark_tritanopia_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_tritanopia_high_contrast-6c4dd39e2b0f.css" /><link data-color-theme="dark_dimmed" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_dimmed-55459b36aa6d.css" /><link data-color-theme="dark_dimmed_high_contrast" crossorigin="anonymous" media="all" rel="stylesheet" data-href="https://github.githubassets.com/assets/dark_dimmed_high_contrast-9a0ef6e40ed3.css" />


    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-primitives-dc7ca6859caf.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-03a65c451725.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/global-d1aed5b4075c.css" />
    <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/github-db7b386c190b.css" />
  <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/repository-b58e401b73ae.css" />
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/code-4ea853641043.css" />

  


  <script type="application/json" id="client-env">{"locale":"en","featureFlags":["alternate_user_config_repo","api_insights_show_missing_data_banner","attestations_filtering","attestations_sorting","client_version_header","code_scanning_security_configuration_ternary_state","codespaces_prebuild_region_target_update","contact_requests_implicit_opt_in","contentful_lp_copilot_extensions","contentful_lp_flex_features","contentful_lp_footnotes","copilot_activity_report","copilot_chat_attach_multiple_images","copilot_chat_floating_sidebar_focus_trap","copilot_chat_group_notifications","copilot_chat_navigable_refs","copilot_chat_vision_in_claude","copilot_chat_vision_skip_thread_create","copilot_chat_wholearea_dd","copilot_custom_copilots_feature_preview","copilot_custom_copilots_images","copilot_duplicate_thread","copilot_free_to_paid_telem","copilot_ftp_hyperspace_upgrade_prompt","copilot_ftp_settings_upgrade","copilot_ftp_upgrade_to_pro_from_models","copilot_ftp_your_copilot_settings","copilot_immersive_draft_issue_template_form_ui","copilot_immersive_structured_model_picker","copilot_no_floating_button","copilot_read_shared_conversation","copilot_spaces_input_menu_select","copilot_spark_allow_empty_commit","copilot_spark_single_user_iteration","copilot_spark_use_billing_headers","copilot_task_oriented_assistive_prompts","copilot_workbench_connection_reload_banner","copilot_workbench_iterate_panel","copilot_workbench_preview_analytics","copilot_workbench_refresh_on_wsod","custom_copilots_128k_window","custom_copilots_capi_mode","custom_copilots_file_uploads","direct_to_salesforce","dotcom_chat_client_side_skills","failbot_report_error_react_apps_on_page","ghost_pilot_confidence_truncation_25","ghost_pilot_confidence_truncation_40","insert_before_patch","issue_fields_report_usage","issues_catch_non_json_graphql_response","issues_comment_load_user_settings","issues_label_search_url","issues_preserve_tokens_in_urls","issues_react_blur_item_picker_on_close","issues_react_bots_timeline_pagination","issues_react_create_milestone","issues_react_optimistic_markdown","issues_react_prohibit_title_fallback","issues_react_remove_placeholders","issues_template_picker_redirect","lifecycle_label_name_updates","link_contact_sales_swp_marketo","marketing_pages_search_explore_provider","memex_mwl_filter_field_delimiter","nonreporting_relay_graphql_status_codes","primer_react_select_panel_with_modern_action_list","remove_child_patch","sample_network_conn_type","scheduled_reminders_updated_limits","site_homepage_contentful","site_msbuild_hide_integrations","site_msbuild_launch","site_msbuild_webgl_hero","spark_commit_on_default_branch","spark_sync_repository_after_iteration","swp_enterprise_contact_form","use_paginated_repo_picker_cost_center_form","viewscreen_sandbox","workbench_default_sonnet4","workbench_store_readonly"],"copilotApiUrl":"https://api.individual.githubcopilot.com"}</script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/high-contrast-cookie-039f089f08c3.js"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/wp-runtime-1685eb918d8c.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_oddbird_popover-polyfill_dist_popover-fn_js-a8c266e5f126.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_mini-throttle_dist_index_js-node_modules_stacktrace-parser_dist_s-1d3d52-babac9434833.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_failbot_failbot_ts-4eaa91ff7c9c.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/environment-37836f8ad297.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_primer_behaviors_dist_esm_index_mjs-c44edfed7f0d.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_selector-observer_dist_index_esm_js-cdf2757bd188.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_relative-time-element_dist_index_js-5913bc24f35d.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_text-expander-element_dist_index_js-e50fb7a5fe8c.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_auto-complete-element_dist_index_js-node_modules_github_catalyst_-8e9f78-c1e2fb329866.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_filter-input-element_dist_index_js-node_modules_github_remote-inp-b5f1d7-514a92c925f0.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_markdown-toolbar-element_dist_index_js-6a8c7d9a08fe.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_file-attachment-element_dist_index_js-node_modules_primer_view-co-f03a40-c631b99b0f08.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/github-elements-594e8106f187.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/element-registry-529fad20b892.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_braintree_browser-detection_dist_browser-detection_js-node_modules_githu-bb80ec-34c4b68b1dd3.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_lit-html_lit-html_js-b93a87060d31.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_morphdom_dist_morphdom-esm_js-300e8e4e0414.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_turbo_dist_turbo_es2017-esm_js-595819d3686f.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_remote-form_dist_index_js-node_modules_delegated-events_dist_inde-893f9f-5f044d8dcee3.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_quote-selection_dist_index_js-node_modules_github_session-resume_-c39857-54c022ad5a68.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_updatable-content_updatable-content_ts-7b14b8aa0beb.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_behaviors_task-list_ts-app_assets_modules_github_sso_ts-ui_packages-900dde-f953ddf42948.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_sticky-scroll-into-view_ts-e45aabc67d13.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_behaviors_ajax-error_ts-app_assets_modules_github_behaviors_include-d0d0a6-a7da4270c5f4.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_behaviors_commenting_edit_ts-app_assets_modules_github_behaviors_ht-83c235-567e0f340e27.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/behaviors-161506cb2918.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_delegated-events_dist_index_js-node_modules_github_catalyst_lib_index_js-ea8eaa-0416579acb39.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/notifications-global-753a553f1820.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_mini-throttle_dist_index_js-node_modules_github_catalyst_lib_inde-dbbea9-558c1f223d1d.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/code-menu-1feff9e17b7b.js" defer="defer"></script>
  
  <script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/primer-react-4622b3e58029.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/react-core-c2c42df71553.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/react-lib-8705026b409a.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/octicons-react-8ed765fdb7a0.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_emotion_is-prop-valid_dist_emotion-is-prop-valid_esm_js-node_modules_emo-b1c483-f0fc35efa8f8.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_cookie_index_js-node_modules_primer_live-region-element_dist_esm_index_j-1ca8f6-89ab81577c38.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_dompurify_dist_purify_es_mjs-7457ebdd1a1f.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_lodash-es__Stack_js-node_modules_lodash-es__Uint8Array_js-node_modules_l-4faaa6-16c4e2c524de.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_lodash-es_isEqual_js-a0841ced23fc.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_tanstack_react-virtual_dist_esm_index_js-807aab04afeb.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_focus-visible_dist_focus-visible_js-node_modules_github_hydro-analytics--e21ffd-0b758af67e69.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_fzy_js_index_js-node_modules_react-reverse-portal_dist_web_index_js-node-452414-05865700b943.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_paths_index_ts-bf609b99b24a.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_document-metadata_document-metadata_ts-ui_packages_fetch-headers_fetch-headers_ts-57e0e0-bed68ec00644.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_ref-selector_RefSelector_tsx-6bd266a4340b.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_commit-attribution_index_ts-ui_packages_commit-checks-status_index_ts-ui_packages-762eaa-4bb9b612ea61.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_use-analytics_use-analytics_ts-ui_packages_use-client-value_use-client-value_ts-u-8be754-144c1ca8ead3.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_code-view-shared_hooks_use-canonical-object_ts-ui_packages_code-view-shared_hooks-9104f7-210e1a626c16.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_app-uuid_app-uuid_ts-ui_packages_repos-file-tree-view_repos-file-tree-view_ts-72a4b5b8380b.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/app_assets_modules_github_blob-anchor_ts-ui_packages_code-nav_code-nav_ts-ui_packages_filter--8253c1-5fde020dbad1.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/react-code-view-a5b0067811d6.js" defer="defer"></script>
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-react.47f1598729334a521d2a.module.css" />
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/react-code-view.833cfc1ade3ba9c7b2e4.module.css" />

  <script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_document-metadata_document-metadata_ts-ui_packages_notifications-subscriptions-me-a3b302-2518229acf18.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/notifications-subscriptions-menu-463d138cca3f.js" defer="defer"></script>
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-react.47f1598729334a521d2a.module.css" />
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/notifications-subscriptions-menu.4c58e19e87a9dd1b1dfd.module.css" />


  <title>Catch2/extras/catch_amalgamated.cpp at devel · catchorg/Catch2 · GitHub</title>



  <meta name="route-pattern" content="/:user_id/:repository/blob/*name(/*path)" data-turbo-transient>
  <meta name="route-controller" content="blob" data-turbo-transient>
  <meta name="route-action" content="show" data-turbo-transient>
  <meta name="fetch-nonce" content="v2:5d27d888-b607-7721-9c17-563ccca942bc">

    
  <meta name="current-catalog-service-hash" content="f3abb0cc802f3d7b95fc8762b94bdcb13bf39634c40c357301c4aa1d67a256fb">


  <meta name="request-id" content="CC7C:1B8520:13628F5:18BF521:687CF587" data-pjax-transient="true"/><meta name="html-safe-nonce" content="029f178d0b9725dce7188f9d4ee947ba78fdb2bee8f67730a9cd519ecfb20f01" data-pjax-transient="true"/><meta name="visitor-payload" content="eyJyZWZlcnJlciI6Imh0dHBzOi8vZ2l0aHViLmNvbS9jYXRjaG9yZy9DYXRjaDIvYmxvYi9kZXZlbC9kb2NzL21pZ3JhdGUtdjItdG8tdjMubWQiLCJyZXF1ZXN0X2lkIjoiQ0M3QzoxQjg1MjA6MTM2MjhGNToxOEJGNTIxOjY4N0NGNTg3IiwidmlzaXRvcl9pZCI6IjkwOTQ1MTExMzEyNTgzMjAwMjIiLCJyZWdpb25fZWRnZSI6InVrc291dGgiLCJyZWdpb25fcmVuZGVyIjoidWtzb3V0aCJ9" data-pjax-transient="true"/><meta name="visitor-hmac" content="2e36bc645bebc2f538f581fcaabadcaa4a1ba3b2ad3bb67132d62a95f2df672b" data-pjax-transient="true"/>


    <meta name="hovercard-subject-tag" content="repository:1062572" data-turbo-transient>


  <meta name="github-keyboard-shortcuts" content="repository,source-code,file-tree,copilot" data-turbo-transient="true" />
  

  <meta name="selected-link" value="repo_source" data-turbo-transient>
  <link rel="assets" href="https://github.githubassets.com/">

    <meta name="google-site-verification" content="Apib7-x98H0j5cPqHWwSMm6dNU4GmODRoqxLiDzdx9I">

<meta name="octolytics-url" content="https://collector.github.com/github/collect" />

  <meta name="analytics-location" content="/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show" data-turbo-transient="true" />

  




    <meta name="user-login" content="">

  

    <meta name="viewport" content="width=device-width">

    

      <meta name="description" content="A modern, C++-native, test framework for unit-tests, TDD and BDD - using C++14, C++17 and later (C++11 support is in v2.x branch, and C++03 on the Catch1.x branch) - Catch2/extras/catch_amalgamated.cpp at devel · catchorg/Catch2">

      <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">

    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
    <meta property="fb:app_id" content="1401488693436528">
    <meta name="apple-itunes-app" content="app-id=1477376905, app-argument=https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.cpp" />

      <meta name="twitter:image" content="https://opengraph.githubassets.com/1df8078718f6d9156c5db839bfad6a57537b3a2948979bf9cc18f2e24928115e/catchorg/Catch2" /><meta name="twitter:site" content="@github" /><meta name="twitter:card" content="summary_large_image" /><meta name="twitter:title" content="Catch2/extras/catch_amalgamated.cpp at devel · catchorg/Catch2" /><meta name="twitter:description" content="A modern, C++-native, test framework for unit-tests, TDD and BDD - using C++14, C++17 and later (C++11 support is in v2.x branch, and C++03 on the Catch1.x branch) - catchorg/Catch2" />
  <meta property="og:image" content="https://opengraph.githubassets.com/1df8078718f6d9156c5db839bfad6a57537b3a2948979bf9cc18f2e24928115e/catchorg/Catch2" /><meta property="og:image:alt" content="A modern, C++-native, test framework for unit-tests, TDD and BDD - using C++14, C++17 and later (C++11 support is in v2.x branch, and C++03 on the Catch1.x branch) - catchorg/Catch2" /><meta property="og:image:width" content="1200" /><meta property="og:image:height" content="600" /><meta property="og:site_name" content="GitHub" /><meta property="og:type" content="object" /><meta property="og:title" content="Catch2/extras/catch_amalgamated.cpp at devel · catchorg/Catch2" /><meta property="og:url" content="https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.cpp" /><meta property="og:description" content="A modern, C++-native, test framework for unit-tests, TDD and BDD - using C++14, C++17 and later (C++11 support is in v2.x branch, and C++03 on the Catch1.x branch) - catchorg/Catch2" />
  




      <meta name="hostname" content="github.com">



        <meta name="expected-hostname" content="github.com">


  <meta http-equiv="x-pjax-version" content="a10164239a746d51677dd7864bd8a936f1617b21c72f47e9d647f2c061013122" data-turbo-track="reload">
  <meta http-equiv="x-pjax-csp-version" content="352e51c42d5f5727a7c545752bf34d1f83f40219e7036c6959817149a51651bc" data-turbo-track="reload">
  <meta http-equiv="x-pjax-css-version" content="db5407b34ed7dd78a10c3ffb9090ce21da82a95b43668b04d1de30e3d8a51dde" data-turbo-track="reload">
  <meta http-equiv="x-pjax-js-version" content="94f5de206406773bbf4cb7d075bea8be0e6e953d36f462380a86b5c178c4c7ca" data-turbo-track="reload">

  <meta name="turbo-cache-control" content="no-preview" data-turbo-transient="">

      <meta name="turbo-cache-control" content="no-cache" data-turbo-transient>

    <meta data-hydrostats="publish">

  <meta name="go-import" content="github.com/catchorg/Catch2 git https://github.com/catchorg/Catch2.git">

  <meta name="octolytics-dimension-user_id" content="33321405" /><meta name="octolytics-dimension-user_login" content="catchorg" /><meta name="octolytics-dimension-repository_id" content="1062572" /><meta name="octolytics-dimension-repository_nwo" content="catchorg/Catch2" /><meta name="octolytics-dimension-repository_public" content="true" /><meta name="octolytics-dimension-repository_is_fork" content="false" /><meta name="octolytics-dimension-repository_network_root_id" content="1062572" /><meta name="octolytics-dimension-repository_network_root_nwo" content="catchorg/Catch2" />



    

    <meta name="turbo-body-classes" content="logged-out env-production page-responsive">


  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <meta name="release" content="af8b8db961ba78e3d23e4b92e239c190ef136f06">
  <meta name="ui-target" content="full">

  <link rel="mask-icon" href="https://github.githubassets.com/assets/pinned-octocat-093da3e6fa40.svg" color="#000000">
  <link rel="alternate icon" class="js-site-favicon" type="image/png" href="https://github.githubassets.com/favicons/favicon.png">
  <link rel="icon" class="js-site-favicon" type="image/svg+xml" href="https://github.githubassets.com/favicons/favicon.svg" data-base-href="https://github.githubassets.com/favicons/favicon">

<meta name="theme-color" content="#1e2327">
<meta name="color-scheme" content="light dark" />


  <link rel="manifest" href="/manifest.json" crossOrigin="use-credentials">

  </head>

  <body class="logged-out env-production page-responsive" style="word-wrap: break-word;">
    <div data-turbo-body class="logged-out env-production page-responsive" style="word-wrap: break-word;">
      



    <div class="position-relative header-wrapper js-header-wrapper ">
      <a href="#start-of-content" data-skip-target-assigned="false" class="px-2 py-4 color-bg-accent-emphasis color-fg-on-emphasis show-on-focus js-skip-to-content">Skip to content</a>

      <span data-view-component="true" class="progress-pjax-loader Progress position-fixed width-full">
    <span style="width: 0%;" data-view-component="true" class="Progress-item progress-pjax-loader-bar left-0 top-0 color-bg-accent-emphasis"></span>
</span>      
      
      <script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_ui-commands_ui-commands_ts-b755d908e0b1.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_document-metadata_document-metadata_ts-ui_packages_hydro-analytics_hydro-analytic-f29230-07417997172c.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/keyboard-shortcuts-dialog-cf9f9950f389.js" defer="defer"></script>
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-react.47f1598729334a521d2a.module.css" />
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/keyboard-shortcuts-dialog.f8fba3bd67fe74f9227b.module.css" />

<react-partial
  partial-name="keyboard-shortcuts-dialog"
  data-ssr="false"
  data-attempted-ssr="false"
  data-react-profiling="false"
>
  
  <script type="application/json" data-target="react-partial.embeddedData">{"props":{"docsUrl":"https://docs.github.com/get-started/accessibility/keyboard-shortcuts"}}</script>
  <div data-target="react-partial.reactRoot"></div>
</react-partial>




      

          

              
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_gsap_index_js-028cb2a18f5a.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/vendors-node_modules_github_remote-form_dist_index_js-node_modules_delegated-events_dist_inde-94fd67-b0625c39513c.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/sessions-d7b06c3c09b0.js" defer="defer"></script>
<header class="HeaderMktg header-logged-out js-details-container js-header Details f4 py-3" role="banner" data-is-top="true" data-color-mode=light data-light-theme=light data-dark-theme=dark>
  <h2 class="sr-only">Navigation Menu</h2>

  <button type="button" class="HeaderMktg-backdrop d-lg-none border-0 position-fixed top-0 left-0 width-full height-full js-details-target" aria-label="Toggle navigation">
    <span class="d-none">Toggle navigation</span>
  </button>

  <div class="d-flex flex-column flex-lg-row flex-items-center px-3 px-md-4 px-lg-5 height-full position-relative z-1">
    <div class="d-flex flex-justify-between flex-items-center width-full width-lg-auto">
      <div class="flex-1">
        <button aria-label="Toggle navigation" aria-expanded="false" type="button" data-view-component="true" class="js-details-target js-nav-padding-recalculate js-header-menu-toggle Button--link Button--medium Button d-lg-none color-fg-inherit p-1">  <span class="Button-content">
    <span class="Button-label"><div class="HeaderMenu-toggle-bar rounded my-1"></div>
            <div class="HeaderMenu-toggle-bar rounded my-1"></div>
            <div class="HeaderMenu-toggle-bar rounded my-1"></div></span>
  </span>
</button>
      </div>

      <a class="mr-lg-3 color-fg-inherit flex-order-2 js-prevent-focus-on-mobile-nav"
        href="/"
        aria-label="Homepage"
        data-analytics-event="{&quot;category&quot;:&quot;Marketing nav&quot;,&quot;action&quot;:&quot;click to go to homepage&quot;,&quot;label&quot;:&quot;ref_page:Marketing;ref_cta:Logomark;ref_loc:Header&quot;}">
        <svg height="32" aria-hidden="true" viewBox="0 0 24 24" version="1.1" width="32" data-view-component="true" class="octicon octicon-mark-github">
    <path d="M12 1C5.923 1 1 5.923 1 12c0 4.867 3.149 8.979 7.521 10.436.55.096.756-.233.756-.522 0-.262-.013-1.128-.013-2.049-2.764.509-3.479-.674-3.699-1.292-.124-.317-.66-1.293-1.127-1.554-.385-.207-.936-.715-.014-.729.866-.014 1.485.797 1.691 1.128.99 1.663 2.571 1.196 3.204.907.096-.715.385-1.196.701-1.471-2.448-.275-5.005-1.224-5.005-5.432 0-1.196.426-2.186 1.128-2.956-.111-.275-.496-1.402.11-2.915 0 0 .921-.288 3.024 1.128a10.193 10.193 0 0 1 2.75-.371c.936 0 1.871.123 2.75.371 2.104-1.43 3.025-1.128 3.025-1.128.605 1.513.221 2.64.111 2.915.701.77 1.127 1.747 1.127 2.956 0 4.222-2.571 5.157-5.019 5.432.399.344.743 1.004.743 2.035 0 1.471-.014 2.654-.014 3.025 0 .289.206.632.756.522C19.851 20.979 23 16.854 23 12c0-6.077-4.922-11-11-11Z"></path>
</svg>
      </a>

      <div class="d-flex flex-1 flex-order-2 text-right d-lg-none gap-2 flex-justify-end">
          <a
            href="/login?return_to=https%3A%2F%2Fgithub.com%2Fcatchorg%2FCatch2%2Fblob%2Fdevel%2Fextras%2Fcatch_amalgamated.cpp"
            class="HeaderMenu-link HeaderMenu-button d-inline-flex f5 no-underline border color-border-default rounded-2 px-2 py-1 color-fg-inherit js-prevent-focus-on-mobile-nav"
            data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.cpp&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="f5827942c000d6d39e530a81b163f9e3ade9b6988af213b2159f5b1b5ef812f4"
            data-analytics-event="{&quot;category&quot;:&quot;Marketing nav&quot;,&quot;action&quot;:&quot;click to Sign in&quot;,&quot;label&quot;:&quot;ref_page:Marketing;ref_cta:Sign in;ref_loc:Header&quot;}"
          >
            Sign in
          </a>
              <div class="AppHeader-appearanceSettings">
    <react-partial-anchor>
      <button data-target="react-partial-anchor.anchor" id="icon-button-289b00d4-1043-40c8-8375-82f9e566d75b" aria-labelledby="tooltip-21e00e23-e7f5-4fe5-80ae-bdd62fb63c1f" type="button" disabled="disabled" data-view-component="true" class="Button Button--iconOnly Button--invisible Button--medium AppHeader-button HeaderMenu-link border cursor-wait">  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-sliders Button-visual">
    <path d="M15 2.75a.75.75 0 0 1-.75.75h-4a.75.75 0 0 1 0-1.5h4a.75.75 0 0 1 .75.75Zm-8.5.75v1.25a.75.75 0 0 0 1.5 0v-4a.75.75 0 0 0-1.5 0V2H1.75a.75.75 0 0 0 0 1.5H6.5Zm1.25 5.25a.75.75 0 0 0 0-1.5h-6a.75.75 0 0 0 0 1.5h6ZM15 8a.75.75 0 0 1-.75.75H11.5V10a.75.75 0 1 1-1.5 0V6a.75.75 0 0 1 1.5 0v1.25h2.75A.75.75 0 0 1 15 8Zm-9 5.25v-2a.75.75 0 0 0-1.5 0v1.25H1.75a.75.75 0 0 0 0 1.5H4.5v1.25a.75.75 0 0 0 1.5 0v-2Zm9 0a.75.75 0 0 1-.75.75h-6a.75.75 0 0 1 0-1.5h6a.75.75 0 0 1 .75.75Z"></path>
</svg>
</button><tool-tip id="tooltip-21e00e23-e7f5-4fe5-80ae-bdd62fb63c1f" for="icon-button-289b00d4-1043-40c8-8375-82f9e566d75b" popover="manual" data-direction="s" data-type="label" data-view-component="true" class="sr-only position-absolute">Appearance settings</tool-tip>

      <template data-target="react-partial-anchor.template">
        <script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/ui_packages_document-metadata_document-metadata_ts-ui_packages_promise-with-resolvers-polyfil-40d47c-2b0274d4149e.js" defer="defer"></script>
<script crossorigin="anonymous" type="application/javascript" src="https://github.githubassets.com/assets/appearance-settings-d35856a333a1.js" defer="defer"></script>
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-react.47f1598729334a521d2a.module.css" />
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/appearance-settings.76259b61ecc822265749.module.css" />

<react-partial
  partial-name="appearance-settings"
  data-ssr="false"
  data-attempted-ssr="false"
  data-react-profiling="false"
>
  
  <script type="application/json" data-target="react-partial.embeddedData">{"props":{}}</script>
  <div data-target="react-partial.reactRoot"></div>
</react-partial>

      </template>
    </react-partial-anchor>
  </div>

      </div>
    </div>


    <div class="HeaderMenu js-header-menu height-fit position-lg-relative d-lg-flex flex-column flex-auto top-0">
      <div class="HeaderMenu-wrapper d-flex flex-column flex-self-start flex-lg-row flex-auto rounded rounded-lg-0">
          <nav class="HeaderMenu-nav" aria-label="Global">
            <ul class="d-lg-flex list-style-none">


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Product
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>

      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 pt-2 pt-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 pb-2 pb-lg-4 d-lg-flex flex-wrap dropdown-menu-wide">
          <div class="HeaderMenu-column pl-lg-4 px-lg-4">
              <div class="">

                <ul class="list-style-none f5" >
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_copilot&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_copilot_link_product_navbar&quot;}" href="https://github.com/features/copilot">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-copilot color-fg-subtle mr-3">
    <path d="M23.922 16.992c-.861 1.495-5.859 5.023-11.922 5.023-6.063 0-11.061-3.528-11.922-5.023A.641.641 0 0 1 0 16.736v-2.869a.841.841 0 0 1 .053-.22c.372-.935 1.347-2.292 2.605-2.656.167-.429.414-1.055.644-1.517a10.195 10.195 0 0 1-.052-1.086c0-1.331.282-2.499 1.132-3.368.397-.406.89-.717 1.474-.952 1.399-1.136 3.392-2.093 6.122-2.093 2.731 0 4.767.957 6.166 2.093.584.235 1.077.546 1.474.952.85.869 1.132 2.037 1.132 3.368 0 .368-.014.733-.052 1.086.23.462.477 1.088.644 1.517 1.258.364 2.233 1.721 2.605 2.656a.832.832 0 0 1 .053.22v2.869a.641.641 0 0 1-.078.256ZM12.172 11h-.344a4.323 4.323 0 0 1-.355.508C10.703 12.455 9.555 13 7.965 13c-1.725 0-2.989-.359-3.782-1.259a2.005 2.005 0 0 1-.085-.104L4 11.741v6.585c1.435.779 4.514 2.179 8 2.179 3.486 0 6.565-1.4 8-2.179v-6.585l-.098-.104s-.033.045-.085.104c-.793.9-2.057 1.259-3.782 1.259-1.59 0-2.738-.545-3.508-1.492a4.323 4.323 0 0 1-.355-.508h-.016.016Zm.641-2.935c.136 1.057.403 1.913.878 2.497.442.544 1.134.938 2.344.938 1.573 0 2.292-.337 2.657-.751.384-.435.558-1.15.558-2.361 0-1.14-.243-1.847-.705-2.319-.477-.488-1.319-.862-2.824-1.025-1.487-.161-2.192.138-2.533.529-.269.307-.437.808-.438 1.578v.021c0 .265.021.562.063.893Zm-1.626 0c.042-.331.063-.628.063-.894v-.02c-.001-.77-.169-1.271-.438-1.578-.341-.391-1.046-.69-2.533-.529-1.505.163-2.347.537-2.824 1.025-.462.472-.705 1.179-.705 2.319 0 1.211.175 1.926.558 2.361.365.414 1.084.751 2.657.751 1.21 0 1.902-.394 2.344-.938.475-.584.742-1.44.878-2.497Z"></path><path d="M14.5 14.25a1 1 0 0 1 1 1v2a1 1 0 0 1-2 0v-2a1 1 0 0 1 1-1Zm-5 0a1 1 0 0 1 1 1v2a1 1 0 0 1-2 0v-2a1 1 0 0 1 1-1Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            GitHub Copilot
          </div>
        Write better code with AI
      </div>

    
</a></li>

                    
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_models&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_models_link_product_navbar&quot;}" href="https://github.com/features/models">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-ai-model color-fg-subtle mr-3">
    <path d="M19.375 8.5a3.25 3.25 0 1 1-3.163 4h-3a3.252 3.252 0 0 1-4.443 2.509L7.214 17.76a3.25 3.25 0 1 1-1.342-.674l1.672-2.957A3.238 3.238 0 0 1 6.75 12c0-.907.371-1.727.97-2.316L6.117 6.846A3.253 3.253 0 0 1 1.875 3.75a3.25 3.25 0 1 1 5.526 2.32l1.603 2.836A3.25 3.25 0 0 1 13.093 11h3.119a3.252 3.252 0 0 1 3.163-2.5ZM10 10.25a1.75 1.75 0 1 0-.001 3.499A1.75 1.75 0 0 0 10 10.25ZM5.125 2a1.75 1.75 0 1 0 0 3.5 1.75 1.75 0 0 0 0-3.5Zm12.5 9.75a1.75 1.75 0 1 0 3.5 0 1.75 1.75 0 0 0-3.5 0Zm-14.25 8.5a1.75 1.75 0 1 0 3.501-.001 1.75 1.75 0 0 0-3.501.001Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            GitHub Models
              <span class="HeaderMenu-label">
                New
              </span>
          </div>
        Manage and compare prompts
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_advanced_security&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_advanced_security_link_product_navbar&quot;}" href="https://github.com/security/advanced-security">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-shield-check color-fg-subtle mr-3">
    <path d="M16.53 9.78a.75.75 0 0 0-1.06-1.06L11 13.19l-1.97-1.97a.75.75 0 0 0-1.06 1.06l2.5 2.5a.75.75 0 0 0 1.06 0l5-5Z"></path><path d="m12.54.637 8.25 2.675A1.75 1.75 0 0 1 22 4.976V10c0 6.19-3.771 10.704-9.401 12.83a1.704 1.704 0 0 1-1.198 0C5.77 20.705 2 16.19 2 10V4.976c0-.758.489-1.43 1.21-1.664L11.46.637a1.748 1.748 0 0 1 1.08 0Zm-.617 1.426-8.25 2.676a.249.249 0 0 0-.173.237V10c0 5.46 3.28 9.483 8.43 11.426a.199.199 0 0 0 .14 0C17.22 19.483 20.5 15.461 20.5 10V4.976a.25.25 0 0 0-.173-.237l-8.25-2.676a.253.253 0 0 0-.154 0Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            GitHub Advanced Security
          </div>
        Find and fix vulnerabilities
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;actions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;actions_link_product_navbar&quot;}" href="https://github.com/features/actions">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-workflow color-fg-subtle mr-3">
    <path d="M1 3a2 2 0 0 1 2-2h6.5a2 2 0 0 1 2 2v6.5a2 2 0 0 1-2 2H7v4.063C7 16.355 7.644 17 8.438 17H12.5v-2.5a2 2 0 0 1 2-2H21a2 2 0 0 1 2 2V21a2 2 0 0 1-2 2h-6.5a2 2 0 0 1-2-2v-2.5H8.437A2.939 2.939 0 0 1 5.5 15.562V11.5H3a2 2 0 0 1-2-2Zm2-.5a.5.5 0 0 0-.5.5v6.5a.5.5 0 0 0 .5.5h6.5a.5.5 0 0 0 .5-.5V3a.5.5 0 0 0-.5-.5ZM14.5 14a.5.5 0 0 0-.5.5V21a.5.5 0 0 0 .5.5H21a.5.5 0 0 0 .5-.5v-6.5a.5.5 0 0 0-.5-.5Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Actions
          </div>
        Automate any workflow
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;codespaces&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;codespaces_link_product_navbar&quot;}" href="https://github.com/features/codespaces">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-codespaces color-fg-subtle mr-3">
    <path d="M3.5 3.75C3.5 2.784 4.284 2 5.25 2h13.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0 1 18.75 13H5.25a1.75 1.75 0 0 1-1.75-1.75Zm-2 12c0-.966.784-1.75 1.75-1.75h17.5c.966 0 1.75.784 1.75 1.75v4a1.75 1.75 0 0 1-1.75 1.75H3.25a1.75 1.75 0 0 1-1.75-1.75ZM5.25 3.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h13.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Zm-2 12a.25.25 0 0 0-.25.25v4c0 .138.112.25.25.25h17.5a.25.25 0 0 0 .25-.25v-4a.25.25 0 0 0-.25-.25Z"></path><path d="M10 17.75a.75.75 0 0 1 .75-.75h6.5a.75.75 0 0 1 0 1.5h-6.5a.75.75 0 0 1-.75-.75Zm-4 0a.75.75 0 0 1 .75-.75h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1-.75-.75Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Codespaces
          </div>
        Instant dev environments
      </div>

    
</a></li>

                </ul>
              </div>
          </div>
          <div class="HeaderMenu-column pl-lg-4 px-lg-4 pb-3 pb-lg-0">
              <div class="border-bottom border-lg-bottom-0 pb-3">

                <ul class="list-style-none f5" >
                    
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;issues&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;issues_link_product_navbar&quot;}" href="https://github.com/features/issues">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-issue-opened color-fg-subtle mr-3">
    <path d="M12 1c6.075 0 11 4.925 11 11s-4.925 11-11 11S1 18.075 1 12 5.925 1 12 1ZM2.5 12a9.5 9.5 0 0 0 9.5 9.5 9.5 9.5 0 0 0 9.5-9.5A9.5 9.5 0 0 0 12 2.5 9.5 9.5 0 0 0 2.5 12Zm9.5 2a2 2 0 1 1-.001-3.999A2 2 0 0 1 12 14Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Issues
          </div>
        Plan and track work
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_review&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_review_link_product_navbar&quot;}" href="https://github.com/features/code-review">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-code-review color-fg-subtle mr-3">
    <path d="M10.3 6.74a.75.75 0 0 1-.04 1.06l-2.908 2.7 2.908 2.7a.75.75 0 1 1-1.02 1.1l-3.5-3.25a.75.75 0 0 1 0-1.1l3.5-3.25a.75.75 0 0 1 1.06.04Zm3.44 1.06a.75.75 0 1 1 1.02-1.1l3.5 3.25a.75.75 0 0 1 0 1.1l-3.5 3.25a.75.75 0 1 1-1.02-1.1l2.908-2.7-2.908-2.7Z"></path><path d="M1.5 4.25c0-.966.784-1.75 1.75-1.75h17.5c.966 0 1.75.784 1.75 1.75v12.5a1.75 1.75 0 0 1-1.75 1.75h-9.69l-3.573 3.573A1.458 1.458 0 0 1 5 21.043V18.5H3.25a1.75 1.75 0 0 1-1.75-1.75ZM3.25 4a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h2.5a.75.75 0 0 1 .75.75v3.19l3.72-3.72a.749.749 0 0 1 .53-.22h10a.25.25 0 0 0 .25-.25V4.25a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Code Review
          </div>
        Manage code changes
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;discussions&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;discussions_link_product_navbar&quot;}" href="https://github.com/features/discussions">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-comment-discussion color-fg-subtle mr-3">
    <path d="M1.75 1h12.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 14.25 14H8.061l-2.574 2.573A1.458 1.458 0 0 1 3 15.543V14H1.75A1.75 1.75 0 0 1 0 12.25v-9.5C0 1.784.784 1 1.75 1ZM1.5 2.75v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Z"></path><path d="M22.5 8.75a.25.25 0 0 0-.25-.25h-3.5a.75.75 0 0 1 0-1.5h3.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 22.25 20H21v1.543a1.457 1.457 0 0 1-2.487 1.03L15.939 20H10.75A1.75 1.75 0 0 1 9 18.25v-1.465a.75.75 0 0 1 1.5 0v1.465c0 .138.112.25.25.25h5.5a.75.75 0 0 1 .53.22l2.72 2.72v-2.19a.75.75 0 0 1 .75-.75h2a.25.25 0 0 0 .25-.25v-9.5Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Discussions
          </div>
        Collaborate outside of code
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;code_search&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;code_search_link_product_navbar&quot;}" href="https://github.com/features/code-search">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-code-square color-fg-subtle mr-3">
    <path d="M10.3 8.24a.75.75 0 0 1-.04 1.06L7.352 12l2.908 2.7a.75.75 0 1 1-1.02 1.1l-3.5-3.25a.75.75 0 0 1 0-1.1l3.5-3.25a.75.75 0 0 1 1.06.04Zm3.44 1.06a.75.75 0 1 1 1.02-1.1l3.5 3.25a.75.75 0 0 1 0 1.1l-3.5 3.25a.75.75 0 1 1-1.02-1.1l2.908-2.7-2.908-2.7Z"></path><path d="M2 3.75C2 2.784 2.784 2 3.75 2h16.5c.966 0 1.75.784 1.75 1.75v16.5A1.75 1.75 0 0 1 20.25 22H3.75A1.75 1.75 0 0 1 2 20.25Zm1.75-.25a.25.25 0 0 0-.25.25v16.5c0 .138.112.25.25.25h16.5a.25.25 0 0 0 .25-.25V3.75a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Code Search
          </div>
        Find more, search less
      </div>

    
</a></li>

                </ul>
              </div>
          </div>
          <div class="HeaderMenu-column pl-lg-4 border-lg-left pr-lg-7">
              <div class="border-bottom border-lg-bottom-0 border-bottom-0">
                    <span class="d-block h4 color-fg-default my-1" id="product-explore-heading">Explore</span>

                <ul class="list-style-none f5" aria-labelledby="product-explore-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;why_github&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;why_github_link_product_navbar&quot;}" href="https://github.com/why-github">
      Why GitHub

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;all_features&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;all_features_link_product_navbar&quot;}" href="https://github.com/features">
      All features

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary Link--external" target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;documentation&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;documentation_link_product_navbar&quot;}" href="https://docs.github.com">
      Documentation

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary Link--external" target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_skills&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_skills_link_product_navbar&quot;}" href="https://skills.github.com">
      GitHub Skills

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary Link--external" target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;blog&quot;,&quot;context&quot;:&quot;product&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;blog_link_product_navbar&quot;}" href="https://github.blog">
      Blog

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                </ul>
              </div>
          </div>

      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Solutions
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>

      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 pt-2 pt-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 d-lg-flex flex-wrap dropdown-menu-wide">
          <div class="HeaderMenu-column pl-lg-4 px-lg-4 pb-3 pb-lg-0">
              <div class="border-bottom border-lg-bottom-0 mb-3 pb-3">
                    <span class="d-block h4 color-fg-default my-1" id="solutions-by-company-size-heading">By company size</span>

                <ul class="list-style-none f5" aria-labelledby="solutions-by-company-size-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprises&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprises_link_solutions_navbar&quot;}" href="https://github.com/enterprise">
      Enterprises

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;small_and_medium_teams&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;small_and_medium_teams_link_solutions_navbar&quot;}" href="https://github.com/team">
      Small and medium teams

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;startups&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;startups_link_solutions_navbar&quot;}" href="https://github.com/enterprise/startups">
      Startups

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;nonprofits&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;nonprofits_link_solutions_navbar&quot;}" href="/solutions/industry/nonprofits">
      Nonprofits

    
</a></li>

                </ul>
              </div>
              <div class="border-bottom border-lg-bottom-0 pb-3">
                    <span class="d-block h4 color-fg-default my-1" id="solutions-by-use-case-heading">By use case</span>

                <ul class="list-style-none f5" aria-labelledby="solutions-by-use-case-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;devsecops&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;devsecops_link_solutions_navbar&quot;}" href="/solutions/use-case/devsecops">
      DevSecOps

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;devops&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;devops_link_solutions_navbar&quot;}" href="/solutions/use-case/devops">
      DevOps

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;ci_cd&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;ci_cd_link_solutions_navbar&quot;}" href="/solutions/use-case/ci-cd">
      CI/CD

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;view_all_use_cases&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;view_all_use_cases_link_solutions_navbar&quot;}" href="/solutions/use-case">
      View all use cases

    
</a></li>

                </ul>
              </div>
          </div>
          <div class="HeaderMenu-column pl-lg-4 border-lg-left pr-lg-7">
              <div class="border-bottom border-lg-bottom-0 pb-3 pb-lg-0">
                    <span class="d-block h4 color-fg-default my-1" id="solutions-by-industry-heading">By industry</span>

                <ul class="list-style-none f5" aria-labelledby="solutions-by-industry-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;healthcare&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;healthcare_link_solutions_navbar&quot;}" href="/solutions/industry/healthcare">
      Healthcare

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;financial_services&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;financial_services_link_solutions_navbar&quot;}" href="/solutions/industry/financial-services">
      Financial services

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;manufacturing&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;manufacturing_link_solutions_navbar&quot;}" href="/solutions/industry/manufacturing">
      Manufacturing

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;government&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;government_link_solutions_navbar&quot;}" href="/solutions/industry/government">
      Government

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;view_all_industries&quot;,&quot;context&quot;:&quot;solutions&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;view_all_industries_link_solutions_navbar&quot;}" href="/solutions/industry">
      View all industries

    
</a></li>

                </ul>
              </div>
          </div>

         <div class="HeaderMenu-trailing-link rounded-bottom-2 flex-shrink-0 mt-lg-4 px-lg-4 py-4 py-lg-3 f5 text-semibold">
            <a href="/solutions">
              View all solutions
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-right HeaderMenu-trailing-link-icon">
    <path d="M6.22 3.22a.75.75 0 0 1 1.06 0l4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L9.94 8 6.22 4.28a.75.75 0 0 1 0-1.06Z"></path>
</svg>
</a>         </div>
      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Resources
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>

      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 pt-2 pt-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 pb-2 pb-lg-4 d-lg-flex flex-wrap dropdown-menu-wide">
          <div class="HeaderMenu-column pl-lg-4 px-lg-4 pb-3 pb-lg-0">
              <div class="border-bottom border-lg-bottom-0 pb-3">
                    <span class="d-block h4 color-fg-default my-1" id="resources-topics-heading">Topics</span>

                <ul class="list-style-none f5" aria-labelledby="resources-topics-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;ai&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;ai_link_resources_navbar&quot;}" href="/resources/articles/ai">
      AI

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;devops&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;devops_link_resources_navbar&quot;}" href="/resources/articles/devops">
      DevOps

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;security&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;security_link_resources_navbar&quot;}" href="/resources/articles/security">
      Security

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;software_development&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;software_development_link_resources_navbar&quot;}" href="/resources/articles/software-development">
      Software Development

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;view_all&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;view_all_link_resources_navbar&quot;}" href="/resources/articles">
      View all

    
</a></li>

                </ul>
              </div>
          </div>
          <div class="HeaderMenu-column pl-lg-4 border-lg-left pr-lg-7">
              <div class="border-bottom border-lg-bottom-0 border-bottom-0">
                    <span class="d-block h4 color-fg-default my-1" id="resources-explore-heading">Explore</span>

                <ul class="list-style-none f5" aria-labelledby="resources-explore-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary Link--external" target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;learning_pathways&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;learning_pathways_link_resources_navbar&quot;}" href="https://resources.github.com/learn/pathways">
      Learning Pathways

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary Link--external" target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;events_amp_webinars&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;events_amp_webinars_link_resources_navbar&quot;}" href="https://resources.github.com">
      Events &amp; Webinars

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;ebooks_amp_whitepapers&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;ebooks_amp_whitepapers_link_resources_navbar&quot;}" href="https://github.com/resources/whitepapers">
      Ebooks &amp; Whitepapers

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;customer_stories&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;customer_stories_link_resources_navbar&quot;}" href="https://github.com/customer-stories">
      Customer Stories

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary Link--external" target="_blank" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;partners&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;partners_link_resources_navbar&quot;}" href="https://partner.github.com">
      Partners

    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-link-external HeaderMenu-external-icon color-fg-subtle">
    <path d="M3.75 2h3.5a.75.75 0 0 1 0 1.5h-3.5a.25.25 0 0 0-.25.25v8.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-3.5a.75.75 0 0 1 1.5 0v3.5A1.75 1.75 0 0 1 12.25 14h-8.5A1.75 1.75 0 0 1 2 12.25v-8.5C2 2.784 2.784 2 3.75 2Zm6.854-1h4.146a.25.25 0 0 1 .25.25v4.146a.25.25 0 0 1-.427.177L13.03 4.03 9.28 7.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.75-3.75-1.543-1.543A.25.25 0 0 1 10.604 1Z"></path>
</svg>
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;executive_insights&quot;,&quot;context&quot;:&quot;resources&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;executive_insights_link_resources_navbar&quot;}" href="https://github.com/solutions/executive-insights">
      Executive Insights

    
</a></li>

                </ul>
              </div>
          </div>

      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Open Source
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>

      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 pt-2 pt-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 pb-2 pb-lg-4">
          <div class="HeaderMenu-column px-lg-4">
              <div class="border-bottom mb-3 mb-lg-3 pb-3">

                <ul class="list-style-none f5" >
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_sponsors&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_sponsors_link_open_source_navbar&quot;}" href="/sponsors">
      
      <div>
          <div class="color-fg-default h4">
            GitHub Sponsors
          </div>
        Fund open source developers
      </div>

    
</a></li>

                </ul>
              </div>
              <div class="border-bottom mb-3 mb-lg-3 pb-3">

                <ul class="list-style-none f5" >
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;the_readme_project&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;the_readme_project_link_open_source_navbar&quot;}" href="https://github.com/readme">
      
      <div>
          <div class="color-fg-default h4">
            The ReadME Project
          </div>
        GitHub community articles
      </div>

    
</a></li>

                </ul>
              </div>
              <div class="border-bottom border-bottom-0">
                    <span class="d-block h4 color-fg-default my-1" id="open-source-repositories-heading">Repositories</span>

                <ul class="list-style-none f5" aria-labelledby="open-source-repositories-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;topics&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;topics_link_open_source_navbar&quot;}" href="https://github.com/topics">
      Topics

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;trending&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;trending_link_open_source_navbar&quot;}" href="https://github.com/trending">
      Trending

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;collections&quot;,&quot;context&quot;:&quot;open_source&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;collections_link_open_source_navbar&quot;}" href="https://github.com/collections">
      Collections

    
</a></li>

                </ul>
              </div>
          </div>

      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
      <button type="button" class="HeaderMenu-link border-0 width-full width-lg-auto px-0 px-lg-2 py-lg-2 no-wrap d-flex flex-items-center flex-justify-between js-details-target" aria-expanded="false">
        Enterprise
        <svg opacity="0.5" aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-chevron-down HeaderMenu-icon ml-1">
    <path d="M12.78 5.22a.749.749 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.06 0L3.22 6.28a.749.749 0 1 1 1.06-1.06L8 8.939l3.72-3.719a.749.749 0 0 1 1.06 0Z"></path>
</svg>
      </button>

      <div class="HeaderMenu-dropdown dropdown-menu rounded m-0 p-0 pt-2 pt-lg-4 position-relative position-lg-absolute left-0 left-lg-n3 pb-2 pb-lg-4">
          <div class="HeaderMenu-column px-lg-4">
              <div class="border-bottom mb-3 mb-lg-3 pb-3">

                <ul class="list-style-none f5" >
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;enterprise_platform&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;enterprise_platform_link_enterprise_navbar&quot;}" href="/enterprise">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-stack color-fg-subtle mr-3">
    <path d="M11.063 1.456a1.749 1.749 0 0 1 1.874 0l8.383 5.316a1.751 1.751 0 0 1 0 2.956l-8.383 5.316a1.749 1.749 0 0 1-1.874 0L2.68 9.728a1.751 1.751 0 0 1 0-2.956Zm1.071 1.267a.25.25 0 0 0-.268 0L3.483 8.039a.25.25 0 0 0 0 .422l8.383 5.316a.25.25 0 0 0 .268 0l8.383-5.316a.25.25 0 0 0 0-.422Z"></path><path d="M1.867 12.324a.75.75 0 0 1 1.035-.232l8.964 5.685a.25.25 0 0 0 .268 0l8.964-5.685a.75.75 0 0 1 .804 1.267l-8.965 5.685a1.749 1.749 0 0 1-1.874 0l-8.965-5.685a.75.75 0 0 1-.231-1.035Z"></path><path d="M1.867 16.324a.75.75 0 0 1 1.035-.232l8.964 5.685a.25.25 0 0 0 .268 0l8.964-5.685a.75.75 0 0 1 .804 1.267l-8.965 5.685a1.749 1.749 0 0 1-1.874 0l-8.965-5.685a.75.75 0 0 1-.231-1.035Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Enterprise platform
          </div>
        AI-powered developer platform
      </div>

    
</a></li>

                </ul>
              </div>
              <div class="border-bottom border-bottom-0">
                    <span class="d-block h4 color-fg-default my-1" id="enterprise-available-add-ons-heading">Available add-ons</span>

                <ul class="list-style-none f5" aria-labelledby="enterprise-available-add-ons-heading">
                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;github_advanced_security&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;github_advanced_security_link_enterprise_navbar&quot;}" href="https://github.com/security/advanced-security">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-shield-check color-fg-subtle mr-3">
    <path d="M16.53 9.78a.75.75 0 0 0-1.06-1.06L11 13.19l-1.97-1.97a.75.75 0 0 0-1.06 1.06l2.5 2.5a.75.75 0 0 0 1.06 0l5-5Z"></path><path d="m12.54.637 8.25 2.675A1.75 1.75 0 0 1 22 4.976V10c0 6.19-3.771 10.704-9.401 12.83a1.704 1.704 0 0 1-1.198 0C5.77 20.705 2 16.19 2 10V4.976c0-.758.489-1.43 1.21-1.664L11.46.637a1.748 1.748 0 0 1 1.08 0Zm-.617 1.426-8.25 2.676a.249.249 0 0 0-.173.237V10c0 5.46 3.28 9.483 8.43 11.426a.199.199 0 0 0 .14 0C17.22 19.483 20.5 15.461 20.5 10V4.976a.25.25 0 0 0-.173-.237l-8.25-2.676a.253.253 0 0 0-.154 0Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            GitHub Advanced Security
          </div>
        Enterprise-grade security features
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description pb-lg-3" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;copilot_for_business&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;copilot_for_business_link_enterprise_navbar&quot;}" href="/features/copilot/copilot-business">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-copilot color-fg-subtle mr-3">
    <path d="M23.922 16.992c-.861 1.495-5.859 5.023-11.922 5.023-6.063 0-11.061-3.528-11.922-5.023A.641.641 0 0 1 0 16.736v-2.869a.841.841 0 0 1 .053-.22c.372-.935 1.347-2.292 2.605-2.656.167-.429.414-1.055.644-1.517a10.195 10.195 0 0 1-.052-1.086c0-1.331.282-2.499 1.132-3.368.397-.406.89-.717 1.474-.952 1.399-1.136 3.392-2.093 6.122-2.093 2.731 0 4.767.957 6.166 2.093.584.235 1.077.546 1.474.952.85.869 1.132 2.037 1.132 3.368 0 .368-.014.733-.052 1.086.23.462.477 1.088.644 1.517 1.258.364 2.233 1.721 2.605 2.656a.832.832 0 0 1 .053.22v2.869a.641.641 0 0 1-.078.256ZM12.172 11h-.344a4.323 4.323 0 0 1-.355.508C10.703 12.455 9.555 13 7.965 13c-1.725 0-2.989-.359-3.782-1.259a2.005 2.005 0 0 1-.085-.104L4 11.741v6.585c1.435.779 4.514 2.179 8 2.179 3.486 0 6.565-1.4 8-2.179v-6.585l-.098-.104s-.033.045-.085.104c-.793.9-2.057 1.259-3.782 1.259-1.59 0-2.738-.545-3.508-1.492a4.323 4.323 0 0 1-.355-.508h-.016.016Zm.641-2.935c.136 1.057.403 1.913.878 2.497.442.544 1.134.938 2.344.938 1.573 0 2.292-.337 2.657-.751.384-.435.558-1.15.558-2.361 0-1.14-.243-1.847-.705-2.319-.477-.488-1.319-.862-2.824-1.025-1.487-.161-2.192.138-2.533.529-.269.307-.437.808-.438 1.578v.021c0 .265.021.562.063.893Zm-1.626 0c.042-.331.063-.628.063-.894v-.02c-.001-.77-.169-1.271-.438-1.578-.341-.391-1.046-.69-2.533-.529-1.505.163-2.347.537-2.824 1.025-.462.472-.705 1.179-.705 2.319 0 1.211.175 1.926.558 2.361.365.414 1.084.751 2.657.751 1.21 0 1.902-.394 2.344-.938.475-.584.742-1.44.878-2.497Z"></path><path d="M14.5 14.25a1 1 0 0 1 1 1v2a1 1 0 0 1-2 0v-2a1 1 0 0 1 1-1Zm-5 0a1 1 0 0 1 1 1v2a1 1 0 0 1-2 0v-2a1 1 0 0 1 1-1Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Copilot for business
          </div>
        Enterprise-grade AI features
      </div>

    
</a></li>

                    <li>
  <a class="HeaderMenu-dropdown-link d-block no-underline position-relative py-2 Link--secondary d-flex flex-items-center Link--has-description" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;premium_support&quot;,&quot;context&quot;:&quot;enterprise&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;premium_support_link_enterprise_navbar&quot;}" href="/premium-support">
      <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-comment-discussion color-fg-subtle mr-3">
    <path d="M1.75 1h12.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 14.25 14H8.061l-2.574 2.573A1.458 1.458 0 0 1 3 15.543V14H1.75A1.75 1.75 0 0 1 0 12.25v-9.5C0 1.784.784 1 1.75 1ZM1.5 2.75v9.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-9.5a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Z"></path><path d="M22.5 8.75a.25.25 0 0 0-.25-.25h-3.5a.75.75 0 0 1 0-1.5h3.5c.966 0 1.75.784 1.75 1.75v9.5A1.75 1.75 0 0 1 22.25 20H21v1.543a1.457 1.457 0 0 1-2.487 1.03L15.939 20H10.75A1.75 1.75 0 0 1 9 18.25v-1.465a.75.75 0 0 1 1.5 0v1.465c0 .138.112.25.25.25h5.5a.75.75 0 0 1 .53.22l2.72 2.72v-2.19a.75.75 0 0 1 .75-.75h2a.25.25 0 0 0 .25-.25v-9.5Z"></path>
</svg>
      <div>
          <div class="color-fg-default h4">
            Premium Support
          </div>
        Enterprise-grade 24/7 support
      </div>

    
</a></li>

                </ul>
              </div>
          </div>

      </div>
</li>


                <li class="HeaderMenu-item position-relative flex-wrap flex-justify-between flex-items-center d-block d-lg-flex flex-lg-nowrap flex-lg-items-center js-details-container js-header-menu-item">
    <a class="HeaderMenu-link no-underline px-0 px-lg-2 py-3 py-lg-2 d-block d-lg-inline-block" data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;pricing&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;pricing_link_global_navbar&quot;}" href="https://github.com/pricing">Pricing</a>
</li>

            </ul>
          </nav>

        <div class="d-flex flex-column flex-lg-row width-full flex-justify-end flex-lg-items-center text-center mt-3 mt-lg-0 text-lg-left ml-lg-3">
                


<qbsearch-input class="search-input" data-scope="repo:catchorg/Catch2" data-custom-scopes-path="/search/custom_scopes" data-delete-custom-scopes-csrf="jh8LxM9pXdXdI168-E07p7kYeOw2PGLDQMSny6rkpnkYep0ojU2wZtCAAZNLDPKZah2IkVGp4FW8gfrbTReedQ" data-max-custom-scopes="10" data-header-redesign-enabled="false" data-initial-value="" data-blackbird-suggestions-path="/search/suggestions" data-jump-to-suggestions-path="/_graphql/GetSuggestedNavigationDestinations" data-current-repository="catchorg/Catch2" data-current-org="catchorg" data-current-owner="" data-logged-in="false" data-copilot-chat-enabled="false" data-nl-search-enabled="false" data-retain-scroll-position="true">
  <div
    class="search-input-container search-with-dialog position-relative d-flex flex-row flex-items-center mr-4 rounded"
    data-action="click:qbsearch-input#searchInputContainerClicked"
  >
      <button
        type="button"
        class="header-search-button placeholder  input-button form-control d-flex flex-1 flex-self-stretch flex-items-center no-wrap width-full py-0 pl-2 pr-0 text-left border-0 box-shadow-none"
        data-target="qbsearch-input.inputButton"
        aria-label="Search or jump to…"
        aria-haspopup="dialog"
        placeholder="Search or jump to..."
        data-hotkey=s,/
        autocapitalize="off"
        data-analytics-event="{&quot;location&quot;:&quot;navbar&quot;,&quot;action&quot;:&quot;searchbar&quot;,&quot;context&quot;:&quot;global&quot;,&quot;tag&quot;:&quot;input&quot;,&quot;label&quot;:&quot;searchbar_input_global_navbar&quot;}"
        data-action="click:qbsearch-input#handleExpand"
      >
        <div class="mr-2 color-fg-muted">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
        </div>
        <span class="flex-1" data-target="qbsearch-input.inputButtonText">Search or jump to...</span>
          <div class="d-flex" data-target="qbsearch-input.hotkeyIndicator">
            <svg xmlns="http://www.w3.org/2000/svg" width="22" height="20" aria-hidden="true" class="mr-1"><path fill="none" stroke="#979A9C" opacity=".4" d="M3.5.5h12c1.7 0 3 1.3 3 3v13c0 1.7-1.3 3-3 3h-12c-1.7 0-3-1.3-3-3v-13c0-1.7 1.3-3 3-3z"></path><path fill="#979A9C" d="M11.8 6L8 15.1h-.9L10.8 6h1z"></path></svg>
          </div>
      </button>

    <input type="hidden" name="type" class="js-site-search-type-field">

    
<div class="Overlay--hidden " data-modal-dialog-overlay>
  <modal-dialog data-action="close:qbsearch-input#handleClose cancel:qbsearch-input#handleClose" data-target="qbsearch-input.searchSuggestionsDialog" role="dialog" id="search-suggestions-dialog" aria-modal="true" aria-labelledby="search-suggestions-dialog-header" data-view-component="true" class="Overlay Overlay--width-large Overlay--height-auto">
      <h1 id="search-suggestions-dialog-header" class="sr-only">Search code, repositories, users, issues, pull requests...</h1>
    <div class="Overlay-body Overlay-body--paddingNone">
      
          <div data-view-component="true">        <div class="search-suggestions position-fixed width-full color-shadow-large border color-fg-default color-bg-default overflow-hidden d-flex flex-column query-builder-container"
          style="border-radius: 12px;"
          data-target="qbsearch-input.queryBuilderContainer"
          hidden
        >
          <!-- '"` --><!-- </textarea></xmp> --></option></form><form id="query-builder-test-form" action="" accept-charset="UTF-8" method="get">
  <query-builder data-target="qbsearch-input.queryBuilder" id="query-builder-query-builder-test" data-filter-key=":" data-view-component="true" class="QueryBuilder search-query-builder">
    <div class="FormControl FormControl--fullWidth">
      <label id="query-builder-test-label" for="query-builder-test" class="FormControl-label sr-only">
        Search
      </label>
      <div
        class="QueryBuilder-StyledInput width-fit "
        data-target="query-builder.styledInput"
      >
          <span id="query-builder-test-leadingvisual-wrap" class="FormControl-input-leadingVisualWrap QueryBuilder-leadingVisualWrap">
            <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search FormControl-input-leadingVisual">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
          </span>
        <div data-target="query-builder.styledInputContainer" class="QueryBuilder-StyledInputContainer">
          <div
            aria-hidden="true"
            class="QueryBuilder-StyledInputContent"
            data-target="query-builder.styledInputContent"
          ></div>
          <div class="QueryBuilder-InputWrapper">
            <div aria-hidden="true" class="QueryBuilder-Sizer" data-target="query-builder.sizer"></div>
            <input id="query-builder-test" name="query-builder-test" value="" autocomplete="off" type="text" role="combobox" spellcheck="false" aria-expanded="false" aria-describedby="validation-e353998a-fc94-4074-8322-b97fd27e5c7d" data-target="query-builder.input" data-action="
          input:query-builder#inputChange
          blur:query-builder#inputBlur
          keydown:query-builder#inputKeydown
          focus:query-builder#inputFocus
        " data-view-component="true" class="FormControl-input QueryBuilder-Input FormControl-medium" />
          </div>
        </div>
          <span class="sr-only" id="query-builder-test-clear">Clear</span>
          <button role="button" id="query-builder-test-clear-button" aria-labelledby="query-builder-test-clear query-builder-test-label" data-target="query-builder.clearButton" data-action="
                click:query-builder#clear
                focus:query-builder#clearButtonFocus
                blur:query-builder#clearButtonBlur
              " variant="small" hidden="hidden" type="button" data-view-component="true" class="Button Button--iconOnly Button--invisible Button--medium mr-1 px-2 py-0 d-flex flex-items-center rounded-1 color-fg-muted">  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x-circle-fill Button-visual">
    <path d="M2.343 13.657A8 8 0 1 1 13.658 2.343 8 8 0 0 1 2.343 13.657ZM6.03 4.97a.751.751 0 0 0-1.042.018.751.751 0 0 0-.018 1.042L6.94 8 4.97 9.97a.749.749 0 0 0 .326 1.275.749.749 0 0 0 .734-.215L8 9.06l1.97 1.97a.749.749 0 0 0 1.275-.326.749.749 0 0 0-.215-.734L9.06 8l1.97-1.97a.749.749 0 0 0-.326-1.275.749.749 0 0 0-.734.215L8 6.94Z"></path>
</svg>
</button>

      </div>
      <template id="search-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-search">
    <path d="M10.68 11.74a6 6 0 0 1-7.922-8.982 6 6 0 0 1 8.982 7.922l3.04 3.04a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215ZM11.5 7a4.499 4.499 0 1 0-8.997 0A4.499 4.499 0 0 0 11.5 7Z"></path>
</svg>
</template>

<template id="code-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code">
    <path d="m11.28 3.22 4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L13.94 8l-3.72-3.72a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215Zm-6.56 0a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L2.06 8l3.72 3.72a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L.47 8.53a.75.75 0 0 1 0-1.06Z"></path>
</svg>
</template>

<template id="file-code-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-file-code">
    <path d="M4 1.75C4 .784 4.784 0 5.75 0h5.586c.464 0 .909.184 1.237.513l2.914 2.914c.329.328.513.773.513 1.237v8.586A1.75 1.75 0 0 1 14.25 15h-9a.75.75 0 0 1 0-1.5h9a.25.25 0 0 0 .25-.25V6h-2.75A1.75 1.75 0 0 1 10 4.25V1.5H5.75a.25.25 0 0 0-.25.25v2.5a.75.75 0 0 1-1.5 0Zm1.72 4.97a.75.75 0 0 1 1.06 0l2 2a.75.75 0 0 1 0 1.06l-2 2a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734l1.47-1.47-1.47-1.47a.75.75 0 0 1 0-1.06ZM3.28 7.78 1.81 9.25l1.47 1.47a.751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018l-2-2a.75.75 0 0 1 0-1.06l2-2a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Zm8.22-6.218V4.25c0 .138.112.25.25.25h2.688l-.011-.013-2.914-2.914-.013-.011Z"></path>
</svg>
</template>

<template id="history-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-history">
    <path d="m.427 1.927 1.215 1.215a8.002 8.002 0 1 1-1.6 5.685.75.75 0 1 1 1.493-.154 6.5 6.5 0 1 0 1.18-4.458l1.358 1.358A.25.25 0 0 1 3.896 6H.25A.25.25 0 0 1 0 5.75V2.104a.25.25 0 0 1 .427-.177ZM7.75 4a.75.75 0 0 1 .75.75v2.992l2.028.812a.75.75 0 0 1-.557 1.392l-2.5-1A.751.751 0 0 1 7 8.25v-3.5A.75.75 0 0 1 7.75 4Z"></path>
</svg>
</template>

<template id="repo-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
</template>

<template id="bookmark-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-bookmark">
    <path d="M3 2.75C3 1.784 3.784 1 4.75 1h6.5c.966 0 1.75.784 1.75 1.75v11.5a.75.75 0 0 1-1.227.579L8 11.722l-3.773 3.107A.751.751 0 0 1 3 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v9.91l3.023-2.489a.75.75 0 0 1 .954 0l3.023 2.49V2.75a.25.25 0 0 0-.25-.25Z"></path>
</svg>
</template>

<template id="plus-circle-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-plus-circle">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm7.25-3.25v2.5h2.5a.75.75 0 0 1 0 1.5h-2.5v2.5a.75.75 0 0 1-1.5 0v-2.5h-2.5a.75.75 0 0 1 0-1.5h2.5v-2.5a.75.75 0 0 1 1.5 0Z"></path>
</svg>
</template>

<template id="circle-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-dot-fill">
    <path d="M8 4a4 4 0 1 1 0 8 4 4 0 0 1 0-8Z"></path>
</svg>
</template>

<template id="trash-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-trash">
    <path d="M11 1.75V3h2.25a.75.75 0 0 1 0 1.5H2.75a.75.75 0 0 1 0-1.5H5V1.75C5 .784 5.784 0 6.75 0h2.5C10.216 0 11 .784 11 1.75ZM4.496 6.675l.66 6.6a.25.25 0 0 0 .249.225h5.19a.25.25 0 0 0 .249-.225l.66-6.6a.75.75 0 0 1 1.492.149l-.66 6.6A1.748 1.748 0 0 1 10.595 15h-5.19a1.75 1.75 0 0 1-1.741-1.575l-.66-6.6a.75.75 0 1 1 1.492-.15ZM6.5 1.75V3h3V1.75a.25.25 0 0 0-.25-.25h-2.5a.25.25 0 0 0-.25.25Z"></path>
</svg>
</template>

<template id="team-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-people">
    <path d="M2 5.5a3.5 3.5 0 1 1 5.898 2.549 5.508 5.508 0 0 1 3.034 4.084.75.75 0 1 1-1.482.235 4 4 0 0 0-7.9 0 .75.75 0 0 1-1.482-.236A5.507 5.507 0 0 1 3.102 8.05 3.493 3.493 0 0 1 2 5.5ZM11 4a3.001 3.001 0 0 1 2.22 5.018 5.01 5.01 0 0 1 2.56 3.012.749.749 0 0 1-.885.954.752.752 0 0 1-.549-.514 3.507 3.507 0 0 0-2.522-2.372.75.75 0 0 1-.574-.73v-.352a.75.75 0 0 1 .416-.672A1.5 1.5 0 0 0 11 5.5.75.75 0 0 1 11 4Zm-5.5-.5a2 2 0 1 0-.001 3.999A2 2 0 0 0 5.5 3.5Z"></path>
</svg>
</template>

<template id="project-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-project">
    <path d="M1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25V1.75C0 .784.784 0 1.75 0ZM1.5 1.75v12.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25ZM11.75 3a.75.75 0 0 1 .75.75v7.5a.75.75 0 0 1-1.5 0v-7.5a.75.75 0 0 1 .75-.75Zm-8.25.75a.75.75 0 0 1 1.5 0v5.5a.75.75 0 0 1-1.5 0ZM8 3a.75.75 0 0 1 .75.75v3.5a.75.75 0 0 1-1.5 0v-3.5A.75.75 0 0 1 8 3Z"></path>
</svg>
</template>

<template id="pencil-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-pencil">
    <path d="M11.013 1.427a1.75 1.75 0 0 1 2.474 0l1.086 1.086a1.75 1.75 0 0 1 0 2.474l-8.61 8.61c-.21.21-.47.364-.756.445l-3.251.93a.75.75 0 0 1-.927-.928l.929-3.25c.081-.286.235-.547.445-.758l8.61-8.61Zm.176 4.823L9.75 4.81l-6.286 6.287a.253.253 0 0 0-.064.108l-.558 1.953 1.953-.558a.253.253 0 0 0 .108-.064Zm1.238-3.763a.25.25 0 0 0-.354 0L10.811 3.75l1.439 1.44 1.263-1.263a.25.25 0 0 0 0-.354Z"></path>
</svg>
</template>

<template id="copilot-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copilot">
    <path d="M7.998 15.035c-4.562 0-7.873-2.914-7.998-3.749V9.338c.085-.628.677-1.686 1.588-2.065.013-.07.024-.143.036-.218.029-.183.06-.384.126-.612-.201-.508-.254-1.084-.254-1.656 0-.87.128-1.769.693-2.484.579-.733 1.494-1.124 2.724-1.261 1.206-.134 2.262.034 2.944.765.05.053.096.108.139.165.044-.057.094-.112.143-.165.682-.731 1.738-.899 2.944-.765 1.23.137 2.145.528 2.724 1.261.566.715.693 1.614.693 2.484 0 .572-.053 1.148-.254 1.656.066.228.098.429.126.612.012.076.024.148.037.218.924.385 1.522 1.471 1.591 2.095v1.872c0 .766-3.351 3.795-8.002 3.795Zm0-1.485c2.28 0 4.584-1.11 5.002-1.433V7.862l-.023-.116c-.49.21-1.075.291-1.727.291-1.146 0-2.059-.327-2.71-.991A3.222 3.222 0 0 1 8 6.303a3.24 3.24 0 0 1-.544.743c-.65.664-1.563.991-2.71.991-.652 0-1.236-.081-1.727-.291l-.023.116v4.255c.419.323 2.722 1.433 5.002 1.433ZM6.762 2.83c-.193-.206-.637-.413-1.682-.297-1.019.113-1.479.404-1.713.7-.247.312-.369.789-.369 1.554 0 .793.129 1.171.308 1.371.162.181.519.379 1.442.379.853 0 1.339-.235 1.638-.54.315-.322.527-.827.617-1.553.117-.935-.037-1.395-.241-1.614Zm4.155-.297c-1.044-.116-1.488.091-1.681.297-.204.219-.359.679-.242 1.614.091.726.303 1.231.618 1.553.299.305.784.54 1.638.54.922 0 1.28-.198 1.442-.379.179-.2.308-.578.308-1.371 0-.765-.123-1.242-.37-1.554-.233-.296-.693-.587-1.713-.7Z"></path><path d="M6.25 9.037a.75.75 0 0 1 .75.75v1.501a.75.75 0 0 1-1.5 0V9.787a.75.75 0 0 1 .75-.75Zm4.25.75v1.501a.75.75 0 0 1-1.5 0V9.787a.75.75 0 0 1 1.5 0Z"></path>
</svg>
</template>

<template id="copilot-error-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copilot-error">
    <path d="M16 11.24c0 .112-.072.274-.21.467L13 9.688V7.862l-.023-.116c-.49.21-1.075.291-1.727.291-.198 0-.388-.009-.571-.029L6.833 5.226a4.01 4.01 0 0 0 .17-.782c.117-.935-.037-1.395-.241-1.614-.193-.206-.637-.413-1.682-.297-.683.076-1.115.231-1.395.415l-1.257-.91c.579-.564 1.413-.877 2.485-.996 1.206-.134 2.262.034 2.944.765.05.053.096.108.139.165.044-.057.094-.112.143-.165.682-.731 1.738-.899 2.944-.765 1.23.137 2.145.528 2.724 1.261.566.715.693 1.614.693 2.484 0 .572-.053 1.148-.254 1.656.066.228.098.429.126.612.012.076.024.148.037.218.924.385 1.522 1.471 1.591 2.095Zm-5.083-8.707c-1.044-.116-1.488.091-1.681.297-.204.219-.359.679-.242 1.614.091.726.303 1.231.618 1.553.299.305.784.54 1.638.54.922 0 1.28-.198 1.442-.379.179-.2.308-.578.308-1.371 0-.765-.123-1.242-.37-1.554-.233-.296-.693-.587-1.713-.7Zm2.511 11.074c-1.393.776-3.272 1.428-5.43 1.428-4.562 0-7.873-2.914-7.998-3.749V9.338c.085-.628.677-1.686 1.588-2.065.013-.07.024-.143.036-.218.029-.183.06-.384.126-.612-.18-.455-.241-.963-.252-1.475L.31 4.107A.747.747 0 0 1 0 3.509V3.49a.748.748 0 0 1 .625-.73c.156-.026.306.047.435.139l14.667 10.578a.592.592 0 0 1 .227.264.752.752 0 0 1 .046.249v.022a.75.75 0 0 1-1.19.596Zm-1.367-.991L5.635 7.964a5.128 5.128 0 0 1-.889.073c-.652 0-1.236-.081-1.727-.291l-.023.116v4.255c.419.323 2.722 1.433 5.002 1.433 1.539 0 3.089-.505 4.063-.934Z"></path>
</svg>
</template>

<template id="workflow-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-workflow">
    <path d="M0 1.75C0 .784.784 0 1.75 0h3.5C6.216 0 7 .784 7 1.75v3.5A1.75 1.75 0 0 1 5.25 7H4v4a1 1 0 0 0 1 1h4v-1.25C9 9.784 9.784 9 10.75 9h3.5c.966 0 1.75.784 1.75 1.75v3.5A1.75 1.75 0 0 1 14.25 16h-3.5A1.75 1.75 0 0 1 9 14.25v-.75H5A2.5 2.5 0 0 1 2.5 11V7h-.75A1.75 1.75 0 0 1 0 5.25Zm1.75-.25a.25.25 0 0 0-.25.25v3.5c0 .138.112.25.25.25h3.5a.25.25 0 0 0 .25-.25v-3.5a.25.25 0 0 0-.25-.25Zm9 9a.25.25 0 0 0-.25.25v3.5c0 .138.112.25.25.25h3.5a.25.25 0 0 0 .25-.25v-3.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
</template>

<template id="book-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-book">
    <path d="M0 1.75A.75.75 0 0 1 .75 1h4.253c1.227 0 2.317.59 3 1.501A3.743 3.743 0 0 1 11.006 1h4.245a.75.75 0 0 1 .75.75v10.5a.75.75 0 0 1-.75.75h-4.507a2.25 2.25 0 0 0-1.591.659l-.622.621a.75.75 0 0 1-1.06 0l-.622-.621A2.25 2.25 0 0 0 5.258 13H.75a.75.75 0 0 1-.75-.75Zm7.251 10.324.004-5.073-.002-2.253A2.25 2.25 0 0 0 5.003 2.5H1.5v9h3.757a3.75 3.75 0 0 1 1.994.574ZM8.755 4.75l-.004 7.322a3.752 3.752 0 0 1 1.992-.572H14.5v-9h-3.495a2.25 2.25 0 0 0-2.25 2.25Z"></path>
</svg>
</template>

<template id="code-review-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code-review">
    <path d="M1.75 1h12.5c.966 0 1.75.784 1.75 1.75v8.5A1.75 1.75 0 0 1 14.25 13H8.061l-2.574 2.573A1.458 1.458 0 0 1 3 14.543V13H1.75A1.75 1.75 0 0 1 0 11.25v-8.5C0 1.784.784 1 1.75 1ZM1.5 2.75v8.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h6.5a.25.25 0 0 0 .25-.25v-8.5a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Zm5.28 1.72a.75.75 0 0 1 0 1.06L5.31 7l1.47 1.47a.751.751 0 0 1-.018 1.042.751.751 0 0 1-1.042.018l-2-2a.75.75 0 0 1 0-1.06l2-2a.75.75 0 0 1 1.06 0Zm2.44 0a.75.75 0 0 1 1.06 0l2 2a.75.75 0 0 1 0 1.06l-2 2a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L10.69 7 9.22 5.53a.75.75 0 0 1 0-1.06Z"></path>
</svg>
</template>

<template id="codespaces-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-codespaces">
    <path d="M0 11.25c0-.966.784-1.75 1.75-1.75h12.5c.966 0 1.75.784 1.75 1.75v3A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25Zm2-9.5C2 .784 2.784 0 3.75 0h8.5C13.216 0 14 .784 14 1.75v5a1.75 1.75 0 0 1-1.75 1.75h-8.5A1.75 1.75 0 0 1 2 6.75Zm1.75-.25a.25.25 0 0 0-.25.25v5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25v-5a.25.25 0 0 0-.25-.25Zm-2 9.5a.25.25 0 0 0-.25.25v3c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25v-3a.25.25 0 0 0-.25-.25Z"></path><path d="M7 12.75a.75.75 0 0 1 .75-.75h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1-.75-.75Zm-4 0a.75.75 0 0 1 .75-.75h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1-.75-.75Z"></path>
</svg>
</template>

<template id="comment-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-comment">
    <path d="M1 2.75C1 1.784 1.784 1 2.75 1h10.5c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0 1 13.25 12H9.06l-2.573 2.573A1.458 1.458 0 0 1 4 13.543V12H2.75A1.75 1.75 0 0 1 1 10.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h2a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h4.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
</template>

<template id="comment-discussion-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-comment-discussion">
    <path d="M1.75 1h8.5c.966 0 1.75.784 1.75 1.75v5.5A1.75 1.75 0 0 1 10.25 10H7.061l-2.574 2.573A1.458 1.458 0 0 1 2 11.543V10h-.25A1.75 1.75 0 0 1 0 8.25v-5.5C0 1.784.784 1 1.75 1ZM1.5 2.75v5.5c0 .138.112.25.25.25h1a.75.75 0 0 1 .75.75v2.19l2.72-2.72a.749.749 0 0 1 .53-.22h3.5a.25.25 0 0 0 .25-.25v-5.5a.25.25 0 0 0-.25-.25h-8.5a.25.25 0 0 0-.25.25Zm13 2a.25.25 0 0 0-.25-.25h-.5a.75.75 0 0 1 0-1.5h.5c.966 0 1.75.784 1.75 1.75v5.5A1.75 1.75 0 0 1 14.25 12H14v1.543a1.458 1.458 0 0 1-2.487 1.03L9.22 12.28a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215l2.22 2.22v-2.19a.75.75 0 0 1 .75-.75h1a.25.25 0 0 0 .25-.25Z"></path>
</svg>
</template>

<template id="organization-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-organization">
    <path d="M1.75 16A1.75 1.75 0 0 1 0 14.25V1.75C0 .784.784 0 1.75 0h8.5C11.216 0 12 .784 12 1.75v12.5c0 .085-.006.168-.018.25h2.268a.25.25 0 0 0 .25-.25V8.285a.25.25 0 0 0-.111-.208l-1.055-.703a.749.749 0 1 1 .832-1.248l1.055.703c.487.325.779.871.779 1.456v5.965A1.75 1.75 0 0 1 14.25 16h-3.5a.766.766 0 0 1-.197-.026c-.099.017-.2.026-.303.026h-3a.75.75 0 0 1-.75-.75V14h-1v1.25a.75.75 0 0 1-.75.75Zm-.25-1.75c0 .138.112.25.25.25H4v-1.25a.75.75 0 0 1 .75-.75h2.5a.75.75 0 0 1 .75.75v1.25h2.25a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25h-8.5a.25.25 0 0 0-.25.25ZM3.75 6h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1 0-1.5ZM3 3.75A.75.75 0 0 1 3.75 3h.5a.75.75 0 0 1 0 1.5h-.5A.75.75 0 0 1 3 3.75Zm4 3A.75.75 0 0 1 7.75 6h.5a.75.75 0 0 1 0 1.5h-.5A.75.75 0 0 1 7 6.75ZM7.75 3h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1 0-1.5ZM3 9.75A.75.75 0 0 1 3.75 9h.5a.75.75 0 0 1 0 1.5h-.5A.75.75 0 0 1 3 9.75ZM7.75 9h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1 0-1.5Z"></path>
</svg>
</template>

<template id="rocket-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-rocket">
    <path d="M14.064 0h.186C15.216 0 16 .784 16 1.75v.186a8.752 8.752 0 0 1-2.564 6.186l-.458.459c-.314.314-.641.616-.979.904v3.207c0 .608-.315 1.172-.833 1.49l-2.774 1.707a.749.749 0 0 1-1.11-.418l-.954-3.102a1.214 1.214 0 0 1-.145-.125L3.754 9.816a1.218 1.218 0 0 1-.124-.145L.528 8.717a.749.749 0 0 1-.418-1.11l1.71-2.774A1.748 1.748 0 0 1 3.31 4h3.204c.288-.338.59-.665.904-.979l.459-.458A8.749 8.749 0 0 1 14.064 0ZM8.938 3.623h-.002l-.458.458c-.76.76-1.437 1.598-2.02 2.5l-1.5 2.317 2.143 2.143 2.317-1.5c.902-.583 1.74-1.26 2.499-2.02l.459-.458a7.25 7.25 0 0 0 2.123-5.127V1.75a.25.25 0 0 0-.25-.25h-.186a7.249 7.249 0 0 0-5.125 2.123ZM3.56 14.56c-.732.732-2.334 1.045-3.005 1.148a.234.234 0 0 1-.201-.064.234.234 0 0 1-.064-.201c.103-.671.416-2.273 1.15-3.003a1.502 1.502 0 1 1 2.12 2.12Zm6.94-3.935c-.088.06-.177.118-.266.175l-2.35 1.521.548 1.783 1.949-1.2a.25.25 0 0 0 .119-.213ZM3.678 8.116 5.2 5.766c.058-.09.117-.178.176-.266H3.309a.25.25 0 0 0-.213.119l-1.2 1.95ZM12 5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
</template>

<template id="shield-check-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-shield-check">
    <path d="m8.533.133 5.25 1.68A1.75 1.75 0 0 1 15 3.48V7c0 1.566-.32 3.182-1.303 4.682-.983 1.498-2.585 2.813-5.032 3.855a1.697 1.697 0 0 1-1.33 0c-2.447-1.042-4.049-2.357-5.032-3.855C1.32 10.182 1 8.566 1 7V3.48a1.75 1.75 0 0 1 1.217-1.667l5.25-1.68a1.748 1.748 0 0 1 1.066 0Zm-.61 1.429.001.001-5.25 1.68a.251.251 0 0 0-.174.237V7c0 1.36.275 2.666 1.057 3.859.784 1.194 2.121 2.342 4.366 3.298a.196.196 0 0 0 .154 0c2.245-.957 3.582-2.103 4.366-3.297C13.225 9.666 13.5 8.358 13.5 7V3.48a.25.25 0 0 0-.174-.238l-5.25-1.68a.25.25 0 0 0-.153 0ZM11.28 6.28l-3.5 3.5a.75.75 0 0 1-1.06 0l-1.5-1.5a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215l.97.97 2.97-2.97a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"></path>
</svg>
</template>

<template id="heart-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-heart">
    <path d="m8 14.25.345.666a.75.75 0 0 1-.69 0l-.008-.004-.018-.01a7.152 7.152 0 0 1-.31-.17 22.055 22.055 0 0 1-3.434-2.414C2.045 10.731 0 8.35 0 5.5 0 2.836 2.086 1 4.25 1 5.797 1 7.153 1.802 8 3.02 8.847 1.802 10.203 1 11.75 1 13.914 1 16 2.836 16 5.5c0 2.85-2.045 5.231-3.885 6.818a22.066 22.066 0 0 1-3.744 2.584l-.018.01-.006.003h-.002ZM4.25 2.5c-1.336 0-2.75 1.164-2.75 3 0 2.15 1.58 4.144 3.365 5.682A20.58 20.58 0 0 0 8 13.393a20.58 20.58 0 0 0 3.135-2.211C12.92 9.644 14.5 7.65 14.5 5.5c0-1.836-1.414-3-2.75-3-1.373 0-2.609.986-3.029 2.456a.749.749 0 0 1-1.442 0C6.859 3.486 5.623 2.5 4.25 2.5Z"></path>
</svg>
</template>

<template id="server-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-server">
    <path d="M1.75 1h12.5c.966 0 1.75.784 1.75 1.75v4c0 .372-.116.717-.314 1 .198.283.314.628.314 1v4a1.75 1.75 0 0 1-1.75 1.75H1.75A1.75 1.75 0 0 1 0 12.75v-4c0-.358.109-.707.314-1a1.739 1.739 0 0 1-.314-1v-4C0 1.784.784 1 1.75 1ZM1.5 2.75v4c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25v-4a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25Zm.25 5.75a.25.25 0 0 0-.25.25v4c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25v-4a.25.25 0 0 0-.25-.25ZM7 4.75A.75.75 0 0 1 7.75 4h4.5a.75.75 0 0 1 0 1.5h-4.5A.75.75 0 0 1 7 4.75ZM7.75 10h4.5a.75.75 0 0 1 0 1.5h-4.5a.75.75 0 0 1 0-1.5ZM3 4.75A.75.75 0 0 1 3.75 4h.5a.75.75 0 0 1 0 1.5h-.5A.75.75 0 0 1 3 4.75ZM3.75 10h.5a.75.75 0 0 1 0 1.5h-.5a.75.75 0 0 1 0-1.5Z"></path>
</svg>
</template>

<template id="globe-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-globe">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM5.78 8.75a9.64 9.64 0 0 0 1.363 4.177c.255.426.542.832.857 1.215.245-.296.551-.705.857-1.215A9.64 9.64 0 0 0 10.22 8.75Zm4.44-1.5a9.64 9.64 0 0 0-1.363-4.177c-.307-.51-.612-.919-.857-1.215a9.927 9.927 0 0 0-.857 1.215A9.64 9.64 0 0 0 5.78 7.25Zm-5.944 1.5H1.543a6.507 6.507 0 0 0 4.666 5.5c-.123-.181-.24-.365-.352-.552-.715-1.192-1.437-2.874-1.581-4.948Zm-2.733-1.5h2.733c.144-2.074.866-3.756 1.58-4.948.12-.197.237-.381.353-.552a6.507 6.507 0 0 0-4.666 5.5Zm10.181 1.5c-.144 2.074-.866 3.756-1.58 4.948-.12.197-.237.381-.353.552a6.507 6.507 0 0 0 4.666-5.5Zm2.733-1.5a6.507 6.507 0 0 0-4.666-5.5c.123.181.24.365.353.552.714 1.192 1.436 2.874 1.58 4.948Z"></path>
</svg>
</template>

<template id="issue-opened-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-issue-opened">
    <path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path><path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Z"></path>
</svg>
</template>

<template id="device-mobile-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-device-mobile">
    <path d="M3.75 0h8.5C13.216 0 14 .784 14 1.75v12.5A1.75 1.75 0 0 1 12.25 16h-8.5A1.75 1.75 0 0 1 2 14.25V1.75C2 .784 2.784 0 3.75 0ZM3.5 1.75v12.5c0 .138.112.25.25.25h8.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25h-8.5a.25.25 0 0 0-.25.25ZM8 13a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z"></path>
</svg>
</template>

<template id="package-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-package">
    <path d="m8.878.392 5.25 3.045c.54.314.872.89.872 1.514v6.098a1.75 1.75 0 0 1-.872 1.514l-5.25 3.045a1.75 1.75 0 0 1-1.756 0l-5.25-3.045A1.75 1.75 0 0 1 1 11.049V4.951c0-.624.332-1.201.872-1.514L7.122.392a1.75 1.75 0 0 1 1.756 0ZM7.875 1.69l-4.63 2.685L8 7.133l4.755-2.758-4.63-2.685a.248.248 0 0 0-.25 0ZM2.5 5.677v5.372c0 .09.047.171.125.216l4.625 2.683V8.432Zm6.25 8.271 4.625-2.683a.25.25 0 0 0 .125-.216V5.677L8.75 8.432Z"></path>
</svg>
</template>

<template id="credit-card-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-credit-card">
    <path d="M10.75 9a.75.75 0 0 0 0 1.5h1.5a.75.75 0 0 0 0-1.5h-1.5Z"></path><path d="M0 3.75C0 2.784.784 2 1.75 2h12.5c.966 0 1.75.784 1.75 1.75v8.5A1.75 1.75 0 0 1 14.25 14H1.75A1.75 1.75 0 0 1 0 12.25ZM14.5 6.5h-13v5.75c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25Zm0-2.75a.25.25 0 0 0-.25-.25H1.75a.25.25 0 0 0-.25.25V5h13Z"></path>
</svg>
</template>

<template id="play-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-play">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm4.879-2.773 4.264 2.559a.25.25 0 0 1 0 .428l-4.264 2.559A.25.25 0 0 1 6 10.559V5.442a.25.25 0 0 1 .379-.215Z"></path>
</svg>
</template>

<template id="gift-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-gift">
    <path d="M2 2.75A2.75 2.75 0 0 1 4.75 0c.983 0 1.873.42 2.57 1.232.268.318.497.668.68 1.042.183-.375.411-.725.68-1.044C9.376.42 10.266 0 11.25 0a2.75 2.75 0 0 1 2.45 4h.55c.966 0 1.75.784 1.75 1.75v2c0 .698-.409 1.301-1 1.582v4.918A1.75 1.75 0 0 1 13.25 16H2.75A1.75 1.75 0 0 1 1 14.25V9.332C.409 9.05 0 8.448 0 7.75v-2C0 4.784.784 4 1.75 4h.55c-.192-.375-.3-.8-.3-1.25ZM7.25 9.5H2.5v4.75c0 .138.112.25.25.25h4.5Zm1.5 0v5h4.5a.25.25 0 0 0 .25-.25V9.5Zm0-4V8h5.5a.25.25 0 0 0 .25-.25v-2a.25.25 0 0 0-.25-.25Zm-7 0a.25.25 0 0 0-.25.25v2c0 .138.112.25.25.25h5.5V5.5h-5.5Zm3-4a1.25 1.25 0 0 0 0 2.5h2.309c-.233-.818-.542-1.401-.878-1.793-.43-.502-.915-.707-1.431-.707ZM8.941 4h2.309a1.25 1.25 0 0 0 0-2.5c-.516 0-1 .205-1.43.707-.337.392-.646.975-.879 1.793Z"></path>
</svg>
</template>

<template id="code-square-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code-square">
    <path d="M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25Zm1.75-.25a.25.25 0 0 0-.25.25v12.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25V1.75a.25.25 0 0 0-.25-.25Zm7.47 3.97a.75.75 0 0 1 1.06 0l2 2a.75.75 0 0 1 0 1.06l-2 2a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L10.69 8 9.22 6.53a.75.75 0 0 1 0-1.06ZM6.78 6.53 5.31 8l1.47 1.47a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215l-2-2a.75.75 0 0 1 0-1.06l2-2a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"></path>
</svg>
</template>

<template id="device-desktop-icon">
  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-device-desktop">
    <path d="M14.25 1c.966 0 1.75.784 1.75 1.75v7.5A1.75 1.75 0 0 1 14.25 12h-3.727c.099 1.041.52 1.872 1.292 2.757A.752.752 0 0 1 11.25 16h-6.5a.75.75 0 0 1-.565-1.243c.772-.885 1.192-1.716 1.292-2.757H1.75A1.75 1.75 0 0 1 0 10.25v-7.5C0 1.784.784 1 1.75 1ZM1.75 2.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h12.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25ZM9.018 12H6.982a5.72 5.72 0 0 1-.765 2.5h3.566a5.72 5.72 0 0 1-.765-2.5Z"></path>
</svg>
</template>

        <div class="position-relative">
                <ul
                  role="listbox"
                  class="ActionListWrap QueryBuilder-ListWrap"
                  aria-label="Suggestions"
                  data-action="
                    combobox-commit:query-builder#comboboxCommit
                    mousedown:query-builder#resultsMousedown
                  "
                  data-target="query-builder.resultsList"
                  data-persist-list=false
                  id="query-builder-test-results"
                  tabindex="-1"
                ></ul>
        </div>
      <div class="FormControl-inlineValidation" id="validation-e353998a-fc94-4074-8322-b97fd27e5c7d" hidden="hidden">
        <span class="FormControl-inlineValidation--visual">
          <svg aria-hidden="true" height="12" viewBox="0 0 12 12" version="1.1" width="12" data-view-component="true" class="octicon octicon-alert-fill">
    <path d="M4.855.708c.5-.896 1.79-.896 2.29 0l4.675 8.351a1.312 1.312 0 0 1-1.146 1.954H1.33A1.313 1.313 0 0 1 .183 9.058ZM7 7V3H5v4Zm-1 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z"></path>
</svg>
        </span>
        <span></span>
</div>    </div>
    <div data-target="query-builder.screenReaderFeedback" aria-live="polite" aria-atomic="true" class="sr-only"></div>
</query-builder></form>
          <div class="d-flex flex-row color-fg-muted px-3 text-small color-bg-default search-feedback-prompt">
            <a target="_blank" href="https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax" data-view-component="true" class="Link color-fg-accent text-normal ml-2">Search syntax tips</a>            <div class="d-flex flex-1"></div>
          </div>
        </div>
</div>

    </div>
</modal-dialog></div>
  </div>
  <div data-action="click:qbsearch-input#retract" class="dark-backdrop position-fixed" hidden data-target="qbsearch-input.darkBackdrop"></div>
  <div class="color-fg-default">
    
<dialog-helper>
  <dialog data-target="qbsearch-input.feedbackDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="feedback-dialog" aria-modal="true" aria-labelledby="feedback-dialog-title" aria-describedby="feedback-dialog-description" data-view-component="true" class="Overlay Overlay-whenNarrow Overlay--size-medium Overlay--motion-scaleFade Overlay--disableScroll">
    <div data-view-component="true" class="Overlay-header">
  <div class="Overlay-headerContentWrap">
    <div class="Overlay-titleWrap">
      <h1 class="Overlay-title " id="feedback-dialog-title">
        Provide feedback
      </h1>
        
    </div>
    <div class="Overlay-actionWrap">
      <button data-close-dialog-id="feedback-dialog" aria-label="Close" aria-label="Close" type="button" data-view-component="true" class="close-button Overlay-closeButton"><svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg></button>
    </div>
  </div>
  
</div>
      <scrollable-region data-labelled-by="feedback-dialog-title">
        <div data-view-component="true" class="Overlay-body">        <!-- '"` --><!-- </textarea></xmp> --></option></form><form id="code-search-feedback-form" data-turbo="false" action="/search/feedback" accept-charset="UTF-8" method="post"><input type="hidden" data-csrf="true" name="authenticity_token" value="E9/uwYhyyzjfQ/gTSDku7T8/YabmaiW364LuKUCyEfaIWvO4+1OaAHLVC+QgH9UcWrkjNtdzkcr/XMGNE2d+WQ==" />
          <p>We read every piece of feedback, and take your input very seriously.</p>
          <textarea name="feedback" class="form-control width-full mb-2" style="height: 120px" id="feedback"></textarea>
          <input name="include_email" id="include_email" aria-label="Include my email address so I can be contacted" class="form-control mr-2" type="checkbox">
          <label for="include_email" style="font-weight: normal">Include my email address so I can be contacted</label>
</form></div>
      </scrollable-region>
      <div data-view-component="true" class="Overlay-footer Overlay-footer--alignEnd">          <button data-close-dialog-id="feedback-dialog" type="button" data-view-component="true" class="btn">    Cancel
</button>
          <button form="code-search-feedback-form" data-action="click:qbsearch-input#submitFeedback" type="submit" data-view-component="true" class="btn-primary btn">    Submit feedback
</button>
</div>
</dialog></dialog-helper>

    <custom-scopes data-target="qbsearch-input.customScopesManager">
    
<dialog-helper>
  <dialog data-target="custom-scopes.customScopesModalDialog" data-action="close:qbsearch-input#handleDialogClose cancel:qbsearch-input#handleDialogClose" id="custom-scopes-dialog" aria-modal="true" aria-labelledby="custom-scopes-dialog-title" aria-describedby="custom-scopes-dialog-description" data-view-component="true" class="Overlay Overlay-whenNarrow Overlay--size-medium Overlay--motion-scaleFade Overlay--disableScroll">
    <div data-view-component="true" class="Overlay-header Overlay-header--divided">
  <div class="Overlay-headerContentWrap">
    <div class="Overlay-titleWrap">
      <h1 class="Overlay-title " id="custom-scopes-dialog-title">
        Saved searches
      </h1>
        <h2 id="custom-scopes-dialog-description" class="Overlay-description">Use saved searches to filter your results more quickly</h2>
    </div>
    <div class="Overlay-actionWrap">
      <button data-close-dialog-id="custom-scopes-dialog" aria-label="Close" aria-label="Close" type="button" data-view-component="true" class="close-button Overlay-closeButton"><svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg></button>
    </div>
  </div>
  
</div>
      <scrollable-region data-labelled-by="custom-scopes-dialog-title">
        <div data-view-component="true" class="Overlay-body">        <div data-target="custom-scopes.customScopesModalDialogFlash"></div>

        <div hidden class="create-custom-scope-form" data-target="custom-scopes.createCustomScopeForm">
        <!-- '"` --><!-- </textarea></xmp> --></option></form><form id="custom-scopes-dialog-form" data-turbo="false" action="/search/custom_scopes" accept-charset="UTF-8" method="post"><input type="hidden" data-csrf="true" name="authenticity_token" value="u+0A2IqPVcXuZdN1tW5C84aFQen0hf3FOuEtpmb/Exb3N58bMOIKt1hOvKp4+B+bq49xlLKDeX7bGNC3uJPYhw==" />
          <div data-target="custom-scopes.customScopesModalDialogFlash"></div>

          <input type="hidden" id="custom_scope_id" name="custom_scope_id" data-target="custom-scopes.customScopesIdField">

          <div class="form-group">
            <label for="custom_scope_name">Name</label>
            <auto-check src="/search/custom_scopes/check_name" required>
              <input
                type="text"
                name="custom_scope_name"
                id="custom_scope_name"
                data-target="custom-scopes.customScopesNameField"
                class="form-control"
                autocomplete="off"
                placeholder="github-ruby"
                required
                maxlength="50">
              <input type="hidden" data-csrf="true" value="+XayJBdEOpxqhuU5NU/VTn07eymzfpILm6NkTEyW1vBFymn5QDwXtC4Z56QE4BIyRpp1lAnf4z4PapwCcB0aUg==" />
            </auto-check>
          </div>

          <div class="form-group">
            <label for="custom_scope_query">Query</label>
            <input
              type="text"
              name="custom_scope_query"
              id="custom_scope_query"
              data-target="custom-scopes.customScopesQueryField"
              class="form-control"
              autocomplete="off"
              placeholder="(repo:mona/a OR repo:mona/b) AND lang:python"
              required
              maxlength="500">
          </div>

          <p class="text-small color-fg-muted">
            To see all available qualifiers, see our <a class="Link--inTextBlock" href="https://docs.github.com/search-github/github-code-search/understanding-github-code-search-syntax">documentation</a>.
          </p>
</form>        </div>

        <div data-target="custom-scopes.manageCustomScopesForm">
          <div data-target="custom-scopes.list"></div>
        </div>

</div>
      </scrollable-region>
      <div data-view-component="true" class="Overlay-footer Overlay-footer--alignEnd Overlay-footer--divided">          <button data-action="click:custom-scopes#customScopesCancel" type="button" data-view-component="true" class="btn">    Cancel
</button>
          <button form="custom-scopes-dialog-form" data-action="click:custom-scopes#customScopesSubmit" data-target="custom-scopes.customScopesSubmitButton" type="submit" data-view-component="true" class="btn-primary btn">    Create saved search
</button>
</div>
</dialog></dialog-helper>
    </custom-scopes>
  </div>
</qbsearch-input>


            <div class="position-relative HeaderMenu-link-wrap d-lg-inline-block">
              <a
                href="/login?return_to=https%3A%2F%2Fgithub.com%2Fcatchorg%2FCatch2%2Fblob%2Fdevel%2Fextras%2Fcatch_amalgamated.cpp"
                class="HeaderMenu-link HeaderMenu-link--sign-in HeaderMenu-button flex-shrink-0 no-underline d-none d-lg-inline-flex border border-lg-0 rounded px-2 py-1"
                style="margin-left: 12px;"
                data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.cpp&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="f5827942c000d6d39e530a81b163f9e3ade9b6988af213b2159f5b1b5ef812f4"
                data-analytics-event="{&quot;category&quot;:&quot;Marketing nav&quot;,&quot;action&quot;:&quot;click to go to homepage&quot;,&quot;label&quot;:&quot;ref_page:Marketing;ref_cta:Sign in;ref_loc:Header&quot;}"
              >
                Sign in
              </a>
            </div>

              <a href="/signup?ref_cta=Sign+up&amp;ref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&amp;source=header-repo&amp;source_repo=catchorg%2FCatch2"
                class="HeaderMenu-link HeaderMenu-link--sign-up HeaderMenu-button flex-shrink-0 d-flex d-lg-inline-flex no-underline border color-border-default rounded px-2 py-1"
                data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;site header menu&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;originating_url&quot;:&quot;https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.cpp&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="f5827942c000d6d39e530a81b163f9e3ade9b6988af213b2159f5b1b5ef812f4"
                data-analytics-event="{&quot;category&quot;:&quot;Sign up&quot;,&quot;action&quot;:&quot;click to sign up for account&quot;,&quot;label&quot;:&quot;ref_page:/&lt;user-name&gt;/&lt;repo-name&gt;/blob/show;ref_cta:Sign up;ref_loc:header logged out&quot;}"
              >
                Sign up
              </a>

                <div class="AppHeader-appearanceSettings">
    <react-partial-anchor>
      <button data-target="react-partial-anchor.anchor" id="icon-button-29569f3a-b2de-4253-8be0-0f36e6745a19" aria-labelledby="tooltip-fcd891fb-6e5f-43da-8d92-a93e9864da46" type="button" disabled="disabled" data-view-component="true" class="Button Button--iconOnly Button--invisible Button--medium AppHeader-button HeaderMenu-link border cursor-wait">  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-sliders Button-visual">
    <path d="M15 2.75a.75.75 0 0 1-.75.75h-4a.75.75 0 0 1 0-1.5h4a.75.75 0 0 1 .75.75Zm-8.5.75v1.25a.75.75 0 0 0 1.5 0v-4a.75.75 0 0 0-1.5 0V2H1.75a.75.75 0 0 0 0 1.5H6.5Zm1.25 5.25a.75.75 0 0 0 0-1.5h-6a.75.75 0 0 0 0 1.5h6ZM15 8a.75.75 0 0 1-.75.75H11.5V10a.75.75 0 1 1-1.5 0V6a.75.75 0 0 1 1.5 0v1.25h2.75A.75.75 0 0 1 15 8Zm-9 5.25v-2a.75.75 0 0 0-1.5 0v1.25H1.75a.75.75 0 0 0 0 1.5H4.5v1.25a.75.75 0 0 0 1.5 0v-2Zm9 0a.75.75 0 0 1-.75.75h-6a.75.75 0 0 1 0-1.5h6a.75.75 0 0 1 .75.75Z"></path>
</svg>
</button><tool-tip id="tooltip-fcd891fb-6e5f-43da-8d92-a93e9864da46" for="icon-button-29569f3a-b2de-4253-8be0-0f36e6745a19" popover="manual" data-direction="s" data-type="label" data-view-component="true" class="sr-only position-absolute">Appearance settings</tool-tip>

      <template data-target="react-partial-anchor.template">
        <link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/primer-react.47f1598729334a521d2a.module.css" />
<link crossorigin="anonymous" media="all" rel="stylesheet" href="https://github.githubassets.com/assets/appearance-settings.76259b61ecc822265749.module.css" />

<react-partial
  partial-name="appearance-settings"
  data-ssr="false"
  data-attempted-ssr="false"
  data-react-profiling="false"
>
  
  <script type="application/json" data-target="react-partial.embeddedData">{"props":{}}</script>
  <div data-target="react-partial.reactRoot"></div>
</react-partial>

      </template>
    </react-partial-anchor>
  </div>

          <button type="button" class="sr-only js-header-menu-focus-trap d-block d-lg-none">Resetting focus</button>
        </div>
      </div>
    </div>
  </div>
</header>

      <div hidden="hidden" data-view-component="true" class="js-stale-session-flash stale-session-flash flash flash-warn flash-full">
  
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
        <span class="js-stale-session-flash-signed-in" hidden>You signed in with another tab or window. <a class="Link--inTextBlock" href="">Reload</a> to refresh your session.</span>
        <span class="js-stale-session-flash-signed-out" hidden>You signed out in another tab or window. <a class="Link--inTextBlock" href="">Reload</a> to refresh your session.</span>
        <span class="js-stale-session-flash-switched" hidden>You switched accounts on another tab or window. <a class="Link--inTextBlock" href="">Reload</a> to refresh your session.</span>

    <button id="icon-button-aa5a9cb6-c981-444f-989c-d2910d2cfef1" aria-labelledby="tooltip-5376e633-a549-49c8-9440-df2b15e3f313" type="button" data-view-component="true" class="Button Button--iconOnly Button--invisible Button--medium flash-close js-flash-close">  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x Button-visual">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
</button><tool-tip id="tooltip-5376e633-a549-49c8-9440-df2b15e3f313" for="icon-button-aa5a9cb6-c981-444f-989c-d2910d2cfef1" popover="manual" data-direction="s" data-type="label" data-view-component="true" class="sr-only position-absolute">Dismiss alert</tool-tip>


  
</div>
    </div>

  <div id="start-of-content" class="show-on-focus"></div>








    <div id="js-flash-container" class="flash-container" data-turbo-replace>




  <template class="js-flash-template">
    
<div class="flash flash-full   {{ className }}">
  <div >
    <button autofocus class="flash-close js-flash-close" type="button" aria-label="Dismiss this message">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
    </button>
    <div aria-atomic="true" role="alert" class="js-flash-alert">
      
      <div>{{ message }}</div>

    </div>
  </div>
</div>
  </template>
</div>


    






  <div
    class="application-main "
    data-commit-hovercards-enabled
    data-discussion-hovercards-enabled
    data-issue-and-pr-hovercards-enabled
    data-project-hovercards-enabled
  >
        <div itemscope itemtype="http://schema.org/SoftwareSourceCode" class="">
    <main id="js-repo-pjax-container" >
      
      
    

    






  
  <div id="repository-container-header"  class="pt-3 hide-full-screen" style="background-color: var(--page-header-bgColor, var(--color-page-header-bg));" data-turbo-replace>

      <div class="d-flex flex-nowrap flex-justify-end mb-3  px-3 px-lg-5" style="gap: 1rem;">

        <div class="flex-auto min-width-0 width-fit">
            
  <div class=" d-flex flex-wrap flex-items-center wb-break-word f3 text-normal">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo color-fg-muted mr-2">
    <path d="M2 2.5A2.5 2.5 0 0 1 4.5 0h8.75a.75.75 0 0 1 .75.75v12.5a.75.75 0 0 1-.75.75h-2.5a.75.75 0 0 1 0-1.5h1.75v-2h-8a1 1 0 0 0-.714 1.7.75.75 0 1 1-1.072 1.05A2.495 2.495 0 0 1 2 11.5Zm10.5-1h-8a1 1 0 0 0-1 1v6.708A2.486 2.486 0 0 1 4.5 9h8ZM5 12.25a.25.25 0 0 1 .25-.25h3.5a.25.25 0 0 1 .25.25v3.25a.25.25 0 0 1-.4.2l-1.45-1.087a.249.249 0 0 0-.3 0L5.4 15.7a.25.25 0 0 1-.4-.2Z"></path>
</svg>
    
    <span class="author flex-self-stretch" itemprop="author">
      <a class="url fn" rel="author" data-hovercard-type="organization" data-hovercard-url="/orgs/catchorg/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/catchorg">
        catchorg
</a>    </span>
    <span class="mx-1 flex-self-stretch color-fg-muted">/</span>
    <strong itemprop="name" class="mr-2 flex-self-stretch">
      <a data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" href="/catchorg/Catch2">Catch2</a>
    </strong>

    <span></span><span class="Label Label--secondary v-align-middle mr-1">Public</span>
  </div>


        </div>

        <div id="repository-details-container" class="flex-shrink-0" data-turbo-replace style="max-width: 70%;">
            <ul class="pagehead-actions flex-shrink-0 d-none d-md-inline" style="padding: 2px 0;">
    
        <li>
          <include-fragment src="/catchorg/Catch2/sponsor_button" data-nonce="v2:5d27d888-b607-7721-9c17-563ccca942bc" data-view-component="true">
  
  <div data-show-on-forbidden-error hidden>
    <div class="Box">
  <div class="blankslate-container">
    <div data-view-component="true" class="blankslate blankslate-spacious color-bg-default rounded-2">
      

      <h3 data-view-component="true" class="blankslate-heading">        Uh oh!
</h3>
      <p data-view-component="true">        <p class="color-fg-muted my-2 mb-2 ws-normal">There was an error while loading. <a class="Link--inTextBlock" data-turbo="false" href="" aria-label="Please reload this page">Please reload this page</a>.</p>
</p>

</div>  </div>
</div>  </div>
</include-fragment>
        </li>

      

  <li>
            <a href="/login?return_to=%2Fcatchorg%2FCatch2" rel="nofollow" id="repository-details-watch-button" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;notification subscription menu watch&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.cpp&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="14bee974164804740d51857d93ba5521aacaacb7e1f778e20f4c325a0e139ccc" aria-label="You must be signed in to change notification settings" data-view-component="true" class="btn-sm btn">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-bell mr-2">
    <path d="M8 16a2 2 0 0 0 1.985-1.75c.017-.137-.097-.25-.235-.25h-3.5c-.138 0-.252.113-.235.25A2 2 0 0 0 8 16ZM3 5a5 5 0 0 1 10 0v2.947c0 .05.015.098.042.139l1.703 2.555A1.519 1.519 0 0 1 13.482 13H2.518a1.516 1.516 0 0 1-1.263-2.36l1.703-2.554A.255.255 0 0 0 3 7.947Zm5-3.5A3.5 3.5 0 0 0 4.5 5v2.947c0 .346-.102.683-.294.97l-1.703 2.556a.017.017 0 0 0-.003.01l.001.006c0 .002.002.004.004.006l.006.004.007.001h10.964l.007-.001.006-.004.004-.006.001-.007a.017.017 0 0 0-.003-.01l-1.703-2.554a1.745 1.745 0 0 1-.294-.97V5A3.5 3.5 0 0 0 8 1.5Z"></path>
</svg>Notifications
</a>    <tool-tip id="tooltip-676014c2-7b02-432c-a6da-5046a41af83b" for="repository-details-watch-button" popover="manual" data-direction="s" data-type="description" data-view-component="true" class="sr-only position-absolute">You must be signed in to change notification settings</tool-tip>

  </li>

  <li>
          <a icon="repo-forked" id="fork-button" href="/login?return_to=%2Fcatchorg%2FCatch2" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;repo details fork button&quot;,&quot;repository_id&quot;:1062572,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.cpp&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="4ab329c66066ab2d9557876a49ac564fcbf1939689700710276c69fa0143e7a6" data-view-component="true" class="btn-sm btn">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-repo-forked mr-2">
    <path d="M5 5.372v.878c0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75v-.878a2.25 2.25 0 1 1 1.5 0v.878a2.25 2.25 0 0 1-2.25 2.25h-1.5v2.128a2.251 2.251 0 1 1-1.5 0V8.5h-1.5A2.25 2.25 0 0 1 3.5 6.25v-.878a2.25 2.25 0 1 1 1.5 0ZM5 3.25a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Zm6.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm-3 8.75a.75.75 0 1 0-1.5 0 .75.75 0 0 0 1.5 0Z"></path>
</svg>Fork
    <span id="repo-network-counter" data-pjax-replace="true" data-turbo-replace="true" title="3,119" data-view-component="true" class="Counter">3.1k</span>
</a>
  </li>

  <li>
        <div data-view-component="true" class="BtnGroup d-flex">
        <a href="/login?return_to=%2Fcatchorg%2FCatch2" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;star button&quot;,&quot;repository_id&quot;:1062572,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;originating_url&quot;:&quot;https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.cpp&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="35225d812e9b8d16f2fc2dce3d7b2bbe97962dfeac3e300671dbb8f4f3ec3bd3" aria-label="You must be signed in to star a repository" data-view-component="true" class="tooltipped tooltipped-sw btn-sm btn">    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-star v-align-text-bottom d-inline-block mr-2">
    <path d="M8 .25a.75.75 0 0 1 .673.418l1.882 3.815 4.21.612a.75.75 0 0 1 .416 1.279l-3.046 2.97.719 4.192a.751.751 0 0 1-1.088.791L8 12.347l-3.766 1.98a.75.75 0 0 1-1.088-.79l.72-4.194L.818 6.374a.75.75 0 0 1 .416-1.28l4.21-.611L7.327.668A.75.75 0 0 1 8 .25Zm0 2.445L6.615 5.5a.75.75 0 0 1-.564.41l-3.097.45 2.24 2.184a.75.75 0 0 1 .216.664l-.528 3.084 2.769-1.456a.75.75 0 0 1 .698 0l2.77 1.456-.53-3.084a.75.75 0 0 1 .216-.664l2.24-2.183-3.096-.45a.75.75 0 0 1-.564-.41L8 2.694Z"></path>
</svg><span data-view-component="true" class="d-inline">
          Star
</span>          <span id="repo-stars-counter-star" aria-label="19588 users starred this repository" data-singular-suffix="user starred this repository" data-plural-suffix="users starred this repository" data-turbo-replace="true" title="19,588" data-view-component="true" class="Counter js-social-count">19.6k</span>
</a></div>
  </li>

</ul>

        </div>
      </div>

        <div id="responsive-meta-container" data-turbo-replace>
</div>


          <nav data-pjax="#js-repo-pjax-container" aria-label="Repository" data-view-component="true" class="js-repo-nav js-sidenav-container-pjax js-responsive-underlinenav overflow-hidden UnderlineNav px-3 px-md-4 px-lg-5">

  <ul data-view-component="true" class="UnderlineNav-body list-style-none">
      <li data-view-component="true" class="d-inline-flex">
  <a id="code-tab" href="/catchorg/Catch2" data-tab-item="i0code-tab" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches repo_packages repo_deployments repo_attestations /catchorg/Catch2" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g c" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Code&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" aria-current="page" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item selected">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code UnderlineNav-octicon d-none d-sm-inline">
    <path d="m11.28 3.22 4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L13.94 8l-3.72-3.72a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215Zm-6.56 0a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L2.06 8l3.72 3.72a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L.47 8.53a.75.75 0 0 1 0-1.06Z"></path>
</svg>
        <span data-content="Code">Code</span>
          <span id="code-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="issues-tab" href="/catchorg/Catch2/issues" data-tab-item="i1issues-tab" data-selected-links="repo_issues repo_labels repo_milestones /catchorg/Catch2/issues" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g i" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Issues&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-issue-opened UnderlineNav-octicon d-none d-sm-inline">
    <path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path><path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Z"></path>
</svg>
        <span data-content="Issues">Issues</span>
          <span id="issues-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="391" data-view-component="true" class="Counter">391</span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="pull-requests-tab" href="/catchorg/Catch2/pulls" data-tab-item="i2pull-requests-tab" data-selected-links="repo_pulls checks /catchorg/Catch2/pulls" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g p" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Pull requests&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-git-pull-request UnderlineNav-octicon d-none d-sm-inline">
    <path d="M1.5 3.25a2.25 2.25 0 1 1 3 2.122v5.256a2.251 2.251 0 1 1-1.5 0V5.372A2.25 2.25 0 0 1 1.5 3.25Zm5.677-.177L9.573.677A.25.25 0 0 1 10 .854V2.5h1A2.5 2.5 0 0 1 13.5 5v5.628a2.251 2.251 0 1 1-1.5 0V5a1 1 0 0 0-1-1h-1v1.646a.25.25 0 0 1-.427.177L7.177 3.427a.25.25 0 0 1 0-.354ZM3.75 2.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm0 9.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm8.25.75a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Z"></path>
</svg>
        <span data-content="Pull requests">Pull requests</span>
          <span id="pull-requests-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="31" data-view-component="true" class="Counter">31</span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="actions-tab" href="/catchorg/Catch2/actions" data-tab-item="i3actions-tab" data-selected-links="repo_actions /catchorg/Catch2/actions" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g a" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Actions&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-play UnderlineNav-octicon d-none d-sm-inline">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm4.879-2.773 4.264 2.559a.25.25 0 0 1 0 .428l-4.264 2.559A.25.25 0 0 1 6 10.559V5.442a.25.25 0 0 1 .379-.215Z"></path>
</svg>
        <span data-content="Actions">Actions</span>
          <span id="actions-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="projects-tab" href="/catchorg/Catch2/projects" data-tab-item="i4projects-tab" data-selected-links="repo_projects new_repo_project repo_project /catchorg/Catch2/projects" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g b" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Projects&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-table UnderlineNav-octicon d-none d-sm-inline">
    <path d="M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25ZM6.5 6.5v8h7.75a.25.25 0 0 0 .25-.25V6.5Zm8-1.5V1.75a.25.25 0 0 0-.25-.25H6.5V5Zm-13 1.5v7.75c0 .138.112.25.25.25H5v-8ZM5 5V1.5H1.75a.25.25 0 0 0-.25.25V5Z"></path>
</svg>
        <span data-content="Projects">Projects</span>
          <span id="projects-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="0" hidden="hidden" data-view-component="true" class="Counter">0</span>


    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="security-tab" href="/catchorg/Catch2/security" data-tab-item="i5security-tab" data-selected-links="security overview alerts policy token_scanning code_scanning /catchorg/Catch2/security" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-hotkey="g s" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Security&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-shield UnderlineNav-octicon d-none d-sm-inline">
    <path d="M7.467.133a1.748 1.748 0 0 1 1.066 0l5.25 1.68A1.75 1.75 0 0 1 15 3.48V7c0 1.566-.32 3.182-1.303 4.682-.983 1.498-2.585 2.813-5.032 3.855a1.697 1.697 0 0 1-1.33 0c-2.447-1.042-4.049-2.357-5.032-3.855C1.32 10.182 1 8.566 1 7V3.48a1.75 1.75 0 0 1 1.217-1.667Zm.61 1.429a.25.25 0 0 0-.153 0l-5.25 1.68a.25.25 0 0 0-.174.238V7c0 1.358.275 2.666 1.057 3.86.784 1.194 2.121 2.34 4.366 3.297a.196.196 0 0 0 .154 0c2.245-.956 3.582-2.104 4.366-3.298C13.225 9.666 13.5 8.36 13.5 7V3.48a.251.251 0 0 0-.174-.237l-5.25-1.68ZM8.75 4.75v3a.75.75 0 0 1-1.5 0v-3a.75.75 0 0 1 1.5 0ZM9 10.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
        <span data-content="Security">Security</span>
          <include-fragment src="/catchorg/Catch2/security/overall-count" accept="text/fragment+html" data-nonce="v2:5d27d888-b607-7721-9c17-563ccca942bc" data-view-component="true">
  
  <div data-show-on-forbidden-error hidden>
    <div class="Box">
  <div class="blankslate-container">
    <div data-view-component="true" class="blankslate blankslate-spacious color-bg-default rounded-2">
      

      <h3 data-view-component="true" class="blankslate-heading">        Uh oh!
</h3>
      <p data-view-component="true">        <p class="color-fg-muted my-2 mb-2 ws-normal">There was an error while loading. <a class="Link--inTextBlock" data-turbo="false" href="" aria-label="Please reload this page">Please reload this page</a>.</p>
</p>

</div>  </div>
</div>  </div>
</include-fragment>

    
</a></li>
      <li data-view-component="true" class="d-inline-flex">
  <a id="insights-tab" href="/catchorg/Catch2/pulse" data-tab-item="i6insights-tab" data-selected-links="repo_graphs repo_contributors dependency_graph dependabot_updates pulse people community /catchorg/Catch2/pulse" data-pjax="#repo-content-pjax-container" data-turbo-frame="repo-content-turbo-frame" data-analytics-event="{&quot;category&quot;:&quot;Underline navbar&quot;,&quot;action&quot;:&quot;Click tab&quot;,&quot;label&quot;:&quot;Insights&quot;,&quot;target&quot;:&quot;UNDERLINE_NAV.TAB&quot;}" data-view-component="true" class="UnderlineNav-item no-wrap js-responsive-underlinenav-item js-selected-navigation-item">
    
              <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-graph UnderlineNav-octicon d-none d-sm-inline">
    <path d="M1.5 1.75V13.5h13.75a.75.75 0 0 1 0 1.5H.75a.75.75 0 0 1-.75-.75V1.75a.75.75 0 0 1 1.5 0Zm14.28 2.53-5.25 5.25a.75.75 0 0 1-1.06 0L7 7.06 4.28 9.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.25-3.25a.75.75 0 0 1 1.06 0L10 7.94l4.72-4.72a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"></path>
</svg>
        <span data-content="Insights">Insights</span>
          <span id="insights-repo-tab-count" data-pjax-replace="" data-turbo-replace="" title="Not available" data-view-component="true" class="Counter"></span>


    
</a></li>
</ul>
    <div style="visibility:hidden;" data-view-component="true" class="UnderlineNav-actions js-responsive-underlinenav-overflow position-absolute pr-3 pr-md-4 pr-lg-5 right-0">      <action-menu data-select-variant="none" data-view-component="true">
  <focus-group direction="vertical" mnemonics retain>
    <button id="action-menu-a80efd60-b31d-4562-9790-589b1086dea5-button" popovertarget="action-menu-a80efd60-b31d-4562-9790-589b1086dea5-overlay" aria-controls="action-menu-a80efd60-b31d-4562-9790-589b1086dea5-list" aria-haspopup="true" aria-labelledby="tooltip-e9429537-2f5d-4133-a24a-5587800d46af" type="button" data-view-component="true" class="Button Button--iconOnly Button--secondary Button--medium UnderlineNav-item">  <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-kebab-horizontal Button-visual">
    <path d="M8 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3ZM1.5 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Zm13 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path>
</svg>
</button><tool-tip id="tooltip-e9429537-2f5d-4133-a24a-5587800d46af" for="action-menu-a80efd60-b31d-4562-9790-589b1086dea5-button" popover="manual" data-direction="s" data-type="label" data-view-component="true" class="sr-only position-absolute">Additional navigation options</tool-tip>


<anchored-position data-target="action-menu.overlay" id="action-menu-a80efd60-b31d-4562-9790-589b1086dea5-overlay" anchor="action-menu-a80efd60-b31d-4562-9790-589b1086dea5-button" align="start" side="outside-bottom" anchor-offset="normal" popover="auto" data-view-component="true">
  <div data-view-component="true" class="Overlay Overlay--size-auto">
    
      <div data-view-component="true" class="Overlay-body Overlay-body--paddingNone">          <action-list>
  <div data-view-component="true">
    <ul aria-labelledby="action-menu-a80efd60-b31d-4562-9790-589b1086dea5-button" id="action-menu-a80efd60-b31d-4562-9790-589b1086dea5-list" role="menu" data-view-component="true" class="ActionListWrap--inset ActionListWrap">
        <li hidden="hidden" data-menu-item="i0code-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-db9fd978-14b6-44ce-b8cb-b738a0363d79" href="/catchorg/Catch2" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-code">
    <path d="m11.28 3.22 4.25 4.25a.75.75 0 0 1 0 1.06l-4.25 4.25a.749.749 0 0 1-1.275-.326.749.749 0 0 1 .215-.734L13.94 8l-3.72-3.72a.749.749 0 0 1 .326-1.275.749.749 0 0 1 .734.215Zm-6.56 0a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042L2.06 8l3.72 3.72a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L.47 8.53a.75.75 0 0 1 0-1.06Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Code
</span>      
</a>
  
</li>
        <li hidden="hidden" data-menu-item="i1issues-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-401106c6-c1e4-495f-8f4d-58878369f693" href="/catchorg/Catch2/issues" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-issue-opened">
    <path d="M8 9.5a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z"></path><path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Issues
</span>      
</a>
  
</li>
        <li hidden="hidden" data-menu-item="i2pull-requests-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-fbf3c1a4-11b5-4631-9c23-2b8164ec5860" href="/catchorg/Catch2/pulls" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-git-pull-request">
    <path d="M1.5 3.25a2.25 2.25 0 1 1 3 2.122v5.256a2.251 2.251 0 1 1-1.5 0V5.372A2.25 2.25 0 0 1 1.5 3.25Zm5.677-.177L9.573.677A.25.25 0 0 1 10 .854V2.5h1A2.5 2.5 0 0 1 13.5 5v5.628a2.251 2.251 0 1 1-1.5 0V5a1 1 0 0 0-1-1h-1v1.646a.25.25 0 0 1-.427.177L7.177 3.427a.25.25 0 0 1 0-.354ZM3.75 2.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm0 9.5a.75.75 0 1 0 0 1.5.75.75 0 0 0 0-1.5Zm8.25.75a.75.75 0 1 0 1.5 0 .75.75 0 0 0-1.5 0Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Pull requests
</span>      
</a>
  
</li>
        <li hidden="hidden" data-menu-item="i3actions-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-fe95aec7-d767-4c57-aec4-bde559f681a3" href="/catchorg/Catch2/actions" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-play">
    <path d="M8 0a8 8 0 1 1 0 16A8 8 0 0 1 8 0ZM1.5 8a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0Zm4.879-2.773 4.264 2.559a.25.25 0 0 1 0 .428l-4.264 2.559A.25.25 0 0 1 6 10.559V5.442a.25.25 0 0 1 .379-.215Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Actions
</span>      
</a>
  
</li>
        <li hidden="hidden" data-menu-item="i4projects-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-c4ab82d9-a0e0-4689-8ae7-2808f4c3baf4" href="/catchorg/Catch2/projects" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-table">
    <path d="M0 1.75C0 .784.784 0 1.75 0h12.5C15.216 0 16 .784 16 1.75v12.5A1.75 1.75 0 0 1 14.25 16H1.75A1.75 1.75 0 0 1 0 14.25ZM6.5 6.5v8h7.75a.25.25 0 0 0 .25-.25V6.5Zm8-1.5V1.75a.25.25 0 0 0-.25-.25H6.5V5Zm-13 1.5v7.75c0 .138.112.25.25.25H5v-8ZM5 5V1.5H1.75a.25.25 0 0 0-.25.25V5Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Projects
</span>      
</a>
  
</li>
        <li hidden="hidden" data-menu-item="i5security-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-1c32ea97-cf18-4355-b396-84c76bb7a7cf" href="/catchorg/Catch2/security" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-shield">
    <path d="M7.467.133a1.748 1.748 0 0 1 1.066 0l5.25 1.68A1.75 1.75 0 0 1 15 3.48V7c0 1.566-.32 3.182-1.303 4.682-.983 1.498-2.585 2.813-5.032 3.855a1.697 1.697 0 0 1-1.33 0c-2.447-1.042-4.049-2.357-5.032-3.855C1.32 10.182 1 8.566 1 7V3.48a1.75 1.75 0 0 1 1.217-1.667Zm.61 1.429a.25.25 0 0 0-.153 0l-5.25 1.68a.25.25 0 0 0-.174.238V7c0 1.358.275 2.666 1.057 3.86.784 1.194 2.121 2.34 4.366 3.297a.196.196 0 0 0 .154 0c2.245-.956 3.582-2.104 4.366-3.298C13.225 9.666 13.5 8.36 13.5 7V3.48a.251.251 0 0 0-.174-.237l-5.25-1.68ZM8.75 4.75v3a.75.75 0 0 1-1.5 0v-3a.75.75 0 0 1 1.5 0ZM9 10.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Security
</span>      
</a>
  
</li>
        <li hidden="hidden" data-menu-item="i6insights-tab" data-targets="action-list.items" role="none" data-view-component="true" class="ActionListItem">
    
    
    <a tabindex="-1" id="item-751f162b-13bf-43bc-a26c-a0fc052481c8" href="/catchorg/Catch2/pulse" role="menuitem" data-view-component="true" class="ActionListContent ActionListContent--visual16">
        <span class="ActionListItem-visual ActionListItem-visual--leading">
          <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-graph">
    <path d="M1.5 1.75V13.5h13.75a.75.75 0 0 1 0 1.5H.75a.75.75 0 0 1-.75-.75V1.75a.75.75 0 0 1 1.5 0Zm14.28 2.53-5.25 5.25a.75.75 0 0 1-1.06 0L7 7.06 4.28 9.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.25-3.25a.75.75 0 0 1 1.06 0L10 7.94l4.72-4.72a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"></path>
</svg>
        </span>
      
        <span data-view-component="true" class="ActionListItem-label">
          Insights
</span>      
</a>
  
</li>
</ul>    
</div></action-list>


</div>
      
</div></anchored-position>  </focus-group>
</action-menu></div>
</nav>

  </div>

  



<turbo-frame id="repo-content-turbo-frame" target="_top" data-turbo-action="advance" class="">
    <div id="repo-content-pjax-container" class="repository-content " >
    



    
      
    








<react-app
  app-name="react-code-view"
  initial-path="/catchorg/Catch2/blob/devel/extras/catch_amalgamated.cpp"
    style="display: block; min-height: calc(100vh - 64px);"
  data-attempted-ssr="false"
  data-ssr="false"
  data-lazy="false"
  data-alternate="false"
  data-data-router-enabled="false"
  data-react-profiling="false"
>
  
  <script type="application/json" data-target="react-app.embeddedData">{"payload":{"allShortcutsEnabled":false,"fileTree":{"extras":{"items":[{"name":"Catch.cmake","path":"extras/Catch.cmake","contentType":"file"},{"name":"CatchAddTests.cmake","path":"extras/CatchAddTests.cmake","contentType":"file"},{"name":"CatchShardTests.cmake","path":"extras/CatchShardTests.cmake","contentType":"file"},{"name":"CatchShardTestsImpl.cmake","path":"extras/CatchShardTestsImpl.cmake","contentType":"file"},{"name":"ParseAndAddCatchTests.cmake","path":"extras/ParseAndAddCatchTests.cmake","contentType":"file"},{"name":"catch_amalgamated.cpp","path":"extras/catch_amalgamated.cpp","contentType":"file"},{"name":"catch_amalgamated.hpp","path":"extras/catch_amalgamated.hpp","contentType":"file"},{"name":"gdbinit","path":"extras/gdbinit","contentType":"file"},{"name":"lldbinit","path":"extras/lldbinit","contentType":"file"}],"totalCount":9},"":{"items":[{"name":".conan","path":".conan","contentType":"directory"},{"name":".github","path":".github","contentType":"directory"},{"name":"CMake","path":"CMake","contentType":"directory"},{"name":"data","path":"data","contentType":"directory"},{"name":"docs","path":"docs","contentType":"directory"},{"name":"examples","path":"examples","contentType":"directory"},{"name":"extras","path":"extras","contentType":"directory"},{"name":"fuzzing","path":"fuzzing","contentType":"directory"},{"name":"src","path":"src","contentType":"directory"},{"name":"tests","path":"tests","contentType":"directory"},{"name":"third_party","path":"third_party","contentType":"directory"},{"name":"tools","path":"tools","contentType":"directory"},{"name":".bazelrc","path":".bazelrc","contentType":"file"},{"name":".clang-format","path":".clang-format","contentType":"file"},{"name":".clang-tidy","path":".clang-tidy","contentType":"file"},{"name":".gitattributes","path":".gitattributes","contentType":"file"},{"name":".gitignore","path":".gitignore","contentType":"file"},{"name":"BUILD.bazel","path":"BUILD.bazel","contentType":"file"},{"name":"CMakeLists.txt","path":"CMakeLists.txt","contentType":"file"},{"name":"CMakePresets.json","path":"CMakePresets.json","contentType":"file"},{"name":"CODE_OF_CONDUCT.md","path":"CODE_OF_CONDUCT.md","contentType":"file"},{"name":"Doxyfile","path":"Doxyfile","contentType":"file"},{"name":"LICENSE.txt","path":"LICENSE.txt","contentType":"file"},{"name":"MAINTAINERS.md","path":"MAINTAINERS.md","contentType":"file"},{"name":"MODULE.bazel","path":"MODULE.bazel","contentType":"file"},{"name":"README.md","path":"README.md","contentType":"file"},{"name":"SECURITY.md","path":"SECURITY.md","contentType":"file"},{"name":"appveyor.yml","path":"appveyor.yml","contentType":"file"},{"name":"codecov.yml","path":"codecov.yml","contentType":"file"},{"name":"conanfile.py","path":"conanfile.py","contentType":"file"},{"name":"mdsnippets.json","path":"mdsnippets.json","contentType":"file"},{"name":"meson.build","path":"meson.build","contentType":"file"},{"name":"meson_options.txt","path":"meson_options.txt","contentType":"file"}],"totalCount":33}},"fileTreeProcessingTime":12.566896,"foldersToFetch":[],"incompleteFileTree":false,"repo":{"id":1062572,"defaultBranch":"devel","name":"Catch2","ownerLogin":"catchorg","currentUserCanPush":false,"isFork":false,"isEmpty":false,"createdAt":"2010-11-08T18:22:56.000Z","ownerAvatar":"https://avatars.githubusercontent.com/u/33321405?v=4","public":true,"private":false,"isOrgOwned":true},"codeLineWrapEnabled":false,"symbolsExpanded":false,"treeExpanded":true,"refInfo":{"name":"devel","listCacheKey":"v0:1752785944.0","canEdit":false,"refType":"branch","currentOid":"db6171a706afb712d5ec13cc7b98e256e760fcb2"},"path":"extras/catch_amalgamated.cpp","currentUser":null,"blob":{"rawLines":["","//              Copyright Catch2 Authors","// Distributed under the Boost Software License, Version 1.0.","//   (See accompanying file LICENSE.txt or copy at","//        https://www.boost.org/LICENSE_1_0.txt)","","// SPDX-License-Identifier: BSL-1.0","","//  Catch v3.8.1","//  Generated: 2025-04-08 12:33:19.863332","//  ----------------------------------------------------------","//  This file is an amalgamation of multiple different files.","//  You probably shouldn't edit it directly.","//  ----------------------------------------------------------","","#include \"catch_amalgamated.hpp\"","","","#ifndef CATCH_WINDOWS_H_PROXY_HPP_INCLUDED","#define CATCH_WINDOWS_H_PROXY_HPP_INCLUDED","","","#if defined(CATCH_PLATFORM_WINDOWS)","","// We might end up with the define made globally through the compiler,","// and we don't want to trigger warnings for this","#if !defined(NOMINMAX)","#  define NOMINMAX","#endif","#if !defined(WIN32_LEAN_AND_MEAN)","#  define WIN32_LEAN_AND_MEAN","#endif","","#include \u003cwindows.h\u003e","","#endif // defined(CATCH_PLATFORM_WINDOWS)","","#endif // CATCH_WINDOWS_H_PROXY_HPP_INCLUDED","","","","","namespace Catch {","    namespace Benchmark {","        namespace Detail {","            ChronometerConcept::~ChronometerConcept() = default;","        } // namespace Detail","    } // namespace Benchmark","} // namespace Catch","","","// Adapted from donated nonius code.","","","#include \u003cvector\u003e","","namespace Catch {","    namespace Benchmark {","        namespace Detail {","            SampleAnalysis analyse(const IConfig \u0026cfg, FDuration* first, FDuration* last) {","                if (!cfg.benchmarkNoAnalysis()) {","                    std::vector\u003cdouble\u003e samples;","                    samples.reserve(static_cast\u003csize_t\u003e(last - first));","                    for (auto current = first; current != last; ++current) {","                        samples.push_back( current-\u003ecount() );","                    }","","                    auto analysis = Catch::Benchmark::Detail::analyse_samples(","                        cfg.benchmarkConfidenceInterval(),","                        cfg.benchmarkResamples(),","                        samples.data(),","                        samples.data() + samples.size() );","                    auto outliers = Catch::Benchmark::Detail::classify_outliers(","                        samples.data(), samples.data() + samples.size() );","","                    auto wrap_estimate = [](Estimate\u003cdouble\u003e e) {","                        return Estimate\u003cFDuration\u003e {","                            FDuration(e.point),","                                FDuration(e.lower_bound),","                                FDuration(e.upper_bound),","                                e.confidence_interval,","                        };","                    };","                    std::vector\u003cFDuration\u003e samples2;","                    samples2.reserve(samples.size());","                    for (auto s : samples) {","                        samples2.push_back( FDuration( s ) );","                    }","","                    return {","                        CATCH_MOVE(samples2),","                        wrap_estimate(analysis.mean),","                        wrap_estimate(analysis.standard_deviation),","                        outliers,","                        analysis.outlier_variance,","                    };","                } else {","                    std::vector\u003cFDuration\u003e samples;","                    samples.reserve(static_cast\u003csize_t\u003e(last - first));","","                    FDuration mean = FDuration(0);","                    int i = 0;","                    for (auto it = first; it \u003c last; ++it, ++i) {","                        samples.push_back(*it);","                        mean += *it;","                    }","                    mean /= i;","","                    return SampleAnalysis{","                        CATCH_MOVE(samples),","                        Estimate\u003cFDuration\u003e{ mean, mean, mean, 0.0 },","                        Estimate\u003cFDuration\u003e{ FDuration( 0 ),","                                             FDuration( 0 ),","                                             FDuration( 0 ),","                                             0.0 },","                        OutlierClassification{},","                        0.0","                    };","                }","            }","        } // namespace Detail","    } // namespace Benchmark","} // namespace Catch","","","","","namespace Catch {","    namespace Benchmark {","        namespace Detail {","            struct do_nothing {","                void operator()() const {}","            };","","            BenchmarkFunction::callable::~callable() = default;","            BenchmarkFunction::BenchmarkFunction():","                f( new model\u003cdo_nothing\u003e{ {} } ){}","        } // namespace Detail","    } // namespace Benchmark","} // namespace Catch","","","","","#include \u003cexception\u003e","","namespace Catch {","    namespace Benchmark {","        namespace Detail {","            struct optimized_away_error : std::exception {","                const char* what() const noexcept override;","            };","","            const char* optimized_away_error::what() const noexcept {","                return \"could not measure benchmark, maybe it was optimized away\";","            }","","            void throw_optimized_away_error() {","                Catch::throw_exception(optimized_away_error{});","            }","","        } // namespace Detail","    } // namespace Benchmark","} // namespace Catch","","","// Adapted from donated nonius code.","","","","#include \u003calgorithm\u003e","#include \u003ccassert\u003e","#include \u003ccmath\u003e","#include \u003ccstddef\u003e","#include \u003cnumeric\u003e","#include \u003crandom\u003e","","","#if defined(CATCH_CONFIG_USE_ASYNC)","#include \u003cfuture\u003e","#endif","","namespace Catch {","    namespace Benchmark {","        namespace Detail {","            namespace {","","                template \u003ctypename URng, typename Estimator\u003e","                static sample","                resample( URng\u0026 rng,","                          unsigned int resamples,","                          double const* first,","                          double const* last,","                          Estimator\u0026 estimator ) {","                    auto n = static_cast\u003csize_t\u003e( last - first );","                    Catch::uniform_integer_distribution\u003csize_t\u003e dist( 0, n - 1 );","","                    sample out;","                    out.reserve( resamples );","                    std::vector\u003cdouble\u003e resampled;","                    resampled.reserve( n );","                    for ( size_t i = 0; i \u003c resamples; ++i ) {","                        resampled.clear();","                        for ( size_t s = 0; s \u003c n; ++s ) {","                            resampled.push_back( first[dist( rng )] );","                        }","                        const auto estimate =","                            estimator( resampled.data(), resampled.data() + resampled.size() );","                        out.push_back( estimate );","                    }","                    std::sort( out.begin(), out.end() );","                    return out;","                }","","                static double outlier_variance( Estimate\u003cdouble\u003e mean,","                                                Estimate\u003cdouble\u003e stddev,","                                                int n ) {","                    double sb = stddev.point;","                    double mn = mean.point / n;","                    double mg_min = mn / 2.;","                    double sg = (std::min)( mg_min / 4., sb / std::sqrt( n ) );","                    double sg2 = sg * sg;","                    double sb2 = sb * sb;","","                    auto c_max = [n, mn, sb2, sg2]( double x ) -\u003e double {","                        double k = mn - x;","                        double d = k * k;","                        double nd = n * d;","                        double k0 = -n * nd;","                        double k1 = sb2 - n * sg2 + nd;","                        double det = k1 * k1 - 4 * sg2 * k0;","                        return static_cast\u003cint\u003e( -2. * k0 /","                                                 ( k1 + std::sqrt( det ) ) );","                    };","","                    auto var_out = [n, sb2, sg2]( double c ) {","                        double nc = n - c;","                        return ( nc / n ) * ( sb2 - nc * sg2 );","                    };","","                    return (std::min)( var_out( 1 ),","                                       var_out(","                                           (std::min)( c_max( 0. ),","                                                       c_max( mg_min ) ) ) ) /","                           sb2;","                }","","                static double erf_inv( double x ) {","                    // Code accompanying the article \"Approximating the erfinv","                    // function\" in GPU Computing Gems, Volume 2","                    double w, p;","","                    w = -log( ( 1.0 - x ) * ( 1.0 + x ) );","","                    if ( w \u003c 6.250000 ) {","                        w = w - 3.125000;","                        p = -3.6444120640178196996e-21;","                        p = -1.685059138182016589e-19 + p * w;","                        p = 1.2858480715256400167e-18 + p * w;","                        p = 1.115787767802518096e-17 + p * w;","                        p = -1.333171662854620906e-16 + p * w;","                        p = 2.0972767875968561637e-17 + p * w;","                        p = 6.6376381343583238325e-15 + p * w;","                        p = -4.0545662729752068639e-14 + p * w;","                        p = -8.1519341976054721522e-14 + p * w;","                        p = 2.6335093153082322977e-12 + p * w;","                        p = -1.2975133253453532498e-11 + p * w;","                        p = -5.4154120542946279317e-11 + p * w;","                        p = 1.051212273321532285e-09 + p * w;","                        p = -4.1126339803469836976e-09 + p * w;","                        p = -2.9070369957882005086e-08 + p * w;","                        p = 4.2347877827932403518e-07 + p * w;","                        p = -1.3654692000834678645e-06 + p * w;","                        p = -1.3882523362786468719e-05 + p * w;","                        p = 0.0001867342080340571352 + p * w;","                        p = -0.00074070253416626697512 + p * w;","                        p = -0.0060336708714301490533 + p * w;","                        p = 0.24015818242558961693 + p * w;","                        p = 1.6536545626831027356 + p * w;","                    } else if ( w \u003c 16.000000 ) {","                        w = sqrt( w ) - 3.250000;","                        p = 2.2137376921775787049e-09;","                        p = 9.0756561938885390979e-08 + p * w;","                        p = -2.7517406297064545428e-07 + p * w;","                        p = 1.8239629214389227755e-08 + p * w;","                        p = 1.5027403968909827627e-06 + p * w;","                        p = -4.013867526981545969e-06 + p * w;","                        p = 2.9234449089955446044e-06 + p * w;","                        p = 1.2475304481671778723e-05 + p * w;","                        p = -4.7318229009055733981e-05 + p * w;","                        p = 6.8284851459573175448e-05 + p * w;","                        p = 2.4031110387097893999e-05 + p * w;","                        p = -0.0003550375203628474796 + p * w;","                        p = 0.00095328937973738049703 + p * w;","                        p = -0.0016882755560235047313 + p * w;","                        p = 0.0024914420961078508066 + p * w;","                        p = -0.0037512085075692412107 + p * w;","                        p = 0.005370914553590063617 + p * w;","                        p = 1.0052589676941592334 + p * w;","                        p = 3.0838856104922207635 + p * w;","                    } else {","                        w = sqrt( w ) - 5.000000;","                        p = -2.7109920616438573243e-11;","                        p = -2.5556418169965252055e-10 + p * w;","                        p = 1.5076572693500548083e-09 + p * w;","                        p = -3.7894654401267369937e-09 + p * w;","                        p = 7.6157012080783393804e-09 + p * w;","                        p = -1.4960026627149240478e-08 + p * w;","                        p = 2.9147953450901080826e-08 + p * w;","                        p = -6.7711997758452339498e-08 + p * w;","                        p = 2.2900482228026654717e-07 + p * w;","                        p = -9.9298272942317002539e-07 + p * w;","                        p = 4.5260625972231537039e-06 + p * w;","                        p = -1.9681778105531670567e-05 + p * w;","                        p = 7.5995277030017761139e-05 + p * w;","                        p = -0.00021503011930044477347 + p * w;","                        p = -0.00013871931833623122026 + p * w;","                        p = 1.0103004648645343977 + p * w;","                        p = 4.8499064014085844221 + p * w;","                    }","                    return p * x;","                }","","                static double","                standard_deviation( double const* first, double const* last ) {","                    auto m = Catch::Benchmark::Detail::mean( first, last );","                    double variance =","                        std::accumulate( first,","                                         last,","                                         0.,","                                         [m]( double a, double b ) {","                                             double diff = b - m;","                                             return a + diff * diff;","                                         } ) /","                        static_cast\u003cdouble\u003e( last - first );","                    return std::sqrt( variance );","                }","","                static sample jackknife( double ( *estimator )( double const*,","                                                                double const* ),","                                         double* first,","                                         double* last ) {","                    const auto second = first + 1;","                    sample results;","                    results.reserve( static_cast\u003csize_t\u003e( last - first ) );","","                    for ( auto it = first; it != last; ++it ) {","                        std::iter_swap( it, first );","                        results.push_back( estimator( second, last ) );","                    }","","                    return results;","                }","","","            } // namespace","        }     // namespace Detail","    }         // namespace Benchmark","} // namespace Catch","","namespace Catch {","    namespace Benchmark {","        namespace Detail {","","            double weighted_average_quantile( int k,","                                              int q,","                                              double* first,","                                              double* last ) {","                auto count = last - first;","                double idx = static_cast\u003cdouble\u003e((count - 1) * k) / static_cast\u003cdouble\u003e(q);","                int j = static_cast\u003cint\u003e(idx);","                double g = idx - j;","                std::nth_element(first, first + j, last);","                auto xj = first[j];","                if ( Catch::Detail::directCompare( g, 0 ) ) {","                    return xj;","                }","","                auto xj1 = *std::min_element(first + (j + 1), last);","                return xj + g * (xj1 - xj);","            }","","            OutlierClassification","            classify_outliers( double const* first, double const* last ) {","                std::vector\u003cdouble\u003e copy( first, last );","","                auto q1 = weighted_average_quantile( 1, 4, copy.data(), copy.data() + copy.size() );","                auto q3 = weighted_average_quantile( 3, 4, copy.data(), copy.data() + copy.size() );","                auto iqr = q3 - q1;","                auto los = q1 - ( iqr * 3. );","                auto lom = q1 - ( iqr * 1.5 );","                auto him = q3 + ( iqr * 1.5 );","                auto his = q3 + ( iqr * 3. );","","                OutlierClassification o;","                for ( ; first != last; ++first ) {","                    const double t = *first;","                    if ( t \u003c los ) {","                        ++o.low_severe;","                    } else if ( t \u003c lom ) {","                        ++o.low_mild;","                    } else if ( t \u003e his ) {","                        ++o.high_severe;","                    } else if ( t \u003e him ) {","                        ++o.high_mild;","                    }","                    ++o.samples_seen;","                }","                return o;","            }","","            double mean( double const* first, double const* last ) {","                auto count = last - first;","                double sum = 0.;","                while (first != last) {","                    sum += *first;","                    ++first;","                }","                return sum / static_cast\u003cdouble\u003e(count);","            }","","            double normal_cdf( double x ) {","                return std::erfc( -x / std::sqrt( 2.0 ) ) / 2.0;","            }","","            double erfc_inv(double x) {","                return erf_inv(1.0 - x);","            }","","            double normal_quantile(double p) {","                static const double ROOT_TWO = std::sqrt(2.0);","","                double result = 0.0;","                assert(p \u003e= 0 \u0026\u0026 p \u003c= 1);","                if (p \u003c 0 || p \u003e 1) {","                    return result;","                }","","                result = -erfc_inv(2.0 * p);","                // result *= normal distribution standard deviation (1.0) * sqrt(2)","                result *= /*sd * */ ROOT_TWO;","                // result += normal disttribution mean (0)","                return result;","            }","","            Estimate\u003cdouble\u003e","            bootstrap( double confidence_level,","                       double* first,","                       double* last,","                       sample const\u0026 resample,","                       double ( *estimator )( double const*, double const* ) ) {","                auto n_samples = last - first;","","                double point = estimator( first, last );","                // Degenerate case with a single sample","                if ( n_samples == 1 )","                    return { point, point, point, confidence_level };","","                sample jack = jackknife( estimator, first, last );","                double jack_mean =","                    mean( jack.data(), jack.data() + jack.size() );","                double sum_squares = 0, sum_cubes = 0;","                for ( double x : jack ) {","                    auto difference = jack_mean - x;","                    auto square = difference * difference;","                    auto cube = square * difference;","                    sum_squares += square;","                    sum_cubes += cube;","                }","","                double accel = sum_cubes / ( 6 * std::pow( sum_squares, 1.5 ) );","                long n = static_cast\u003clong\u003e( resample.size() );","                double prob_n = static_cast\u003cdouble\u003e(","                    std::count_if( resample.begin(),","                                   resample.end(),","                                   [point]( double x ) { return x \u003c point; } )) /","                    static_cast\u003cdouble\u003e( n );","                // degenerate case with uniform samples","                if ( Catch::Detail::directCompare( prob_n, 0. ) ) {","                    return { point, point, point, confidence_level };","                }","","                double bias = normal_quantile( prob_n );","                double z1 = normal_quantile( ( 1. - confidence_level ) / 2. );","","                auto cumn = [n]( double x ) -\u003e long {","                    return std::lround( normal_cdf( x ) *","                                        static_cast\u003cdouble\u003e( n ) );","                };","                auto a = [bias, accel]( double b ) {","                    return bias + b / ( 1. - accel * b );","                };","                double b1 = bias + z1;","                double b2 = bias - z1;","                double a1 = a( b1 );","                double a2 = a( b2 );","                auto lo = static_cast\u003csize_t\u003e( (std::max)( cumn( a1 ), 0l ) );","                auto hi =","                    static_cast\u003csize_t\u003e( (std::min)( cumn( a2 ), n - 1 ) );","","                return { point, resample[lo], resample[hi], confidence_level };","            }","","            bootstrap_analysis analyse_samples(double confidence_level,","                                               unsigned int n_resamples,","                                               double* first,","                                               double* last) {","                auto mean = \u0026Detail::mean;","                auto stddev = \u0026standard_deviation;","","#if defined(CATCH_CONFIG_USE_ASYNC)","                auto Estimate = [=](double(*f)(double const*, double const*)) {","                    std::random_device rd;","                    auto seed = rd();","                    return std::async(std::launch::async, [=] {","                        SimplePcg32 rng( seed );","                        auto resampled = resample(rng, n_resamples, first, last, f);","                        return bootstrap(confidence_level, first, last, resampled, f);","                    });","                };","","                auto mean_future = Estimate(mean);","                auto stddev_future = Estimate(stddev);","","                auto mean_estimate = mean_future.get();","                auto stddev_estimate = stddev_future.get();","#else","                auto Estimate = [=](double(*f)(double const* , double const*)) {","                    std::random_device rd;","                    auto seed = rd();","                    SimplePcg32 rng( seed );","                    auto resampled = resample(rng, n_resamples, first, last, f);","                    return bootstrap(confidence_level, first, last, resampled, f);","                };","","                auto mean_estimate = Estimate(mean);","                auto stddev_estimate = Estimate(stddev);","#endif // CATCH_USE_ASYNC","","                auto n = static_cast\u003cint\u003e(last - first); // seriously, one can't use integral types without hell in C++","                double outlier_variance = Detail::outlier_variance(mean_estimate, stddev_estimate, n);","","                return { mean_estimate, stddev_estimate, outlier_variance };","            }","        } // namespace Detail","    } // namespace Benchmark","} // namespace Catch","","","","#include \u003ccmath\u003e","#include \u003climits\u003e","","namespace {","","// Performs equivalent check of std::fabs(lhs - rhs) \u003c= margin","// But without the subtraction to allow for INFINITY in comparison","bool marginComparison(double lhs, double rhs, double margin) {","    return (lhs + margin \u003e= rhs) \u0026\u0026 (rhs + margin \u003e= lhs);","}","","}","","namespace Catch {","","    Approx::Approx ( double value )","    :   m_epsilon( static_cast\u003cdouble\u003e(std::numeric_limits\u003cfloat\u003e::epsilon())*100. ),","        m_margin( 0.0 ),","        m_scale( 0.0 ),","        m_value( value )","    {}","","    Approx Approx::custom() {","        return Approx( 0 );","    }","","    Approx Approx::operator-() const {","        auto temp(*this);","        temp.m_value = -temp.m_value;","        return temp;","    }","","","    std::string Approx::toString() const {","        ReusableStringStream rss;","        rss \u003c\u003c \"Approx( \" \u003c\u003c ::Catch::Detail::stringify( m_value ) \u003c\u003c \" )\";","        return rss.str();","    }","","    bool Approx::equalityComparisonImpl(const double other) const {","        // First try with fixed margin, then compute margin based on epsilon, scale and Approx's value","        // Thanks to Richard Harris for his help refining the scaled margin value","        return marginComparison(m_value, other, m_margin)","            || marginComparison(m_value, other, m_epsilon * (m_scale + std::fabs(std::isinf(m_value)? 0 : m_value)));","    }","","    void Approx::setMargin(double newMargin) {","        CATCH_ENFORCE(newMargin \u003e= 0,","            \"Invalid Approx::margin: \" \u003c\u003c newMargin \u003c\u003c '.'","            \u003c\u003c \" Approx::Margin has to be non-negative.\");","        m_margin = newMargin;","    }","","    void Approx::setEpsilon(double newEpsilon) {","        CATCH_ENFORCE(newEpsilon \u003e= 0 \u0026\u0026 newEpsilon \u003c= 1.0,","            \"Invalid Approx::epsilon: \" \u003c\u003c newEpsilon \u003c\u003c '.'","            \u003c\u003c \" Approx::epsilon has to be in [0, 1]\");","        m_epsilon = newEpsilon;","    }","","namespace literals {","    Approx operator \"\"_a(long double val) {","        return Approx(val);","    }","    Approx operator \"\"_a(unsigned long long val) {","        return Approx(val);","    }","} // end namespace literals","","std::string StringMaker\u003cCatch::Approx\u003e::convert(Catch::Approx const\u0026 value) {","    return value.toString();","}","","} // end namespace Catch","","","","namespace Catch {","","    AssertionResultData::AssertionResultData(ResultWas::OfType _resultType, LazyExpression const\u0026 _lazyExpression):","        lazyExpression(_lazyExpression),","        resultType(_resultType) {}","","    std::string AssertionResultData::reconstructExpression() const {","","        if( reconstructedExpression.empty() ) {","            if( lazyExpression ) {","                ReusableStringStream rss;","                rss \u003c\u003c lazyExpression;","                reconstructedExpression = rss.str();","            }","        }","        return reconstructedExpression;","    }","","    AssertionResult::AssertionResult( AssertionInfo const\u0026 info, AssertionResultData\u0026\u0026 data )","    :   m_info( info ),","        m_resultData( CATCH_MOVE(data) )","    {}","","    // Result was a success","    bool AssertionResult::succeeded() const {","        return Catch::isOk( m_resultData.resultType );","    }","","    // Result was a success, or failure is suppressed","    bool AssertionResult::isOk() const {","        return Catch::isOk( m_resultData.resultType ) || shouldSuppressFailure( m_info.resultDisposition );","    }","","    ResultWas::OfType AssertionResult::getResultType() const {","        return m_resultData.resultType;","    }","","    bool AssertionResult::hasExpression() const {","        return !m_info.capturedExpression.empty();","    }","","    bool AssertionResult::hasMessage() const {","        return !m_resultData.message.empty();","    }","","    std::string AssertionResult::getExpression() const {","        // Possibly overallocating by 3 characters should be basically free","        std::string expr; expr.reserve(m_info.capturedExpression.size() + 3);","        if (isFalseTest(m_info.resultDisposition)) {","            expr += \"!(\";","        }","        expr += m_info.capturedExpression;","        if (isFalseTest(m_info.resultDisposition)) {","            expr += ')';","        }","        return expr;","    }","","    std::string AssertionResult::getExpressionInMacro() const {","        if ( m_info.macroName.empty() ) {","            return static_cast\u003cstd::string\u003e( m_info.capturedExpression );","        }","        std::string expr;","        expr.reserve( m_info.macroName.size() + m_info.capturedExpression.size() + 4 );","        expr += m_info.macroName;","        expr += \"( \";","        expr += m_info.capturedExpression;","        expr += \" )\";","        return expr;","    }","","    bool AssertionResult::hasExpandedExpression() const {","        return hasExpression() \u0026\u0026 getExpandedExpression() != getExpression();","    }","","    std::string AssertionResult::getExpandedExpression() const {","        std::string expr = m_resultData.reconstructExpression();","        return expr.empty()","                ? getExpression()","                : expr;","    }","","    StringRef AssertionResult::getMessage() const {","        return m_resultData.message;","    }","    SourceLineInfo AssertionResult::getSourceInfo() const {","        return m_info.lineInfo;","    }","","    StringRef AssertionResult::getTestMacroName() const {","        return m_info.macroName;","    }","","} // end namespace Catch","","","","#include \u003cfstream\u003e","","namespace Catch {","","    namespace {","        static bool enableBazelEnvSupport() {","#if defined( CATCH_CONFIG_BAZEL_SUPPORT )","            return true;","#else","            return Detail::getEnv( \"BAZEL_TEST\" ) != nullptr;","#endif","        }","","        struct bazelShardingOptions {","            unsigned int shardIndex, shardCount;","            std::string shardFilePath;","        };","","        static Optional\u003cbazelShardingOptions\u003e readBazelShardingOptions() {","            const auto bazelShardIndex = Detail::getEnv( \"TEST_SHARD_INDEX\" );","            const auto bazelShardTotal = Detail::getEnv( \"TEST_TOTAL_SHARDS\" );","            const auto bazelShardInfoFile = Detail::getEnv( \"TEST_SHARD_STATUS_FILE\" );","","","            const bool has_all =","                bazelShardIndex \u0026\u0026 bazelShardTotal \u0026\u0026 bazelShardInfoFile;","            if ( !has_all ) {","                // We provide nice warning message if the input is","                // misconfigured.","                auto warn = []( const char* env_var ) {","                    Catch::cerr()","                        \u003c\u003c \"Warning: Bazel shard configuration is missing '\"","                        \u003c\u003c env_var \u003c\u003c \"'. Shard configuration is skipped.\\n\";","                };","                if ( !bazelShardIndex ) {","                    warn( \"TEST_SHARD_INDEX\" );","                }","                if ( !bazelShardTotal ) {","                    warn( \"TEST_TOTAL_SHARDS\" );","                }","                if ( !bazelShardInfoFile ) {","                    warn( \"TEST_SHARD_STATUS_FILE\" );","                }","                return {};","            }","","            auto shardIndex = parseUInt( bazelShardIndex );","            if ( !shardIndex ) {","                Catch::cerr()","                    \u003c\u003c \"Warning: could not parse 'TEST_SHARD_INDEX' ('\" \u003c\u003c bazelShardIndex","                    \u003c\u003c \"') as unsigned int.\\n\";","                return {};","            }","            auto shardTotal = parseUInt( bazelShardTotal );","            if ( !shardTotal ) {","                Catch::cerr()","                    \u003c\u003c \"Warning: could not parse 'TEST_TOTAL_SHARD' ('\"","                    \u003c\u003c bazelShardTotal \u003c\u003c \"') as unsigned int.\\n\";","                return {};","            }","","            return bazelShardingOptions{","                *shardIndex, *shardTotal, bazelShardInfoFile };","","        }","    } // end namespace","","","    bool operator==( ProcessedReporterSpec const\u0026 lhs,","                     ProcessedReporterSpec const\u0026 rhs ) {","        return lhs.name == rhs.name \u0026\u0026","               lhs.outputFilename == rhs.outputFilename \u0026\u0026","               lhs.colourMode == rhs.colourMode \u0026\u0026","               lhs.customOptions == rhs.customOptions;","    }","","    Config::Config( ConfigData const\u0026 data ):","        m_data( data ) {","        // We need to trim filter specs to avoid trouble with superfluous","        // whitespace (esp. important for bdd macros, as those are manually","        // aligned with whitespace).","","        for (auto\u0026 elem : m_data.testsOrTags) {","            elem = trim(elem);","        }","        for (auto\u0026 elem : m_data.sectionsToRun) {","            elem = trim(elem);","        }","","        // Insert the default reporter if user hasn't asked for a specific one","        if ( m_data.reporterSpecifications.empty() ) {","#if defined( CATCH_CONFIG_DEFAULT_REPORTER )","            const auto default_spec = CATCH_CONFIG_DEFAULT_REPORTER;","#else","            const auto default_spec = \"console\";","#endif","            auto parsed = parseReporterSpec(default_spec);","            CATCH_ENFORCE( parsed,","                           \"Cannot parse the provided default reporter spec: '\"","                               \u003c\u003c default_spec \u003c\u003c '\\'' );","            m_data.reporterSpecifications.push_back( std::move( *parsed ) );","        }","","        if ( enableBazelEnvSupport() ) {","            readBazelEnvVars();","        }","","        // Bazel support can modify the test specs, so parsing has to happen","        // after reading Bazel env vars.","        TestSpecParser parser( ITagAliasRegistry::get() );","        if ( !m_data.testsOrTags.empty() ) {","            m_hasTestFilters = true;","            for ( auto const\u0026 testOrTags : m_data.testsOrTags ) {","                parser.parse( testOrTags );","            }","        }","        m_testSpec = parser.testSpec();","","","        // We now fixup the reporter specs to handle default output spec,","        // default colour spec, etc","        bool defaultOutputUsed = false;","        for ( auto const\u0026 reporterSpec : m_data.reporterSpecifications ) {","            // We do the default-output check separately, while always","            // using the default output below to make the code simpler","            // and avoid superfluous copies.","            if ( reporterSpec.outputFile().none() ) {","                CATCH_ENFORCE( !defaultOutputUsed,","                               \"Internal error: cannot use default output for \"","                               \"multiple reporters\" );","                defaultOutputUsed = true;","            }","","            m_processedReporterSpecs.push_back( ProcessedReporterSpec{","                reporterSpec.name(),","                reporterSpec.outputFile() ? *reporterSpec.outputFile()","                                          : data.defaultOutputFilename,","                reporterSpec.colourMode().valueOr( data.defaultColourMode ),","                reporterSpec.customOptions() } );","        }","    }","","    Config::~Config() = default;","","","    bool Config::listTests() const          { return m_data.listTests; }","    bool Config::listTags() const           { return m_data.listTags; }","    bool Config::listReporters() const      { return m_data.listReporters; }","    bool Config::listListeners() const      { return m_data.listListeners; }","","    std::vector\u003cstd::string\u003e const\u0026 Config::getTestsOrTags() const { return m_data.testsOrTags; }","    std::vector\u003cstd::string\u003e const\u0026 Config::getSectionsToRun() const { return m_data.sectionsToRun; }","","    std::vector\u003cReporterSpec\u003e const\u0026 Config::getReporterSpecs() const {","        return m_data.reporterSpecifications;","    }","","    std::vector\u003cProcessedReporterSpec\u003e const\u0026","    Config::getProcessedReporterSpecs() const {","        return m_processedReporterSpecs;","    }","","    TestSpec const\u0026 Config::testSpec() const { return m_testSpec; }","    bool Config::hasTestFilters() const { return m_hasTestFilters; }","","    bool Config::showHelp() const { return m_data.showHelp; }","","    // IConfig interface","    bool Config::allowThrows() const                   { return !m_data.noThrow; }","    StringRef Config::name() const { return m_data.name.empty() ? m_data.processName : m_data.name; }","    bool Config::includeSuccessfulResults() const      { return m_data.showSuccessfulTests; }","    bool Config::warnAboutMissingAssertions() const {","        return !!( m_data.warnings \u0026 WarnAbout::NoAssertions );","    }","    bool Config::warnAboutUnmatchedTestSpecs() const {","        return !!( m_data.warnings \u0026 WarnAbout::UnmatchedTestSpec );","    }","    bool Config::zeroTestsCountAsSuccess() const       { return m_data.allowZeroTests; }","    ShowDurations Config::showDurations() const        { return m_data.showDurations; }","    double Config::minDuration() const                 { return m_data.minDuration; }","    TestRunOrder Config::runOrder() const              { return m_data.runOrder; }","    uint32_t Config::rngSeed() const                   { return m_data.rngSeed; }","    unsigned int Config::shardCount() const            { return m_data.shardCount; }","    unsigned int Config::shardIndex() const            { return m_data.shardIndex; }","    ColourMode Config::defaultColourMode() const       { return m_data.defaultColourMode; }","    bool Config::shouldDebugBreak() const              { return m_data.shouldDebugBreak; }","    int Config::abortAfter() const                     { return m_data.abortAfter; }","    bool Config::showInvisibles() const                { return m_data.showInvisibles; }","    Verbosity Config::verbosity() const                { return m_data.verbosity; }","","    bool Config::skipBenchmarks() const                           { return m_data.skipBenchmarks; }","    bool Config::benchmarkNoAnalysis() const                      { return m_data.benchmarkNoAnalysis; }","    unsigned int Config::benchmarkSamples() const                 { return m_data.benchmarkSamples; }","    double Config::benchmarkConfidenceInterval() const            { return m_data.benchmarkConfidenceInterval; }","    unsigned int Config::benchmarkResamples() const               { return m_data.benchmarkResamples; }","    std::chrono::milliseconds Config::benchmarkWarmupTime() const { return std::chrono::milliseconds(m_data.benchmarkWarmupTime); }","","    void Config::readBazelEnvVars() {","        // Register a JUnit reporter for Bazel. Bazel sets an environment","        // variable with the path to XML output. If this file is written to","        // during test, Bazel will not generate a default XML output.","        // This allows the XML output file to contain higher level of detail","        // than what is possible otherwise.","        const auto bazelOutputFile = Detail::getEnv( \"XML_OUTPUT_FILE\" );","","        if ( bazelOutputFile ) {","            m_data.reporterSpecifications.push_back(","                { \"junit\", std::string( bazelOutputFile ), {}, {} } );","        }","","        const auto bazelTestSpec = Detail::getEnv( \"TESTBRIDGE_TEST_ONLY\" );","        if ( bazelTestSpec ) {","            // Presumably the test spec from environment should overwrite","            // the one we got from CLI (if we got any)","            m_data.testsOrTags.clear();","            m_data.testsOrTags.push_back( bazelTestSpec );","        }","","        const auto bazelShardOptions = readBazelShardingOptions();","        if ( bazelShardOptions ) {","            std::ofstream f( bazelShardOptions-\u003eshardFilePath,","                             std::ios_base::out | std::ios_base::trunc );","            if ( f.is_open() ) {","                f \u003c\u003c \"\";","                m_data.shardIndex = bazelShardOptions-\u003eshardIndex;","                m_data.shardCount = bazelShardOptions-\u003eshardCount;","            }","        }","    }","","} // end namespace Catch","","","","","","namespace Catch {","    std::uint32_t getSeed() {","        return getCurrentContext().getConfig()-\u003erngSeed();","    }","}","","","","#include \u003ccassert\u003e","#include \u003cstack\u003e","","namespace Catch {","","    ////////////////////////////////////////////////////////////////////////////","","","    ScopedMessage::ScopedMessage( MessageBuilder\u0026\u0026 builder ):","        m_info( CATCH_MOVE(builder.m_info) ) {","        m_info.message = builder.m_stream.str();","        getResultCapture().pushScopedMessage( m_info );","    }","","    ScopedMessage::ScopedMessage( ScopedMessage\u0026\u0026 old ) noexcept:","        m_info( CATCH_MOVE( old.m_info ) ) {","        old.m_moved = true;","    }","","    ScopedMessage::~ScopedMessage() {","        if ( !uncaught_exceptions() \u0026\u0026 !m_moved ){","            getResultCapture().popScopedMessage(m_info);","        }","    }","","","    Capturer::Capturer( StringRef macroName,","                        SourceLineInfo const\u0026 lineInfo,","                        ResultWas::OfType resultType,","                        StringRef names ):","        m_resultCapture( getResultCapture() ) {","        auto trimmed = [\u0026] (size_t start, size_t end) {","            while (names[start] == ',' || isspace(static_cast\u003cunsigned char\u003e(names[start]))) {","                ++start;","            }","            while (names[end] == ',' || isspace(static_cast\u003cunsigned char\u003e(names[end]))) {","                --end;","            }","            return names.substr(start, end - start + 1);","        };","        auto skipq = [\u0026] (size_t start, char quote) {","            for (auto i = start + 1; i \u003c names.size() ; ++i) {","                if (names[i] == quote)","                    return i;","                if (names[i] == '\\\\')","                    ++i;","            }","            CATCH_INTERNAL_ERROR(\"CAPTURE parsing encountered unmatched quote\");","        };","","        size_t start = 0;","        std::stack\u003cchar\u003e openings;","        for (size_t pos = 0; pos \u003c names.size(); ++pos) {","            char c = names[pos];","            switch (c) {","            case '[':","            case '{':","            case '(':","            // It is basically impossible to disambiguate between","            // comparison and start of template args in this context","//            case '\u003c':","                openings.push(c);","                break;","            case ']':","            case '}':","            case ')':","//           case '\u003e':","                openings.pop();","                break;","            case '\"':","            case '\\'':","                pos = skipq(pos, c);","                break;","            case ',':","                if (start != pos \u0026\u0026 openings.empty()) {","                    m_messages.emplace_back(macroName, lineInfo, resultType);","                    m_messages.back().message = static_cast\u003cstd::string\u003e(trimmed(start, pos));","                    m_messages.back().message += \" := \";","                    start = pos;","                }","                break;","            default:; // noop","            }","        }","        assert(openings.empty() \u0026\u0026 \"Mismatched openings\");","        m_messages.emplace_back(macroName, lineInfo, resultType);","        m_messages.back().message = static_cast\u003cstd::string\u003e(trimmed(start, names.size() - 1));","        m_messages.back().message += \" := \";","    }","    Capturer::~Capturer() {","        if ( !uncaught_exceptions() ){","            assert( m_captured == m_messages.size() );","            for( size_t i = 0; i \u003c m_captured; ++i  )","                m_resultCapture.popScopedMessage( m_messages[i] );","        }","    }","","    void Capturer::captureValue( size_t index, std::string const\u0026 value ) {","        assert( index \u003c m_messages.size() );","        m_messages[index].message += value;","        m_resultCapture.pushScopedMessage( m_messages[index] );","        m_captured++;","    }","","} // end namespace Catch","","","","","#include \u003cexception\u003e","","namespace Catch {","","    namespace {","","        class RegistryHub : public IRegistryHub,","                            public IMutableRegistryHub,","                            private Detail::NonCopyable {","","        public: // IRegistryHub","            RegistryHub() = default;","            ReporterRegistry const\u0026 getReporterRegistry() const override {","                return m_reporterRegistry;","            }","            ITestCaseRegistry const\u0026 getTestCaseRegistry() const override {","                return m_testCaseRegistry;","            }","            IExceptionTranslatorRegistry const\u0026 getExceptionTranslatorRegistry() const override {","                return m_exceptionTranslatorRegistry;","            }","            ITagAliasRegistry const\u0026 getTagAliasRegistry() const override {","                return m_tagAliasRegistry;","            }","            StartupExceptionRegistry const\u0026 getStartupExceptionRegistry() const override {","                return m_exceptionRegistry;","            }","","        public: // IMutableRegistryHub","            void registerReporter( std::string const\u0026 name, IReporterFactoryPtr factory ) override {","                m_reporterRegistry.registerReporter( name, CATCH_MOVE(factory) );","            }","            void registerListener( Detail::unique_ptr\u003cEventListenerFactory\u003e factory ) override {","                m_reporterRegistry.registerListener( CATCH_MOVE(factory) );","            }","            void registerTest( Detail::unique_ptr\u003cTestCaseInfo\u003e\u0026\u0026 testInfo, Detail::unique_ptr\u003cITestInvoker\u003e\u0026\u0026 invoker ) override {","                m_testCaseRegistry.registerTest( CATCH_MOVE(testInfo), CATCH_MOVE(invoker) );","            }","            void registerTranslator( Detail::unique_ptr\u003cIExceptionTranslator\u003e\u0026\u0026 translator ) override {","                m_exceptionTranslatorRegistry.registerTranslator( CATCH_MOVE(translator) );","            }","            void registerTagAlias( std::string const\u0026 alias, std::string const\u0026 tag, SourceLineInfo const\u0026 lineInfo ) override {","                m_tagAliasRegistry.add( alias, tag, lineInfo );","            }","            void registerStartupException() noexcept override {","#if !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)","                m_exceptionRegistry.add(std::current_exception());","#else","                CATCH_INTERNAL_ERROR(\"Attempted to register active exception under CATCH_CONFIG_DISABLE_EXCEPTIONS!\");","#endif","            }","            IMutableEnumValuesRegistry\u0026 getMutableEnumValuesRegistry() override {","                return m_enumValuesRegistry;","            }","","        private:","            TestRegistry m_testCaseRegistry;","            ReporterRegistry m_reporterRegistry;","            ExceptionTranslatorRegistry m_exceptionTranslatorRegistry;","            TagAliasRegistry m_tagAliasRegistry;","            StartupExceptionRegistry m_exceptionRegistry;","            Detail::EnumValuesRegistry m_enumValuesRegistry;","        };","    }","","    using RegistryHubSingleton = Singleton\u003cRegistryHub, IRegistryHub, IMutableRegistryHub\u003e;","","    IRegistryHub const\u0026 getRegistryHub() {","        return RegistryHubSingleton::get();","    }","    IMutableRegistryHub\u0026 getMutableRegistryHub() {","        return RegistryHubSingleton::getMutable();","    }","    void cleanUp() {","        cleanupSingletons();","        cleanUpContext();","    }","    std::string translateActiveException() {","        return getRegistryHub().getExceptionTranslatorRegistry().translateActiveException();","    }","","","} // end namespace Catch","","","","#include \u003calgorithm\u003e","#include \u003ccassert\u003e","#include \u003cexception\u003e","#include \u003ciomanip\u003e","#include \u003cset\u003e","","namespace Catch {","","    namespace {","        static constexpr int TestFailureExitCode = 42;","        static constexpr int UnspecifiedErrorExitCode = 1;","        static constexpr int AllTestsSkippedExitCode = 4;","        static constexpr int NoTestsRunExitCode = 2;","        static constexpr int UnmatchedTestSpecExitCode = 3;","        static constexpr int InvalidTestSpecExitCode = 5;","","","        IEventListenerPtr createReporter(std::string const\u0026 reporterName, ReporterConfig\u0026\u0026 config) {","            auto reporter = Catch::getRegistryHub().getReporterRegistry().create(reporterName, CATCH_MOVE(config));","            CATCH_ENFORCE(reporter, \"No reporter registered with name: '\" \u003c\u003c reporterName \u003c\u003c '\\'');","","            return reporter;","        }","","        IEventListenerPtr prepareReporters(Config const* config) {","            if (Catch::getRegistryHub().getReporterRegistry().getListeners().empty()","                    \u0026\u0026 config-\u003egetProcessedReporterSpecs().size() == 1) {","                auto const\u0026 spec = config-\u003egetProcessedReporterSpecs()[0];","                return createReporter(","                    spec.name,","                    ReporterConfig( config,","                                    makeStream( spec.outputFilename ),","                                    spec.colourMode,","                                    spec.customOptions ) );","            }","","            auto multi = Detail::make_unique\u003cMultiReporter\u003e(config);","","            auto const\u0026 listeners = Catch::getRegistryHub().getReporterRegistry().getListeners();","            for (auto const\u0026 listener : listeners) {","                multi-\u003eaddListener(listener-\u003ecreate(config));","            }","","            for ( auto const\u0026 reporterSpec : config-\u003egetProcessedReporterSpecs() ) {","                multi-\u003eaddReporter( createReporter(","                    reporterSpec.name,","                    ReporterConfig( config,","                                    makeStream( reporterSpec.outputFilename ),","                                    reporterSpec.colourMode,","                                    reporterSpec.customOptions ) ) );","            }","","            return multi;","        }","","        class TestGroup {","        public:","            explicit TestGroup(IEventListenerPtr\u0026\u0026 reporter, Config const* config):","                m_reporter(reporter.get()),","                m_config{config},","                m_context{config, CATCH_MOVE(reporter)} {","","                assert( m_config-\u003etestSpec().getInvalidSpecs().empty() \u0026\u0026","                        \"Invalid test specs should be handled before running tests\" );","","                auto const\u0026 allTestCases = getAllTestCasesSorted(*m_config);","                auto const\u0026 testSpec = m_config-\u003etestSpec();","                if ( !testSpec.hasFilters() ) {","                    for ( auto const\u0026 test : allTestCases ) {","                        if ( !test.getTestCaseInfo().isHidden() ) {","                            m_tests.emplace( \u0026test );","                        }","                    }","                } else {","                    m_matches =","                        testSpec.matchesByFilter( allTestCases, *m_config );","                    for ( auto const\u0026 match : m_matches ) {","                        m_tests.insert( match.tests.begin(),","                                        match.tests.end() );","                    }","                }","","                m_tests = createShard(m_tests, m_config-\u003eshardCount(), m_config-\u003eshardIndex());","            }","","            Totals execute() {","                Totals totals;","                for (auto const\u0026 testCase : m_tests) {","                    if (!m_context.aborting())","                        totals += m_context.runTest(*testCase);","                    else","                        m_reporter-\u003eskipTest(testCase-\u003egetTestCaseInfo());","                }","","                for (auto const\u0026 match : m_matches) {","                    if (match.tests.empty()) {","                        m_unmatchedTestSpecs = true;","                        m_reporter-\u003enoMatchingTestCases( match.name );","                    }","                }","","                return totals;","            }","","            bool hadUnmatchedTestSpecs() const {","                return m_unmatchedTestSpecs;","            }","","","        private:","            IEventListener* m_reporter;","            Config const* m_config;","            RunContext m_context;","            std::set\u003cTestCaseHandle const*\u003e m_tests;","            TestSpec::Matches m_matches;","            bool m_unmatchedTestSpecs = false;","        };","","        void applyFilenamesAsTags() {","            for (auto const\u0026 testInfo : getRegistryHub().getTestCaseRegistry().getAllInfos()) {","                testInfo-\u003eaddFilenameTag();","            }","        }","","    } // anon namespace","","    Session::Session() {","        static bool alreadyInstantiated = false;","        if( alreadyInstantiated ) {","            CATCH_TRY { CATCH_INTERNAL_ERROR( \"Only one instance of Catch::Session can ever be used\" ); }","            CATCH_CATCH_ALL { getMutableRegistryHub().registerStartupException(); }","        }","","        // There cannot be exceptions at startup in no-exception mode.","#if !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)","        const auto\u0026 exceptions = getRegistryHub().getStartupExceptionRegistry().getExceptions();","        if ( !exceptions.empty() ) {","            config();","            getCurrentMutableContext().setConfig(m_config.get());","","            m_startupExceptions = true;","            auto errStream = makeStream( \"%stderr\" );","            auto colourImpl = makeColourImpl(","                ColourMode::PlatformDefault, errStream.get() );","            auto guard = colourImpl-\u003eguardColour( Colour::Red );","            errStream-\u003estream() \u003c\u003c \"Errors occurred during startup!\" \u003c\u003c '\\n';","            // iterate over all exceptions and notify user","            for ( const auto\u0026 ex_ptr : exceptions ) {","                try {","                    std::rethrow_exception(ex_ptr);","                } catch ( std::exception const\u0026 ex ) {","                    errStream-\u003estream() \u003c\u003c TextFlow::Column( ex.what() ).indent(2) \u003c\u003c '\\n';","                }","            }","        }","#endif","","        alreadyInstantiated = true;","        m_cli = makeCommandLineParser( m_configData );","    }","    Session::~Session() {","        Catch::cleanUp();","    }","","    void Session::showHelp() const {","        Catch::cout()","                \u003c\u003c \"\\nCatch2 v\" \u003c\u003c libraryVersion() \u003c\u003c '\\n'","                \u003c\u003c m_cli \u003c\u003c '\\n'","                \u003c\u003c \"For more detailed usage please see the project docs\\n\\n\" \u003c\u003c std::flush;","    }","    void Session::libIdentify() {","        Catch::cout()","                \u003c\u003c std::left \u003c\u003c std::setw(16) \u003c\u003c \"description: \" \u003c\u003c \"A Catch2 test executable\\n\"","                \u003c\u003c std::left \u003c\u003c std::setw(16) \u003c\u003c \"category: \" \u003c\u003c \"testframework\\n\"","                \u003c\u003c std::left \u003c\u003c std::setw(16) \u003c\u003c \"framework: \" \u003c\u003c \"Catch2\\n\"","                \u003c\u003c std::left \u003c\u003c std::setw(16) \u003c\u003c \"version: \" \u003c\u003c libraryVersion() \u003c\u003c '\\n' \u003c\u003c std::flush;","    }","","    int Session::applyCommandLine( int argc, char const * const * argv ) {","        if ( m_startupExceptions ) { return UnspecifiedErrorExitCode; }","","        auto result = m_cli.parse( Clara::Args( argc, argv ) );","","        if( !result ) {","            config();","            getCurrentMutableContext().setConfig(m_config.get());","            auto errStream = makeStream( \"%stderr\" );","            auto colour = makeColourImpl( ColourMode::PlatformDefault, errStream.get() );","","            errStream-\u003estream()","                \u003c\u003c colour-\u003eguardColour( Colour::Red )","                \u003c\u003c \"\\nError(s) in input:\\n\"","                \u003c\u003c TextFlow::Column( result.errorMessage() ).indent( 2 )","                \u003c\u003c \"\\n\\n\";","            errStream-\u003estream() \u003c\u003c \"Run with -? for usage\\n\\n\" \u003c\u003c std::flush;","            return UnspecifiedErrorExitCode;","        }","","        if( m_configData.showHelp )","            showHelp();","        if( m_configData.libIdentify )","            libIdentify();","","        m_config.reset();","        return 0;","    }","","#if defined(CATCH_CONFIG_WCHAR) \u0026\u0026 defined(_WIN32) \u0026\u0026 defined(UNICODE)","    int Session::applyCommandLine( int argc, wchar_t const * const * argv ) {","","        char **utf8Argv = new char *[ argc ];","","        for ( int i = 0; i \u003c argc; ++i ) {","            int bufSize = WideCharToMultiByte( CP_UTF8, 0, argv[i], -1, nullptr, 0, nullptr, nullptr );","","            utf8Argv[ i ] = new char[ bufSize ];","","            WideCharToMultiByte( CP_UTF8, 0, argv[i], -1, utf8Argv[i], bufSize, nullptr, nullptr );","        }","","        int returnCode = applyCommandLine( argc, utf8Argv );","","        for ( int i = 0; i \u003c argc; ++i )","            delete [] utf8Argv[ i ];","","        delete [] utf8Argv;","","        return returnCode;","    }","#endif","","    void Session::useConfigData( ConfigData const\u0026 configData ) {","        m_configData = configData;","        m_config.reset();","    }","","    int Session::run() {","        if( ( m_configData.waitForKeypress \u0026 WaitForKeypress::BeforeStart ) != 0 ) {","            Catch::cout() \u003c\u003c \"...waiting for enter/ return before starting\\n\" \u003c\u003c std::flush;","            static_cast\u003cvoid\u003e(std::getchar());","        }","        int exitCode = runInternal();","        if( ( m_configData.waitForKeypress \u0026 WaitForKeypress::BeforeExit ) != 0 ) {","            Catch::cout() \u003c\u003c \"...waiting for enter/ return before exiting, with code: \" \u003c\u003c exitCode \u003c\u003c '\\n' \u003c\u003c std::flush;","            static_cast\u003cvoid\u003e(std::getchar());","        }","        return exitCode;","    }","","    Clara::Parser const\u0026 Session::cli() const {","        return m_cli;","    }","    void Session::cli( Clara::Parser const\u0026 newParser ) {","        m_cli = newParser;","    }","    ConfigData\u0026 Session::configData() {","        return m_configData;","    }","    Config\u0026 Session::config() {","        if( !m_config )","            m_config = Detail::make_unique\u003cConfig\u003e( m_configData );","        return *m_config;","    }","","    int Session::runInternal() {","        if ( m_startupExceptions ) { return UnspecifiedErrorExitCode; }","","        if (m_configData.showHelp || m_configData.libIdentify) {","            return 0;","        }","","        if ( m_configData.shardIndex \u003e= m_configData.shardCount ) {","            Catch::cerr() \u003c\u003c \"The shard count (\" \u003c\u003c m_configData.shardCount","                          \u003c\u003c \") must be greater than the shard index (\"","                          \u003c\u003c m_configData.shardIndex \u003c\u003c \")\\n\"","                          \u003c\u003c std::flush;","            return UnspecifiedErrorExitCode;","        }","","        CATCH_TRY {","            config(); // Force config to be constructed","","            seedRng( *m_config );","","            if (m_configData.filenamesAsTags) {","                applyFilenamesAsTags();","            }","","            // Set up global config instance before we start calling into other functions","            getCurrentMutableContext().setConfig(m_config.get());","","            // Create reporter(s) so we can route listings through them","            auto reporter = prepareReporters(m_config.get());","","            auto const\u0026 invalidSpecs = m_config-\u003etestSpec().getInvalidSpecs();","            if ( !invalidSpecs.empty() ) {","                for ( auto const\u0026 spec : invalidSpecs ) {","                    reporter-\u003ereportInvalidTestSpec( spec );","                }","                return InvalidTestSpecExitCode;","            }","","","            // Handle list request","            if (list(*reporter, *m_config)) {","                return 0;","            }","","            TestGroup tests { CATCH_MOVE(reporter), m_config.get() };","            auto const totals = tests.execute();","","            if ( tests.hadUnmatchedTestSpecs()","                \u0026\u0026 m_config-\u003ewarnAboutUnmatchedTestSpecs() ) {","                // UnmatchedTestSpecExitCode","                return UnmatchedTestSpecExitCode;","            }","","            if ( totals.testCases.total() == 0","                \u0026\u0026 !m_config-\u003ezeroTestsCountAsSuccess() ) {","                return NoTestsRunExitCode;","            }","","            if ( totals.testCases.total() \u003e 0 \u0026\u0026","                 totals.testCases.total() == totals.testCases.skipped","                \u0026\u0026 !m_config-\u003ezeroTestsCountAsSuccess() ) {","                return AllTestsSkippedExitCode;","            }","","            if ( totals.assertions.failed ) { return TestFailureExitCode; }","            return 0;","","        }","#if !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)","        catch( std::exception\u0026 ex ) {","            Catch::cerr() \u003c\u003c ex.what() \u003c\u003c '\\n' \u003c\u003c std::flush;","            return UnspecifiedErrorExitCode;","        }","#endif","    }","","} // end namespace Catch","","","","","namespace Catch {","","    RegistrarForTagAliases::RegistrarForTagAliases(char const* alias, char const* tag, SourceLineInfo const\u0026 lineInfo) {","        CATCH_TRY {","            getMutableRegistryHub().registerTagAlias(alias, tag, lineInfo);","        } CATCH_CATCH_ALL {","            // Do not throw when constructing global objects, instead register the exception to be processed later","            getMutableRegistryHub().registerStartupException();","        }","    }","","}","","","","#include \u003ccassert\u003e","#include \u003ccctype\u003e","#include \u003calgorithm\u003e","","namespace Catch {","","    namespace {","        using TCP_underlying_type = uint8_t;","        static_assert(sizeof(TestCaseProperties) == sizeof(TCP_underlying_type),","                      \"The size of the TestCaseProperties is different from the assumed size\");","","        constexpr TestCaseProperties operator|(TestCaseProperties lhs, TestCaseProperties rhs) {","            return static_cast\u003cTestCaseProperties\u003e(","                static_cast\u003cTCP_underlying_type\u003e(lhs) | static_cast\u003cTCP_underlying_type\u003e(rhs)","            );","        }","","        constexpr TestCaseProperties\u0026 operator|=(TestCaseProperties\u0026 lhs, TestCaseProperties rhs) {","            lhs = static_cast\u003cTestCaseProperties\u003e(","                static_cast\u003cTCP_underlying_type\u003e(lhs) | static_cast\u003cTCP_underlying_type\u003e(rhs)","            );","            return lhs;","        }","","        constexpr TestCaseProperties operator\u0026(TestCaseProperties lhs, TestCaseProperties rhs) {","            return static_cast\u003cTestCaseProperties\u003e(","                static_cast\u003cTCP_underlying_type\u003e(lhs) \u0026 static_cast\u003cTCP_underlying_type\u003e(rhs)","            );","        }","","        constexpr bool applies(TestCaseProperties tcp) {","            static_assert(static_cast\u003cTCP_underlying_type\u003e(TestCaseProperties::None) == 0,","                          \"TestCaseProperties::None must be equal to 0\");","            return tcp != TestCaseProperties::None;","        }","","        TestCaseProperties parseSpecialTag( StringRef tag ) {","            if( !tag.empty() \u0026\u0026 tag[0] == '.' )","                return TestCaseProperties::IsHidden;","            else if( tag == \"!throws\"_sr )","                return TestCaseProperties::Throws;","            else if( tag == \"!shouldfail\"_sr )","                return TestCaseProperties::ShouldFail;","            else if( tag == \"!mayfail\"_sr )","                return TestCaseProperties::MayFail;","            else if( tag == \"!nonportable\"_sr )","                return TestCaseProperties::NonPortable;","            else if( tag == \"!benchmark\"_sr )","                return TestCaseProperties::Benchmark | TestCaseProperties::IsHidden;","            else","                return TestCaseProperties::None;","        }","        bool isReservedTag( StringRef tag ) {","            return parseSpecialTag( tag ) == TestCaseProperties::None","                \u0026\u0026 tag.size() \u003e 0","                \u0026\u0026 !std::isalnum( static_cast\u003cunsigned char\u003e(tag[0]) );","        }","        void enforceNotReservedTag( StringRef tag, SourceLineInfo const\u0026 _lineInfo ) {","            CATCH_ENFORCE( !isReservedTag(tag),","                          \"Tag name: [\" \u003c\u003c tag \u003c\u003c \"] is not allowed.\\n\"","                          \u003c\u003c \"Tag names starting with non alphanumeric characters are reserved\\n\"","                          \u003c\u003c _lineInfo );","        }","","        std::string makeDefaultName() {","            static size_t counter = 0;","            return \"Anonymous test case \" + std::to_string(++counter);","        }","","        constexpr StringRef extractFilenamePart(StringRef filename) {","            size_t lastDot = filename.size();","            while (lastDot \u003e 0 \u0026\u0026 filename[lastDot - 1] != '.') {","                --lastDot;","            }","            // In theory we could have filename without any extension in it","            if ( lastDot == 0 ) { return StringRef(); }","","            --lastDot;","            size_t nameStart = lastDot;","            while (nameStart \u003e 0 \u0026\u0026 filename[nameStart - 1] != '/' \u0026\u0026 filename[nameStart - 1] != '\\\\') {","                --nameStart;","            }","","            return filename.substr(nameStart, lastDot - nameStart);","        }","","        // Returns the upper bound on size of extra tags ([#file]+[.])","        constexpr size_t sizeOfExtraTags(StringRef filepath) {","            // [.] is 3, [#] is another 3","            const size_t extras = 3 + 3;","            return extractFilenamePart(filepath).size() + extras;","        }","    } // end unnamed namespace","","    bool operator\u003c(  Tag const\u0026 lhs, Tag const\u0026 rhs ) {","        Detail::CaseInsensitiveLess cmp;","        return cmp( lhs.original, rhs.original );","    }","    bool operator==( Tag const\u0026 lhs, Tag const\u0026 rhs ) {","        Detail::CaseInsensitiveEqualTo cmp;","        return cmp( lhs.original, rhs.original );","    }","","    Detail::unique_ptr\u003cTestCaseInfo\u003e","        makeTestCaseInfo(StringRef _className,","                         NameAndTags const\u0026 nameAndTags,","                         SourceLineInfo const\u0026 _lineInfo ) {","        return Detail::make_unique\u003cTestCaseInfo\u003e(_className, nameAndTags, _lineInfo);","    }","","    TestCaseInfo::TestCaseInfo(StringRef _className,","                               NameAndTags const\u0026 _nameAndTags,","                               SourceLineInfo const\u0026 _lineInfo):","        name( _nameAndTags.name.empty() ? makeDefaultName() : _nameAndTags.name ),","        className( _className ),","        lineInfo( _lineInfo )","    {","        StringRef originalTags = _nameAndTags.tags;","        // We need to reserve enough space to store all of the tags","        // (including optional hidden tag and filename tag)","        auto requiredSize = originalTags.size() + sizeOfExtraTags(_lineInfo.file);","        backingTags.reserve(requiredSize);","","        // We cannot copy the tags directly, as we need to normalize","        // some tags, so that [.foo] is copied as [.][foo].","        size_t tagStart = 0;","        size_t tagEnd = 0;","        bool inTag = false;","        for (size_t idx = 0; idx \u003c originalTags.size(); ++idx) {","            auto c = originalTags[idx];","            if (c == '[') {","                CATCH_ENFORCE(","                    !inTag,","                    \"Found '[' inside a tag while registering test case '\"","                        \u003c\u003c _nameAndTags.name \u003c\u003c \"' at \" \u003c\u003c _lineInfo );","","                inTag = true;","                tagStart = idx;","            }","            if (c == ']') {","                CATCH_ENFORCE(","                    inTag,","                    \"Found unmatched ']' while registering test case '\"","                        \u003c\u003c _nameAndTags.name \u003c\u003c \"' at \" \u003c\u003c _lineInfo );","","                inTag = false;","                tagEnd = idx;","                assert(tagStart \u003c tagEnd);","","                // We need to check the tag for special meanings, copy","                // it over to backing storage and actually reference the","                // backing storage in the saved tags","                StringRef tagStr = originalTags.substr(tagStart+1, tagEnd - tagStart - 1);","                CATCH_ENFORCE( !tagStr.empty(),","                               \"Found an empty tag while registering test case '\"","                                   \u003c\u003c _nameAndTags.name \u003c\u003c \"' at \"","                                   \u003c\u003c _lineInfo );","","                enforceNotReservedTag(tagStr, lineInfo);","                properties |= parseSpecialTag(tagStr);","                // When copying a tag to the backing storage, we need to","                // check if it is a merged hide tag, such as [.foo], and","                // if it is, we need to handle it as if it was [foo].","                if (tagStr.size() \u003e 1 \u0026\u0026 tagStr[0] == '.') {","                    tagStr = tagStr.substr(1, tagStr.size() - 1);","                }","                // We skip over dealing with the [.] tag, as we will add","                // it later unconditionally and then sort and unique all","                // the tags.","                internalAppendTag(tagStr);","            }","        }","        CATCH_ENFORCE( !inTag,","                       \"Found an unclosed tag while registering test case '\"","                           \u003c\u003c _nameAndTags.name \u003c\u003c \"' at \" \u003c\u003c _lineInfo );","","","        // Add [.] if relevant","        if (isHidden()) {","            internalAppendTag(\".\"_sr);","        }","","        // Sort and prepare tags","        std::sort(begin(tags), end(tags));","        tags.erase(std::unique(begin(tags), end(tags)),","                   end(tags));","    }","","    bool TestCaseInfo::isHidden() const {","        return applies( properties \u0026 TestCaseProperties::IsHidden );","    }","    bool TestCaseInfo::throws() const {","        return applies( properties \u0026 TestCaseProperties::Throws );","    }","    bool TestCaseInfo::okToFail() const {","        return applies( properties \u0026 (TestCaseProperties::ShouldFail | TestCaseProperties::MayFail ) );","    }","    bool TestCaseInfo::expectedToFail() const {","        return applies( properties \u0026 (TestCaseProperties::ShouldFail) );","    }","","    void TestCaseInfo::addFilenameTag() {","        std::string combined(\"#\");","        combined += extractFilenamePart(lineInfo.file);","        internalAppendTag(combined);","    }","","    std::string TestCaseInfo::tagsAsString() const {","        std::string ret;","        // '[' and ']' per tag","        std::size_t full_size = 2 * tags.size();","        for (const auto\u0026 tag : tags) {","            full_size += tag.original.size();","        }","        ret.reserve(full_size);","        for (const auto\u0026 tag : tags) {","            ret.push_back('[');","            ret += tag.original;","            ret.push_back(']');","        }","","        return ret;","    }","","    void TestCaseInfo::internalAppendTag(StringRef tagStr) {","        backingTags += '[';","        const auto backingStart = backingTags.size();","        backingTags += tagStr;","        const auto backingEnd = backingTags.size();","        backingTags += ']';","        tags.emplace_back(StringRef(backingTags.c_str() + backingStart, backingEnd - backingStart));","    }","","    bool operator\u003c( TestCaseInfo const\u0026 lhs, TestCaseInfo const\u0026 rhs ) {","        // We want to avoid redoing the string comparisons multiple times,","        // so we store the result of a three-way comparison before using","        // it in the actual comparison logic.","        const auto cmpName = lhs.name.compare( rhs.name );","        if ( cmpName != 0 ) {","            return cmpName \u003c 0;","        }","        const auto cmpClassName = lhs.className.compare( rhs.className );","        if ( cmpClassName != 0 ) {","            return cmpClassName \u003c 0;","        }","        return lhs.tags \u003c rhs.tags;","    }","","} // end namespace Catch","","","","#include \u003calgorithm\u003e","#include \u003cstring\u003e","#include \u003cvector\u003e","#include \u003costream\u003e","","namespace Catch {","","    TestSpec::Pattern::Pattern( std::string const\u0026 name )","    : m_name( name )","    {}","","    TestSpec::Pattern::~Pattern() = default;","","    std::string const\u0026 TestSpec::Pattern::name() const {","        return m_name;","    }","","","    TestSpec::NamePattern::NamePattern( std::string const\u0026 name, std::string const\u0026 filterString )","    : Pattern( filterString )","    , m_wildcardPattern( toLower( name ), CaseSensitive::No )","    {}","","    bool TestSpec::NamePattern::matches( TestCaseInfo const\u0026 testCase ) const {","        return m_wildcardPattern.matches( testCase.name );","    }","","    void TestSpec::NamePattern::serializeTo( std::ostream\u0026 out ) const {","        out \u003c\u003c '\"' \u003c\u003c name() \u003c\u003c '\"';","    }","","","    TestSpec::TagPattern::TagPattern( std::string const\u0026 tag, std::string const\u0026 filterString )","    : Pattern( filterString )","    , m_tag( tag )","    {}","","    bool TestSpec::TagPattern::matches( TestCaseInfo const\u0026 testCase ) const {","        return std::find( begin( testCase.tags ),","                          end( testCase.tags ),","                          Tag( m_tag ) ) != end( testCase.tags );","    }","","    void TestSpec::TagPattern::serializeTo( std::ostream\u0026 out ) const {","        out \u003c\u003c name();","    }","","    bool TestSpec::Filter::matches( TestCaseInfo const\u0026 testCase ) const {","        bool should_use = !testCase.isHidden();","        for (auto const\u0026 pattern : m_required) {","            should_use = true;","            if (!pattern-\u003ematches(testCase)) {","                return false;","            }","        }","        for (auto const\u0026 pattern : m_forbidden) {","            if (pattern-\u003ematches(testCase)) {","                return false;","            }","        }","        return should_use;","    }","","    void TestSpec::Filter::serializeTo( std::ostream\u0026 out ) const {","        bool first = true;","        for ( auto const\u0026 pattern : m_required ) {","            if ( !first ) {","                out \u003c\u003c ' ';","            }","            out \u003c\u003c *pattern;","            first = false;","        }","        for ( auto const\u0026 pattern : m_forbidden ) {","            if ( !first ) {","                out \u003c\u003c ' ';","            }","            out \u003c\u003c *pattern;","            first = false;","        }","    }","","","    std::string TestSpec::extractFilterName( Filter const\u0026 filter ) {","        Catch::ReusableStringStream sstr;","        sstr \u003c\u003c filter;","        return sstr.str();","    }","","    bool TestSpec::hasFilters() const {","        return !m_filters.empty();","    }","","    bool TestSpec::matches( TestCaseInfo const\u0026 testCase ) const {","        return std::any_of( m_filters.begin(), m_filters.end(), [\u0026]( Filter const\u0026 f ){ return f.matches( testCase ); } );","    }","","    TestSpec::Matches TestSpec::matchesByFilter( std::vector\u003cTestCaseHandle\u003e const\u0026 testCases, IConfig const\u0026 config ) const {","        Matches matches;","        matches.reserve( m_filters.size() );","        for ( auto const\u0026 filter : m_filters ) {","            std::vector\u003cTestCaseHandle const*\u003e currentMatches;","            for ( auto const\u0026 test : testCases )","                if ( isThrowSafe( test, config ) \u0026\u0026","                     filter.matches( test.getTestCaseInfo() ) )","                    currentMatches.emplace_back( \u0026test );","            matches.push_back(","                FilterMatch{ extractFilterName( filter ), currentMatches } );","        }","        return matches;","    }","","    const TestSpec::vectorStrings\u0026 TestSpec::getInvalidSpecs() const {","        return m_invalidSpecs;","    }","","    void TestSpec::serializeTo( std::ostream\u0026 out ) const {","        bool first = true;","        for ( auto const\u0026 filter : m_filters ) {","            if ( !first ) {","                out \u003c\u003c ',';","            }","            out \u003c\u003c filter;","            first = false;","        }","    }","","}","","","","#include \u003cchrono\u003e","","namespace Catch {","","    namespace {","        static auto getCurrentNanosecondsSinceEpoch() -\u003e uint64_t {","            return std::chrono::duration_cast\u003cstd::chrono::nanoseconds\u003e(std::chrono::steady_clock::now().time_since_epoch()).count();","        }","    } // end unnamed namespace","","    void Timer::start() {","       m_nanoseconds = getCurrentNanosecondsSinceEpoch();","    }","    auto Timer::getElapsedNanoseconds() const -\u003e uint64_t {","        return getCurrentNanosecondsSinceEpoch() - m_nanoseconds;","    }","    auto Timer::getElapsedMicroseconds() const -\u003e uint64_t {","        return getElapsedNanoseconds()/1000;","    }","    auto Timer::getElapsedMilliseconds() const -\u003e unsigned int {","        return static_cast\u003cunsigned int\u003e(getElapsedMicroseconds()/1000);","    }","    auto Timer::getElapsedSeconds() const -\u003e double {","        return static_cast\u003cdouble\u003e(getElapsedMicroseconds())/1000000.0;","    }","","","} // namespace Catch","","","","","#include \u003ccmath\u003e","#include \u003ciomanip\u003e","","namespace Catch {","","namespace Detail {","","    namespace {","        const int hexThreshold = 255;","","        struct Endianness {","            enum Arch : uint8_t {","                Big,","                Little","            };","","            static Arch which() {","                int one = 1;","                // If the lowest byte we read is non-zero, we can assume","                // that little endian format is used.","                auto value = *reinterpret_cast\u003cchar*\u003e(\u0026one);","                return value ? Little : Big;","            }","        };","","        template\u003ctypename T\u003e","        std::string fpToString(T value, int precision) {","            if (Catch::isnan(value)) {","                return \"nan\";","            }","","            ReusableStringStream rss;","            rss \u003c\u003c std::setprecision(precision)","                \u003c\u003c std::fixed","                \u003c\u003c value;","            std::string d = rss.str();","            std::size_t i = d.find_last_not_of('0');","            if (i != std::string::npos \u0026\u0026 i != d.size() - 1) {","                if (d[i] == '.')","                    i++;","                d = d.substr(0, i + 1);","            }","            return d;","        }","    } // end unnamed namespace","","    std::string convertIntoString(StringRef string, bool escapeInvisibles) {","        std::string ret;","        // This is enough for the \"don't escape invisibles\" case, and a good","        // lower bound on the \"escape invisibles\" case.","        ret.reserve(string.size() + 2);","","        if (!escapeInvisibles) {","            ret += '\"';","            ret += string;","            ret += '\"';","            return ret;","        }","","        ret += '\"';","        for (char c : string) {","            switch (c) {","            case '\\r':","                ret.append(\"\\\\r\");","                break;","            case '\\n':","                ret.append(\"\\\\n\");","                break;","            case '\\t':","                ret.append(\"\\\\t\");","                break;","            case '\\f':","                ret.append(\"\\\\f\");","                break;","            default:","                ret.push_back(c);","                break;","            }","        }","        ret += '\"';","","        return ret;","    }","","    std::string convertIntoString(StringRef string) {","        return convertIntoString(string, getCurrentContext().getConfig()-\u003eshowInvisibles());","    }","","    std::string rawMemoryToString( const void *object, std::size_t size ) {","        // Reverse order for little endian architectures","        int i = 0, end = static_cast\u003cint\u003e( size ), inc = 1;","        if( Endianness::which() == Endianness::Little ) {","            i = end-1;","            end = inc = -1;","        }","","        unsigned char const *bytes = static_cast\u003cunsigned char const *\u003e(object);","        ReusableStringStream rss;","        rss \u003c\u003c \"0x\" \u003c\u003c std::setfill('0') \u003c\u003c std::hex;","        for( ; i != end; i += inc )","             rss \u003c\u003c std::setw(2) \u003c\u003c static_cast\u003cunsigned\u003e(bytes[i]);","       return rss.str();","    }","} // end Detail namespace","","","","//// ======================================================= ////","//","//   Out-of-line defs for full specialization of StringMaker","//","//// ======================================================= ////","","std::string StringMaker\u003cstd::string\u003e::convert(const std::string\u0026 str) {","    return Detail::convertIntoString( str );","}","","#ifdef CATCH_CONFIG_CPP17_STRING_VIEW","std::string StringMaker\u003cstd::string_view\u003e::convert(std::string_view str) {","    return Detail::convertIntoString( StringRef( str.data(), str.size() ) );","}","#endif","","std::string StringMaker\u003cchar const*\u003e::convert(char const* str) {","    if (str) {","        return Detail::convertIntoString( str );","    } else {","        return{ \"{null string}\" };","    }","}","std::string StringMaker\u003cchar*\u003e::convert(char* str) { // NOLINT(readability-non-const-parameter)","    if (str) {","        return Detail::convertIntoString( str );","    } else {","        return{ \"{null string}\" };","    }","}","","#ifdef CATCH_CONFIG_WCHAR","std::string StringMaker\u003cstd::wstring\u003e::convert(const std::wstring\u0026 wstr) {","    std::string s;","    s.reserve(wstr.size());","    for (auto c : wstr) {","        s += (c \u003c= 0xff) ? static_cast\u003cchar\u003e(c) : '?';","    }","    return ::Catch::Detail::stringify(s);","}","","# ifdef CATCH_CONFIG_CPP17_STRING_VIEW","std::string StringMaker\u003cstd::wstring_view\u003e::convert(std::wstring_view str) {","    return StringMaker\u003cstd::wstring\u003e::convert(std::wstring(str));","}","# endif","","std::string StringMaker\u003cwchar_t const*\u003e::convert(wchar_t const * str) {","    if (str) {","        return ::Catch::Detail::stringify(std::wstring{ str });","    } else {","        return{ \"{null string}\" };","    }","}","std::string StringMaker\u003cwchar_t *\u003e::convert(wchar_t * str) {","    if (str) {","        return ::Catch::Detail::stringify(std::wstring{ str });","    } else {","        return{ \"{null string}\" };","    }","}","#endif","","#if defined(CATCH_CONFIG_CPP17_BYTE)","#include \u003ccstddef\u003e","std::string StringMaker\u003cstd::byte\u003e::convert(std::byte value) {","    return ::Catch::Detail::stringify(std::to_integer\u003cunsigned long long\u003e(value));","}","#endif // defined(CATCH_CONFIG_CPP17_BYTE)","","std::string StringMaker\u003cint\u003e::convert(int value) {","    return ::Catch::Detail::stringify(static_cast\u003clong long\u003e(value));","}","std::string StringMaker\u003clong\u003e::convert(long value) {","    return ::Catch::Detail::stringify(static_cast\u003clong long\u003e(value));","}","std::string StringMaker\u003clong long\u003e::convert(long long value) {","    ReusableStringStream rss;","    rss \u003c\u003c value;","    if (value \u003e Detail::hexThreshold) {","        rss \u003c\u003c \" (0x\" \u003c\u003c std::hex \u003c\u003c value \u003c\u003c ')';","    }","    return rss.str();","}","","std::string StringMaker\u003cunsigned int\u003e::convert(unsigned int value) {","    return ::Catch::Detail::stringify(static_cast\u003cunsigned long long\u003e(value));","}","std::string StringMaker\u003cunsigned long\u003e::convert(unsigned long value) {","    return ::Catch::Detail::stringify(static_cast\u003cunsigned long long\u003e(value));","}","std::string StringMaker\u003cunsigned long long\u003e::convert(unsigned long long value) {","    ReusableStringStream rss;","    rss \u003c\u003c value;","    if (value \u003e Detail::hexThreshold) {","        rss \u003c\u003c \" (0x\" \u003c\u003c std::hex \u003c\u003c value \u003c\u003c ')';","    }","    return rss.str();","}","","std::string StringMaker\u003csigned char\u003e::convert(signed char value) {","    if (value == '\\r') {","        return \"'\\\\r'\";","    } else if (value == '\\f') {","        return \"'\\\\f'\";","    } else if (value == '\\n') {","        return \"'\\\\n'\";","    } else if (value == '\\t') {","        return \"'\\\\t'\";","    } else if ('\\0' \u003c= value \u0026\u0026 value \u003c ' ') {","        return ::Catch::Detail::stringify(static_cast\u003cunsigned int\u003e(value));","    } else {","        char chstr[] = \"' '\";","        chstr[1] = value;","        return chstr;","    }","}","std::string StringMaker\u003cchar\u003e::convert(char c) {","    return ::Catch::Detail::stringify(static_cast\u003csigned char\u003e(c));","}","std::string StringMaker\u003cunsigned char\u003e::convert(unsigned char value) {","    return ::Catch::Detail::stringify(static_cast\u003cchar\u003e(value));","}","","int StringMaker\u003cfloat\u003e::precision = std::numeric_limits\u003cfloat\u003e::max_digits10;","","std::string StringMaker\u003cfloat\u003e::convert(float value) {","    return Detail::fpToString(value, precision) + 'f';","}","","int StringMaker\u003cdouble\u003e::precision = std::numeric_limits\u003cdouble\u003e::max_digits10;","","std::string StringMaker\u003cdouble\u003e::convert(double value) {","    return Detail::fpToString(value, precision);","}","","} // end namespace Catch","","","","namespace Catch {","","    Counts Counts::operator - ( Counts const\u0026 other ) const {","        Counts diff;","        diff.passed = passed - other.passed;","        diff.failed = failed - other.failed;","        diff.failedButOk = failedButOk - other.failedButOk;","        diff.skipped = skipped - other.skipped;","        return diff;","    }","","    Counts\u0026 Counts::operator += ( Counts const\u0026 other ) {","        passed += other.passed;","        failed += other.failed;","        failedButOk += other.failedButOk;","        skipped += other.skipped;","        return *this;","    }","","    std::uint64_t Counts::total() const {","        return passed + failed + failedButOk + skipped;","    }","    bool Counts::allPassed() const {","        return failed == 0 \u0026\u0026 failedButOk == 0 \u0026\u0026 skipped == 0;","    }","    bool Counts::allOk() const {","        return failed == 0;","    }","","    Totals Totals::operator - ( Totals const\u0026 other ) const {","        Totals diff;","        diff.assertions = assertions - other.assertions;","        diff.testCases = testCases - other.testCases;","        return diff;","    }","","    Totals\u0026 Totals::operator += ( Totals const\u0026 other ) {","        assertions += other.assertions;","        testCases += other.testCases;","        return *this;","    }","","    Totals Totals::delta( Totals const\u0026 prevTotals ) const {","        Totals diff = *this - prevTotals;","        if( diff.assertions.failed \u003e 0 )","            ++diff.testCases.failed;","        else if( diff.assertions.failedButOk \u003e 0 )","            ++diff.testCases.failedButOk;","        else if ( diff.assertions.skipped \u003e 0 )","            ++ diff.testCases.skipped;","        else","            ++diff.testCases.passed;","        return diff;","    }","","}","","","","","namespace Catch {","    namespace Detail {","        void registerTranslatorImpl(","            Detail::unique_ptr\u003cIExceptionTranslator\u003e\u0026\u0026 translator ) {","            getMutableRegistryHub().registerTranslator(","                CATCH_MOVE( translator ) );","        }","    } // namespace Detail","} // namespace Catch","","","#include \u003costream\u003e","","namespace Catch {","","    Version::Version","        (   unsigned int _majorVersion,","            unsigned int _minorVersion,","            unsigned int _patchNumber,","            char const * const _branchName,","            unsigned int _buildNumber )","    :   majorVersion( _majorVersion ),","        minorVersion( _minorVersion ),","        patchNumber( _patchNumber ),","        branchName( _branchName ),","        buildNumber( _buildNumber )","    {}","","    std::ostream\u0026 operator \u003c\u003c ( std::ostream\u0026 os, Version const\u0026 version ) {","        os  \u003c\u003c version.majorVersion \u003c\u003c '.'","            \u003c\u003c version.minorVersion \u003c\u003c '.'","            \u003c\u003c version.patchNumber;","        // branchName is never null -\u003e 0th char is \\0 if it is empty","        if (version.branchName[0]) {","            os \u003c\u003c '-' \u003c\u003c version.branchName","               \u003c\u003c '.' \u003c\u003c version.buildNumber;","        }","        return os;","    }","","    Version const\u0026 libraryVersion() {","        static Version version( 3, 8, 1, \"\", 0 );","        return version;","    }","","}","","","","","namespace Catch {","","    const char* GeneratorException::what() const noexcept {","        return m_msg;","    }","","} // end namespace Catch","","","","","namespace Catch {","","    IGeneratorTracker::~IGeneratorTracker() = default;","","namespace Generators {","","namespace Detail {","","    [[noreturn]]","    void throw_generator_exception(char const* msg) {","        Catch::throw_exception(GeneratorException{ msg });","    }","} // end namespace Detail","","    GeneratorUntypedBase::~GeneratorUntypedBase() = default;","","    IGeneratorTracker* acquireGeneratorTracker(StringRef generatorName, SourceLineInfo const\u0026 lineInfo ) {","        return getResultCapture().acquireGeneratorTracker( generatorName, lineInfo );","    }","","    IGeneratorTracker* createGeneratorTracker( StringRef generatorName,","                                 SourceLineInfo lineInfo,","                                 GeneratorBasePtr\u0026\u0026 generator ) {","        return getResultCapture().createGeneratorTracker(","            generatorName, lineInfo, CATCH_MOVE( generator ) );","    }","","} // namespace Generators","} // namespace Catch","","","","","#include \u003crandom\u003e","","namespace Catch {","    namespace Generators {","        namespace Detail {","            std::uint32_t getSeed() { return sharedRng()(); }","        } // namespace Detail","","        struct RandomFloatingGenerator\u003clong double\u003e::PImpl {","            PImpl( long double a, long double b, uint32_t seed ):","                rng( seed ), dist( a, b ) {}","","            Catch::SimplePcg32 rng;","            std::uniform_real_distribution\u003clong double\u003e dist;","        };","","        RandomFloatingGenerator\u003clong double\u003e::RandomFloatingGenerator(","            long double a, long double b, std::uint32_t seed) :","            m_pimpl(Catch::Detail::make_unique\u003cPImpl\u003e(a, b, seed)) {","            static_cast\u003cvoid\u003e( next() );","        }","","        RandomFloatingGenerator\u003clong double\u003e::~RandomFloatingGenerator() =","            default;","        bool RandomFloatingGenerator\u003clong double\u003e::next() {","            m_current_number = m_pimpl-\u003edist( m_pimpl-\u003erng );","            return true;","        }","    } // namespace Generators","} // namespace Catch","","","","","namespace Catch {","    IResultCapture::~IResultCapture() = default;","}","","","","","namespace Catch {","    IConfig::~IConfig() = default;","}","","","","","namespace Catch {","    IExceptionTranslator::~IExceptionTranslator() = default;","    IExceptionTranslatorRegistry::~IExceptionTranslatorRegistry() = default;","}","","","","#include \u003cstring\u003e","","namespace Catch {","    namespace Generators {","","        bool GeneratorUntypedBase::countedNext() {","            auto ret = next();","            if ( ret ) {","                m_stringReprCache.clear();","                ++m_currentElementIndex;","            }","            return ret;","        }","","        StringRef GeneratorUntypedBase::currentElementAsString() const {","            if ( m_stringReprCache.empty() ) {","                m_stringReprCache = stringifyImpl();","            }","            return m_stringReprCache;","        }","","    } // namespace Generators","} // namespace Catch","","","","","namespace Catch {","    IRegistryHub::~IRegistryHub() = default;","    IMutableRegistryHub::~IMutableRegistryHub() = default;","}","","","","#include \u003ccassert\u003e","","namespace Catch {","","    ReporterConfig::ReporterConfig(","        IConfig const* _fullConfig,","        Detail::unique_ptr\u003cIStream\u003e _stream,","        ColourMode colourMode,","        std::map\u003cstd::string, std::string\u003e customOptions ):","        m_stream( CATCH_MOVE(_stream) ),","        m_fullConfig( _fullConfig ),","        m_colourMode( colourMode ),","        m_customOptions( CATCH_MOVE( customOptions ) ) {}","","    Detail::unique_ptr\u003cIStream\u003e ReporterConfig::takeStream() \u0026\u0026 {","        assert( m_stream );","        return CATCH_MOVE( m_stream );","    }","    IConfig const * ReporterConfig::fullConfig() const { return m_fullConfig; }","    ColourMode ReporterConfig::colourMode() const { return m_colourMode; }","","    std::map\u003cstd::string, std::string\u003e const\u0026","    ReporterConfig::customOptions() const {","        return m_customOptions;","    }","","    ReporterConfig::~ReporterConfig() = default;","","    AssertionStats::AssertionStats( AssertionResult const\u0026 _assertionResult,","                                    std::vector\u003cMessageInfo\u003e const\u0026 _infoMessages,","                                    Totals const\u0026 _totals )","    :   assertionResult( _assertionResult ),","        infoMessages( _infoMessages ),","        totals( _totals )","    {","        if( assertionResult.hasMessage() ) {","            // Copy message into messages list.","            // !TBD This should have been done earlier, somewhere","            MessageBuilder builder( assertionResult.getTestMacroName(), assertionResult.getSourceInfo(), assertionResult.getResultType() );","            builder.m_info.message = static_cast\u003cstd::string\u003e(assertionResult.getMessage());","","            infoMessages.push_back( CATCH_MOVE(builder.m_info) );","        }","    }","","    SectionStats::SectionStats(  SectionInfo\u0026\u0026 _sectionInfo,","                                 Counts const\u0026 _assertions,","                                 double _durationInSeconds,","                                 bool _missingAssertions )","    :   sectionInfo( CATCH_MOVE(_sectionInfo) ),","        assertions( _assertions ),","        durationInSeconds( _durationInSeconds ),","        missingAssertions( _missingAssertions )","    {}","","","    TestCaseStats::TestCaseStats(  TestCaseInfo const\u0026 _testInfo,","                                   Totals const\u0026 _totals,","                                   std::string\u0026\u0026 _stdOut,","                                   std::string\u0026\u0026 _stdErr,","                                   bool _aborting )","    : testInfo( \u0026_testInfo ),","        totals( _totals ),","        stdOut( CATCH_MOVE(_stdOut) ),","        stdErr( CATCH_MOVE(_stdErr) ),","        aborting( _aborting )","    {}","","","    TestRunStats::TestRunStats(   TestRunInfo const\u0026 _runInfo,","                    Totals const\u0026 _totals,","                    bool _aborting )","    :   runInfo( _runInfo ),","        totals( _totals ),","        aborting( _aborting )","    {}","","    IEventListener::~IEventListener() = default;","","} // end namespace Catch","","","","","namespace Catch {","    IReporterFactory::~IReporterFactory() = default;","    EventListenerFactory::~EventListenerFactory() = default;","}","","","","","namespace Catch {","    ITestCaseRegistry::~ITestCaseRegistry() = default;","}","","","","namespace Catch {","","    AssertionHandler::AssertionHandler","        (   StringRef macroName,","            SourceLineInfo const\u0026 lineInfo,","            StringRef capturedExpression,","            ResultDisposition::Flags resultDisposition )","    :   m_assertionInfo{ macroName, lineInfo, capturedExpression, resultDisposition },","        m_resultCapture( getResultCapture() )","    {","        m_resultCapture.notifyAssertionStarted( m_assertionInfo );","    }","","    void AssertionHandler::handleExpr( ITransientExpression const\u0026 expr ) {","        m_resultCapture.handleExpr( m_assertionInfo, expr, m_reaction );","    }","    void AssertionHandler::handleMessage(ResultWas::OfType resultType, std::string\u0026\u0026 message) {","        m_resultCapture.handleMessage( m_assertionInfo, resultType, CATCH_MOVE(message), m_reaction );","    }","","    auto AssertionHandler::allowThrows() const -\u003e bool {","        return getCurrentContext().getConfig()-\u003eallowThrows();","    }","","    void AssertionHandler::complete() {","        m_completed = true;","        if( m_reaction.shouldDebugBreak ) {","","            // If you find your debugger stopping you here then go one level up on the","            // call-stack for the code that caused it (typically a failed assertion)","","            // (To go back to the test and change execution, jump over the throw, next)","            CATCH_BREAK_INTO_DEBUGGER();","        }","        if (m_reaction.shouldThrow) {","            throw_test_failure_exception();","        }","        if ( m_reaction.shouldSkip ) {","            throw_test_skip_exception();","        }","    }","","    void AssertionHandler::handleUnexpectedInflightException() {","        m_resultCapture.handleUnexpectedInflightException( m_assertionInfo, Catch::translateActiveException(), m_reaction );","    }","","    void AssertionHandler::handleExceptionThrownAsExpected() {","        m_resultCapture.handleNonExpr(m_assertionInfo, ResultWas::Ok, m_reaction);","    }","    void AssertionHandler::handleExceptionNotThrownAsExpected() {","        m_resultCapture.handleNonExpr(m_assertionInfo, ResultWas::Ok, m_reaction);","    }","","    void AssertionHandler::handleUnexpectedExceptionNotThrown() {","        m_resultCapture.handleUnexpectedExceptionNotThrown( m_assertionInfo, m_reaction );","    }","","    void AssertionHandler::handleThrowingCallSkipped() {","        m_resultCapture.handleNonExpr(m_assertionInfo, ResultWas::Ok, m_reaction);","    }","","    // This is the overload that takes a string and infers the Equals matcher from it","    // The more general overload, that takes any string matcher, is in catch_capture_matchers.cpp","    void handleExceptionMatchExpr( AssertionHandler\u0026 handler, std::string const\u0026 str ) {","        handleExceptionMatchExpr( handler, Matchers::Equals( str ) );","    }","","} // namespace Catch","","","","","#include \u003calgorithm\u003e","","namespace Catch {","    namespace Detail {","","        bool CaseInsensitiveLess::operator()( StringRef lhs,","                                              StringRef rhs ) const {","            return std::lexicographical_compare(","                lhs.begin(), lhs.end(),","                rhs.begin(), rhs.end(),","                []( char l, char r ) { return toLower( l ) \u003c toLower( r ); } );","        }","","        bool","        CaseInsensitiveEqualTo::operator()( StringRef lhs,","                                            StringRef rhs ) const {","            return std::equal(","                lhs.begin(), lhs.end(),","                rhs.begin(), rhs.end(),","                []( char l, char r ) { return toLower( l ) == toLower( r ); } );","        }","","    } // namespace Detail","} // namespace Catch","","","","","#include \u003calgorithm\u003e","#include \u003costream\u003e","","namespace {","    bool isOptPrefix( char c ) {","        return c == '-'","#ifdef CATCH_PLATFORM_WINDOWS","               || c == '/'","#endif","            ;","    }","","    Catch::StringRef normaliseOpt( Catch::StringRef optName ) {","        if ( optName[0] == '-'","#if defined(CATCH_PLATFORM_WINDOWS)","             || optName[0] == '/'","#endif","        ) {","            return optName.substr( 1, optName.size() );","        }","","        return optName;","    }","","    static size_t find_first_separator(Catch::StringRef sr) {","        auto is_separator = []( char c ) {","            return c == ' ' || c == ':' || c == '=';","        };","        size_t pos = 0;","        while (pos \u003c sr.size()) {","            if (is_separator(sr[pos])) { return pos; }","            ++pos;","        }","","        return Catch::StringRef::npos;","    }","","} // namespace","","namespace Catch {","    namespace Clara {","        namespace Detail {","","            void TokenStream::loadBuffer() {","                m_tokenBuffer.clear();","","                // Skip any empty strings","                while ( it != itEnd \u0026\u0026 it-\u003eempty() ) {","                    ++it;","                }","","                if ( it != itEnd ) {","                    StringRef next = *it;","                    if ( isOptPrefix( next[0] ) ) {","                        auto delimiterPos = find_first_separator(next);","                        if ( delimiterPos != StringRef::npos ) {","                            m_tokenBuffer.push_back(","                                { TokenType::Option,","                                  next.substr( 0, delimiterPos ) } );","                            m_tokenBuffer.push_back(","                                { TokenType::Argument,","                                  next.substr( delimiterPos + 1, next.size() ) } );","                        } else {","                            if ( next.size() \u003e 1 \u0026\u0026 next[1] != '-' \u0026\u0026 next.size() \u003e 2 ) {","                                // Combined short args, e.g. \"-ab\" for \"-a -b\"","                                for ( size_t i = 1; i \u003c next.size(); ++i ) {","                                    m_tokenBuffer.push_back(","                                        { TokenType::Option,","                                          next.substr( i, 1 ) } );","                                }","                            } else {","                                m_tokenBuffer.push_back(","                                    { TokenType::Option, next } );","                            }","                        }","                    } else {","                        m_tokenBuffer.push_back(","                            { TokenType::Argument, next } );","                    }","                }","            }","","            TokenStream::TokenStream( Args const\u0026 args ):","                TokenStream( args.m_args.begin(), args.m_args.end() ) {}","","            TokenStream::TokenStream( Iterator it_, Iterator itEnd_ ):","                it( it_ ), itEnd( itEnd_ ) {","                loadBuffer();","            }","","            TokenStream\u0026 TokenStream::operator++() {","                if ( m_tokenBuffer.size() \u003e= 2 ) {","                    m_tokenBuffer.erase( m_tokenBuffer.begin() );","                } else {","                    if ( it != itEnd )","                        ++it;","                    loadBuffer();","                }","                return *this;","            }","","            ParserResult convertInto( std::string const\u0026 source,","                                      std::string\u0026 target ) {","                target = source;","                return ParserResult::ok( ParseResultType::Matched );","            }","","            ParserResult convertInto( std::string const\u0026 source,","                                      bool\u0026 target ) {","                std::string srcLC = toLower( source );","","                if ( srcLC == \"y\" || srcLC == \"1\" || srcLC == \"true\" ||","                     srcLC == \"yes\" || srcLC == \"on\" ) {","                    target = true;","                } else if ( srcLC == \"n\" || srcLC == \"0\" || srcLC == \"false\" ||","                            srcLC == \"no\" || srcLC == \"off\" ) {","                    target = false;","                } else {","                    return ParserResult::runtimeError(","                        \"Expected a boolean value but did not recognise: '\" +","                        source + '\\'' );","                }","                return ParserResult::ok( ParseResultType::Matched );","            }","","            size_t ParserBase::cardinality() const { return 1; }","","            InternalParseResult ParserBase::parse( Args const\u0026 args ) const {","                return parse( static_cast\u003cstd::string\u003e(args.exeName()), TokenStream( args ) );","            }","","            ParseState::ParseState( ParseResultType type,","                                    TokenStream remainingTokens ):","                m_type( type ), m_remainingTokens( CATCH_MOVE(remainingTokens) ) {}","","            ParserResult BoundFlagRef::setFlag( bool flag ) {","                m_ref = flag;","                return ParserResult::ok( ParseResultType::Matched );","            }","","            ResultBase::~ResultBase() = default;","","            bool BoundRef::isContainer() const { return false; }","","            bool BoundRef::isFlag() const { return false; }","","            bool BoundFlagRefBase::isFlag() const { return true; }","","} // namespace Detail","","        Detail::InternalParseResult Arg::parse(std::string const\u0026,","                                               Detail::TokenStream tokens) const {","            auto validationResult = validate();","            if (!validationResult)","                return Detail::InternalParseResult(validationResult);","","            auto token = *tokens;","            if (token.type != Detail::TokenType::Argument)","                return Detail::InternalParseResult::ok(Detail::ParseState(","                    ParseResultType::NoMatch, CATCH_MOVE(tokens)));","","            assert(!m_ref-\u003eisFlag());","            auto valueRef =","                static_cast\u003cDetail::BoundValueRefBase*\u003e(m_ref.get());","","            auto result = valueRef-\u003esetValue(static_cast\u003cstd::string\u003e(token.token));","            if ( !result )","                return Detail::InternalParseResult( result );","            else","                return Detail::InternalParseResult::ok(","                    Detail::ParseState( ParseResultType::Matched,","                                        CATCH_MOVE( ++tokens ) ) );","        }","","        Opt::Opt(bool\u0026 ref) :","            ParserRefImpl(std::make_shared\u003cDetail::BoundFlagRef\u003e(ref)) {}","","        Detail::HelpColumns Opt::getHelpColumns() const {","            ReusableStringStream oss;","            bool first = true;","            for (auto const\u0026 opt : m_optNames) {","                if (first)","                    first = false;","                else","                    oss \u003c\u003c \", \";","                oss \u003c\u003c opt;","            }","            if (!m_hint.empty())","                oss \u003c\u003c \" \u003c\" \u003c\u003c m_hint \u003c\u003c '\u003e';","            return { oss.str(), m_description };","        }","","        bool Opt::isMatch(StringRef optToken) const {","            auto normalisedToken = normaliseOpt(optToken);","            for (auto const\u0026 name : m_optNames) {","                if (normaliseOpt(name) == normalisedToken)","                    return true;","            }","            return false;","        }","","        Detail::InternalParseResult Opt::parse(std::string const\u0026,","                                       Detail::TokenStream tokens) const {","            auto validationResult = validate();","            if (!validationResult)","                return Detail::InternalParseResult(validationResult);","","            if (tokens \u0026\u0026","                tokens-\u003etype == Detail::TokenType::Option) {","                auto const\u0026 token = *tokens;","                if (isMatch(token.token)) {","                    if (m_ref-\u003eisFlag()) {","                        auto flagRef =","                            static_cast\u003cDetail::BoundFlagRefBase*\u003e(","                                m_ref.get());","                        auto result = flagRef-\u003esetFlag(true);","                        if (!result)","                            return Detail::InternalParseResult(result);","                        if (result.value() ==","                            ParseResultType::ShortCircuitAll)","                            return Detail::InternalParseResult::ok(Detail::ParseState(","                                result.value(), CATCH_MOVE(tokens)));","                    } else {","                        auto valueRef =","                            static_cast\u003cDetail::BoundValueRefBase*\u003e(","                                m_ref.get());","                        ++tokens;","                        if (!tokens)","                            return Detail::InternalParseResult::runtimeError(","                                \"Expected argument following \" +","                                token.token);","                        auto const\u0026 argToken = *tokens;","                        if (argToken.type != Detail::TokenType::Argument)","                            return Detail::InternalParseResult::runtimeError(","                                \"Expected argument following \" +","                                token.token);","                        const auto result = valueRef-\u003esetValue(static_cast\u003cstd::string\u003e(argToken.token));","                        if (!result)","                            return Detail::InternalParseResult(result);","                        if (result.value() ==","                            ParseResultType::ShortCircuitAll)","                            return Detail::InternalParseResult::ok(Detail::ParseState(","                                result.value(), CATCH_MOVE(tokens)));","                    }","                    return Detail::InternalParseResult::ok(Detail::ParseState(","                        ParseResultType::Matched, CATCH_MOVE(++tokens)));","                }","            }","            return Detail::InternalParseResult::ok(","                Detail::ParseState(ParseResultType::NoMatch, CATCH_MOVE(tokens)));","        }","","        Detail::Result Opt::validate() const {","            if (m_optNames.empty())","                return Detail::Result::logicError(\"No options supplied to Opt\");","            for (auto const\u0026 name : m_optNames) {","                if (name.empty())","                    return Detail::Result::logicError(","                        \"Option name cannot be empty\");","#ifdef CATCH_PLATFORM_WINDOWS","                if (name[0] != '-' \u0026\u0026 name[0] != '/')","                    return Detail::Result::logicError(","                        \"Option name must begin with '-' or '/'\");","#else","                if (name[0] != '-')","                    return Detail::Result::logicError(","                        \"Option name must begin with '-'\");","#endif","            }","            return ParserRefImpl::validate();","        }","","        ExeName::ExeName() :","            m_name(std::make_shared\u003cstd::string\u003e(\"\u003cexecutable\u003e\")) {}","","        ExeName::ExeName(std::string\u0026 ref) : ExeName() {","            m_ref = std::make_shared\u003cDetail::BoundValueRef\u003cstd::string\u003e\u003e(ref);","        }","","        Detail::InternalParseResult","            ExeName::parse(std::string const\u0026,","                           Detail::TokenStream tokens) const {","            return Detail::InternalParseResult::ok(","                Detail::ParseState(ParseResultType::NoMatch, CATCH_MOVE(tokens)));","        }","","        ParserResult ExeName::set(std::string const\u0026 newName) {","            auto lastSlash = newName.find_last_of(\"\\\\/\");","            auto filename = (lastSlash == std::string::npos)","                ? newName","                : newName.substr(lastSlash + 1);","","            *m_name = filename;","            if (m_ref)","                return m_ref-\u003esetValue(filename);","            else","                return ParserResult::ok(ParseResultType::Matched);","        }","","","","","        Parser\u0026 Parser::operator|=( Parser const\u0026 other ) {","            m_options.insert( m_options.end(),","                              other.m_options.begin(),","                              other.m_options.end() );","            m_args.insert(","                m_args.end(), other.m_args.begin(), other.m_args.end() );","            return *this;","        }","","        std::vector\u003cDetail::HelpColumns\u003e Parser::getHelpColumns() const {","            std::vector\u003cDetail::HelpColumns\u003e cols;","            cols.reserve( m_options.size() );","            for ( auto const\u0026 o : m_options ) {","                cols.push_back(o.getHelpColumns());","            }","            return cols;","        }","","        void Parser::writeToStream( std::ostream\u0026 os ) const {","            if ( !m_exeName.name().empty() ) {","                os \u003c\u003c \"usage:\\n\"","                   \u003c\u003c \"  \" \u003c\u003c m_exeName.name() \u003c\u003c ' ';","                bool required = true, first = true;","                for ( auto const\u0026 arg : m_args ) {","                    if ( first )","                        first = false;","                    else","                        os \u003c\u003c ' ';","                    if ( arg.isOptional() \u0026\u0026 required ) {","                        os \u003c\u003c '[';","                        required = false;","                    }","                    os \u003c\u003c '\u003c' \u003c\u003c arg.hint() \u003c\u003c '\u003e';","                    if ( arg.cardinality() == 0 )","                        os \u003c\u003c \" ... \";","                }","                if ( !required )","                    os \u003c\u003c ']';","                if ( !m_options.empty() )","                    os \u003c\u003c \" options\";","                os \u003c\u003c \"\\n\\nwhere options are:\\n\";","            }","","            auto rows = getHelpColumns();","            size_t consoleWidth = CATCH_CONFIG_CONSOLE_WIDTH;","            size_t optWidth = 0;","            for ( auto const\u0026 cols : rows )","                optWidth = ( std::max )( optWidth, cols.left.size() + 2 );","","            optWidth = ( std::min )( optWidth, consoleWidth / 2 );","","            for ( auto\u0026 cols : rows ) {","                auto row = TextFlow::Column( CATCH_MOVE(cols.left) )","                               .width( optWidth )","                               .indent( 2 ) +","                           TextFlow::Spacer( 4 ) +","                           TextFlow::Column( static_cast\u003cstd::string\u003e(cols.descriptions) )","                               .width( consoleWidth - 7 - optWidth );","                os \u003c\u003c row \u003c\u003c '\\n';","            }","        }","","        Detail::Result Parser::validate() const {","            for ( auto const\u0026 opt : m_options ) {","                auto result = opt.validate();","                if ( !result )","                    return result;","            }","            for ( auto const\u0026 arg : m_args ) {","                auto result = arg.validate();","                if ( !result )","                    return result;","            }","            return Detail::Result::ok();","        }","","        Detail::InternalParseResult","        Parser::parse( std::string const\u0026 exeName,","                       Detail::TokenStream tokens ) const {","","            struct ParserInfo {","                ParserBase const* parser = nullptr;","                size_t count = 0;","            };","            std::vector\u003cParserInfo\u003e parseInfos;","            parseInfos.reserve( m_options.size() + m_args.size() );","            for ( auto const\u0026 opt : m_options ) {","                parseInfos.push_back( { \u0026opt, 0 } );","            }","            for ( auto const\u0026 arg : m_args ) {","                parseInfos.push_back( { \u0026arg, 0 } );","            }","","            m_exeName.set( exeName );","","            auto result = Detail::InternalParseResult::ok(","                Detail::ParseState( ParseResultType::NoMatch, CATCH_MOVE(tokens) ) );","            while ( result.value().remainingTokens() ) {","                bool tokenParsed = false;","","                for ( auto\u0026 parseInfo : parseInfos ) {","                    if ( parseInfo.parser-\u003ecardinality() == 0 ||","                         parseInfo.count \u003c parseInfo.parser-\u003ecardinality() ) {","                        result = parseInfo.parser-\u003eparse(","                            exeName, CATCH_MOVE(result).value().remainingTokens() );","                        if ( !result )","                            return result;","                        if ( result.value().type() !=","                             ParseResultType::NoMatch ) {","                            tokenParsed = true;","                            ++parseInfo.count;","                            break;","                        }","                    }","                }","","                if ( result.value().type() == ParseResultType::ShortCircuitAll )","                    return result;","                if ( !tokenParsed )","                    return Detail::InternalParseResult::runtimeError(","                        \"Unrecognised token: \" +","                        result.value().remainingTokens()-\u003etoken );","            }","            // !TBD Check missing required options","            return result;","        }","","        Args::Args(int argc, char const* const* argv) :","            m_exeName(argv[0]), m_args(argv + 1, argv + argc) {}","","        Args::Args(std::initializer_list\u003cStringRef\u003e args) :","            m_exeName(*args.begin()),","            m_args(args.begin() + 1, args.end()) {}","","","        Help::Help( bool\u0026 showHelpFlag ):","            Opt( [\u0026]( bool flag ) {","                showHelpFlag = flag;","                return ParserResult::ok( ParseResultType::ShortCircuitAll );","            } ) {","            static_cast\u003cOpt\u0026\u003e ( *this )(","                \"display usage information\" )[\"-?\"][\"-h\"][\"--help\"]","                .optional();","        }","","    } // namespace Clara","} // namespace Catch","","","","","#include \u003cfstream\u003e","#include \u003cstring\u003e","","namespace Catch {","","    Clara::Parser makeCommandLineParser( ConfigData\u0026 config ) {","","        using namespace Clara;","","        auto const setWarning = [\u0026]( std::string const\u0026 warning ) {","            if ( warning == \"NoAssertions\" ) {","                config.warnings = static_cast\u003cWarnAbout::What\u003e(config.warnings | WarnAbout::NoAssertions);","                return ParserResult::ok( ParseResultType::Matched );","            } else if ( warning == \"UnmatchedTestSpec\" ) {","                config.warnings = static_cast\u003cWarnAbout::What\u003e(config.warnings | WarnAbout::UnmatchedTestSpec);","                return ParserResult::ok( ParseResultType::Matched );","            }","","            return ParserResult ::runtimeError(","                \"Unrecognised warning option: '\" + warning + '\\'' );","        };","        auto const loadTestNamesFromFile = [\u0026]( std::string const\u0026 filename ) {","                std::ifstream f( filename.c_str() );","                if( !f.is_open() )","                    return ParserResult::runtimeError( \"Unable to load input file: '\" + filename + '\\'' );","","                std::string line;","                while( std::getline( f, line ) ) {","                    line = trim(line);","                    if( !line.empty() \u0026\u0026 !startsWith( line, '#' ) ) {","                        if( !startsWith( line, '\"' ) )","                            line = '\"' + CATCH_MOVE(line) + '\"';","                        config.testsOrTags.push_back( line );","                        config.testsOrTags.emplace_back( \",\" );","                    }","                }","                //Remove comma in the end","                if(!config.testsOrTags.empty())","                    config.testsOrTags.erase( config.testsOrTags.end()-1 );","","                return ParserResult::ok( ParseResultType::Matched );","            };","        auto const setTestOrder = [\u0026]( std::string const\u0026 order ) {","                if( startsWith( \"declared\", order ) )","                    config.runOrder = TestRunOrder::Declared;","                else if( startsWith( \"lexical\", order ) )","                    config.runOrder = TestRunOrder::LexicographicallySorted;","                else if( startsWith( \"random\", order ) )","                    config.runOrder = TestRunOrder::Randomized;","                else","                    return ParserResult::runtimeError( \"Unrecognised ordering: '\" + order + '\\'' );","                return ParserResult::ok( ParseResultType::Matched );","            };","        auto const setRngSeed = [\u0026]( std::string const\u0026 seed ) {","                if( seed == \"time\" ) {","                    config.rngSeed = generateRandomSeed(GenerateFrom::Time);","                    return ParserResult::ok(ParseResultType::Matched);","                } else if (seed == \"random-device\") {","                    config.rngSeed = generateRandomSeed(GenerateFrom::RandomDevice);","                    return ParserResult::ok(ParseResultType::Matched);","                }","","                // TODO: ideally we should be parsing uint32_t directly","                //       fix this later when we add new parse overload","                auto parsedSeed = parseUInt( seed, 0 );","                if ( !parsedSeed ) {","                    return ParserResult::runtimeError( \"Could not parse '\" + seed + \"' as seed\" );","                }","                config.rngSeed = *parsedSeed;","                return ParserResult::ok( ParseResultType::Matched );","            };","        auto const setDefaultColourMode = [\u0026]( std::string const\u0026 colourMode ) {","            Optional\u003cColourMode\u003e maybeMode = Catch::Detail::stringToColourMode(toLower( colourMode ));","            if ( !maybeMode ) {","                return ParserResult::runtimeError(","                    \"colour mode must be one of: default, ansi, win32, \"","                    \"or none. '\" +","                    colourMode + \"' is not recognised\" );","            }","            auto mode = *maybeMode;","            if ( !isColourImplAvailable( mode ) ) {","                return ParserResult::runtimeError(","                    \"colour mode '\" + colourMode +","                    \"' is not supported in this binary\" );","            }","            config.defaultColourMode = mode;","            return ParserResult::ok( ParseResultType::Matched );","        };","        auto const setWaitForKeypress = [\u0026]( std::string const\u0026 keypress ) {","                auto keypressLc = toLower( keypress );","                if (keypressLc == \"never\")","                    config.waitForKeypress = WaitForKeypress::Never;","                else if( keypressLc == \"start\" )","                    config.waitForKeypress = WaitForKeypress::BeforeStart;","                else if( keypressLc == \"exit\" )","                    config.waitForKeypress = WaitForKeypress::BeforeExit;","                else if( keypressLc == \"both\" )","                    config.waitForKeypress = WaitForKeypress::BeforeStartAndExit;","                else","                    return ParserResult::runtimeError( \"keypress argument must be one of: never, start, exit or both. '\" + keypress + \"' not recognised\" );","            return ParserResult::ok( ParseResultType::Matched );","            };","        auto const setVerbosity = [\u0026]( std::string const\u0026 verbosity ) {","            auto lcVerbosity = toLower( verbosity );","            if( lcVerbosity == \"quiet\" )","                config.verbosity = Verbosity::Quiet;","            else if( lcVerbosity == \"normal\" )","                config.verbosity = Verbosity::Normal;","            else if( lcVerbosity == \"high\" )","                config.verbosity = Verbosity::High;","            else","                return ParserResult::runtimeError( \"Unrecognised verbosity, '\" + verbosity + '\\'' );","            return ParserResult::ok( ParseResultType::Matched );","        };","        auto const setReporter = [\u0026]( std::string const\u0026 userReporterSpec ) {","            if ( userReporterSpec.empty() ) {","                return ParserResult::runtimeError( \"Received empty reporter spec.\" );","            }","","            Optional\u003cReporterSpec\u003e parsed =","                parseReporterSpec( userReporterSpec );","            if ( !parsed ) {","                return ParserResult::runtimeError(","                    \"Could not parse reporter spec '\" + userReporterSpec +","                    \"'\" );","            }","","            auto const\u0026 reporterSpec = *parsed;","","            auto const\u0026 factories =","                getRegistryHub().getReporterRegistry().getFactories();","            auto result = factories.find( reporterSpec.name() );","","            if ( result == factories.end() ) {","                return ParserResult::runtimeError(","                    \"Unrecognized reporter, '\" + reporterSpec.name() +","                    \"'. Check available with --list-reporters\" );","            }","","","            const bool hadOutputFile = reporterSpec.outputFile().some();","            config.reporterSpecifications.push_back( CATCH_MOVE( *parsed ) );","            // It would be enough to check this only once at the very end, but","            // there is  not a place where we could call this check, so do it","            // every time it could fail. For valid inputs, this is still called","            // at most once.","            if (!hadOutputFile) {","                int n_reporters_without_file = 0;","                for (auto const\u0026 spec : config.reporterSpecifications) {","                    if (spec.outputFile().none()) {","                        n_reporters_without_file++;","                    }","                }","                if (n_reporters_without_file \u003e 1) {","                    return ParserResult::runtimeError( \"Only one reporter may have unspecified output file.\" );","                }","            }","","            return ParserResult::ok( ParseResultType::Matched );","        };","        auto const setShardCount = [\u0026]( std::string const\u0026 shardCount ) {","            auto parsedCount = parseUInt( shardCount );","            if ( !parsedCount ) {","                return ParserResult::runtimeError(","                    \"Could not parse '\" + shardCount + \"' as shard count\" );","            }","            if ( *parsedCount == 0 ) {","                return ParserResult::runtimeError(","                    \"Shard count must be positive\" );","            }","            config.shardCount = *parsedCount;","            return ParserResult::ok( ParseResultType::Matched );","        };","","        auto const setShardIndex = [\u0026](std::string const\u0026 shardIndex) {","            auto parsedIndex = parseUInt( shardIndex );","            if ( !parsedIndex ) {","                return ParserResult::runtimeError(","                    \"Could not parse '\" + shardIndex + \"' as shard index\" );","            }","            config.shardIndex = *parsedIndex;","            return ParserResult::ok( ParseResultType::Matched );","        };","","        auto cli","            = ExeName( config.processName )","            | Help( config.showHelp )","            | Opt( config.showSuccessfulTests )","                [\"-s\"][\"--success\"]","                ( \"include successful tests in output\" )","            | Opt( config.shouldDebugBreak )","                [\"-b\"][\"--break\"]","                ( \"break into debugger on failure\" )","            | Opt( config.noThrow )","                [\"-e\"][\"--nothrow\"]","                ( \"skip exception tests\" )","            | Opt( config.showInvisibles )","                [\"-i\"][\"--invisibles\"]","                ( \"show invisibles (tabs, newlines)\" )","            | Opt( config.defaultOutputFilename, \"filename\" )","                [\"-o\"][\"--out\"]","                ( \"default output filename\" )","            | Opt( accept_many, setReporter, \"name[::key=value]*\" )","                [\"-r\"][\"--reporter\"]","                ( \"reporter to use (defaults to console)\" )","            | Opt( config.name, \"name\" )","                [\"-n\"][\"--name\"]","                ( \"suite name\" )","            | Opt( [\u0026]( bool ){ config.abortAfter = 1; } )","                [\"-a\"][\"--abort\"]","                ( \"abort at first failure\" )","            | Opt( [\u0026]( int x ){ config.abortAfter = x; }, \"no. failures\" )","                [\"-x\"][\"--abortx\"]","                ( \"abort after x failures\" )","            | Opt( accept_many, setWarning, \"warning name\" )","                [\"-w\"][\"--warn\"]","                ( \"enable warnings\" )","            | Opt( [\u0026]( bool flag ) { config.showDurations = flag ? ShowDurations::Always : ShowDurations::Never; }, \"yes|no\" )","                [\"-d\"][\"--durations\"]","                ( \"show test durations\" )","            | Opt( config.minDuration, \"seconds\" )","                [\"-D\"][\"--min-duration\"]","                ( \"show test durations for tests taking at least the given number of seconds\" )","            | Opt( loadTestNamesFromFile, \"filename\" )","                [\"-f\"][\"--input-file\"]","                ( \"load test names to run from a file\" )","            | Opt( config.filenamesAsTags )","                [\"-#\"][\"--filenames-as-tags\"]","                ( \"adds a tag for the filename\" )","            | Opt( config.sectionsToRun, \"section name\" )","                [\"-c\"][\"--section\"]","                ( \"specify section to run\" )","            | Opt( setVerbosity, \"quiet|normal|high\" )","                [\"-v\"][\"--verbosity\"]","                ( \"set output verbosity\" )","            | Opt( config.listTests )","                [\"--list-tests\"]","                ( \"list all/matching test cases\" )","            | Opt( config.listTags )","                [\"--list-tags\"]","                ( \"list all/matching tags\" )","            | Opt( config.listReporters )","                [\"--list-reporters\"]","                ( \"list all available reporters\" )","            | Opt( config.listListeners )","                [\"--list-listeners\"]","                ( \"list all listeners\" )","            | Opt( setTestOrder, \"decl|lex|rand\" )","                [\"--order\"]","                ( \"test case order (defaults to decl)\" )","            | Opt( setRngSeed, \"'time'|'random-device'|number\" )","                [\"--rng-seed\"]","                ( \"set a specific seed for random numbers\" )","            | Opt( setDefaultColourMode, \"ansi|win32|none|default\" )","                [\"--colour-mode\"]","                ( \"what color mode should be used as default\" )","            | Opt( config.libIdentify )","                [\"--libidentify\"]","                ( \"report name and version according to libidentify standard\" )","            | Opt( setWaitForKeypress, \"never|start|exit|both\" )","                [\"--wait-for-keypress\"]","                ( \"waits for a keypress before exiting\" )","            | Opt( config.skipBenchmarks)","                [\"--skip-benchmarks\"]","                ( \"disable running benchmarks\")","            | Opt( config.benchmarkSamples, \"samples\" )","                [\"--benchmark-samples\"]","                ( \"number of samples to collect (default: 100)\" )","            | Opt( config.benchmarkResamples, \"resamples\" )","                [\"--benchmark-resamples\"]","                ( \"number of resamples for the bootstrap (default: 100000)\" )","            | Opt( config.benchmarkConfidenceInterval, \"confidence interval\" )","                [\"--benchmark-confidence-interval\"]","                ( \"confidence interval for the bootstrap (between 0 and 1, default: 0.95)\" )","            | Opt( config.benchmarkNoAnalysis )","                [\"--benchmark-no-analysis\"]","                ( \"perform only measurements; do not perform any analysis\" )","            | Opt( config.benchmarkWarmupTime, \"benchmarkWarmupTime\" )","                [\"--benchmark-warmup-time\"]","                ( \"amount of time in milliseconds spent on warming up each test (default: 100)\" )","            | Opt( setShardCount, \"shard count\" )","                [\"--shard-count\"]","                ( \"split the tests to execute into this many groups\" )","            | Opt( setShardIndex, \"shard index\" )","                [\"--shard-index\"]","                ( \"index of the group of tests to execute (see --shard-count)\" )","            | Opt( config.allowZeroTests )","                [\"--allow-running-no-tests\"]","                ( \"Treat 'No tests run' as a success\" )","            | Arg( config.testsOrTags, \"test name|pattern|tags\" )","                ( \"which test or tests to use\" );","","        return cli;","    }","","} // end namespace Catch","","","#if defined(__clang__)","#    pragma clang diagnostic push","#    pragma clang diagnostic ignored \"-Wexit-time-destructors\"","#endif","","","","#include \u003ccassert\u003e","#include \u003costream\u003e","#include \u003cutility\u003e","","namespace Catch {","","    ColourImpl::~ColourImpl() = default;","","    ColourImpl::ColourGuard ColourImpl::guardColour( Colour::Code colourCode ) {","        return ColourGuard(colourCode, this );","    }","","    void ColourImpl::ColourGuard::engageImpl( std::ostream\u0026 stream ) {","        assert( \u0026stream == \u0026m_colourImpl-\u003em_stream-\u003estream() \u0026\u0026","                \"Engaging colour guard for different stream than used by the \"","                \"parent colour implementation\" );","        static_cast\u003cvoid\u003e( stream );","","        m_engaged = true;","        m_colourImpl-\u003euse( m_code );","    }","","    ColourImpl::ColourGuard::ColourGuard( Colour::Code code,","                                          ColourImpl const* colour ):","        m_colourImpl( colour ), m_code( code ) {","    }","    ColourImpl::ColourGuard::ColourGuard( ColourGuard\u0026\u0026 rhs ) noexcept:","        m_colourImpl( rhs.m_colourImpl ),","        m_code( rhs.m_code ),","        m_engaged( rhs.m_engaged ) {","        rhs.m_engaged = false;","    }","    ColourImpl::ColourGuard\u0026","    ColourImpl::ColourGuard::operator=( ColourGuard\u0026\u0026 rhs ) noexcept {","        using std::swap;","        swap( m_colourImpl, rhs.m_colourImpl );","        swap( m_code, rhs.m_code );","        swap( m_engaged, rhs.m_engaged );","","        return *this;","    }","    ColourImpl::ColourGuard::~ColourGuard() {","        if ( m_engaged ) {","            m_colourImpl-\u003euse( Colour::None );","        }","    }","","    ColourImpl::ColourGuard\u0026","    ColourImpl::ColourGuard::engage( std::ostream\u0026 stream ) \u0026 {","        engageImpl( stream );","        return *this;","    }","","    ColourImpl::ColourGuard\u0026\u0026","    ColourImpl::ColourGuard::engage( std::ostream\u0026 stream ) \u0026\u0026 {","        engageImpl( stream );","        return CATCH_MOVE(*this);","    }","","    namespace {","        //! A do-nothing implementation of colour, used as fallback for unknown","        //! platforms, and when the user asks to deactivate all colours.","        class NoColourImpl final : public ColourImpl {","        public:","            NoColourImpl( IStream* stream ): ColourImpl( stream ) {}","","        private:","            void use( Colour::Code ) const override {}","        };","    } // namespace","","","} // namespace Catch","","","#if defined ( CATCH_CONFIG_COLOUR_WIN32 ) /////////////////////////////////////////","","namespace Catch {","namespace {","","    class Win32ColourImpl final : public ColourImpl {","    public:","        Win32ColourImpl(IStream* stream):","            ColourImpl(stream) {","            CONSOLE_SCREEN_BUFFER_INFO csbiInfo;","            GetConsoleScreenBufferInfo( GetStdHandle( STD_OUTPUT_HANDLE ),","                                        \u0026csbiInfo );","            originalForegroundAttributes = csbiInfo.wAttributes \u0026 ~( BACKGROUND_GREEN | BACKGROUND_RED | BACKGROUND_BLUE | BACKGROUND_INTENSITY );","            originalBackgroundAttributes = csbiInfo.wAttributes \u0026 ~( FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_INTENSITY );","        }","","        static bool useImplementationForStream(IStream const\u0026 stream) {","            // Win32 text colour APIs can only be used on console streams","            // We cannot check that the output hasn't been redirected,","            // so we just check that the original stream is console stream.","            return stream.isConsole();","        }","","    private:","        void use( Colour::Code _colourCode ) const override {","            switch( _colourCode ) {","                case Colour::None:      return setTextAttribute( originalForegroundAttributes );","                case Colour::White:     return setTextAttribute( FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE );","                case Colour::Red:       return setTextAttribute( FOREGROUND_RED );","                case Colour::Green:     return setTextAttribute( FOREGROUND_GREEN );","                case Colour::Blue:      return setTextAttribute( FOREGROUND_BLUE );","                case Colour::Cyan:      return setTextAttribute( FOREGROUND_BLUE | FOREGROUND_GREEN );","                case Colour::Yellow:    return setTextAttribute( FOREGROUND_RED | FOREGROUND_GREEN );","                case Colour::Grey:      return setTextAttribute( 0 );","","                case Colour::LightGrey:     return setTextAttribute( FOREGROUND_INTENSITY );","                case Colour::BrightRed:     return setTextAttribute( FOREGROUND_INTENSITY | FOREGROUND_RED );","                case Colour::BrightGreen:   return setTextAttribute( FOREGROUND_INTENSITY | FOREGROUND_GREEN );","                case Colour::BrightWhite:   return setTextAttribute( FOREGROUND_INTENSITY | FOREGROUND_GREEN | FOREGROUND_RED | FOREGROUND_BLUE );","                case Colour::BrightYellow:  return setTextAttribute( FOREGROUND_INTENSITY | FOREGROUND_RED | FOREGROUND_GREEN );","","                case Colour::Bright: CATCH_INTERNAL_ERROR( \"not a colour\" );","","                default:","                    CATCH_ERROR( \"Unknown colour requested\" );","            }","        }","","        void setTextAttribute( WORD _textAttribute ) const {","            SetConsoleTextAttribute( GetStdHandle( STD_OUTPUT_HANDLE ),","                                     _textAttribute |","                                         originalBackgroundAttributes );","        }","        WORD originalForegroundAttributes;","        WORD originalBackgroundAttributes;","    };","","} // end anon namespace","} // end namespace Catch","","#endif // Windows/ ANSI/ None","","","#if defined( CATCH_PLATFORM_LINUX ) || defined( CATCH_PLATFORM_MAC ) || defined( __GLIBC__ )","#    define CATCH_INTERNAL_HAS_ISATTY","#    include \u003cunistd.h\u003e","#endif","","namespace Catch {","namespace {","","    class ANSIColourImpl final : public ColourImpl {","    public:","        ANSIColourImpl( IStream* stream ): ColourImpl( stream ) {}","","        static bool useImplementationForStream(IStream const\u0026 stream) {","            // This is kinda messy due to trying to support a bunch of","            // different platforms at once.","            // The basic idea is that if we are asked to do autodetection (as","            // opposed to being told to use posixy colours outright), then we","            // only want to use the colours if we are writing to console.","            // However, console might be redirected, so we make an attempt at","            // checking for that on platforms where we know how to do that.","            bool useColour = stream.isConsole();","#if defined( CATCH_INTERNAL_HAS_ISATTY ) \u0026\u0026 \\","    !( defined( __DJGPP__ ) \u0026\u0026 defined( __STRICT_ANSI__ ) )","            ErrnoGuard _; // for isatty","            useColour = useColour \u0026\u0026 isatty( STDOUT_FILENO );","#    endif","#    if defined( CATCH_PLATFORM_MAC ) || defined( CATCH_PLATFORM_IPHONE )","            useColour = useColour \u0026\u0026 !isDebuggerActive();","#    endif","","            return useColour;","        }","","    private:","        void use( Colour::Code _colourCode ) const override {","            auto setColour = [\u0026out =","                                  m_stream-\u003estream()]( char const* escapeCode ) {","                // The escape sequence must be flushed to console, otherwise","                // if stdin and stderr are intermixed, we'd get accidentally","                // coloured output.","                out \u003c\u003c '\\033' \u003c\u003c escapeCode \u003c\u003c std::flush;","            };","            switch( _colourCode ) {","                case Colour::None:","                case Colour::White:     return setColour( \"[0m\" );","                case Colour::Red:       return setColour( \"[0;31m\" );","                case Colour::Green:     return setColour( \"[0;32m\" );","                case Colour::Blue:      return setColour( \"[0;34m\" );","                case Colour::Cyan:      return setColour( \"[0;36m\" );","                case Colour::Yellow:    return setColour( \"[0;33m\" );","                case Colour::Grey:      return setColour( \"[1;30m\" );","","                case Colour::LightGrey:     return setColour( \"[0;37m\" );","                case Colour::BrightRed:     return setColour( \"[1;31m\" );","                case Colour::BrightGreen:   return setColour( \"[1;32m\" );","                case Colour::BrightWhite:   return setColour( \"[1;37m\" );","                case Colour::BrightYellow:  return setColour( \"[1;33m\" );","","                case Colour::Bright: CATCH_INTERNAL_ERROR( \"not a colour\" );","                default: CATCH_INTERNAL_ERROR( \"Unknown colour requested\" );","            }","        }","    };","","} // end anon namespace","} // end namespace Catch","","namespace Catch {","","    Detail::unique_ptr\u003cColourImpl\u003e makeColourImpl( ColourMode colourSelection,","                                                   IStream* stream ) {","#if defined( CATCH_CONFIG_COLOUR_WIN32 )","        if ( colourSelection == ColourMode::Win32 ) {","            return Detail::make_unique\u003cWin32ColourImpl\u003e( stream );","        }","#endif","        if ( colourSelection == ColourMode::ANSI ) {","            return Detail::make_unique\u003cANSIColourImpl\u003e( stream );","        }","        if ( colourSelection == ColourMode::None ) {","            return Detail::make_unique\u003cNoColourImpl\u003e( stream );","        }","","        if ( colourSelection == ColourMode::PlatformDefault) {","#if defined( CATCH_CONFIG_COLOUR_WIN32 )","            if ( Win32ColourImpl::useImplementationForStream( *stream ) ) {","                return Detail::make_unique\u003cWin32ColourImpl\u003e( stream );","            }","#endif","            if ( ANSIColourImpl::useImplementationForStream( *stream ) ) {","                return Detail::make_unique\u003cANSIColourImpl\u003e( stream );","            }","            return Detail::make_unique\u003cNoColourImpl\u003e( stream );","        }","","        CATCH_ERROR( \"Could not create colour impl for selection \" \u003c\u003c static_cast\u003cint\u003e(colourSelection) );","    }","","    bool isColourImplAvailable( ColourMode colourSelection ) {","        switch ( colourSelection ) {","#if defined( CATCH_CONFIG_COLOUR_WIN32 )","        case ColourMode::Win32:","#endif","        case ColourMode::ANSI:","        case ColourMode::None:","        case ColourMode::PlatformDefault:","            return true;","        default:","            return false;","        }","    }","","","} // end namespace Catch","","#if defined(__clang__)","#    pragma clang diagnostic pop","#endif","","","","","namespace Catch {","","    Context* Context::currentContext = nullptr;","","    void cleanUpContext() {","        delete Context::currentContext;","        Context::currentContext = nullptr;","    }","    void Context::createContext() {","        currentContext = new Context();","    }","","    Context\u0026 getCurrentMutableContext() {","        if ( !Context::currentContext ) { Context::createContext(); }","        // NOLINTNEXTLINE(clang-analyzer-core.uninitialized.UndefReturn)","        return *Context::currentContext;","    }","","    SimplePcg32\u0026 sharedRng() {","        static SimplePcg32 s_rng;","        return s_rng;","    }","","}","","","","","","#include \u003costream\u003e","","#if defined(CATCH_CONFIG_ANDROID_LOGWRITE)","#include \u003candroid/log.h\u003e","","    namespace Catch {","        void writeToDebugConsole( std::string const\u0026 text ) {","            __android_log_write( ANDROID_LOG_DEBUG, \"Catch\", text.c_str() );","        }","    }","","#elif defined(CATCH_PLATFORM_WINDOWS)","","    namespace Catch {","        void writeToDebugConsole( std::string const\u0026 text ) {","            ::OutputDebugStringA( text.c_str() );","        }","    }","","#else","","    namespace Catch {","        void writeToDebugConsole( std::string const\u0026 text ) {","            // !TBD: Need a version for Mac/ XCode and other IDEs","            Catch::cout() \u003c\u003c text;","        }","    }","","#endif // Platform","","","","#if defined(CATCH_PLATFORM_MAC) || defined(CATCH_PLATFORM_IPHONE)","","#  include \u003ccassert\u003e","#  include \u003csys/types.h\u003e","#  include \u003cunistd.h\u003e","#  include \u003ccstddef\u003e","#  include \u003costream\u003e","","#ifdef __apple_build_version__","    // These headers will only compile with AppleClang (XCode)","    // For other compilers (Clang, GCC, ... ) we need to exclude them","#  include \u003csys/sysctl.h\u003e","#endif","","    namespace Catch {","        #ifdef __apple_build_version__","        // The following function is taken directly from the following technical note:","        // https://developer.apple.com/library/archive/qa/qa1361/_index.html","","        // Returns true if the current process is being debugged (either","        // running under the debugger or has a debugger attached post facto).","        bool isDebuggerActive(){","            int                 mib[4];","            struct kinfo_proc   info;","            std::size_t         size;","","            // Initialize the flags so that, if sysctl fails for some bizarre","            // reason, we get a predictable result.","","            info.kp_proc.p_flag = 0;","","            // Initialize mib, which tells sysctl the info we want, in this case","            // we're looking for information about a specific process ID.","","            mib[0] = CTL_KERN;","            mib[1] = KERN_PROC;","            mib[2] = KERN_PROC_PID;","            mib[3] = getpid();","","            // Call sysctl.","","            size = sizeof(info);","            if( sysctl(mib, sizeof(mib) / sizeof(*mib), \u0026info, \u0026size, nullptr, 0) != 0 ) {","                Catch::cerr() \u003c\u003c \"\\n** Call to sysctl failed - unable to determine if debugger is active **\\n\\n\" \u003c\u003c std::flush;","                return false;","            }","","            // We're being debugged if the P_TRACED flag is set.","","            return ( (info.kp_proc.p_flag \u0026 P_TRACED) != 0 );","        }","        #else","        bool isDebuggerActive() {","            // We need to find another way to determine this for non-appleclang compilers on macOS","            return false;","        }","        #endif","    } // namespace Catch","","#elif defined(CATCH_PLATFORM_LINUX)","    #include \u003cfstream\u003e","    #include \u003cstring\u003e","","    namespace Catch{","        // The standard POSIX way of detecting a debugger is to attempt to","        // ptrace() the process, but this needs to be done from a child and not","        // this process itself to still allow attaching to this process later","        // if wanted, so is rather heavy. Under Linux we have the PID of the","        // \"debugger\" (which doesn't need to be gdb, of course, it could also","        // be strace, for example) in /proc/$PID/status, so just get it from","        // there instead.","        bool isDebuggerActive(){","            // Libstdc++ has a bug, where std::ifstream sets errno to 0","            // This way our users can properly assert over errno values","            ErrnoGuard guard;","            std::ifstream in(\"/proc/self/status\");","            for( std::string line; std::getline(in, line); ) {","                static const int PREFIX_LEN = 11;","                if( line.compare(0, PREFIX_LEN, \"TracerPid:\\t\") == 0 ) {","                    // We're traced if the PID is not 0 and no other PID starts","                    // with 0 digit, so it's enough to check for just a single","                    // character.","                    return line.length() \u003e PREFIX_LEN \u0026\u0026 line[PREFIX_LEN] != '0';","                }","            }","","            return false;","        }","    } // namespace Catch","#elif defined(_MSC_VER)","    extern \"C\" __declspec(dllimport) int __stdcall IsDebuggerPresent();","    namespace Catch {","        bool isDebuggerActive() {","            return IsDebuggerPresent() != 0;","        }","    }","#elif defined(__MINGW32__)","    extern \"C\" __declspec(dllimport) int __stdcall IsDebuggerPresent();","    namespace Catch {","        bool isDebuggerActive() {","            return IsDebuggerPresent() != 0;","        }","    }","#else","    namespace Catch {","       bool isDebuggerActive() { return false; }","    }","#endif // Platform","","","","","namespace Catch {","","    void ITransientExpression::streamReconstructedExpression(","        std::ostream\u0026 os ) const {","        // We can't make this function pure virtual to keep ITransientExpression","        // constexpr, so we write error message instead","        os \u003c\u003c \"Some class derived from ITransientExpression without overriding streamReconstructedExpression\";","    }","","    void formatReconstructedExpression( std::ostream \u0026os, std::string const\u0026 lhs, StringRef op, std::string const\u0026 rhs ) {","        if( lhs.size() + rhs.size() \u003c 40 \u0026\u0026","                lhs.find('\\n') == std::string::npos \u0026\u0026","                rhs.find('\\n') == std::string::npos )","            os \u003c\u003c lhs \u003c\u003c ' ' \u003c\u003c op \u003c\u003c ' ' \u003c\u003c rhs;","        else","            os \u003c\u003c lhs \u003c\u003c '\\n' \u003c\u003c op \u003c\u003c '\\n' \u003c\u003c rhs;","    }","}","","","","#include \u003cstdexcept\u003e","","","namespace Catch {","#if defined(CATCH_CONFIG_DISABLE_EXCEPTIONS) \u0026\u0026 !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS_CUSTOM_HANDLER)","    [[noreturn]]","    void throw_exception(std::exception const\u0026 e) {","        Catch::cerr() \u003c\u003c \"Catch will terminate because it needed to throw an exception.\\n\"","                      \u003c\u003c \"The message was: \" \u003c\u003c e.what() \u003c\u003c '\\n';","        std::terminate();","    }","#endif","","    [[noreturn]]","    void throw_logic_error(std::string const\u0026 msg) {","        throw_exception(std::logic_error(msg));","    }","","    [[noreturn]]","    void throw_domain_error(std::string const\u0026 msg) {","        throw_exception(std::domain_error(msg));","    }","","    [[noreturn]]","    void throw_runtime_error(std::string const\u0026 msg) {","        throw_exception(std::runtime_error(msg));","    }","","","","} // namespace Catch;","","","","#include \u003ccassert\u003e","","namespace Catch {","","    IMutableEnumValuesRegistry::~IMutableEnumValuesRegistry() = default;","","    namespace Detail {","","        namespace {","            // Extracts the actual name part of an enum instance","            // In other words, it returns the Blue part of Bikeshed::Colour::Blue","            StringRef extractInstanceName(StringRef enumInstance) {","                // Find last occurrence of \":\"","                size_t name_start = enumInstance.size();","                while (name_start \u003e 0 \u0026\u0026 enumInstance[name_start - 1] != ':') {","                    --name_start;","                }","                return enumInstance.substr(name_start, enumInstance.size() - name_start);","            }","        }","","        std::vector\u003cStringRef\u003e parseEnums( StringRef enums ) {","            auto enumValues = splitStringRef( enums, ',' );","            std::vector\u003cStringRef\u003e parsed;","            parsed.reserve( enumValues.size() );","            for( auto const\u0026 enumValue : enumValues ) {","                parsed.push_back(trim(extractInstanceName(enumValue)));","            }","            return parsed;","        }","","        EnumInfo::~EnumInfo() = default;","","        StringRef EnumInfo::lookup( int value ) const {","            for( auto const\u0026 valueToName : m_values ) {","                if( valueToName.first == value )","                    return valueToName.second;","            }","            return \"{** unexpected enum value **}\"_sr;","        }","","        Catch::Detail::unique_ptr\u003cEnumInfo\u003e makeEnumInfo( StringRef enumName, StringRef allValueNames, std::vector\u003cint\u003e const\u0026 values ) {","            auto enumInfo = Catch::Detail::make_unique\u003cEnumInfo\u003e();","            enumInfo-\u003em_name = enumName;","            enumInfo-\u003em_values.reserve( values.size() );","","            const auto valueNames = Catch::Detail::parseEnums( allValueNames );","            assert( valueNames.size() == values.size() );","            std::size_t i = 0;","            for( auto value : values )","                enumInfo-\u003em_values.emplace_back(value, valueNames[i++]);","","            return enumInfo;","        }","","        EnumInfo const\u0026 EnumValuesRegistry::registerEnum( StringRef enumName, StringRef allValueNames, std::vector\u003cint\u003e const\u0026 values ) {","            m_enumInfos.push_back(makeEnumInfo(enumName, allValueNames, values));","            return *m_enumInfos.back();","        }","","    } // Detail","} // Catch","","","","","","#include \u003ccerrno\u003e","","namespace Catch {","        ErrnoGuard::ErrnoGuard():m_oldErrno(errno){}","        ErrnoGuard::~ErrnoGuard() { errno = m_oldErrno; }","}","","","","#include \u003cexception\u003e","","namespace Catch {","","#if !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)","    namespace {","        static std::string tryTranslators(","            std::vector\u003c","                Detail::unique_ptr\u003cIExceptionTranslator const\u003e\u003e const\u0026 translators ) {","            if ( translators.empty() ) {","                std::rethrow_exception( std::current_exception() );","            } else {","                return translators[0]-\u003etranslate( translators.begin() + 1,","                                                  translators.end() );","            }","        }","","    }","#endif //!defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)","","    ExceptionTranslatorRegistry::~ExceptionTranslatorRegistry() = default;","","    void ExceptionTranslatorRegistry::registerTranslator( Detail::unique_ptr\u003cIExceptionTranslator\u003e\u0026\u0026 translator ) {","        m_translators.push_back( CATCH_MOVE( translator ) );","    }","","#if !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)","    std::string ExceptionTranslatorRegistry::translateActiveException() const {","        // Compiling a mixed mode project with MSVC means that CLR","        // exceptions will be caught in (...) as well. However, these do","        // do not fill-in std::current_exception and thus lead to crash","        // when attempting rethrow.","        // /EHa switch also causes structured exceptions to be caught","        // here, but they fill-in current_exception properly, so","        // at worst the output should be a little weird, instead of","        // causing a crash.","        if ( std::current_exception() == nullptr ) {","            return \"Non C++ exception. Possibly a CLR exception.\";","        }","","        // First we try user-registered translators. If none of them can","        // handle the exception, it will be rethrown handled by our defaults.","        try {","            return tryTranslators(m_translators);","        }","        // To avoid having to handle TFE explicitly everywhere, we just","        // rethrow it so that it goes back up the caller.","        catch( TestFailureException\u0026 ) {","            std::rethrow_exception(std::current_exception());","        }","        catch( TestSkipException\u0026 ) {","            std::rethrow_exception(std::current_exception());","        }","        catch( std::exception const\u0026 ex ) {","            return ex.what();","        }","        catch( std::string const\u0026 msg ) {","            return msg;","        }","        catch( const char* msg ) {","            return msg;","        }","        catch(...) {","            return \"Unknown exception\";","        }","    }","","#else // ^^ Exceptions are enabled // Exceptions are disabled vv","    std::string ExceptionTranslatorRegistry::translateActiveException() const {","        CATCH_INTERNAL_ERROR(\"Attempted to translate active exception under CATCH_CONFIG_DISABLE_EXCEPTIONS!\");","    }","#endif","","}","","","","/** \\file"," * This file provides platform specific implementations of FatalConditionHandler"," *"," * This means that there is a lot of conditional compilation, and platform"," * specific code. Currently, Catch2 supports a dummy handler (if no"," * handler is desired), and 2 platform specific handlers:"," *  * Windows' SEH"," *  * POSIX signals"," *"," * Consequently, various pieces of code below are compiled if either of"," * the platform specific handlers is enabled, or if none of them are"," * enabled. It is assumed that both cannot be enabled at the same time,"," * and doing so should cause a compilation error."," *"," * If another platform specific handler is added, the compile guards"," * below will need to be updated taking these assumptions into account."," */","","","","#include \u003calgorithm\u003e","","#if !defined( CATCH_CONFIG_WINDOWS_SEH ) \u0026\u0026 !defined( CATCH_CONFIG_POSIX_SIGNALS )","","namespace Catch {","","    // If neither SEH nor signal handling is required, the handler impls","    // do not have to do anything, and can be empty.","    void FatalConditionHandler::engage_platform() {}","    void FatalConditionHandler::disengage_platform() noexcept {}","    FatalConditionHandler::FatalConditionHandler() = default;","    FatalConditionHandler::~FatalConditionHandler() = default;","","} // end namespace Catch","","#endif // !CATCH_CONFIG_WINDOWS_SEH \u0026\u0026 !CATCH_CONFIG_POSIX_SIGNALS","","#if defined( CATCH_CONFIG_WINDOWS_SEH ) \u0026\u0026 defined( CATCH_CONFIG_POSIX_SIGNALS )","#error \"Inconsistent configuration: Windows' SEH handling and POSIX signals cannot be enabled at the same time\"","#endif // CATCH_CONFIG_WINDOWS_SEH \u0026\u0026 CATCH_CONFIG_POSIX_SIGNALS","","#if defined( CATCH_CONFIG_WINDOWS_SEH ) || defined( CATCH_CONFIG_POSIX_SIGNALS )","","namespace {","    //! Signals fatal error message to the run context","    void reportFatal( char const * const message ) {","        Catch::getCurrentContext().getResultCapture()-\u003ehandleFatalErrorCondition( message );","    }","","    //! Minimal size Catch2 needs for its own fatal error handling.","    //! Picked empirically, so it might not be sufficient on all","    //! platforms, and for all configurations.","    constexpr std::size_t minStackSizeForErrors = 32 * 1024;","} // end unnamed namespace","","#endif // CATCH_CONFIG_WINDOWS_SEH || CATCH_CONFIG_POSIX_SIGNALS","","#if defined( CATCH_CONFIG_WINDOWS_SEH )","","namespace Catch {","","    struct SignalDefs { DWORD id; const char* name; };","","    // There is no 1-1 mapping between signals and windows exceptions.","    // Windows can easily distinguish between SO and SigSegV,","    // but SigInt, SigTerm, etc are handled differently.","    static SignalDefs signalDefs[] = {","        { EXCEPTION_ILLEGAL_INSTRUCTION,  \"SIGILL - Illegal instruction signal\" },","        { EXCEPTION_STACK_OVERFLOW, \"SIGSEGV - Stack overflow\" },","        { EXCEPTION_ACCESS_VIOLATION, \"SIGSEGV - Segmentation violation signal\" },","        { EXCEPTION_INT_DIVIDE_BY_ZERO, \"Divide by zero error\" },","    };","","    static LONG CALLBACK topLevelExceptionFilter(PEXCEPTION_POINTERS ExceptionInfo) {","        for (auto const\u0026 def : signalDefs) {","            if (ExceptionInfo-\u003eExceptionRecord-\u003eExceptionCode == def.id) {","                reportFatal(def.name);","            }","        }","        // If its not an exception we care about, pass it along.","        // This stops us from eating debugger breaks etc.","        return EXCEPTION_CONTINUE_SEARCH;","    }","","    // Since we do not support multiple instantiations, we put these","    // into global variables and rely on cleaning them up in outlined","    // constructors/destructors","    static LPTOP_LEVEL_EXCEPTION_FILTER previousTopLevelExceptionFilter = nullptr;","","","    // For MSVC, we reserve part of the stack memory for handling","    // memory overflow structured exception.","    FatalConditionHandler::FatalConditionHandler() {","        ULONG guaranteeSize = static_cast\u003cULONG\u003e(minStackSizeForErrors);","        if (!SetThreadStackGuarantee(\u0026guaranteeSize)) {","            // We do not want to fully error out, because needing","            // the stack reserve should be rare enough anyway.","            Catch::cerr()","                \u003c\u003c \"Failed to reserve piece of stack.\"","                \u003c\u003c \" Stack overflows will not be reported successfully.\";","        }","    }","","    // We do not attempt to unset the stack guarantee, because","    // Windows does not support lowering the stack size guarantee.","    FatalConditionHandler::~FatalConditionHandler() = default;","","","    void FatalConditionHandler::engage_platform() {","        // Register as a the top level exception filter.","        previousTopLevelExceptionFilter = SetUnhandledExceptionFilter(topLevelExceptionFilter);","    }","","    void FatalConditionHandler::disengage_platform() noexcept {","        if (SetUnhandledExceptionFilter(previousTopLevelExceptionFilter) != topLevelExceptionFilter) {","            Catch::cerr()","                \u003c\u003c \"Unexpected SEH unhandled exception filter on disengage.\"","                \u003c\u003c \" The filter was restored, but might be rolled back unexpectedly.\";","        }","        previousTopLevelExceptionFilter = nullptr;","    }","","} // end namespace Catch","","#endif // CATCH_CONFIG_WINDOWS_SEH","","#if defined( CATCH_CONFIG_POSIX_SIGNALS )","","#include \u003csignal.h\u003e","","namespace Catch {","","    struct SignalDefs {","        int id;","        const char* name;","    };","","    static SignalDefs signalDefs[] = {","        { SIGINT,  \"SIGINT - Terminal interrupt signal\" },","        { SIGILL,  \"SIGILL - Illegal instruction signal\" },","        { SIGFPE,  \"SIGFPE - Floating point error signal\" },","        { SIGSEGV, \"SIGSEGV - Segmentation violation signal\" },","        { SIGTERM, \"SIGTERM - Termination request signal\" },","        { SIGABRT, \"SIGABRT - Abort (abnormal termination) signal\" }","    };","","// Older GCCs trigger -Wmissing-field-initializers for T foo = {}","// which is zero initialization, but not explicit. We want to avoid","// that.","#if defined(__GNUC__)","#    pragma GCC diagnostic push","#    pragma GCC diagnostic ignored \"-Wmissing-field-initializers\"","#endif","","    static char* altStackMem = nullptr;","    static std::size_t altStackSize = 0;","    static stack_t oldSigStack{};","    static struct sigaction oldSigActions[sizeof(signalDefs) / sizeof(SignalDefs)]{};","","    static void restorePreviousSignalHandlers() noexcept {","        // We set signal handlers back to the previous ones. Hopefully","        // nobody overwrote them in the meantime, and doesn't expect","        // their signal handlers to live past ours given that they","        // installed them after ours..","        for (std::size_t i = 0; i \u003c sizeof(signalDefs) / sizeof(SignalDefs); ++i) {","            sigaction(signalDefs[i].id, \u0026oldSigActions[i], nullptr);","        }","        // Return the old stack","        sigaltstack(\u0026oldSigStack, nullptr);","    }","","    static void handleSignal( int sig ) {","        char const * name = \"\u003cunknown signal\u003e\";","        for (auto const\u0026 def : signalDefs) {","            if (sig == def.id) {","                name = def.name;","                break;","            }","        }","        // We need to restore previous signal handlers and let them do","        // their thing, so that the users can have the debugger break","        // when a signal is raised, and so on.","        restorePreviousSignalHandlers();","        reportFatal( name );","        raise( sig );","    }","","    FatalConditionHandler::FatalConditionHandler() {","        assert(!altStackMem \u0026\u0026 \"Cannot initialize POSIX signal handler when one already exists\");","        if (altStackSize == 0) {","            altStackSize = std::max(static_cast\u003csize_t\u003e(SIGSTKSZ), minStackSizeForErrors);","        }","        altStackMem = new char[altStackSize]();","    }","","    FatalConditionHandler::~FatalConditionHandler() {","        delete[] altStackMem;","        // We signal that another instance can be constructed by zeroing","        // out the pointer.","        altStackMem = nullptr;","    }","","    void FatalConditionHandler::engage_platform() {","        stack_t sigStack;","        sigStack.ss_sp = altStackMem;","        sigStack.ss_size = altStackSize;","        sigStack.ss_flags = 0;","        sigaltstack(\u0026sigStack, \u0026oldSigStack);","        struct sigaction sa = { };","","        sa.sa_handler = handleSignal;","        sa.sa_flags = SA_ONSTACK;","        for (std::size_t i = 0; i \u003c sizeof(signalDefs)/sizeof(SignalDefs); ++i) {","            sigaction(signalDefs[i].id, \u0026sa, \u0026oldSigActions[i]);","        }","    }","","#if defined(__GNUC__)","#    pragma GCC diagnostic pop","#endif","","","    void FatalConditionHandler::disengage_platform() noexcept {","        restorePreviousSignalHandlers();","    }","","} // end namespace Catch","","#endif // CATCH_CONFIG_POSIX_SIGNALS","","","","","#include \u003ccstring\u003e","","namespace Catch {","    namespace Detail {","","        uint32_t convertToBits(float f) {","            static_assert(sizeof(float) == sizeof(uint32_t), \"Important ULP matcher assumption violated\");","            uint32_t i;","            std::memcpy(\u0026i, \u0026f, sizeof(f));","            return i;","        }","","        uint64_t convertToBits(double d) {","            static_assert(sizeof(double) == sizeof(uint64_t), \"Important ULP matcher assumption violated\");","            uint64_t i;","            std::memcpy(\u0026i, \u0026d, sizeof(d));","            return i;","        }","","#if defined( __GNUC__ ) || defined( __clang__ )","#    pragma GCC diagnostic push","#    pragma GCC diagnostic ignored \"-Wfloat-equal\"","#endif","        bool directCompare( float lhs, float rhs ) { return lhs == rhs; }","        bool directCompare( double lhs, double rhs ) { return lhs == rhs; }","#if defined( __GNUC__ ) || defined( __clang__ )","#    pragma GCC diagnostic pop","#endif","","","    } // end namespace Detail","} // end namespace Catch","","","","","","","#include \u003ccstdlib\u003e","","namespace Catch {","    namespace Detail {","","#if !defined (CATCH_CONFIG_GETENV)","        char const* getEnv( char const* ) { return nullptr; }","#else","","        char const* getEnv( char const* varName ) {","#    if defined( _MSC_VER )","#        pragma warning( push )","#        pragma warning( disable : 4996 ) // use getenv_s instead of getenv","#    endif","","            return std::getenv( varName );","","#    if defined( _MSC_VER )","#        pragma warning( pop )","#    endif","        }","#endif","} // namespace Detail","} // namespace Catch","","","","","#include \u003ccstdio\u003e","#include \u003cfstream\u003e","#include \u003csstream\u003e","#include \u003cvector\u003e","","namespace Catch {","","    Catch::IStream::~IStream() = default;","","namespace Detail {","    namespace {","        template\u003ctypename WriterF, std::size_t bufferSize=256\u003e","        class StreamBufImpl final : public std::streambuf {","            char data[bufferSize];","            WriterF m_writer;","","        public:","            StreamBufImpl() {","                setp( data, data + sizeof(data) );","            }","","            ~StreamBufImpl() noexcept override {","                StreamBufImpl::sync();","            }","","        private:","            int overflow( int c ) override {","                sync();","","                if( c != EOF ) {","                    if( pbase() == epptr() )","                        m_writer( std::string( 1, static_cast\u003cchar\u003e( c ) ) );","                    else","                        sputc( static_cast\u003cchar\u003e( c ) );","                }","                return 0;","            }","","            int sync() override {","                if( pbase() != pptr() ) {","                    m_writer( std::string( pbase(), static_cast\u003cstd::string::size_type\u003e( pptr() - pbase() ) ) );","                    setp( pbase(), epptr() );","                }","                return 0;","            }","        };","","        ///////////////////////////////////////////////////////////////////////////","","        struct OutputDebugWriter {","","            void operator()( std::string const\u0026 str ) {","                if ( !str.empty() ) {","                    writeToDebugConsole( str );","                }","            }","        };","","        ///////////////////////////////////////////////////////////////////////////","","        class FileStream final : public IStream {","            std::ofstream m_ofs;","        public:","            FileStream( std::string const\u0026 filename ) {","                m_ofs.open( filename.c_str() );","                CATCH_ENFORCE( !m_ofs.fail(), \"Unable to open file: '\" \u003c\u003c filename \u003c\u003c '\\'' );","                m_ofs \u003c\u003c std::unitbuf;","            }","        public: // IStream","            std::ostream\u0026 stream() override {","                return m_ofs;","            }","        };","","        ///////////////////////////////////////////////////////////////////////////","","        class CoutStream final : public IStream {","            std::ostream m_os;","        public:","            // Store the streambuf from cout up-front because","            // cout may get redirected when running tests","            CoutStream() : m_os( Catch::cout().rdbuf() ) {}","","        public: // IStream","            std::ostream\u0026 stream() override { return m_os; }","            bool isConsole() const override { return true; }","        };","","        class CerrStream : public IStream {","            std::ostream m_os;","","        public:","            // Store the streambuf from cerr up-front because","            // cout may get redirected when running tests","            CerrStream(): m_os( Catch::cerr().rdbuf() ) {}","","        public: // IStream","            std::ostream\u0026 stream() override { return m_os; }","            bool isConsole() const override { return true; }","        };","","        ///////////////////////////////////////////////////////////////////////////","","        class DebugOutStream final : public IStream {","            Detail::unique_ptr\u003cStreamBufImpl\u003cOutputDebugWriter\u003e\u003e m_streamBuf;","            std::ostream m_os;","        public:","            DebugOutStream()","            :   m_streamBuf( Detail::make_unique\u003cStreamBufImpl\u003cOutputDebugWriter\u003e\u003e() ),","                m_os( m_streamBuf.get() )","            {}","","        public: // IStream","            std::ostream\u0026 stream() override { return m_os; }","        };","","    } // unnamed namespace","} // namespace Detail","","    ///////////////////////////////////////////////////////////////////////////","","    auto makeStream( std::string const\u0026 filename ) -\u003e Detail::unique_ptr\u003cIStream\u003e {","        if ( filename.empty() || filename == \"-\" ) {","            return Detail::make_unique\u003cDetail::CoutStream\u003e();","        }","        if( filename[0] == '%' ) {","            if ( filename == \"%debug\" ) {","                return Detail::make_unique\u003cDetail::DebugOutStream\u003e();","            } else if ( filename == \"%stderr\" ) {","                return Detail::make_unique\u003cDetail::CerrStream\u003e();","            } else if ( filename == \"%stdout\" ) {","                return Detail::make_unique\u003cDetail::CoutStream\u003e();","            } else {","                CATCH_ERROR( \"Unrecognised stream: '\" \u003c\u003c filename \u003c\u003c '\\'' );","            }","        }","        return Detail::make_unique\u003cDetail::FileStream\u003e( filename );","    }","","}","","","","namespace Catch {","    void JsonUtils::indent( std::ostream\u0026 os, std::uint64_t level ) {","        for ( std::uint64_t i = 0; i \u003c level; ++i ) {","            os \u003c\u003c \"  \";","        }","    }","    void JsonUtils::appendCommaNewline( std::ostream\u0026 os,","                                        bool\u0026 should_comma,","                                        std::uint64_t level ) {","        if ( should_comma ) { os \u003c\u003c ','; }","        should_comma = true;","        os \u003c\u003c '\\n';","        indent( os, level );","    }","","    JsonObjectWriter::JsonObjectWriter( std::ostream\u0026 os ):","        JsonObjectWriter{ os, 0 } {}","","    JsonObjectWriter::JsonObjectWriter( std::ostream\u0026 os,","                                        std::uint64_t indent_level ):","        m_os{ os }, m_indent_level{ indent_level } {","        m_os \u003c\u003c '{';","    }","    JsonObjectWriter::JsonObjectWriter( JsonObjectWriter\u0026\u0026 source ) noexcept:","        m_os{ source.m_os },","        m_indent_level{ source.m_indent_level },","        m_should_comma{ source.m_should_comma },","        m_active{ source.m_active } {","        source.m_active = false;","    }","","    JsonObjectWriter::~JsonObjectWriter() {","        if ( !m_active ) { return; }","","        m_os \u003c\u003c '\\n';","        JsonUtils::indent( m_os, m_indent_level );","        m_os \u003c\u003c '}';","    }","","    JsonValueWriter JsonObjectWriter::write( StringRef key ) {","        JsonUtils::appendCommaNewline(","            m_os, m_should_comma, m_indent_level + 1 );","","        m_os \u003c\u003c '\"' \u003c\u003c key \u003c\u003c \"\\\": \";","        return JsonValueWriter{ m_os, m_indent_level + 1 };","    }","","    JsonArrayWriter::JsonArrayWriter( std::ostream\u0026 os ):","        JsonArrayWriter{ os, 0 } {}","    JsonArrayWriter::JsonArrayWriter( std::ostream\u0026 os,","                                      std::uint64_t indent_level ):","        m_os{ os }, m_indent_level{ indent_level } {","        m_os \u003c\u003c '[';","    }","    JsonArrayWriter::JsonArrayWriter( JsonArrayWriter\u0026\u0026 source ) noexcept:","        m_os{ source.m_os },","        m_indent_level{ source.m_indent_level },","        m_should_comma{ source.m_should_comma },","        m_active{ source.m_active } {","        source.m_active = false;","    }","    JsonArrayWriter::~JsonArrayWriter() {","        if ( !m_active ) { return; }","","        m_os \u003c\u003c '\\n';","        JsonUtils::indent( m_os, m_indent_level );","        m_os \u003c\u003c ']';","    }","","    JsonObjectWriter JsonArrayWriter::writeObject() {","        JsonUtils::appendCommaNewline(","            m_os, m_should_comma, m_indent_level + 1 );","        return JsonObjectWriter{ m_os, m_indent_level + 1 };","    }","","    JsonArrayWriter JsonArrayWriter::writeArray() {","        JsonUtils::appendCommaNewline(","            m_os, m_should_comma, m_indent_level + 1 );","        return JsonArrayWriter{ m_os, m_indent_level + 1 };","    }","","    JsonArrayWriter\u0026 JsonArrayWriter::write( bool value ) {","        return writeImpl( value );","    }","","    JsonValueWriter::JsonValueWriter( std::ostream\u0026 os ):","        JsonValueWriter{ os, 0 } {}","","    JsonValueWriter::JsonValueWriter( std::ostream\u0026 os,","                                      std::uint64_t indent_level ):","        m_os{ os }, m_indent_level{ indent_level } {}","","    JsonObjectWriter JsonValueWriter::writeObject() \u0026\u0026 {","        return JsonObjectWriter{ m_os, m_indent_level };","    }","","    JsonArrayWriter JsonValueWriter::writeArray() \u0026\u0026 {","        return JsonArrayWriter{ m_os, m_indent_level };","    }","","    void JsonValueWriter::write( Catch::StringRef value ) \u0026\u0026 {","        writeImpl( value, true );","    }","","    void JsonValueWriter::write( bool value ) \u0026\u0026 {","        writeImpl( value ? \"true\"_sr : \"false\"_sr, false );","    }","","    void JsonValueWriter::writeImpl( Catch::StringRef value, bool quote ) {","        if ( quote ) { m_os \u003c\u003c '\"'; }","        for (char c : value) {","            // Escape list taken from https://www.json.org/json-en.html,","            // string definition.","            // Note that while forward slash _can_ be escaped, it does","            // not have to be, if JSON is not further embedded somewhere","            // where forward slash is meaningful.","            if ( c == '\"' ) {","                m_os \u003c\u003c \"\\\\\\\"\";","            } else if ( c == '\\\\' ) {","                m_os \u003c\u003c \"\\\\\\\\\";","            } else if ( c == '\\b' ) {","                m_os \u003c\u003c \"\\\\b\";","            } else if ( c == '\\f' ) {","                m_os \u003c\u003c \"\\\\f\";","            } else if ( c == '\\n' ) {","                m_os \u003c\u003c \"\\\\n\";","            } else if ( c == '\\r' ) {","                m_os \u003c\u003c \"\\\\r\";","            } else if ( c == '\\t' ) {","                m_os \u003c\u003c \"\\\\t\";","            } else {","                m_os \u003c\u003c c;","            }","        }","        if ( quote ) { m_os \u003c\u003c '\"'; }","    }","","} // namespace Catch","","","","","namespace Catch {","","    auto operator \u003c\u003c (std::ostream\u0026 os, LazyExpression const\u0026 lazyExpr) -\u003e std::ostream\u0026 {","        if (lazyExpr.m_isNegated)","            os \u003c\u003c '!';","","        if (lazyExpr) {","            if (lazyExpr.m_isNegated \u0026\u0026 lazyExpr.m_transientExpression-\u003eisBinaryExpression())","                os \u003c\u003c '(' \u003c\u003c *lazyExpr.m_transientExpression \u003c\u003c ')';","            else","                os \u003c\u003c *lazyExpr.m_transientExpression;","        } else {","            os \u003c\u003c \"{** error - unchecked empty expression requested **}\";","        }","        return os;","    }","","} // namespace Catch","","","","","#ifdef CATCH_CONFIG_WINDOWS_CRTDBG","#include \u003ccrtdbg.h\u003e","","namespace Catch {","","    LeakDetector::LeakDetector() {","        int flag = _CrtSetDbgFlag(_CRTDBG_REPORT_FLAG);","        flag |= _CRTDBG_LEAK_CHECK_DF;","        flag |= _CRTDBG_ALLOC_MEM_DF;","        _CrtSetDbgFlag(flag);","        _CrtSetReportMode(_CRT_WARN, _CRTDBG_MODE_FILE | _CRTDBG_MODE_DEBUG);","        _CrtSetReportFile(_CRT_WARN, _CRTDBG_FILE_STDERR);","        // Change this to leaking allocation's number to break there","        _CrtSetBreakAlloc(-1);","    }","}","","#else // ^^ Windows crt debug heap enabled // Windows crt debug heap disabled vv","","    Catch::LeakDetector::LeakDetector() = default;","","#endif // CATCH_CONFIG_WINDOWS_CRTDBG","","Catch::LeakDetector::~LeakDetector() {","    Catch::cleanUp();","}","","","","","namespace Catch {","    namespace {","","        void listTests(IEventListener\u0026 reporter, IConfig const\u0026 config) {","            auto const\u0026 testSpec = config.testSpec();","            auto matchedTestCases = filterTests(getAllTestCasesSorted(config), testSpec, config);","            reporter.listTests(matchedTestCases);","        }","","        void listTags(IEventListener\u0026 reporter, IConfig const\u0026 config) {","            auto const\u0026 testSpec = config.testSpec();","            std::vector\u003cTestCaseHandle\u003e matchedTestCases = filterTests(getAllTestCasesSorted(config), testSpec, config);","","            std::map\u003cStringRef, TagInfo, Detail::CaseInsensitiveLess\u003e tagCounts;","            for (auto const\u0026 testCase : matchedTestCases) {","                for (auto const\u0026 tagName : testCase.getTestCaseInfo().tags) {","                    auto it = tagCounts.find(tagName.original);","                    if (it == tagCounts.end())","                        it = tagCounts.insert(std::make_pair(tagName.original, TagInfo())).first;","                    it-\u003esecond.add(tagName.original);","                }","            }","","            std::vector\u003cTagInfo\u003e infos; infos.reserve(tagCounts.size());","            for (auto\u0026 tagc : tagCounts) {","                infos.push_back(CATCH_MOVE(tagc.second));","            }","","            reporter.listTags(infos);","        }","","        void listReporters(IEventListener\u0026 reporter) {","            std::vector\u003cReporterDescription\u003e descriptions;","","            auto const\u0026 factories = getRegistryHub().getReporterRegistry().getFactories();","            descriptions.reserve(factories.size());","            for (auto const\u0026 fac : factories) {","                descriptions.push_back({ fac.first, fac.second-\u003egetDescription() });","            }","","            reporter.listReporters(descriptions);","        }","","        void listListeners(IEventListener\u0026 reporter) {","            std::vector\u003cListenerDescription\u003e descriptions;","","            auto const\u0026 factories =","                getRegistryHub().getReporterRegistry().getListeners();","            descriptions.reserve( factories.size() );","            for ( auto const\u0026 fac : factories ) {","                descriptions.push_back( { fac-\u003egetName(), fac-\u003egetDescription() } );","            }","","            reporter.listListeners( descriptions );","        }","","    } // end anonymous namespace","","    void TagInfo::add( StringRef spelling ) {","        ++count;","        spellings.insert( spelling );","    }","","    std::string TagInfo::all() const {","        // 2 per tag for brackets '[' and ']'","        size_t size =  spellings.size() * 2;","        for (auto const\u0026 spelling : spellings) {","            size += spelling.size();","        }","","        std::string out; out.reserve(size);","        for (auto const\u0026 spelling : spellings) {","            out += '[';","            out += spelling;","            out += ']';","        }","        return out;","    }","","    bool list( IEventListener\u0026 reporter, Config const\u0026 config ) {","        bool listed = false;","        if (config.listTests()) {","            listed = true;","            listTests(reporter, config);","        }","        if (config.listTags()) {","            listed = true;","            listTags(reporter, config);","        }","        if (config.listReporters()) {","            listed = true;","            listReporters(reporter);","        }","        if ( config.listListeners() ) {","            listed = true;","            listListeners( reporter );","        }","        return listed;","    }","","} // end namespace Catch","","","","namespace Catch {","    CATCH_INTERNAL_START_WARNINGS_SUPPRESSION","    CATCH_INTERNAL_SUPPRESS_GLOBALS_WARNINGS","    static LeakDetector leakDetector;","    CATCH_INTERNAL_STOP_WARNINGS_SUPPRESSION","}","","// Allow users of amalgamated .cpp file to remove our main and provide their own.","#if !defined(CATCH_AMALGAMATED_CUSTOM_MAIN)","","#if defined(CATCH_CONFIG_WCHAR) \u0026\u0026 defined(CATCH_PLATFORM_WINDOWS) \u0026\u0026 defined(_UNICODE) \u0026\u0026 !defined(DO_NOT_USE_WMAIN)","// Standard C/C++ Win32 Unicode wmain entry point","extern \"C\" int __cdecl wmain (int argc, wchar_t * argv[], wchar_t * []) {","#else","// Standard C/C++ main entry point","int main (int argc, char * argv[]) {","#endif","","    // We want to force the linker not to discard the global variable","    // and its constructor, as it (optionally) registers leak detector","    (void)\u0026Catch::leakDetector;","","    return Catch::Session().run( argc, argv );","}","","#endif // !defined(CATCH_AMALGAMATED_CUSTOM_MAIN","","","","","namespace Catch {","","    MessageInfo::MessageInfo(   StringRef _macroName,","                                SourceLineInfo const\u0026 _lineInfo,","                                ResultWas::OfType _type )","    :   macroName( _macroName ),","        lineInfo( _lineInfo ),","        type( _type ),","        sequence( ++globalCount )","    {}","","    // This may need protecting if threading support is added","    unsigned int MessageInfo::globalCount = 0;","","} // end namespace Catch","","","","#include \u003ccstdio\u003e","#include \u003ccstring\u003e","#include \u003ciosfwd\u003e","#include \u003csstream\u003e","","#if defined( CATCH_CONFIG_NEW_CAPTURE )","#    if defined( _MSC_VER )","#        include \u003cio.h\u003e //_dup and _dup2","#        define dup _dup","#        define dup2 _dup2","#        define fileno _fileno","#    else","#        include \u003cunistd.h\u003e // dup and dup2","#    endif","#endif","","namespace Catch {","","    namespace {","        //! A no-op implementation, used if no reporter wants output","        //! redirection.","        class NoopRedirect : public OutputRedirect {","            void activateImpl() override {}","            void deactivateImpl() override {}","            std::string getStdout() override { return {}; }","            std::string getStderr() override { return {}; }","            void clearBuffers() override {}","        };","","        /**","         * Redirects specific stream's rdbuf with another's.","         *","         * Redirection can be stopped and started on-demand, assumes","         * that the underlying stream's rdbuf aren't changed by other","         * users.","         */","        class RedirectedStreamNew {","            std::ostream\u0026 m_originalStream;","            std::ostream\u0026 m_redirectionStream;","            std::streambuf* m_prevBuf;","","        public:","            RedirectedStreamNew( std::ostream\u0026 originalStream,","                                 std::ostream\u0026 redirectionStream ):","                m_originalStream( originalStream ),","                m_redirectionStream( redirectionStream ),","                m_prevBuf( m_originalStream.rdbuf() ) {}","","            void startRedirect() {","                m_originalStream.rdbuf( m_redirectionStream.rdbuf() );","            }","            void stopRedirect() { m_originalStream.rdbuf( m_prevBuf ); }","        };","","        /**","         * Redirects the `std::cout`, `std::cerr`, `std::clog` streams,","         * but does not touch the actual `stdout`/`stderr` file descriptors.","         */","        class StreamRedirect : public OutputRedirect {","            ReusableStringStream m_redirectedOut, m_redirectedErr;","            RedirectedStreamNew m_cout, m_cerr, m_clog;","","        public:","            StreamRedirect():","                m_cout( Catch::cout(), m_redirectedOut.get() ),","                m_cerr( Catch::cerr(), m_redirectedErr.get() ),","                m_clog( Catch::clog(), m_redirectedErr.get() ) {}","","            void activateImpl() override {","                m_cout.startRedirect();","                m_cerr.startRedirect();","                m_clog.startRedirect();","            }","            void deactivateImpl() override {","                m_cout.stopRedirect();","                m_cerr.stopRedirect();","                m_clog.stopRedirect();","            }","            std::string getStdout() override { return m_redirectedOut.str(); }","            std::string getStderr() override { return m_redirectedErr.str(); }","            void clearBuffers() override {","                m_redirectedOut.str( \"\" );","                m_redirectedErr.str( \"\" );","            }","        };","","#if defined( CATCH_CONFIG_NEW_CAPTURE )","","        // Windows's implementation of std::tmpfile is terrible (it tries","        // to create a file inside system folder, thus requiring elevated","        // privileges for the binary), so we have to use tmpnam(_s) and","        // create the file ourselves there.","        class TempFile {","        public:","            TempFile( TempFile const\u0026 ) = delete;","            TempFile\u0026 operator=( TempFile const\u0026 ) = delete;","            TempFile( TempFile\u0026\u0026 ) = delete;","            TempFile\u0026 operator=( TempFile\u0026\u0026 ) = delete;","","#    if defined( _MSC_VER )","            TempFile() {","                if ( tmpnam_s( m_buffer ) ) {","                    CATCH_RUNTIME_ERROR( \"Could not get a temp filename\" );","                }","                if ( fopen_s( \u0026m_file, m_buffer, \"wb+\" ) ) {","                    char buffer[100];","                    if ( strerror_s( buffer, errno ) ) {","                        CATCH_RUNTIME_ERROR(","                            \"Could not translate errno to a string\" );","                    }","                    CATCH_RUNTIME_ERROR( \"Could not open the temp file: '\"","                                         \u003c\u003c m_buffer","                                         \u003c\u003c \"' because: \" \u003c\u003c buffer );","                }","            }","#    else","            TempFile() {","                m_file = std::tmpfile();","                if ( !m_file ) {","                    CATCH_RUNTIME_ERROR( \"Could not create a temp file.\" );","                }","            }","#    endif","","            ~TempFile() {","                // TBD: What to do about errors here?","                std::fclose( m_file );","                // We manually create the file on Windows only, on Linux","                // it will be autodeleted","#    if defined( _MSC_VER )","                std::remove( m_buffer );","#    endif","            }","","            std::FILE* getFile() { return m_file; }","            std::string getContents() {","                ReusableStringStream sstr;","                constexpr long buffer_size = 100;","                char buffer[buffer_size + 1] = {};","                long current_pos = ftell( m_file );","                CATCH_ENFORCE( current_pos \u003e= 0,","                               \"ftell failed, errno: \" \u003c\u003c errno );","                std::rewind( m_file );","                while ( current_pos \u003e 0 ) {","                    auto read_characters =","                        std::fread( buffer,","                                    1,","                                    std::min( buffer_size, current_pos ),","                                    m_file );","                    buffer[read_characters] = '\\0';","                    sstr \u003c\u003c buffer;","                    current_pos -= static_cast\u003clong\u003e( read_characters );","                }","                return sstr.str();","            }","","            void clear() { std::rewind( m_file ); }","","        private:","            std::FILE* m_file = nullptr;","            char m_buffer[L_tmpnam] = { 0 };","        };","","        /**","         * Redirects the actual `stdout`/`stderr` file descriptors.","         *","         * Works by replacing the file descriptors numbered 1 and 2","         * with an open temporary file.","         */","        class FileRedirect : public OutputRedirect {","            TempFile m_outFile, m_errFile;","            int m_originalOut = -1;","            int m_originalErr = -1;","","            // Flushes cout/cerr/clog streams and stdout/stderr FDs","            void flushEverything() {","                Catch::cout() \u003c\u003c std::flush;","                fflush( stdout );","                // Since we support overriding these streams, we flush cerr","                // even though std::cerr is unbuffered","                Catch::cerr() \u003c\u003c std::flush;","                Catch::clog() \u003c\u003c std::flush;","                fflush( stderr );","            }","","        public:","            FileRedirect():","                m_originalOut( dup( fileno( stdout ) ) ),","                m_originalErr( dup( fileno( stderr ) ) ) {","                CATCH_ENFORCE( m_originalOut \u003e= 0, \"Could not dup stdout\" );","                CATCH_ENFORCE( m_originalErr \u003e= 0, \"Could not dup stderr\" );","            }","","            std::string getStdout() override { return m_outFile.getContents(); }","            std::string getStderr() override { return m_errFile.getContents(); }","            void clearBuffers() override {","                m_outFile.clear();","                m_errFile.clear();","            }","","            void activateImpl() override {","                // We flush before starting redirect, to ensure that we do","                // not capture the end of message sent before activation.","                flushEverything();","","                int ret;","                ret = dup2( fileno( m_outFile.getFile() ), fileno( stdout ) );","                CATCH_ENFORCE( ret \u003e= 0,","                               \"dup2 to stdout has failed, errno: \" \u003c\u003c errno );","                ret = dup2( fileno( m_errFile.getFile() ), fileno( stderr ) );","                CATCH_ENFORCE( ret \u003e= 0,","                               \"dup2 to stderr has failed, errno: \" \u003c\u003c errno );","            }","            void deactivateImpl() override {","                // We flush before ending redirect, to ensure that we","                // capture all messages sent while the redirect was active.","                flushEverything();","","                int ret;","                ret = dup2( m_originalOut, fileno( stdout ) );","                CATCH_ENFORCE(","                    ret \u003e= 0,","                    \"dup2 of original stdout has failed, errno: \" \u003c\u003c errno );","                ret = dup2( m_originalErr, fileno( stderr ) );","                CATCH_ENFORCE(","                    ret \u003e= 0,","                    \"dup2 of original stderr has failed, errno: \" \u003c\u003c errno );","            }","        };","","#endif // CATCH_CONFIG_NEW_CAPTURE","","    } // end namespace","","    bool isRedirectAvailable( OutputRedirect::Kind kind ) {","        switch ( kind ) {","        // These two are always available","        case OutputRedirect::None:","        case OutputRedirect::Streams:","            return true;","#if defined( CATCH_CONFIG_NEW_CAPTURE )","        case OutputRedirect::FileDescriptors:","            return true;","#endif","        default:","            return false;","        }","    }","","    Detail::unique_ptr\u003cOutputRedirect\u003e makeOutputRedirect( bool actual ) {","        if ( actual ) {","            // TODO: Clean this up later","#if defined( CATCH_CONFIG_NEW_CAPTURE )","            return Detail::make_unique\u003cFileRedirect\u003e();","#else","            return Detail::make_unique\u003cStreamRedirect\u003e();","#endif","        } else {","            return Detail::make_unique\u003cNoopRedirect\u003e();","        }","    }","","    RedirectGuard scopedActivate( OutputRedirect\u0026 redirectImpl ) {","        return RedirectGuard( true, redirectImpl );","    }","","    RedirectGuard scopedDeactivate( OutputRedirect\u0026 redirectImpl ) {","        return RedirectGuard( false, redirectImpl );","    }","","    OutputRedirect::~OutputRedirect() = default;","","    RedirectGuard::RedirectGuard( bool activate, OutputRedirect\u0026 redirectImpl ):","        m_redirect( \u0026redirectImpl ),","        m_activate( activate ),","        m_previouslyActive( redirectImpl.isActive() ) {","","        // Skip cases where there is no actual state change.","        if ( m_activate == m_previouslyActive ) { return; }","","        if ( m_activate ) {","            m_redirect-\u003eactivate();","        } else {","            m_redirect-\u003edeactivate();","        }","    }","","    RedirectGuard::~RedirectGuard() noexcept( false ) {","        if ( m_moved ) { return; }","        // Skip cases where there is no actual state change.","        if ( m_activate == m_previouslyActive ) { return; }","","        if ( m_activate ) {","            m_redirect-\u003edeactivate();","        } else {","            m_redirect-\u003eactivate();","        }","    }","","    RedirectGuard::RedirectGuard( RedirectGuard\u0026\u0026 rhs ) noexcept:","        m_redirect( rhs.m_redirect ),","        m_activate( rhs.m_activate ),","        m_previouslyActive( rhs.m_previouslyActive ),","        m_moved( false ) {","        rhs.m_moved = true;","    }","","    RedirectGuard\u0026 RedirectGuard::operator=( RedirectGuard\u0026\u0026 rhs ) noexcept {","        m_redirect = rhs.m_redirect;","        m_activate = rhs.m_activate;","        m_previouslyActive = rhs.m_previouslyActive;","        m_moved = false;","        rhs.m_moved = true;","        return *this;","    }","","} // namespace Catch","","#if defined( CATCH_CONFIG_NEW_CAPTURE )","#    if defined( _MSC_VER )","#        undef dup","#        undef dup2","#        undef fileno","#    endif","#endif","","","","","#include \u003climits\u003e","#include \u003cstdexcept\u003e","","namespace Catch {","","    Optional\u003cunsigned int\u003e parseUInt(std::string const\u0026 input, int base) {","        auto trimmed = trim( input );","        // std::stoull is annoying and accepts numbers starting with '-',","        // it just negates them into unsigned int","        if ( trimmed.empty() || trimmed[0] == '-' ) {","            return {};","        }","","        CATCH_TRY {","            size_t pos = 0;","            const auto ret = std::stoull( trimmed, \u0026pos, base );","","            // We did not consume the whole input, so there is an issue","            // This can be bunch of different stuff, like multiple numbers","            // in the input, or invalid digits/characters and so on. Either","            // way, we do not want to return the partially parsed result.","            if ( pos != trimmed.size() ) {","                return {};","            }","            // Too large","            if ( ret \u003e std::numeric_limits\u003cunsigned int\u003e::max() ) {","                return {};","            }","            return static_cast\u003cunsigned int\u003e(ret);","        }","        CATCH_CATCH_ANON( std::invalid_argument const\u0026 ) {","            // no conversion could be performed","        }","        CATCH_CATCH_ANON( std::out_of_range const\u0026 ) {","            // the input does not fit into an unsigned long long","        }","        return {};","    }","","} // namespace Catch","","","","","#include \u003ccmath\u003e","","namespace Catch {","","#if !defined(CATCH_CONFIG_POLYFILL_ISNAN)","    bool isnan(float f) {","        return std::isnan(f);","    }","    bool isnan(double d) {","        return std::isnan(d);","    }","#else","    // For now we only use this for embarcadero","    bool isnan(float f) {","        return std::_isnan(f);","    }","    bool isnan(double d) {","        return std::_isnan(d);","    }","#endif","","#if !defined( CATCH_CONFIG_GLOBAL_NEXTAFTER )","    float nextafter( float x, float y ) { return std::nextafter( x, y ); }","    double nextafter( double x, double y ) { return std::nextafter( x, y ); }","#else","    float nextafter( float x, float y ) { return ::nextafterf( x, y ); }","    double nextafter( double x, double y ) { return ::nextafter( x, y ); }","#endif","","} // end namespace Catch","","","","namespace Catch {","","namespace {","","#if defined(_MSC_VER)","#pragma warning(push)","#pragma warning(disable:4146) // we negate uint32 during the rotate","#endif","        // Safe rotr implementation thanks to John Regehr","        uint32_t rotate_right(uint32_t val, uint32_t count) {","            const uint32_t mask = 31;","            count \u0026= mask;","            return (val \u003e\u003e count) | (val \u003c\u003c (-count \u0026 mask));","        }","","#if defined(_MSC_VER)","#pragma warning(pop)","#endif","","}","","","    SimplePcg32::SimplePcg32(result_type seed_) {","        seed(seed_);","    }","","","    void SimplePcg32::seed(result_type seed_) {","        m_state = 0;","        (*this)();","        m_state += seed_;","        (*this)();","    }","","    void SimplePcg32::discard(uint64_t skip) {","        // We could implement this to run in O(log n) steps, but this","        // should suffice for our use case.","        for (uint64_t s = 0; s \u003c skip; ++s) {","            static_cast\u003cvoid\u003e((*this)());","        }","    }","","    SimplePcg32::result_type SimplePcg32::operator()() {","        // prepare the output value","        const uint32_t xorshifted = static_cast\u003cuint32_t\u003e(((m_state \u003e\u003e 18u) ^ m_state) \u003e\u003e 27u);","        const auto output = rotate_right(xorshifted, static_cast\u003cuint32_t\u003e(m_state \u003e\u003e 59u));","","        // advance state","        m_state = m_state * 6364136223846793005ULL + s_inc;","","        return output;","    }","","    bool operator==(SimplePcg32 const\u0026 lhs, SimplePcg32 const\u0026 rhs) {","        return lhs.m_state == rhs.m_state;","    }","","    bool operator!=(SimplePcg32 const\u0026 lhs, SimplePcg32 const\u0026 rhs) {","        return lhs.m_state != rhs.m_state;","    }","}","","","","","","#include \u003cctime\u003e","#include \u003crandom\u003e","","namespace Catch {","","    std::uint32_t generateRandomSeed( GenerateFrom from ) {","        switch ( from ) {","        case GenerateFrom::Time:","            return static_cast\u003cstd::uint32_t\u003e( std::time( nullptr ) );","","        case GenerateFrom::Default:","        case GenerateFrom::RandomDevice: {","            std::random_device rd;","            return Detail::fillBitsFrom\u003cstd::uint32_t\u003e( rd );","        }","","        default:","            CATCH_ERROR(\"Unknown generation method\");","        }","    }","","} // end namespace Catch","","","","","namespace Catch {","    struct ReporterRegistry::ReporterRegistryImpl {","        std::vector\u003cDetail::unique_ptr\u003cEventListenerFactory\u003e\u003e listeners;","        std::map\u003cstd::string, IReporterFactoryPtr, Detail::CaseInsensitiveLess\u003e","            factories;","    };","","    ReporterRegistry::ReporterRegistry():","        m_impl( Detail::make_unique\u003cReporterRegistryImpl\u003e() ) {","        // Because it is impossible to move out of initializer list,","        // we have to add the elements manually","        m_impl-\u003efactories[\"Automake\"] =","            Detail::make_unique\u003cReporterFactory\u003cAutomakeReporter\u003e\u003e();","        m_impl-\u003efactories[\"compact\"] =","            Detail::make_unique\u003cReporterFactory\u003cCompactReporter\u003e\u003e();","        m_impl-\u003efactories[\"console\"] =","            Detail::make_unique\u003cReporterFactory\u003cConsoleReporter\u003e\u003e();","        m_impl-\u003efactories[\"JUnit\"] =","            Detail::make_unique\u003cReporterFactory\u003cJunitReporter\u003e\u003e();","        m_impl-\u003efactories[\"SonarQube\"] =","            Detail::make_unique\u003cReporterFactory\u003cSonarQubeReporter\u003e\u003e();","        m_impl-\u003efactories[\"TAP\"] =","            Detail::make_unique\u003cReporterFactory\u003cTAPReporter\u003e\u003e();","        m_impl-\u003efactories[\"TeamCity\"] =","            Detail::make_unique\u003cReporterFactory\u003cTeamCityReporter\u003e\u003e();","        m_impl-\u003efactories[\"XML\"] =","            Detail::make_unique\u003cReporterFactory\u003cXmlReporter\u003e\u003e();","        m_impl-\u003efactories[\"JSON\"] =","            Detail::make_unique\u003cReporterFactory\u003cJsonReporter\u003e\u003e();","    }","","    ReporterRegistry::~ReporterRegistry() = default;","","    IEventListenerPtr","    ReporterRegistry::create( std::string const\u0026 name,","                              ReporterConfig\u0026\u0026 config ) const {","        auto it = m_impl-\u003efactories.find( name );","        if ( it == m_impl-\u003efactories.end() ) return nullptr;","        return it-\u003esecond-\u003ecreate( CATCH_MOVE( config ) );","    }","","    void ReporterRegistry::registerReporter( std::string const\u0026 name,","                                             IReporterFactoryPtr factory ) {","        CATCH_ENFORCE( name.find( \"::\" ) == name.npos,","                       \"'::' is not allowed in reporter name: '\" + name +","                           '\\'' );","        auto ret = m_impl-\u003efactories.emplace( name, CATCH_MOVE( factory ) );","        CATCH_ENFORCE( ret.second,","                       \"reporter using '\" + name +","                           \"' as name was already registered\" );","    }","    void ReporterRegistry::registerListener(","        Detail::unique_ptr\u003cEventListenerFactory\u003e factory ) {","        m_impl-\u003elisteners.push_back( CATCH_MOVE( factory ) );","    }","","    std::map\u003cstd::string,","             IReporterFactoryPtr,","             Detail::CaseInsensitiveLess\u003e const\u0026","    ReporterRegistry::getFactories() const {","        return m_impl-\u003efactories;","    }","","    std::vector\u003cDetail::unique_ptr\u003cEventListenerFactory\u003e\u003e const\u0026","    ReporterRegistry::getListeners() const {","        return m_impl-\u003elisteners;","    }","} // namespace Catch","","","","","","#include \u003calgorithm\u003e","","namespace Catch {","","    namespace {","        struct kvPair {","            StringRef key, value;","        };","","        kvPair splitKVPair(StringRef kvString) {","            auto splitPos = static_cast\u003csize_t\u003e(","                std::find( kvString.begin(), kvString.end(), '=' ) -","                kvString.begin() );","","            return { kvString.substr( 0, splitPos ),","                     kvString.substr( splitPos + 1, kvString.size() ) };","        }","    }","","    namespace Detail {","        std::vector\u003cstd::string\u003e splitReporterSpec( StringRef reporterSpec ) {","            static constexpr auto separator = \"::\";","            static constexpr size_t separatorSize = 2;","","            size_t separatorPos = 0;","            auto findNextSeparator = [\u0026reporterSpec]( size_t startPos ) {","                static_assert(","                    separatorSize == 2,","                    \"The code below currently assumes 2 char separator\" );","","                auto currentPos = startPos;","                do {","                    while ( currentPos \u003c reporterSpec.size() \u0026\u0026","                            reporterSpec[currentPos] != separator[0] ) {","                        ++currentPos;","                    }","                    if ( currentPos + 1 \u003c reporterSpec.size() \u0026\u0026","                         reporterSpec[currentPos + 1] == separator[1] ) {","                        return currentPos;","                    }","                    ++currentPos;","                } while ( currentPos \u003c reporterSpec.size() );","","                return static_cast\u003csize_t\u003e( -1 );","            };","","            std::vector\u003cstd::string\u003e parts;","","            while ( separatorPos \u003c reporterSpec.size() ) {","                const auto nextSeparator = findNextSeparator( separatorPos );","                parts.push_back( static_cast\u003cstd::string\u003e( reporterSpec.substr(","                    separatorPos, nextSeparator - separatorPos ) ) );","","                if ( nextSeparator == static_cast\u003csize_t\u003e( -1 ) ) {","                    break;","                }","                separatorPos = nextSeparator + separatorSize;","            }","","            // Handle a separator at the end.","            // This is not a valid spec, but we want to do validation in a","            // centralized place","            if ( separatorPos == reporterSpec.size() ) {","                parts.emplace_back();","            }","","            return parts;","        }","","        Optional\u003cColourMode\u003e stringToColourMode( StringRef colourMode ) {","            if ( colourMode == \"default\" ) {","                return ColourMode::PlatformDefault;","            } else if ( colourMode == \"ansi\" ) {","                return ColourMode::ANSI;","            } else if ( colourMode == \"win32\" ) {","                return ColourMode::Win32;","            } else if ( colourMode == \"none\" ) {","                return ColourMode::None;","            } else {","                return {};","            }","        }","    } // namespace Detail","","","    bool operator==( ReporterSpec const\u0026 lhs, ReporterSpec const\u0026 rhs ) {","        return lhs.m_name == rhs.m_name \u0026\u0026","               lhs.m_outputFileName == rhs.m_outputFileName \u0026\u0026","               lhs.m_colourMode == rhs.m_colourMode \u0026\u0026","               lhs.m_customOptions == rhs.m_customOptions;","    }","","    Optional\u003cReporterSpec\u003e parseReporterSpec( StringRef reporterSpec ) {","        auto parts = Detail::splitReporterSpec( reporterSpec );","","        assert( parts.size() \u003e 0 \u0026\u0026 \"Split should never return empty vector\" );","","        std::map\u003cstd::string, std::string\u003e kvPairs;","        Optional\u003cstd::string\u003e outputFileName;","        Optional\u003cColourMode\u003e colourMode;","","        // First part is always reporter name, so we skip it","        for ( size_t i = 1; i \u003c parts.size(); ++i ) {","            auto kv = splitKVPair( parts[i] );","            auto key = kv.key, value = kv.value;","","            if ( key.empty() || value.empty() ) { // NOLINT(bugprone-branch-clone)","                return {};","            } else if ( key[0] == 'X' ) {","                // This is a reporter-specific option, we don't check these","                // apart from basic sanity checks","                if ( key.size() == 1 ) {","                    return {};","                }","","                auto ret = kvPairs.emplace( std::string(kv.key), std::string(kv.value) );","                if ( !ret.second ) {","                    // Duplicated key. We might want to handle this differently,","                    // e.g. by overwriting the existing value?","                    return {};","                }","            } else if ( key == \"out\" ) {","                // Duplicated key","                if ( outputFileName ) {","                    return {};","                }","                outputFileName = static_cast\u003cstd::string\u003e( value );","            } else if ( key == \"colour-mode\" ) {","                // Duplicated key","                if ( colourMode ) {","                    return {};","                }","                colourMode = Detail::stringToColourMode( value );","                // Parsing failed","                if ( !colourMode ) {","                    return {};","                }","            } else {","                // Unrecognized option","                return {};","            }","        }","","        return ReporterSpec{ CATCH_MOVE( parts[0] ),","                             CATCH_MOVE( outputFileName ),","                             CATCH_MOVE( colourMode ),","                             CATCH_MOVE( kvPairs ) };","    }","","ReporterSpec::ReporterSpec(","        std::string name,","        Optional\u003cstd::string\u003e outputFileName,","        Optional\u003cColourMode\u003e colourMode,","        std::map\u003cstd::string, std::string\u003e customOptions ):","        m_name( CATCH_MOVE( name ) ),","        m_outputFileName( CATCH_MOVE( outputFileName ) ),","        m_colourMode( CATCH_MOVE( colourMode ) ),","        m_customOptions( CATCH_MOVE( customOptions ) ) {}","","} // namespace Catch","","","","#include \u003ccstdio\u003e","#include \u003csstream\u003e","#include \u003cvector\u003e","","namespace Catch {","","    // This class encapsulates the idea of a pool of ostringstreams that can be reused.","    struct StringStreams {","        std::vector\u003cDetail::unique_ptr\u003cstd::ostringstream\u003e\u003e m_streams;","        std::vector\u003cstd::size_t\u003e m_unused;","        std::ostringstream m_referenceStream; // Used for copy state/ flags from","","        auto add() -\u003e std::size_t {","            if( m_unused.empty() ) {","                m_streams.push_back( Detail::make_unique\u003cstd::ostringstream\u003e() );","                return m_streams.size()-1;","            }","            else {","                auto index = m_unused.back();","                m_unused.pop_back();","                return index;","            }","        }","","        void release( std::size_t index ) {","            m_streams[index]-\u003ecopyfmt( m_referenceStream ); // Restore initial flags and other state","            m_unused.push_back(index);","        }","    };","","    ReusableStringStream::ReusableStringStream()","    :   m_index( Singleton\u003cStringStreams\u003e::getMutable().add() ),","        m_oss( Singleton\u003cStringStreams\u003e::getMutable().m_streams[m_index].get() )","    {}","","    ReusableStringStream::~ReusableStringStream() {","        static_cast\u003cstd::ostringstream*\u003e( m_oss )-\u003estr(\"\");","        m_oss-\u003eclear();","        Singleton\u003cStringStreams\u003e::getMutable().release( m_index );","    }","","    std::string ReusableStringStream::str() const {","        return static_cast\u003cstd::ostringstream*\u003e( m_oss )-\u003estr();","    }","","    void ReusableStringStream::str( std::string const\u0026 str ) {","        static_cast\u003cstd::ostringstream*\u003e( m_oss )-\u003estr( str );","    }","","","}","","","","","#include \u003ccassert\u003e","#include \u003calgorithm\u003e","","namespace Catch {","","    namespace Generators {","        namespace {","            struct GeneratorTracker final : TestCaseTracking::TrackerBase,","                                      IGeneratorTracker {","                GeneratorBasePtr m_generator;","","                GeneratorTracker(","                    TestCaseTracking::NameAndLocation\u0026\u0026 nameAndLocation,","                    TrackerContext\u0026 ctx,","                    ITracker* parent ):","                    TrackerBase( CATCH_MOVE( nameAndLocation ), ctx, parent ) {}","","                static GeneratorTracker*","                acquire( TrackerContext\u0026 ctx,","                         TestCaseTracking::NameAndLocationRef const\u0026","                             nameAndLocation ) {","                    GeneratorTracker* tracker;","","                    ITracker\u0026 currentTracker = ctx.currentTracker();","                    // Under specific circumstances, the generator we want","                    // to acquire is also the current tracker. If this is","                    // the case, we have to avoid looking through current","                    // tracker's children, and instead return the current","                    // tracker.","                    // A case where this check is important is e.g.","                    //     for (int i = 0; i \u003c 5; ++i) {","                    //         int n = GENERATE(1, 2);","                    //     }","                    //","                    // without it, the code above creates 5 nested generators.","                    if ( currentTracker.nameAndLocation() == nameAndLocation ) {","                        auto thisTracker = currentTracker.parent()-\u003efindChild(","                            nameAndLocation );","                        assert( thisTracker );","                        assert( thisTracker-\u003eisGeneratorTracker() );","                        tracker = static_cast\u003cGeneratorTracker*\u003e( thisTracker );","                    } else if ( ITracker* childTracker =","                                    currentTracker.findChild(","                                        nameAndLocation ) ) {","                        assert( childTracker );","                        assert( childTracker-\u003eisGeneratorTracker() );","                        tracker =","                            static_cast\u003cGeneratorTracker*\u003e( childTracker );","                    } else {","                        return nullptr;","                    }","","                    if ( !tracker-\u003eisComplete() ) { tracker-\u003eopen(); }","","                    return tracker;","                }","","                // TrackerBase interface","                bool isGeneratorTracker() const override { return true; }","                auto hasGenerator() const -\u003e bool override {","                    return !!m_generator;","                }","                void close() override {","                    TrackerBase::close();","                    // If a generator has a child (it is followed by a section)","                    // and none of its children have started, then we must wait","                    // until later to start consuming its values.","                    // This catches cases where `GENERATE` is placed between two","                    // `SECTION`s.","                    // **The check for m_children.empty cannot be removed**.","                    // doing so would break `GENERATE` _not_ followed by","                    // `SECTION`s.","                    const bool should_wait_for_child = [\u0026]() {","                        // No children -\u003e nobody to wait for","                        if ( m_children.empty() ) { return false; }","                        // If at least one child started executing, don't wait","                        if ( std::find_if(","                                 m_children.begin(),","                                 m_children.end(),","                                 []( TestCaseTracking::ITrackerPtr const\u0026","                                         tracker ) {","                                     return tracker-\u003ehasStarted();","                                 } ) != m_children.end() ) {","                            return false;","                        }","","                        // No children have started. We need to check if they","                        // _can_ start, and thus we should wait for them, or","                        // they cannot start (due to filters), and we shouldn't","                        // wait for them","                        ITracker* parent = m_parent;","                        // This is safe: there is always at least one section","                        // tracker in a test case tracking tree","                        while ( !parent-\u003eisSectionTracker() ) {","                            parent = parent-\u003eparent();","                        }","                        assert( parent \u0026\u0026","                                \"Missing root (test case) level section\" );","","                        auto const\u0026 parentSection =","                            static_cast\u003cSectionTracker const\u0026\u003e( *parent );","                        auto const\u0026 filters = parentSection.getFilters();","                        // No filters -\u003e no restrictions on running sections","                        if ( filters.empty() ) { return true; }","","                        for ( auto const\u0026 child : m_children ) {","                            if ( child-\u003eisSectionTracker() \u0026\u0026","                                 std::find( filters.begin(),","                                            filters.end(),","                                            static_cast\u003cSectionTracker const\u0026\u003e(","                                                *child )","                                                .trimmedName() ) !=","                                     filters.end() ) {","                                return true;","                            }","                        }","                        return false;","                    }();","","                    // This check is a bit tricky, because m_generator-\u003enext()","                    // has a side-effect, where it consumes generator's current","                    // value, but we do not want to invoke the side-effect if","                    // this generator is still waiting for any child to start.","                    assert( m_generator \u0026\u0026 \"Tracker without generator\" );","                    if ( should_wait_for_child ||","                         ( m_runState == CompletedSuccessfully \u0026\u0026","                           m_generator-\u003ecountedNext() ) ) {","                        m_children.clear();","                        m_runState = Executing;","                    }","                }","","                // IGeneratorTracker interface","                auto getGenerator() const -\u003e GeneratorBasePtr const\u0026 override {","                    return m_generator;","                }","                void setGenerator( GeneratorBasePtr\u0026\u0026 generator ) override {","                    m_generator = CATCH_MOVE( generator );","                }","            };","        } // namespace","    }","","    RunContext::RunContext(IConfig const* _config, IEventListenerPtr\u0026\u0026 reporter)","    :   m_runInfo(_config-\u003ename()),","        m_config(_config),","        m_reporter(CATCH_MOVE(reporter)),","        m_lastAssertionInfo{ StringRef(), SourceLineInfo(\"\",0), StringRef(), ResultDisposition::Normal },","        m_outputRedirect( makeOutputRedirect( m_reporter-\u003egetPreferences().shouldRedirectStdOut ) ),","        m_includeSuccessfulResults( m_config-\u003eincludeSuccessfulResults() || m_reporter-\u003egetPreferences().shouldReportAllAssertions )","    {","        getCurrentMutableContext().setResultCapture( this );","        m_reporter-\u003etestRunStarting(m_runInfo);","    }","","    RunContext::~RunContext() {","        m_reporter-\u003etestRunEnded(TestRunStats(m_runInfo, m_totals, aborting()));","    }","","    Totals RunContext::runTest(TestCaseHandle const\u0026 testCase) {","        const Totals prevTotals = m_totals;","","        auto const\u0026 testInfo = testCase.getTestCaseInfo();","        m_reporter-\u003etestCaseStarting(testInfo);","        testCase.prepareTestCase();","        m_activeTestCase = \u0026testCase;","","","        ITracker\u0026 rootTracker = m_trackerContext.startRun();","        assert(rootTracker.isSectionTracker());","        static_cast\u003cSectionTracker\u0026\u003e(rootTracker).addInitialFilters(m_config-\u003egetSectionsToRun());","","        // We intentionally only seed the internal RNG once per test case,","        // before it is first invoked. The reason for that is a complex","        // interplay of generator/section implementation details and the","        // Random*Generator types.","        //","        // The issue boils down to us needing to seed the Random*Generators","        // with different seed each, so that they return different sequences","        // of random numbers. We do this by giving them a number from the","        // shared RNG instance as their seed.","        //","        // However, this runs into an issue if the reseeding happens each","        // time the test case is entered (as opposed to first time only),","        // because multiple generators could get the same seed, e.g. in","        // ```cpp","        // TEST_CASE() {","        //     auto i = GENERATE(take(10, random(0, 100));","        //     SECTION(\"A\") {","        //         auto j = GENERATE(take(10, random(0, 100));","        //     }","        //     SECTION(\"B\") {","        //         auto k = GENERATE(take(10, random(0, 100));","        //     }","        // }","        // ```","        // `i` and `j` would properly return values from different sequences,","        // but `i` and `k` would return the same sequence, because their seed","        // would be the same.","        // (The reason their seeds would be the same is that the generator","        //  for k would be initialized when the test case is entered the second","        //  time, after the shared RNG instance was reset to the same value","        //  it had when the generator for i was initialized.)","        seedRng( *m_config );","","        uint64_t testRuns = 0;","        std::string redirectedCout;","        std::string redirectedCerr;","        do {","            m_trackerContext.startCycle();","            m_testCaseTracker = \u0026SectionTracker::acquire(m_trackerContext, TestCaseTracking::NameAndLocationRef(testInfo.name, testInfo.lineInfo));","","            m_reporter-\u003etestCasePartialStarting(testInfo, testRuns);","","            const auto beforeRunTotals = m_totals;","            runCurrentTest();","            std::string oneRunCout = m_outputRedirect-\u003egetStdout();","            std::string oneRunCerr = m_outputRedirect-\u003egetStderr();","            m_outputRedirect-\u003eclearBuffers();","            redirectedCout += oneRunCout;","            redirectedCerr += oneRunCerr;","","            const auto singleRunTotals = m_totals.delta(beforeRunTotals);","            auto statsForOneRun = TestCaseStats(testInfo, singleRunTotals, CATCH_MOVE(oneRunCout), CATCH_MOVE(oneRunCerr), aborting());","            m_reporter-\u003etestCasePartialEnded(statsForOneRun, testRuns);","","            ++testRuns;","        } while (!m_testCaseTracker-\u003eisSuccessfullyCompleted() \u0026\u0026 !aborting());","","        Totals deltaTotals = m_totals.delta(prevTotals);","        if (testInfo.expectedToFail() \u0026\u0026 deltaTotals.testCases.passed \u003e 0) {","            deltaTotals.assertions.failed++;","            deltaTotals.testCases.passed--;","            deltaTotals.testCases.failed++;","        }","        m_totals.testCases += deltaTotals.testCases;","        testCase.tearDownTestCase();","        m_reporter-\u003etestCaseEnded(TestCaseStats(testInfo,","                                  deltaTotals,","                                  CATCH_MOVE(redirectedCout),","                                  CATCH_MOVE(redirectedCerr),","                                  aborting()));","","        m_activeTestCase = nullptr;","        m_testCaseTracker = nullptr;","","        return deltaTotals;","    }","","","    void RunContext::assertionEnded(AssertionResult\u0026\u0026 result) {","        if (result.getResultType() == ResultWas::Ok) {","            m_totals.assertions.passed++;","            m_lastAssertionPassed = true;","        } else if (result.getResultType() == ResultWas::ExplicitSkip) {","            m_totals.assertions.skipped++;","            m_lastAssertionPassed = true;","        } else if (!result.succeeded()) {","            m_lastAssertionPassed = false;","            if (result.isOk()) {","            }","            else if( m_activeTestCase-\u003egetTestCaseInfo().okToFail() )","                m_totals.assertions.failedButOk++;","            else","                m_totals.assertions.failed++;","        }","        else {","            m_lastAssertionPassed = true;","        }","","        {","            auto _ = scopedDeactivate( *m_outputRedirect );","            m_reporter-\u003eassertionEnded( AssertionStats( result, m_messages, m_totals ) );","        }","","        if ( result.getResultType() != ResultWas::Warning ) {","            m_messageScopes.clear();","        }","","        // Reset working state. assertion info will be reset after","        // populateReaction is run if it is needed","        m_lastResult = CATCH_MOVE( result );","    }","    void RunContext::resetAssertionInfo() {","        m_lastAssertionInfo.macroName = StringRef();","        m_lastAssertionInfo.capturedExpression = \"{Unknown expression after the reported line}\"_sr;","        m_lastAssertionInfo.resultDisposition = ResultDisposition::Normal;","    }","","    void RunContext::notifyAssertionStarted( AssertionInfo const\u0026 info ) {","        auto _ = scopedDeactivate( *m_outputRedirect );","        m_reporter-\u003eassertionStarting( info );","    }","","    bool RunContext::sectionStarted( StringRef sectionName,","                                     SourceLineInfo const\u0026 sectionLineInfo,","                                     Counts\u0026 assertions ) {","        ITracker\u0026 sectionTracker =","            SectionTracker::acquire( m_trackerContext,","                                     TestCaseTracking::NameAndLocationRef(","                                         sectionName, sectionLineInfo ) );","","        if (!sectionTracker.isOpen())","            return false;","        m_activeSections.push_back(\u0026sectionTracker);","","        SectionInfo sectionInfo( sectionLineInfo, static_cast\u003cstd::string\u003e(sectionName) );","        m_lastAssertionInfo.lineInfo = sectionInfo.lineInfo;","","        {","            auto _ = scopedDeactivate( *m_outputRedirect );","            m_reporter-\u003esectionStarting( sectionInfo );","        }","","        assertions = m_totals.assertions;","","        return true;","    }","    IGeneratorTracker*","    RunContext::acquireGeneratorTracker( StringRef generatorName,","                                         SourceLineInfo const\u0026 lineInfo ) {","        using namespace Generators;","        GeneratorTracker* tracker = GeneratorTracker::acquire(","            m_trackerContext,","            TestCaseTracking::NameAndLocationRef(","                 generatorName, lineInfo ) );","        m_lastAssertionInfo.lineInfo = lineInfo;","        return tracker;","    }","","    IGeneratorTracker* RunContext::createGeneratorTracker(","        StringRef generatorName,","        SourceLineInfo lineInfo,","        Generators::GeneratorBasePtr\u0026\u0026 generator ) {","","        auto nameAndLoc = TestCaseTracking::NameAndLocation( static_cast\u003cstd::string\u003e( generatorName ), lineInfo );","        auto\u0026 currentTracker = m_trackerContext.currentTracker();","        assert(","            currentTracker.nameAndLocation() != nameAndLoc \u0026\u0026","            \"Trying to create tracker for a genreator that already has one\" );","","        auto newTracker = Catch::Detail::make_unique\u003cGenerators::GeneratorTracker\u003e(","            CATCH_MOVE(nameAndLoc), m_trackerContext, \u0026currentTracker );","        auto ret = newTracker.get();","        currentTracker.addChild( CATCH_MOVE( newTracker ) );","","        ret-\u003esetGenerator( CATCH_MOVE( generator ) );","        ret-\u003eopen();","        return ret;","    }","","    bool RunContext::testForMissingAssertions(Counts\u0026 assertions) {","        if (assertions.total() != 0)","            return false;","        if (!m_config-\u003ewarnAboutMissingAssertions())","            return false;","        if (m_trackerContext.currentTracker().hasChildren())","            return false;","        m_totals.assertions.failed++;","        assertions.failed++;","        return true;","    }","","    void RunContext::sectionEnded(SectionEndInfo\u0026\u0026 endInfo) {","        Counts assertions = m_totals.assertions - endInfo.prevAssertions;","        bool missingAssertions = testForMissingAssertions(assertions);","","        if (!m_activeSections.empty()) {","            m_activeSections.back()-\u003eclose();","            m_activeSections.pop_back();","        }","","        {","            auto _ = scopedDeactivate( *m_outputRedirect );","            m_reporter-\u003esectionEnded(","                SectionStats( CATCH_MOVE( endInfo.sectionInfo ),","                              assertions,","                              endInfo.durationInSeconds,","                              missingAssertions ) );","        }","","        m_messages.clear();","        m_messageScopes.clear();","    }","","    void RunContext::sectionEndedEarly(SectionEndInfo\u0026\u0026 endInfo) {","        if ( m_unfinishedSections.empty() ) {","            m_activeSections.back()-\u003efail();","        } else {","            m_activeSections.back()-\u003eclose();","        }","        m_activeSections.pop_back();","","        m_unfinishedSections.push_back(CATCH_MOVE(endInfo));","    }","","    void RunContext::benchmarkPreparing( StringRef name ) {","        auto _ = scopedDeactivate( *m_outputRedirect );","        m_reporter-\u003ebenchmarkPreparing( name );","    }","    void RunContext::benchmarkStarting( BenchmarkInfo const\u0026 info ) {","        auto _ = scopedDeactivate( *m_outputRedirect );","        m_reporter-\u003ebenchmarkStarting( info );","    }","    void RunContext::benchmarkEnded( BenchmarkStats\u003c\u003e const\u0026 stats ) {","        auto _ = scopedDeactivate( *m_outputRedirect );","        m_reporter-\u003ebenchmarkEnded( stats );","    }","    void RunContext::benchmarkFailed( StringRef error ) {","        auto _ = scopedDeactivate( *m_outputRedirect );","        m_reporter-\u003ebenchmarkFailed( error );","    }","","    void RunContext::pushScopedMessage(MessageInfo const \u0026 message) {","        m_messages.push_back(message);","    }","","    void RunContext::popScopedMessage(MessageInfo const \u0026 message) {","        m_messages.erase(std::remove(m_messages.begin(), m_messages.end(), message), m_messages.end());","    }","","    void RunContext::emplaceUnscopedMessage( MessageBuilder\u0026\u0026 builder ) {","        m_messageScopes.emplace_back( CATCH_MOVE(builder) );","    }","","    std::string RunContext::getCurrentTestName() const {","        return m_activeTestCase","            ? m_activeTestCase-\u003egetTestCaseInfo().name","            : std::string();","    }","","    const AssertionResult * RunContext::getLastResult() const {","        return \u0026(*m_lastResult);","    }","","    void RunContext::exceptionEarlyReported() {","        m_shouldReportUnexpected = false;","    }","","    void RunContext::handleFatalErrorCondition( StringRef message ) {","        // TODO: scoped deactivate here? Just give up and do best effort?","        //       the deactivation can break things further, OTOH so can the","        //       capture","        auto _ = scopedDeactivate( *m_outputRedirect );","","        // First notify reporter that bad things happened","        m_reporter-\u003efatalErrorEncountered( message );","","        // Don't rebuild the result -- the stringification itself can cause more fatal errors","        // Instead, fake a result data.","        AssertionResultData tempResult( ResultWas::FatalErrorCondition, { false } );","        tempResult.message = static_cast\u003cstd::string\u003e(message);","        AssertionResult result(m_lastAssertionInfo, CATCH_MOVE(tempResult));","","        assertionEnded(CATCH_MOVE(result) );","        resetAssertionInfo();","","        // Best effort cleanup for sections that have not been destructed yet","        // Since this is a fatal error, we have not had and won't have the opportunity to destruct them properly","        while (!m_activeSections.empty()) {","            auto nl = m_activeSections.back()-\u003enameAndLocation();","            SectionEndInfo endInfo{ SectionInfo(CATCH_MOVE(nl.location), CATCH_MOVE(nl.name)), {}, 0.0 };","            sectionEndedEarly(CATCH_MOVE(endInfo));","        }","        handleUnfinishedSections();","","        // Recreate section for test case (as we will lose the one that was in scope)","        auto const\u0026 testCaseInfo = m_activeTestCase-\u003egetTestCaseInfo();","        SectionInfo testCaseSection(testCaseInfo.lineInfo, testCaseInfo.name);","","        Counts assertions;","        assertions.failed = 1;","        SectionStats testCaseSectionStats(CATCH_MOVE(testCaseSection), assertions, 0, false);","        m_reporter-\u003esectionEnded( testCaseSectionStats );","","        auto const\u0026 testInfo = m_activeTestCase-\u003egetTestCaseInfo();","","        Totals deltaTotals;","        deltaTotals.testCases.failed = 1;","        deltaTotals.assertions.failed = 1;","        m_reporter-\u003etestCaseEnded(TestCaseStats(testInfo,","                                  deltaTotals,","                                  std::string(),","                                  std::string(),","                                  false));","        m_totals.testCases.failed++;","        m_reporter-\u003etestRunEnded(TestRunStats(m_runInfo, m_totals, false));","    }","","    bool RunContext::lastAssertionPassed() {","         return m_lastAssertionPassed;","    }","","    void RunContext::assertionPassed() {","        m_lastAssertionPassed = true;","        ++m_totals.assertions.passed;","        resetAssertionInfo();","        m_messageScopes.clear();","    }","","    bool RunContext::aborting() const {","        return m_totals.assertions.failed \u003e= static_cast\u003cstd::size_t\u003e(m_config-\u003eabortAfter());","    }","","    void RunContext::runCurrentTest() {","        auto const\u0026 testCaseInfo = m_activeTestCase-\u003egetTestCaseInfo();","        SectionInfo testCaseSection(testCaseInfo.lineInfo, testCaseInfo.name);","        m_reporter-\u003esectionStarting(testCaseSection);","        Counts prevAssertions = m_totals.assertions;","        double duration = 0;","        m_shouldReportUnexpected = true;","        m_lastAssertionInfo = { \"TEST_CASE\"_sr, testCaseInfo.lineInfo, StringRef(), ResultDisposition::Normal };","","        Timer timer;","        CATCH_TRY {","            {","                auto _ = scopedActivate( *m_outputRedirect );","                timer.start();","                invokeActiveTestCase();","            }","            duration = timer.getElapsedSeconds();","        } CATCH_CATCH_ANON (TestFailureException\u0026) {","            // This just means the test was aborted due to failure","        } CATCH_CATCH_ANON (TestSkipException\u0026) {","            // This just means the test was explicitly skipped","        } CATCH_CATCH_ALL {","            // Under CATCH_CONFIG_FAST_COMPILE, unexpected exceptions under REQUIRE assertions","            // are reported without translation at the point of origin.","            if( m_shouldReportUnexpected ) {","                AssertionReaction dummyReaction;","                handleUnexpectedInflightException( m_lastAssertionInfo, translateActiveException(), dummyReaction );","            }","        }","        Counts assertions = m_totals.assertions - prevAssertions;","        bool missingAssertions = testForMissingAssertions(assertions);","","        m_testCaseTracker-\u003eclose();","        handleUnfinishedSections();","        m_messages.clear();","        m_messageScopes.clear();","","        SectionStats testCaseSectionStats(CATCH_MOVE(testCaseSection), assertions, duration, missingAssertions);","        m_reporter-\u003esectionEnded(testCaseSectionStats);","    }","","    void RunContext::invokeActiveTestCase() {","        // We need to engage a handler for signals/structured exceptions","        // before running the tests themselves, or the binary can crash","        // without failed test being reported.","        FatalConditionHandlerGuard _(\u0026m_fatalConditionhandler);","        // We keep having issue where some compilers warn about an unused","        // variable, even though the type has non-trivial constructor and","        // destructor. This is annoying and ugly, but it makes them stfu.","        (void)_;","","        m_activeTestCase-\u003einvoke();","    }","","    void RunContext::handleUnfinishedSections() {","        // If sections ended prematurely due to an exception we stored their","        // infos here so we can tear them down outside the unwind process.","        for ( auto it = m_unfinishedSections.rbegin(),","                   itEnd = m_unfinishedSections.rend();","              it != itEnd;","              ++it ) {","            sectionEnded( CATCH_MOVE( *it ) );","        }","        m_unfinishedSections.clear();","    }","","    void RunContext::handleExpr(","        AssertionInfo const\u0026 info,","        ITransientExpression const\u0026 expr,","        AssertionReaction\u0026 reaction","    ) {","        bool negated = isFalseTest( info.resultDisposition );","        bool result = expr.getResult() != negated;","","        if( result ) {","            if (!m_includeSuccessfulResults) {","                assertionPassed();","            }","            else {","                reportExpr(info, ResultWas::Ok, \u0026expr, negated);","            }","        }","        else {","            reportExpr(info, ResultWas::ExpressionFailed, \u0026expr, negated );","            populateReaction( reaction );","        }","        resetAssertionInfo();","    }","    void RunContext::reportExpr(","            AssertionInfo const \u0026info,","            ResultWas::OfType resultType,","            ITransientExpression const *expr,","            bool negated ) {","","        m_lastAssertionInfo = info;","        AssertionResultData data( resultType, LazyExpression( negated ) );","","        AssertionResult assertionResult{ info, CATCH_MOVE( data ) };","        assertionResult.m_resultData.lazyExpression.m_transientExpression = expr;","","        assertionEnded( CATCH_MOVE(assertionResult) );","    }","","    void RunContext::handleMessage(","            AssertionInfo const\u0026 info,","            ResultWas::OfType resultType,","            std::string\u0026\u0026 message,","            AssertionReaction\u0026 reaction","    ) {","        m_lastAssertionInfo = info;","","        AssertionResultData data( resultType, LazyExpression( false ) );","        data.message = CATCH_MOVE( message );","        AssertionResult assertionResult{ m_lastAssertionInfo,","                                         CATCH_MOVE( data ) };","","        const auto isOk = assertionResult.isOk();","        assertionEnded( CATCH_MOVE(assertionResult) );","        if ( !isOk ) {","            populateReaction( reaction );","        } else if ( resultType == ResultWas::ExplicitSkip ) {","            // TODO: Need to handle this explicitly, as ExplicitSkip is","            // considered \"OK\"","            reaction.shouldSkip = true;","        }","        resetAssertionInfo();","    }","    void RunContext::handleUnexpectedExceptionNotThrown(","            AssertionInfo const\u0026 info,","            AssertionReaction\u0026 reaction","    ) {","        handleNonExpr(info, Catch::ResultWas::DidntThrowException, reaction);","    }","","    void RunContext::handleUnexpectedInflightException(","            AssertionInfo const\u0026 info,","            std::string\u0026\u0026 message,","            AssertionReaction\u0026 reaction","    ) {","        m_lastAssertionInfo = info;","","        AssertionResultData data( ResultWas::ThrewException, LazyExpression( false ) );","        data.message = CATCH_MOVE(message);","        AssertionResult assertionResult{ info, CATCH_MOVE(data) };","        assertionEnded( CATCH_MOVE(assertionResult) );","        populateReaction( reaction );","        resetAssertionInfo();","    }","","    void RunContext::populateReaction( AssertionReaction\u0026 reaction ) {","        reaction.shouldDebugBreak = m_config-\u003eshouldDebugBreak();","        reaction.shouldThrow = aborting() || (m_lastAssertionInfo.resultDisposition \u0026 ResultDisposition::Normal);","    }","","    void RunContext::handleIncomplete(","            AssertionInfo const\u0026 info","    ) {","        using namespace std::string_literals;","        m_lastAssertionInfo = info;","","        AssertionResultData data( ResultWas::ThrewException, LazyExpression( false ) );","        data.message = \"Exception translation was disabled by CATCH_CONFIG_FAST_COMPILE\"s;","        AssertionResult assertionResult{ info, CATCH_MOVE( data ) };","        assertionEnded( CATCH_MOVE(assertionResult) );","        resetAssertionInfo();","    }","    void RunContext::handleNonExpr(","            AssertionInfo const \u0026info,","            ResultWas::OfType resultType,","            AssertionReaction \u0026reaction","    ) {","        m_lastAssertionInfo = info;","","        AssertionResultData data( resultType, LazyExpression( false ) );","        AssertionResult assertionResult{ info, CATCH_MOVE( data ) };","","        const auto isOk = assertionResult.isOk();","        assertionEnded( CATCH_MOVE(assertionResult) );","        if ( !isOk ) { populateReaction( reaction ); }","        resetAssertionInfo();","    }","","","    IResultCapture\u0026 getResultCapture() {","        if (auto* capture = getCurrentContext().getResultCapture())","            return *capture;","        else","            CATCH_INTERNAL_ERROR(\"No result capture instance\");","    }","","    void seedRng(IConfig const\u0026 config) {","        sharedRng().seed(config.rngSeed());","    }","","    unsigned int rngSeed() {","        return getCurrentContext().getConfig()-\u003erngSeed();","    }","","}","","","","namespace Catch {","","    Section::Section( SectionInfo\u0026\u0026 info ):","        m_info( CATCH_MOVE( info ) ),","        m_sectionIncluded(","            getResultCapture().sectionStarted( m_info.name, m_info.lineInfo, m_assertions ) ) {","        // Non-\"included\" sections will not use the timing information","        // anyway, so don't bother with the potential syscall.","        if (m_sectionIncluded) {","            m_timer.start();","        }","    }","","    Section::Section( SourceLineInfo const\u0026 _lineInfo,","                      StringRef _name,","                      const char* const ):","        m_info( { \"invalid\", static_cast\u003cstd::size_t\u003e( -1 ) }, std::string{} ),","        m_sectionIncluded(","            getResultCapture().sectionStarted( _name, _lineInfo, m_assertions ) ) {","        // We delay initialization the SectionInfo member until we know","        // this section needs it, so we avoid allocating std::string for name.","        // We also delay timer start to avoid the potential syscall unless we","        // will actually use the result.","        if ( m_sectionIncluded ) {","            m_info.name = static_cast\u003cstd::string\u003e( _name );","            m_info.lineInfo = _lineInfo;","            m_timer.start();","        }","    }","","    Section::~Section() {","        if( m_sectionIncluded ) {","            SectionEndInfo endInfo{ CATCH_MOVE(m_info), m_assertions, m_timer.getElapsedSeconds() };","            if ( uncaught_exceptions() ) {","                getResultCapture().sectionEndedEarly( CATCH_MOVE(endInfo) );","            } else {","                getResultCapture().sectionEnded( CATCH_MOVE( endInfo ) );","            }","        }","    }","","    // This indicates whether the section should be executed or not","    Section::operator bool() const {","        return m_sectionIncluded;","    }","","","} // end namespace Catch","","","","#include \u003cvector\u003e","","namespace Catch {","","    namespace {","        static auto getSingletons() -\u003e std::vector\u003cISingleton*\u003e*\u0026 {","            static std::vector\u003cISingleton*\u003e* g_singletons = nullptr;","            if( !g_singletons )","                g_singletons = new std::vector\u003cISingleton*\u003e();","            return g_singletons;","        }","    }","","    ISingleton::~ISingleton() = default;","","    void addSingleton(ISingleton* singleton ) {","        getSingletons()-\u003epush_back( singleton );","    }","    void cleanupSingletons() {","        auto\u0026 singletons = getSingletons();","        for( auto singleton : *singletons )","            delete singleton;","        delete singletons;","        singletons = nullptr;","    }","","} // namespace Catch","","","","#include \u003ccstring\u003e","#include \u003costream\u003e","","namespace Catch {","","    bool SourceLineInfo::operator == ( SourceLineInfo const\u0026 other ) const noexcept {","        return line == other.line \u0026\u0026 (file == other.file || std::strcmp(file, other.file) == 0);","    }","    bool SourceLineInfo::operator \u003c ( SourceLineInfo const\u0026 other ) const noexcept {","        // We can assume that the same file will usually have the same pointer.","        // Thus, if the pointers are the same, there is no point in calling the strcmp","        return line \u003c other.line || ( line == other.line \u0026\u0026 file != other.file \u0026\u0026 (std::strcmp(file, other.file) \u003c 0));","    }","","    std::ostream\u0026 operator \u003c\u003c ( std::ostream\u0026 os, SourceLineInfo const\u0026 info ) {","#ifndef __GNUG__","        os \u003c\u003c info.file \u003c\u003c '(' \u003c\u003c info.line \u003c\u003c ')';","#else","        os \u003c\u003c info.file \u003c\u003c ':' \u003c\u003c info.line;","#endif","        return os;","    }","","} // end namespace Catch","","","","","namespace Catch {","#if !defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)","    void StartupExceptionRegistry::add( std::exception_ptr const\u0026 exception ) noexcept {","        CATCH_TRY {","            m_exceptions.push_back(exception);","        } CATCH_CATCH_ALL {","            // If we run out of memory during start-up there's really not a lot more we can do about it","            std::terminate();","        }","    }","","    std::vector\u003cstd::exception_ptr\u003e const\u0026 StartupExceptionRegistry::getExceptions() const noexcept {","        return m_exceptions;","    }","#endif","","} // end namespace Catch","","","","","","#include \u003ciostream\u003e","","namespace Catch {","","// If you #define this you must implement these functions","#if !defined( CATCH_CONFIG_NOSTDOUT )","    std::ostream\u0026 cout() { return std::cout; }","    std::ostream\u0026 cerr() { return std::cerr; }","    std::ostream\u0026 clog() { return std::clog; }","#endif","","} // namespace Catch","","","","#include \u003costream\u003e","#include \u003ccstring\u003e","#include \u003ccctype\u003e","#include \u003cvector\u003e","","namespace Catch {","","    bool startsWith( std::string const\u0026 s, std::string const\u0026 prefix ) {","        return s.size() \u003e= prefix.size() \u0026\u0026 std::equal(prefix.begin(), prefix.end(), s.begin());","    }","    bool startsWith( StringRef s, char prefix ) {","        return !s.empty() \u0026\u0026 s[0] == prefix;","    }","    bool endsWith( std::string const\u0026 s, std::string const\u0026 suffix ) {","        return s.size() \u003e= suffix.size() \u0026\u0026 std::equal(suffix.rbegin(), suffix.rend(), s.rbegin());","    }","    bool endsWith( std::string const\u0026 s, char suffix ) {","        return !s.empty() \u0026\u0026 s[s.size()-1] == suffix;","    }","    bool contains( std::string const\u0026 s, std::string const\u0026 infix ) {","        return s.find( infix ) != std::string::npos;","    }","    void toLowerInPlace( std::string\u0026 s ) {","        for ( char\u0026 c : s ) {","            c = toLower( c );","        }","    }","    std::string toLower( std::string const\u0026 s ) {","        std::string lc = s;","        toLowerInPlace( lc );","        return lc;","    }","    char toLower(char c) {","        return static_cast\u003cchar\u003e(std::tolower(static_cast\u003cunsigned char\u003e(c)));","    }","","    std::string trim( std::string const\u0026 str ) {","        static char const* whitespaceChars = \"\\n\\r\\t \";","        std::string::size_type start = str.find_first_not_of( whitespaceChars );","        std::string::size_type end = str.find_last_not_of( whitespaceChars );","","        return start != std::string::npos ? str.substr( start, 1+end-start ) : std::string();","    }","","    StringRef trim(StringRef ref) {","        const auto is_ws = [](char c) {","            return c == ' ' || c == '\\t' || c == '\\n' || c == '\\r';","        };","        size_t real_begin = 0;","        while (real_begin \u003c ref.size() \u0026\u0026 is_ws(ref[real_begin])) { ++real_begin; }","        size_t real_end = ref.size();","        while (real_end \u003e real_begin \u0026\u0026 is_ws(ref[real_end - 1])) { --real_end; }","","        return ref.substr(real_begin, real_end - real_begin);","    }","","    bool replaceInPlace( std::string\u0026 str, std::string const\u0026 replaceThis, std::string const\u0026 withThis ) {","        std::size_t i = str.find( replaceThis );","        if (i == std::string::npos) {","            return false;","        }","        std::size_t copyBegin = 0;","        std::string origStr = CATCH_MOVE(str);","        str.clear();","        // There is at least one replacement, so reserve with the best guess","        // we can make without actually counting the number of occurences.","        str.reserve(origStr.size() - replaceThis.size() + withThis.size());","        do {","            str.append(origStr, copyBegin, i-copyBegin );","            str += withThis;","            copyBegin = i + replaceThis.size();","            if( copyBegin \u003c origStr.size() )","                i = origStr.find( replaceThis, copyBegin );","            else","                i = std::string::npos;","        } while( i != std::string::npos );","        if ( copyBegin \u003c origStr.size() ) {","            str.append(origStr, copyBegin, origStr.size() );","        }","        return true;","    }","","    std::vector\u003cStringRef\u003e splitStringRef( StringRef str, char delimiter ) {","        std::vector\u003cStringRef\u003e subStrings;","        std::size_t start = 0;","        for(std::size_t pos = 0; pos \u003c str.size(); ++pos ) {","            if( str[pos] == delimiter ) {","                if( pos - start \u003e 1 )","                    subStrings.push_back( str.substr( start, pos-start ) );","                start = pos+1;","            }","        }","        if( start \u003c str.size() )","            subStrings.push_back( str.substr( start, str.size()-start ) );","        return subStrings;","    }","","    std::ostream\u0026 operator \u003c\u003c ( std::ostream\u0026 os, pluralise const\u0026 pluraliser ) {","        os \u003c\u003c pluraliser.m_count \u003c\u003c ' ' \u003c\u003c pluraliser.m_label;","        if( pluraliser.m_count != 1 )","            os \u003c\u003c 's';","        return os;","    }","","}","","","","#include \u003calgorithm\u003e","#include \u003costream\u003e","#include \u003ccstring\u003e","#include \u003ccstdint\u003e","","namespace Catch {","    StringRef::StringRef( char const* rawChars ) noexcept","    : StringRef( rawChars, std::strlen(rawChars) )","    {}","","","    bool StringRef::operator\u003c(StringRef rhs) const noexcept {","        if (m_size \u003c rhs.m_size) {","            return strncmp(m_start, rhs.m_start, m_size) \u003c= 0;","        }","        return strncmp(m_start, rhs.m_start, rhs.m_size) \u003c 0;","    }","","    int StringRef::compare( StringRef rhs ) const {","        auto cmpResult =","            strncmp( m_start, rhs.m_start, std::min( m_size, rhs.m_size ) );","","        // This means that strncmp found a difference before the strings","        // ended, and we can return it directly","        if ( cmpResult != 0 ) {","            return cmpResult;","        }","","        // If strings are equal up to length, then their comparison results on","        // their size","        if ( m_size \u003c rhs.m_size ) {","            return -1;","        } else if ( m_size \u003e rhs.m_size ) {","            return 1;","        } else {","            return 0;","        }","    }","","    auto operator \u003c\u003c ( std::ostream\u0026 os, StringRef str ) -\u003e std::ostream\u0026 {","        return os.write(str.data(), static_cast\u003cstd::streamsize\u003e(str.size()));","    }","","    std::string operator+(StringRef lhs, StringRef rhs) {","        std::string ret;","        ret.reserve(lhs.size() + rhs.size());","        ret += lhs;","        ret += rhs;","        return ret;","    }","","    auto operator+=( std::string\u0026 lhs, StringRef rhs ) -\u003e std::string\u0026 {","        lhs.append(rhs.data(), rhs.size());","        return lhs;","    }","","} // namespace Catch","","","","namespace Catch {","","    TagAliasRegistry::~TagAliasRegistry() = default;","","    TagAlias const* TagAliasRegistry::find( std::string const\u0026 alias ) const {","        auto it = m_registry.find( alias );","        if( it != m_registry.end() )","            return \u0026(it-\u003esecond);","        else","            return nullptr;","    }","","    std::string TagAliasRegistry::expandAliases( std::string const\u0026 unexpandedTestSpec ) const {","        std::string expandedTestSpec = unexpandedTestSpec;","        for( auto const\u0026 registryKvp : m_registry ) {","            std::size_t pos = expandedTestSpec.find( registryKvp.first );","            if( pos != std::string::npos ) {","                expandedTestSpec =  expandedTestSpec.substr( 0, pos ) +","                                    registryKvp.second.tag +","                                    expandedTestSpec.substr( pos + registryKvp.first.size() );","            }","        }","        return expandedTestSpec;","    }","","    void TagAliasRegistry::add( std::string const\u0026 alias, std::string const\u0026 tag, SourceLineInfo const\u0026 lineInfo ) {","        CATCH_ENFORCE( startsWith(alias, \"[@\") \u0026\u0026 endsWith(alias, ']'),","                      \"error: tag alias, '\" \u003c\u003c alias \u003c\u003c \"' is not of the form [@alias name].\\n\" \u003c\u003c lineInfo );","","        CATCH_ENFORCE( m_registry.insert(std::make_pair(alias, TagAlias(tag, lineInfo))).second,","                      \"error: tag alias, '\" \u003c\u003c alias \u003c\u003c \"' already registered.\\n\"","                      \u003c\u003c \"\\tFirst seen at: \" \u003c\u003c find(alias)-\u003elineInfo \u003c\u003c \"\\n\"","                      \u003c\u003c \"\\tRedefined at: \" \u003c\u003c lineInfo );","    }","","    ITagAliasRegistry::~ITagAliasRegistry() = default;","","    ITagAliasRegistry const\u0026 ITagAliasRegistry::get() {","        return getRegistryHub().getTagAliasRegistry();","    }","","} // end namespace Catch","","","","","namespace Catch {","    TestCaseInfoHasher::TestCaseInfoHasher( hash_t seed ): m_seed( seed ) {}","","    uint32_t TestCaseInfoHasher::operator()( TestCaseInfo const\u0026 t ) const {","        // FNV-1a hash algorithm that is designed for uniqueness:","        const hash_t prime = 1099511628211u;","        hash_t hash = 14695981039346656037u;","        for ( const char c : t.name ) {","            hash ^= c;","            hash *= prime;","        }","        for ( const char c : t.className ) {","            hash ^= c;","            hash *= prime;","        }","        for ( const Tag\u0026 tag : t.tags ) {","            for ( const char c : tag.original ) {","                hash ^= c;","                hash *= prime;","            }","        }","        hash ^= m_seed;","        hash *= prime;","        const uint32_t low{ static_cast\u003cuint32_t\u003e( hash ) };","        const uint32_t high{ static_cast\u003cuint32_t\u003e( hash \u003e\u003e 32 ) };","        return low * high;","    }","} // namespace Catch","","","","","#include \u003calgorithm\u003e","#include \u003cset\u003e","","namespace Catch {","","    namespace {","        static void enforceNoDuplicateTestCases(","            std::vector\u003cTestCaseHandle\u003e const\u0026 tests ) {","            auto testInfoCmp = []( TestCaseInfo const* lhs,","                                   TestCaseInfo const* rhs ) {","                return *lhs \u003c *rhs;","            };","            std::set\u003cTestCaseInfo const*, decltype( testInfoCmp )\u0026\u003e seenTests(","                testInfoCmp );","            for ( auto const\u0026 test : tests ) {","                const auto infoPtr = \u0026test.getTestCaseInfo();","                const auto prev = seenTests.insert( infoPtr );","                CATCH_ENFORCE( prev.second,","                               \"error: test case \\\"\"","                                   \u003c\u003c infoPtr-\u003ename \u003c\u003c \"\\\", with tags \\\"\"","                                   \u003c\u003c infoPtr-\u003etagsAsString()","                                   \u003c\u003c \"\\\" already defined.\\n\"","                                   \u003c\u003c \"\\tFirst seen at \"","                                   \u003c\u003c ( *prev.first )-\u003elineInfo \u003c\u003c \"\\n\"","                                   \u003c\u003c \"\\tRedefined at \" \u003c\u003c infoPtr-\u003elineInfo );","            }","        }","","        static bool matchTest( TestCaseHandle const\u0026 testCase,","                               TestSpec const\u0026 testSpec,","                               IConfig const\u0026 config ) {","            return testSpec.matches( testCase.getTestCaseInfo() ) \u0026\u0026","                   isThrowSafe( testCase, config );","        }","","    } // end unnamed namespace","","    std::vector\u003cTestCaseHandle\u003e sortTests( IConfig const\u0026 config, std::vector\u003cTestCaseHandle\u003e const\u0026 unsortedTestCases ) {","        switch (config.runOrder()) {","        case TestRunOrder::Declared:","            return unsortedTestCases;","","        case TestRunOrder::LexicographicallySorted: {","            std::vector\u003cTestCaseHandle\u003e sorted = unsortedTestCases;","            std::sort(","                sorted.begin(),","                sorted.end(),","                []( TestCaseHandle const\u0026 lhs, TestCaseHandle const\u0026 rhs ) {","                    return lhs.getTestCaseInfo() \u003c rhs.getTestCaseInfo();","                }","            );","            return sorted;","        }","        case TestRunOrder::Randomized: {","            using TestWithHash = std::pair\u003cTestCaseInfoHasher::hash_t, TestCaseHandle\u003e;","","            TestCaseInfoHasher h{ config.rngSeed() };","            std::vector\u003cTestWithHash\u003e indexed_tests;","            indexed_tests.reserve(unsortedTestCases.size());","","            for (auto const\u0026 handle : unsortedTestCases) {","                indexed_tests.emplace_back(h(handle.getTestCaseInfo()), handle);","            }","","            std::sort( indexed_tests.begin(),","                       indexed_tests.end(),","                       []( TestWithHash const\u0026 lhs, TestWithHash const\u0026 rhs ) {","                           if ( lhs.first == rhs.first ) {","                               return lhs.second.getTestCaseInfo() \u003c","                                      rhs.second.getTestCaseInfo();","                           }","                           return lhs.first \u003c rhs.first;","                       } );","","            std::vector\u003cTestCaseHandle\u003e randomized;","            randomized.reserve(indexed_tests.size());","","            for (auto const\u0026 indexed : indexed_tests) {","                randomized.push_back(indexed.second);","            }","","            return randomized;","        }","        }","","        CATCH_INTERNAL_ERROR(\"Unknown test order value!\");","    }","","    bool isThrowSafe( TestCaseHandle const\u0026 testCase, IConfig const\u0026 config ) {","        return !testCase.getTestCaseInfo().throws() || config.allowThrows();","    }","","    std::vector\u003cTestCaseHandle\u003e filterTests( std::vector\u003cTestCaseHandle\u003e const\u0026 testCases, TestSpec const\u0026 testSpec, IConfig const\u0026 config ) {","        std::vector\u003cTestCaseHandle\u003e filtered;","        filtered.reserve( testCases.size() );","        for (auto const\u0026 testCase : testCases) {","            if ((!testSpec.hasFilters() \u0026\u0026 !testCase.getTestCaseInfo().isHidden()) ||","                (testSpec.hasFilters() \u0026\u0026 matchTest(testCase, testSpec, config))) {","                filtered.push_back(testCase);","            }","        }","        return createShard(filtered, config.shardCount(), config.shardIndex());","    }","    std::vector\u003cTestCaseHandle\u003e const\u0026 getAllTestCasesSorted( IConfig const\u0026 config ) {","        return getRegistryHub().getTestCaseRegistry().getAllTestsSorted( config );","    }","","    TestRegistry::~TestRegistry() = default;","","    void TestRegistry::registerTest(Detail::unique_ptr\u003cTestCaseInfo\u003e testInfo, Detail::unique_ptr\u003cITestInvoker\u003e testInvoker) {","        m_handles.emplace_back(testInfo.get(), testInvoker.get());","        m_viewed_test_infos.push_back(testInfo.get());","        m_owned_test_infos.push_back(CATCH_MOVE(testInfo));","        m_invokers.push_back(CATCH_MOVE(testInvoker));","    }","","    std::vector\u003cTestCaseInfo*\u003e const\u0026 TestRegistry::getAllInfos() const {","        return m_viewed_test_infos;","    }","","    std::vector\u003cTestCaseHandle\u003e const\u0026 TestRegistry::getAllTests() const {","        return m_handles;","    }","    std::vector\u003cTestCaseHandle\u003e const\u0026 TestRegistry::getAllTestsSorted( IConfig const\u0026 config ) const {","        if( m_sortedFunctions.empty() )","            enforceNoDuplicateTestCases( m_handles );","","        if(  m_currentSortOrder != config.runOrder() || m_sortedFunctions.empty() ) {","            m_sortedFunctions = sortTests( config, m_handles );","            m_currentSortOrder = config.runOrder();","        }","        return m_sortedFunctions;","    }","","} // end namespace Catch","","","","","#include \u003calgorithm\u003e","#include \u003ccassert\u003e","","#if defined(__clang__)","#    pragma clang diagnostic push","#    pragma clang diagnostic ignored \"-Wexit-time-destructors\"","#endif","","namespace Catch {","namespace TestCaseTracking {","","    NameAndLocation::NameAndLocation( std::string\u0026\u0026 _name, SourceLineInfo const\u0026 _location )","    :   name( CATCH_MOVE(_name) ),","        location( _location )","    {}","","","    ITracker::~ITracker() = default;","","    void ITracker::markAsNeedingAnotherRun() {","        m_runState = NeedsAnotherRun;","    }","","    void ITracker::addChild( ITrackerPtr\u0026\u0026 child ) {","        m_children.push_back( CATCH_MOVE(child) );","    }","","    ITracker* ITracker::findChild( NameAndLocationRef const\u0026 nameAndLocation ) {","        auto it = std::find_if(","            m_children.begin(),","            m_children.end(),","            [\u0026nameAndLocation]( ITrackerPtr const\u0026 tracker ) {","                auto const\u0026 tnameAndLoc = tracker-\u003enameAndLocation();","                if ( tnameAndLoc.location.line !=","                     nameAndLocation.location.line ) {","                    return false;","                }","                return tnameAndLoc == nameAndLocation;","            } );","        return ( it != m_children.end() ) ? it-\u003eget() : nullptr;","    }","","    bool ITracker::isSectionTracker() const { return false; }","    bool ITracker::isGeneratorTracker() const { return false; }","","    bool ITracker::isOpen() const {","        return m_runState != NotStarted \u0026\u0026 !isComplete();","    }","","    bool ITracker::hasStarted() const { return m_runState != NotStarted; }","","    void ITracker::openChild() {","        if (m_runState != ExecutingChildren) {","            m_runState = ExecutingChildren;","            if (m_parent) {","                m_parent-\u003eopenChild();","            }","        }","    }","","    ITracker\u0026 TrackerContext::startRun() {","        using namespace std::string_literals;","        m_rootTracker = Catch::Detail::make_unique\u003cSectionTracker\u003e(","            NameAndLocation( \"{root}\"s, CATCH_INTERNAL_LINEINFO ),","            *this,","            nullptr );","        m_currentTracker = nullptr;","        m_runState = Executing;","        return *m_rootTracker;","    }","","    void TrackerContext::completeCycle() {","        m_runState = CompletedCycle;","    }","","    bool TrackerContext::completedCycle() const {","        return m_runState == CompletedCycle;","    }","    void TrackerContext::setCurrentTracker( ITracker* tracker ) {","        m_currentTracker = tracker;","    }","","","    TrackerBase::TrackerBase( NameAndLocation\u0026\u0026 nameAndLocation, TrackerContext\u0026 ctx, ITracker* parent ):","        ITracker(CATCH_MOVE(nameAndLocation), parent),","        m_ctx( ctx )","    {}","","    bool TrackerBase::isComplete() const {","        return m_runState == CompletedSuccessfully || m_runState == Failed;","    }","","    void TrackerBase::open() {","        m_runState = Executing;","        moveToThis();","        if( m_parent )","            m_parent-\u003eopenChild();","    }","","    void TrackerBase::close() {","","        // Close any still open children (e.g. generators)","        while( \u0026m_ctx.currentTracker() != this )","            m_ctx.currentTracker().close();","","        switch( m_runState ) {","            case NeedsAnotherRun:","                break;","","            case Executing:","                m_runState = CompletedSuccessfully;","                break;","            case ExecutingChildren:","                if( std::all_of(m_children.begin(), m_children.end(), [](ITrackerPtr const\u0026 t){ return t-\u003eisComplete(); }) )","                    m_runState = CompletedSuccessfully;","                break;","","            case NotStarted:","            case CompletedSuccessfully:","            case Failed:","                CATCH_INTERNAL_ERROR( \"Illogical state: \" \u003c\u003c m_runState );","","            default:","                CATCH_INTERNAL_ERROR( \"Unknown state: \" \u003c\u003c m_runState );","        }","        moveToParent();","        m_ctx.completeCycle();","    }","    void TrackerBase::fail() {","        m_runState = Failed;","        if( m_parent )","            m_parent-\u003emarkAsNeedingAnotherRun();","        moveToParent();","        m_ctx.completeCycle();","    }","","    void TrackerBase::moveToParent() {","        assert( m_parent );","        m_ctx.setCurrentTracker( m_parent );","    }","    void TrackerBase::moveToThis() {","        m_ctx.setCurrentTracker( this );","    }","","    SectionTracker::SectionTracker( NameAndLocation\u0026\u0026 nameAndLocation, TrackerContext\u0026 ctx, ITracker* parent )","    :   TrackerBase( CATCH_MOVE(nameAndLocation), ctx, parent ),","        m_trimmed_name(trim(StringRef(ITracker::nameAndLocation().name)))","    {","        if( parent ) {","            while ( !parent-\u003eisSectionTracker() ) {","                parent = parent-\u003eparent();","            }","","            SectionTracker\u0026 parentSection = static_cast\u003cSectionTracker\u0026\u003e( *parent );","            addNextFilters( parentSection.m_filters );","        }","    }","","    bool SectionTracker::isComplete() const {","        bool complete = true;","","        if (m_filters.empty()","            || m_filters[0].empty()","            || std::find(m_filters.begin(), m_filters.end(), m_trimmed_name) != m_filters.end()) {","            complete = TrackerBase::isComplete();","        }","        return complete;","    }","","    bool SectionTracker::isSectionTracker() const { return true; }","","    SectionTracker\u0026 SectionTracker::acquire( TrackerContext\u0026 ctx, NameAndLocationRef const\u0026 nameAndLocation ) {","        SectionTracker* tracker;","","        ITracker\u0026 currentTracker = ctx.currentTracker();","        if ( ITracker* childTracker =","                 currentTracker.findChild( nameAndLocation ) ) {","            assert( childTracker );","            assert( childTracker-\u003eisSectionTracker() );","            tracker = static_cast\u003cSectionTracker*\u003e( childTracker );","        } else {","            auto newTracker = Catch::Detail::make_unique\u003cSectionTracker\u003e(","                NameAndLocation{ static_cast\u003cstd::string\u003e(nameAndLocation.name),","                                 nameAndLocation.location },","                ctx,","                \u0026currentTracker );","            tracker = newTracker.get();","            currentTracker.addChild( CATCH_MOVE( newTracker ) );","        }","","        if ( !ctx.completedCycle() ) {","            tracker-\u003etryOpen();","        }","","        return *tracker;","    }","","    void SectionTracker::tryOpen() {","        if( !isComplete() )","            open();","    }","","    void SectionTracker::addInitialFilters( std::vector\u003cstd::string\u003e const\u0026 filters ) {","        if( !filters.empty() ) {","            m_filters.reserve( m_filters.size() + filters.size() + 2 );","            m_filters.emplace_back(StringRef{}); // Root - should never be consulted","            m_filters.emplace_back(StringRef{}); // Test Case - not a section filter","            m_filters.insert( m_filters.end(), filters.begin(), filters.end() );","        }","    }","    void SectionTracker::addNextFilters( std::vector\u003cStringRef\u003e const\u0026 filters ) {","        if( filters.size() \u003e 1 )","            m_filters.insert( m_filters.end(), filters.begin()+1, filters.end() );","    }","","    StringRef SectionTracker::trimmedName() const {","        return m_trimmed_name;","    }","","} // namespace TestCaseTracking","","} // namespace Catch","","#if defined(__clang__)","#    pragma clang diagnostic pop","#endif","","","","","namespace Catch {","","    void throw_test_failure_exception() {","#if !defined( CATCH_CONFIG_DISABLE_EXCEPTIONS )","        throw TestFailureException{};","#else","        CATCH_ERROR( \"Test failure requires aborting test!\" );","#endif","    }","","    void throw_test_skip_exception() {","#if !defined( CATCH_CONFIG_DISABLE_EXCEPTIONS )","        throw Catch::TestSkipException();","#else","        CATCH_ERROR( \"Explicitly skipping tests during runtime requires exceptions\" );","#endif","    }","","} // namespace Catch","","","","#include \u003calgorithm\u003e","#include \u003citerator\u003e","","namespace Catch {","    void ITestInvoker::prepareTestCase() {}","    void ITestInvoker::tearDownTestCase() {}","    ITestInvoker::~ITestInvoker() = default;","","    namespace {","        static StringRef extractClassName( StringRef classOrMethodName ) {","            if ( !startsWith( classOrMethodName, '\u0026' ) ) {","                return classOrMethodName;","            }","","            // Remove the leading '\u0026' to avoid having to special case it later","            const auto methodName =","                classOrMethodName.substr( 1, classOrMethodName.size() );","","            auto reverseStart = std::make_reverse_iterator( methodName.end() );","            auto reverseEnd = std::make_reverse_iterator( methodName.begin() );","","            // We make a simplifying assumption that \":\" is only present","            // in the input as part of \"::\" from C++ typenames (this is","            // relatively safe assumption because the input is generated","            // as stringification of type through preprocessor).","            auto lastColons = std::find( reverseStart, reverseEnd, ':' ) + 1;","            auto secondLastColons =","                std::find( lastColons + 1, reverseEnd, ':' );","","            auto const startIdx = reverseEnd - secondLastColons;","            auto const classNameSize = secondLastColons - lastColons - 1;","","            return methodName.substr(","                static_cast\u003cstd::size_t\u003e( startIdx ),","                static_cast\u003cstd::size_t\u003e( classNameSize ) );","        }","","        class TestInvokerAsFunction final : public ITestInvoker {","            using TestType = void ( * )();","            TestType m_testAsFunction;","","        public:","            constexpr TestInvokerAsFunction( TestType testAsFunction ) noexcept:","                m_testAsFunction( testAsFunction ) {}","","            void invoke() const override { m_testAsFunction(); }","        };","","    } // namespace","","    Detail::unique_ptr\u003cITestInvoker\u003e makeTestInvoker( void(*testAsFunction)() ) {","        return Detail::make_unique\u003cTestInvokerAsFunction\u003e( testAsFunction );","    }","","    AutoReg::AutoReg( Detail::unique_ptr\u003cITestInvoker\u003e invoker, SourceLineInfo const\u0026 lineInfo, StringRef classOrMethod, NameAndTags const\u0026 nameAndTags ) noexcept {","        CATCH_TRY {","            getMutableRegistryHub()","                    .registerTest(","                        makeTestCaseInfo(","                            extractClassName( classOrMethod ),","                            nameAndTags,","                            lineInfo),","                        CATCH_MOVE(invoker)","                    );","        } CATCH_CATCH_ALL {","            // Do not throw when constructing global objects, instead register the exception to be processed later","            getMutableRegistryHub().registerStartupException();","        }","    }","}","","","","","","namespace Catch {","","    TestSpecParser::TestSpecParser( ITagAliasRegistry const\u0026 tagAliases ) : m_tagAliases( \u0026tagAliases ) {}","","    TestSpecParser\u0026 TestSpecParser::parse( std::string const\u0026 arg ) {","        m_mode = None;","        m_exclusion = false;","        m_arg = m_tagAliases-\u003eexpandAliases( arg );","        m_escapeChars.clear();","        m_substring.reserve(m_arg.size());","        m_patternName.reserve(m_arg.size());","        m_realPatternPos = 0;","","        for( m_pos = 0; m_pos \u003c m_arg.size(); ++m_pos )","          //if visitChar fails","           if( !visitChar( m_arg[m_pos] ) ){","               m_testSpec.m_invalidSpecs.push_back(arg);","               break;","           }","        endMode();","        return *this;","    }","    TestSpec TestSpecParser::testSpec() {","        addFilter();","        return CATCH_MOVE(m_testSpec);","    }","    bool TestSpecParser::visitChar( char c ) {","        if( (m_mode != EscapedName) \u0026\u0026 (c == '\\\\') ) {","            escape();","            addCharToPattern(c);","            return true;","        }else if((m_mode != EscapedName) \u0026\u0026 (c == ',') )  {","            return separate();","        }","","        switch( m_mode ) {","        case None:","            if( processNoneChar( c ) )","                return true;","            break;","        case Name:","            processNameChar( c );","            break;","        case EscapedName:","            endMode();","            addCharToPattern(c);","            return true;","        default:","        case Tag:","        case QuotedName:","            if( processOtherChar( c ) )","                return true;","            break;","        }","","        m_substring += c;","        if( !isControlChar( c ) ) {","            m_patternName += c;","            m_realPatternPos++;","        }","        return true;","    }","    // Two of the processing methods return true to signal the caller to return","    // without adding the given character to the current pattern strings","    bool TestSpecParser::processNoneChar( char c ) {","        switch( c ) {","        case ' ':","            return true;","        case '~':","            m_exclusion = true;","            return false;","        case '[':","            startNewMode( Tag );","            return false;","        case '\"':","            startNewMode( QuotedName );","            return false;","        default:","            startNewMode( Name );","            return false;","        }","    }","    void TestSpecParser::processNameChar( char c ) {","        if( c == '[' ) {","            if( m_substring == \"exclude:\" )","                m_exclusion = true;","            else","                endMode();","            startNewMode( Tag );","        }","    }","    bool TestSpecParser::processOtherChar( char c ) {","        if( !isControlChar( c ) )","            return false;","        m_substring += c;","        endMode();","        return true;","    }","    void TestSpecParser::startNewMode( Mode mode ) {","        m_mode = mode;","    }","    void TestSpecParser::endMode() {","        switch( m_mode ) {","        case Name:","        case QuotedName:","            return addNamePattern();","        case Tag:","            return addTagPattern();","        case EscapedName:","            revertBackToLastMode();","            return;","        case None:","        default:","            return startNewMode( None );","        }","    }","    void TestSpecParser::escape() {","        saveLastMode();","        m_mode = EscapedName;","        m_escapeChars.push_back(m_realPatternPos);","    }","    bool TestSpecParser::isControlChar( char c ) const {","        switch( m_mode ) {","            default:","                return false;","            case None:","                return c == '~';","            case Name:","                return c == '[';","            case EscapedName:","                return true;","            case QuotedName:","                return c == '\"';","            case Tag:","                return c == '[' || c == ']';","        }","    }","","    void TestSpecParser::addFilter() {","        if( !m_currentFilter.m_required.empty() || !m_currentFilter.m_forbidden.empty() ) {","            m_testSpec.m_filters.push_back( CATCH_MOVE(m_currentFilter) );","            m_currentFilter = TestSpec::Filter();","        }","    }","","    void TestSpecParser::saveLastMode() {","      lastMode = m_mode;","    }","","    void TestSpecParser::revertBackToLastMode() {","      m_mode = lastMode;","    }","","    bool TestSpecParser::separate() {","      if( (m_mode==QuotedName) || (m_mode==Tag) ){","         //invalid argument, signal failure to previous scope.","         m_mode = None;","         m_pos = m_arg.size();","         m_substring.clear();","         m_patternName.clear();","         m_realPatternPos = 0;","         return false;","      }","      endMode();","      addFilter();","      return true; //success","    }","","    std::string TestSpecParser::preprocessPattern() {","        std::string token = m_patternName;","        for (std::size_t i = 0; i \u003c m_escapeChars.size(); ++i)","            token = token.substr(0, m_escapeChars[i] - i) + token.substr(m_escapeChars[i] - i + 1);","        m_escapeChars.clear();","        if (startsWith(token, \"exclude:\")) {","            m_exclusion = true;","            token = token.substr(8);","        }","","        m_patternName.clear();","        m_realPatternPos = 0;","","        return token;","    }","","    void TestSpecParser::addNamePattern() {","        auto token = preprocessPattern();","","        if (!token.empty()) {","            if (m_exclusion) {","                m_currentFilter.m_forbidden.emplace_back(Detail::make_unique\u003cTestSpec::NamePattern\u003e(token, m_substring));","            } else {","                m_currentFilter.m_required.emplace_back(Detail::make_unique\u003cTestSpec::NamePattern\u003e(token, m_substring));","            }","        }","        m_substring.clear();","        m_exclusion = false;","        m_mode = None;","    }","","    void TestSpecParser::addTagPattern() {","        auto token = preprocessPattern();","","        if (!token.empty()) {","            // If the tag pattern is the \"hide and tag\" shorthand (e.g. [.foo])","            // we have to create a separate hide tag and shorten the real one","            if (token.size() \u003e 1 \u0026\u0026 token[0] == '.') {","                token.erase(token.begin());","                if (m_exclusion) {","                    m_currentFilter.m_forbidden.emplace_back(Detail::make_unique\u003cTestSpec::TagPattern\u003e(\".\", m_substring));","                } else {","                    m_currentFilter.m_required.emplace_back(Detail::make_unique\u003cTestSpec::TagPattern\u003e(\".\", m_substring));","                }","            }","            if (m_exclusion) {","                m_currentFilter.m_forbidden.emplace_back(Detail::make_unique\u003cTestSpec::TagPattern\u003e(token, m_substring));","            } else {","                m_currentFilter.m_required.emplace_back(Detail::make_unique\u003cTestSpec::TagPattern\u003e(token, m_substring));","            }","        }","        m_substring.clear();","        m_exclusion = false;","        m_mode = None;","    }","","} // namespace Catch","","","","#include \u003calgorithm\u003e","#include \u003ccstring\u003e","#include \u003costream\u003e","","namespace {","    bool isWhitespace( char c ) {","        return c == ' ' || c == '\\t' || c == '\\n' || c == '\\r';","    }","","    bool isBreakableBefore( char c ) {","        static const char chars[] = \"[({\u003c|\";","        return std::memchr( chars, c, sizeof( chars ) - 1 ) != nullptr;","    }","","    bool isBreakableAfter( char c ) {","        static const char chars[] = \"])}\u003e.,:;*+-=\u0026/\\\\\";","        return std::memchr( chars, c, sizeof( chars ) - 1 ) != nullptr;","    }","","} // namespace","","namespace Catch {","    namespace TextFlow {","        void AnsiSkippingString::preprocessString() {","            for ( auto it = m_string.begin(); it != m_string.end(); ) {","                // try to read through an ansi sequence","                while ( it != m_string.end() \u0026\u0026 *it == '\\033' \u0026\u0026","                        it + 1 != m_string.end() \u0026\u0026 *( it + 1 ) == '[' ) {","                    auto cursor = it + 2;","                    while ( cursor != m_string.end() \u0026\u0026","                            ( isdigit( *cursor ) || *cursor == ';' ) ) {","                        ++cursor;","                    }","                    if ( cursor == m_string.end() || *cursor != 'm' ) {","                        break;","                    }","                    // 'm' -\u003e 0xff","                    *cursor = AnsiSkippingString::sentinel;","                    // if we've read an ansi sequence, set the iterator and","                    // return to the top of the loop","                    it = cursor + 1;","                }","                if ( it != m_string.end() ) {","                    ++m_size;","                    ++it;","                }","            }","        }","","        AnsiSkippingString::AnsiSkippingString( std::string const\u0026 text ):","            m_string( text ) {","            preprocessString();","        }","","        AnsiSkippingString::AnsiSkippingString( std::string\u0026\u0026 text ):","            m_string( CATCH_MOVE( text ) ) {","            preprocessString();","        }","","        AnsiSkippingString::const_iterator AnsiSkippingString::begin() const {","            return const_iterator( m_string );","        }","","        AnsiSkippingString::const_iterator AnsiSkippingString::end() const {","            return const_iterator( m_string, const_iterator::EndTag{} );","        }","","        std::string AnsiSkippingString::substring( const_iterator begin,","                                                   const_iterator end ) const {","            // There's one caveat here to an otherwise simple substring: when","            // making a begin iterator we might have skipped ansi sequences at","            // the start. If `begin` here is a begin iterator, skipped over","            // initial ansi sequences, we'll use the true beginning of the","            // string. Lastly: We need to transform any chars we replaced with","            // 0xff back to 'm'","            auto str = std::string( begin == this-\u003ebegin() ? m_string.begin()","                                                           : begin.m_it,","                                    end.m_it );","            std::transform( str.begin(), str.end(), str.begin(), []( char c ) {","                return c == AnsiSkippingString::sentinel ? 'm' : c;","            } );","            return str;","        }","","        void AnsiSkippingString::const_iterator::tryParseAnsiEscapes() {","            // check if we've landed on an ansi sequence, and if so read through","            // it","            while ( m_it != m_string-\u003eend() \u0026\u0026 *m_it == '\\033' \u0026\u0026","                    m_it + 1 != m_string-\u003eend() \u0026\u0026  *( m_it + 1 ) == '[' ) {","                auto cursor = m_it + 2;","                while ( cursor != m_string-\u003eend() \u0026\u0026","                        ( isdigit( *cursor ) || *cursor == ';' ) ) {","                    ++cursor;","                }","                if ( cursor == m_string-\u003eend() ||","                     *cursor != AnsiSkippingString::sentinel ) {","                    break;","                }","                // if we've read an ansi sequence, set the iterator and","                // return to the top of the loop","                m_it = cursor + 1;","            }","        }","","        void AnsiSkippingString::const_iterator::advance() {","            assert( m_it != m_string-\u003eend() );","            m_it++;","            tryParseAnsiEscapes();","        }","","        void AnsiSkippingString::const_iterator::unadvance() {","            assert( m_it != m_string-\u003ebegin() );","            m_it--;","            // if *m_it is 0xff, scan back to the \\033 and then m_it-- once more","            // (and repeat check)","            while ( *m_it == AnsiSkippingString::sentinel ) {","                while ( *m_it != '\\033' ) {","                    assert( m_it != m_string-\u003ebegin() );","                    m_it--;","                }","                // if this happens, we must have been a begin iterator that had","                // skipped over ansi sequences at the start of a string","                assert( m_it != m_string-\u003ebegin() );","                assert( *m_it == '\\033' );","                m_it--;","            }","        }","","        static bool isBoundary( AnsiSkippingString const\u0026 line,","                                AnsiSkippingString::const_iterator it ) {","            return it == line.end() ||","                   ( isWhitespace( *it ) \u0026\u0026","                     !isWhitespace( *it.oneBefore() ) ) ||","                   isBreakableBefore( *it ) ||","                   isBreakableAfter( *it.oneBefore() );","        }","","        void Column::const_iterator::calcLength() {","            m_addHyphen = false;","            m_parsedTo = m_lineStart;","            AnsiSkippingString const\u0026 current_line = m_column.m_string;","","            if ( m_parsedTo == current_line.end() ) {","                m_lineEnd = m_parsedTo;","                return;","            }","","            assert( m_lineStart != current_line.end() );","            if ( *m_lineStart == '\\n' ) { ++m_parsedTo; }","","            const auto maxLineLength = m_column.m_width - indentSize();","            std::size_t lineLength = 0;","            while ( m_parsedTo != current_line.end() \u0026\u0026","                    lineLength \u003c maxLineLength \u0026\u0026 *m_parsedTo != '\\n' ) {","                ++m_parsedTo;","                ++lineLength;","            }","","            // If we encountered a newline before the column is filled,","            // then we linebreak at the newline and consider this line","            // finished.","            if ( lineLength \u003c maxLineLength ) {","                m_lineEnd = m_parsedTo;","            } else {","                // Look for a natural linebreak boundary in the column","                // (We look from the end, so that the first found boundary is","                // the right one)","                m_lineEnd = m_parsedTo;","                while ( lineLength \u003e 0 \u0026\u0026","                        !isBoundary( current_line, m_lineEnd ) ) {","                    --lineLength;","                    --m_lineEnd;","                }","                while ( lineLength \u003e 0 \u0026\u0026","                        isWhitespace( *m_lineEnd.oneBefore() ) ) {","                    --lineLength;","                    --m_lineEnd;","                }","","                // If we found one, then that is where we linebreak, otherwise","                // we have to split text with a hyphen","                if ( lineLength == 0 ) {","                    m_addHyphen = true;","                    m_lineEnd = m_parsedTo.oneBefore();","                }","            }","        }","","        size_t Column::const_iterator::indentSize() const {","            auto initial = m_lineStart == m_column.m_string.begin()","                               ? m_column.m_initialIndent","                               : std::string::npos;","            return initial == std::string::npos ? m_column.m_indent : initial;","        }","","        std::string Column::const_iterator::addIndentAndSuffix(","            AnsiSkippingString::const_iterator start,","            AnsiSkippingString::const_iterator end ) const {","            std::string ret;","            const auto desired_indent = indentSize();","            // ret.reserve( desired_indent + (end - start) + m_addHyphen );","            ret.append( desired_indent, ' ' );","            // ret.append( start, end );","            ret += m_column.m_string.substring( start, end );","            if ( m_addHyphen ) { ret.push_back( '-' ); }","","            return ret;","        }","","        Column::const_iterator::const_iterator( Column const\u0026 column ):","            m_column( column ),","            m_lineStart( column.m_string.begin() ),","            m_lineEnd( column.m_string.begin() ),","            m_parsedTo( column.m_string.begin() ) {","            assert( m_column.m_width \u003e m_column.m_indent );","            assert( m_column.m_initialIndent == std::string::npos ||","                    m_column.m_width \u003e m_column.m_initialIndent );","            calcLength();","            if ( m_lineStart == m_lineEnd ) {","                m_lineStart = m_column.m_string.end();","            }","        }","","        std::string Column::const_iterator::operator*() const {","            assert( m_lineStart \u003c= m_parsedTo );","            return addIndentAndSuffix( m_lineStart, m_lineEnd );","        }","","        Column::const_iterator\u0026 Column::const_iterator::operator++() {","            m_lineStart = m_lineEnd;","            AnsiSkippingString const\u0026 current_line = m_column.m_string;","            if ( m_lineStart != current_line.end() \u0026\u0026 *m_lineStart == '\\n' ) {","                m_lineStart++;","            } else {","                while ( m_lineStart != current_line.end() \u0026\u0026","                        isWhitespace( *m_lineStart ) ) {","                    ++m_lineStart;","                }","            }","","            if ( m_lineStart != current_line.end() ) { calcLength(); }","            return *this;","        }","","        Column::const_iterator Column::const_iterator::operator++( int ) {","            const_iterator prev( *this );","            operator++();","            return prev;","        }","","        std::ostream\u0026 operator\u003c\u003c( std::ostream\u0026 os, Column const\u0026 col ) {","            bool first = true;","            for ( auto line : col ) {","                if ( first ) {","                    first = false;","                } else {","                    os \u003c\u003c '\\n';","                }","                os \u003c\u003c line;","            }","            return os;","        }","","        Column Spacer( size_t spaceWidth ) {","            Column ret{ \"\" };","            ret.width( spaceWidth );","            return ret;","        }","","        Columns::iterator::iterator( Columns const\u0026 columns, EndTag ):","            m_columns( columns.m_columns ), m_activeIterators( 0 ) {","","            m_iterators.reserve( m_columns.size() );","            for ( auto const\u0026 col : m_columns ) {","                m_iterators.push_back( col.end() );","            }","        }","","        Columns::iterator::iterator( Columns const\u0026 columns ):","            m_columns( columns.m_columns ),","            m_activeIterators( m_columns.size() ) {","","            m_iterators.reserve( m_columns.size() );","            for ( auto const\u0026 col : m_columns ) {","                m_iterators.push_back( col.begin() );","            }","        }","","        std::string Columns::iterator::operator*() const {","            std::string row, padding;","","            for ( size_t i = 0; i \u003c m_columns.size(); ++i ) {","                const auto width = m_columns[i].width();","                if ( m_iterators[i] != m_columns[i].end() ) {","                    std::string col = *m_iterators[i];","                    row += padding;","                    row += col;","","                    padding.clear();","                    if ( col.size() \u003c width ) {","                        padding.append( width - col.size(), ' ' );","                    }","                } else {","                    padding.append( width, ' ' );","                }","            }","            return row;","        }","","        Columns::iterator\u0026 Columns::iterator::operator++() {","            for ( size_t i = 0; i \u003c m_columns.size(); ++i ) {","                if ( m_iterators[i] != m_columns[i].end() ) {","                    ++m_iterators[i];","                }","            }","            return *this;","        }","","        Columns::iterator Columns::iterator::operator++( int ) {","            iterator prev( *this );","            operator++();","            return prev;","        }","","        std::ostream\u0026 operator\u003c\u003c( std::ostream\u0026 os, Columns const\u0026 cols ) {","            bool first = true;","            for ( auto line : cols ) {","                if ( first ) {","                    first = false;","                } else {","                    os \u003c\u003c '\\n';","                }","                os \u003c\u003c line;","            }","            return os;","        }","","        Columns operator+( Column const\u0026 lhs, Column const\u0026 rhs ) {","            Columns cols;","            cols += lhs;","            cols += rhs;","            return cols;","        }","        Columns operator+( Column\u0026\u0026 lhs, Column\u0026\u0026 rhs ) {","            Columns cols;","            cols += CATCH_MOVE( lhs );","            cols += CATCH_MOVE( rhs );","            return cols;","        }","","        Columns\u0026 operator+=( Columns\u0026 lhs, Column const\u0026 rhs ) {","            lhs.m_columns.push_back( rhs );","            return lhs;","        }","        Columns\u0026 operator+=( Columns\u0026 lhs, Column\u0026\u0026 rhs ) {","            lhs.m_columns.push_back( CATCH_MOVE( rhs ) );","            return lhs;","        }","        Columns operator+( Columns const\u0026 lhs, Column const\u0026 rhs ) {","            auto combined( lhs );","            combined += rhs;","            return combined;","        }","        Columns operator+( Columns\u0026\u0026 lhs, Column\u0026\u0026 rhs ) {","            lhs += CATCH_MOVE( rhs );","            return CATCH_MOVE( lhs );","        }","","    } // namespace TextFlow","} // namespace Catch","","","","","#include \u003cexception\u003e","","namespace Catch {","    bool uncaught_exceptions() {","#if defined(CATCH_CONFIG_DISABLE_EXCEPTIONS)","        return false;","#elif defined(CATCH_CONFIG_CPP17_UNCAUGHT_EXCEPTIONS)","        return std::uncaught_exceptions() \u003e 0;","#else","        return std::uncaught_exception();","#endif","  }","} // end namespace Catch","","","","namespace Catch {","","    WildcardPattern::WildcardPattern( std::string const\u0026 pattern,","                                      CaseSensitive caseSensitivity )","    :   m_caseSensitivity( caseSensitivity ),","        m_pattern( normaliseString( pattern ) )","    {","        if( startsWith( m_pattern, '*' ) ) {","            m_pattern = m_pattern.substr( 1 );","            m_wildcard = WildcardAtStart;","        }","        if( endsWith( m_pattern, '*' ) ) {","            m_pattern = m_pattern.substr( 0, m_pattern.size()-1 );","            m_wildcard = static_cast\u003cWildcardPosition\u003e( m_wildcard | WildcardAtEnd );","        }","    }","","    bool WildcardPattern::matches( std::string const\u0026 str ) const {","        switch( m_wildcard ) {","            case NoWildcard:","                return m_pattern == normaliseString( str );","            case WildcardAtStart:","                return endsWith( normaliseString( str ), m_pattern );","            case WildcardAtEnd:","                return startsWith( normaliseString( str ), m_pattern );","            case WildcardAtBothEnds:","                return contains( normaliseString( str ), m_pattern );","            default:","                CATCH_INTERNAL_ERROR( \"Unknown enum\" );","        }","    }","","    std::string WildcardPattern::normaliseString( std::string const\u0026 str ) const {","        return trim( m_caseSensitivity == CaseSensitive::No ? toLower( str ) : str );","    }","}","","","// Note: swapping these two includes around causes MSVC to error out","//       while in /permissive- mode. No, I don't know why.","//       Tested on VS 2019, 18.{3, 4}.x","","#include \u003ccstdint\u003e","#include \u003ciomanip\u003e","#include \u003ctype_traits\u003e","","namespace Catch {","","namespace {","","    size_t trailingBytes(unsigned char c) {","        if ((c \u0026 0xE0) == 0xC0) {","            return 2;","        }","        if ((c \u0026 0xF0) == 0xE0) {","            return 3;","        }","        if ((c \u0026 0xF8) == 0xF0) {","            return 4;","        }","        CATCH_INTERNAL_ERROR(\"Invalid multibyte utf-8 start byte encountered\");","    }","","    uint32_t headerValue(unsigned char c) {","        if ((c \u0026 0xE0) == 0xC0) {","            return c \u0026 0x1F;","        }","        if ((c \u0026 0xF0) == 0xE0) {","            return c \u0026 0x0F;","        }","        if ((c \u0026 0xF8) == 0xF0) {","            return c \u0026 0x07;","        }","        CATCH_INTERNAL_ERROR(\"Invalid multibyte utf-8 start byte encountered\");","    }","","    void hexEscapeChar(std::ostream\u0026 os, unsigned char c) {","        std::ios_base::fmtflags f(os.flags());","        os \u003c\u003c \"\\\\x\"","            \u003c\u003c std::uppercase \u003c\u003c std::hex \u003c\u003c std::setfill('0') \u003c\u003c std::setw(2)","            \u003c\u003c static_cast\u003cint\u003e(c);","        os.flags(f);","    }","","    constexpr bool shouldNewline(XmlFormatting fmt) {","        return !!(static_cast\u003cstd::underlying_type_t\u003cXmlFormatting\u003e\u003e(fmt \u0026 XmlFormatting::Newline));","    }","","    constexpr bool shouldIndent(XmlFormatting fmt) {","        return !!(static_cast\u003cstd::underlying_type_t\u003cXmlFormatting\u003e\u003e(fmt \u0026 XmlFormatting::Indent));","    }","","} // anonymous namespace","","    void XmlEncode::encodeTo( std::ostream\u0026 os ) const {","        // Apostrophe escaping not necessary if we always use \" to write attributes","        // (see: http://www.w3.org/TR/xml/#syntax)","","        for( std::size_t idx = 0; idx \u003c m_str.size(); ++ idx ) {","            unsigned char c = static_cast\u003cunsigned char\u003e(m_str[idx]);","            switch (c) {","            case '\u003c':   os \u003c\u003c \"\u0026lt;\"; break;","            case '\u0026':   os \u003c\u003c \"\u0026amp;\"; break;","","            case '\u003e':","                // See: http://www.w3.org/TR/xml/#syntax","                if (idx \u003e 2 \u0026\u0026 m_str[idx - 1] == ']' \u0026\u0026 m_str[idx - 2] == ']')","                    os \u003c\u003c \"\u0026gt;\";","                else","                    os \u003c\u003c c;","                break;","","            case '\\\"':","                if (m_forWhat == ForAttributes)","                    os \u003c\u003c \"\u0026quot;\";","                else","                    os \u003c\u003c c;","                break;","","            default:","                // Check for control characters and invalid utf-8","","                // Escape control characters in standard ascii","                // see http://stackoverflow.com/questions/404107/why-are-control-characters-illegal-in-xml-1-0","                if (c \u003c 0x09 || (c \u003e 0x0D \u0026\u0026 c \u003c 0x20) || c == 0x7F) {","                    hexEscapeChar(os, c);","                    break;","                }","","                // Plain ASCII: Write it to stream","                if (c \u003c 0x7F) {","                    os \u003c\u003c c;","                    break;","                }","","                // UTF-8 territory","                // Check if the encoding is valid and if it is not, hex escape bytes.","                // Important: We do not check the exact decoded values for validity, only the encoding format","                // First check that this bytes is a valid lead byte:","                // This means that it is not encoded as 1111 1XXX","                // Or as 10XX XXXX","                if (c \u003c  0xC0 ||","                    c \u003e= 0xF8) {","                    hexEscapeChar(os, c);","                    break;","                }","","                auto encBytes = trailingBytes(c);","                // Are there enough bytes left to avoid accessing out-of-bounds memory?","                if (idx + encBytes - 1 \u003e= m_str.size()) {","                    hexEscapeChar(os, c);","                    break;","                }","                // The header is valid, check data","                // The next encBytes bytes must together be a valid utf-8","                // This means: bitpattern 10XX XXXX and the extracted value is sane (ish)","                bool valid = true;","                uint32_t value = headerValue(c);","                for (std::size_t n = 1; n \u003c encBytes; ++n) {","                    unsigned char nc = static_cast\u003cunsigned char\u003e(m_str[idx + n]);","                    valid \u0026= ((nc \u0026 0xC0) == 0x80);","                    value = (value \u003c\u003c 6) | (nc \u0026 0x3F);","                }","","                if (","                    // Wrong bit pattern of following bytes","                    (!valid) ||","                    // Overlong encodings","                    (value \u003c 0x80) ||","                    (0x80 \u003c= value \u0026\u0026 value \u003c 0x800   \u0026\u0026 encBytes \u003e 2) ||","                    (0x800 \u003c value \u0026\u0026 value \u003c 0x10000 \u0026\u0026 encBytes \u003e 3) ||","                    // Encoded value out of range","                    (value \u003e= 0x110000)","                    ) {","                    hexEscapeChar(os, c);","                    break;","                }","","                // If we got here, this is in fact a valid(ish) utf-8 sequence","                for (std::size_t n = 0; n \u003c encBytes; ++n) {","                    os \u003c\u003c m_str[idx + n];","                }","                idx += encBytes - 1;","                break;","            }","        }","    }","","    std::ostream\u0026 operator \u003c\u003c ( std::ostream\u0026 os, XmlEncode const\u0026 xmlEncode ) {","        xmlEncode.encodeTo( os );","        return os;","    }","","    XmlWriter::ScopedElement::ScopedElement( XmlWriter* writer, XmlFormatting fmt )","    :   m_writer( writer ),","        m_fmt(fmt)","    {}","","    XmlWriter::ScopedElement::ScopedElement( ScopedElement\u0026\u0026 other ) noexcept","    :   m_writer( other.m_writer ),","        m_fmt(other.m_fmt)","    {","        other.m_writer = nullptr;","        other.m_fmt = XmlFormatting::None;","    }","    XmlWriter::ScopedElement\u0026 XmlWriter::ScopedElement::operator=( ScopedElement\u0026\u0026 other ) noexcept {","        if ( m_writer ) {","            m_writer-\u003eendElement();","        }","        m_writer = other.m_writer;","        other.m_writer = nullptr;","        m_fmt = other.m_fmt;","        other.m_fmt = XmlFormatting::None;","        return *this;","    }","","","    XmlWriter::ScopedElement::~ScopedElement() {","        if (m_writer) {","            m_writer-\u003eendElement(m_fmt);","        }","    }","","    XmlWriter::ScopedElement\u0026","    XmlWriter::ScopedElement::writeText( StringRef text, XmlFormatting fmt ) {","        m_writer-\u003ewriteText( text, fmt );","        return *this;","    }","","    XmlWriter::ScopedElement\u0026","    XmlWriter::ScopedElement::writeAttribute( StringRef name,","                                              StringRef attribute ) {","        m_writer-\u003ewriteAttribute( name, attribute );","        return *this;","    }","","","    XmlWriter::XmlWriter( std::ostream\u0026 os ) : m_os( os )","    {","        writeDeclaration();","    }","","    XmlWriter::~XmlWriter() {","        while (!m_tags.empty()) {","            endElement();","        }","        newlineIfNecessary();","    }","","    XmlWriter\u0026 XmlWriter::startElement( std::string const\u0026 name, XmlFormatting fmt ) {","        ensureTagClosed();","        newlineIfNecessary();","        if (shouldIndent(fmt)) {","            m_os \u003c\u003c m_indent;","            m_indent += \"  \";","        }","        m_os \u003c\u003c '\u003c' \u003c\u003c name;","        m_tags.push_back( name );","        m_tagIsOpen = true;","        applyFormatting(fmt);","        return *this;","    }","","    XmlWriter::ScopedElement XmlWriter::scopedElement( std::string const\u0026 name, XmlFormatting fmt ) {","        ScopedElement scoped( this, fmt );","        startElement( name, fmt );","        return scoped;","    }","","    XmlWriter\u0026 XmlWriter::endElement(XmlFormatting fmt) {","        m_indent = m_indent.substr(0, m_indent.size() - 2);","","        if( m_tagIsOpen ) {","            m_os \u003c\u003c \"/\u003e\";","            m_tagIsOpen = false;","        } else {","            newlineIfNecessary();","            if (shouldIndent(fmt)) {","                m_os \u003c\u003c m_indent;","            }","            m_os \u003c\u003c \"\u003c/\" \u003c\u003c m_tags.back() \u003c\u003c '\u003e';","        }","        m_os \u003c\u003c std::flush;","        applyFormatting(fmt);","        m_tags.pop_back();","        return *this;","    }","","    XmlWriter\u0026 XmlWriter::writeAttribute( StringRef name,","                                          StringRef attribute ) {","        if( !name.empty() \u0026\u0026 !attribute.empty() )","            m_os \u003c\u003c ' ' \u003c\u003c name \u003c\u003c \"=\\\"\" \u003c\u003c XmlEncode( attribute, XmlEncode::ForAttributes ) \u003c\u003c '\"';","        return *this;","    }","","    XmlWriter\u0026 XmlWriter::writeAttribute( StringRef name, bool attribute ) {","        writeAttribute(name, (attribute ? \"true\"_sr : \"false\"_sr));","        return *this;","    }","","    XmlWriter\u0026 XmlWriter::writeAttribute( StringRef name,","                                          char const* attribute ) {","        writeAttribute( name, StringRef( attribute ) );","        return *this;","    }","","    XmlWriter\u0026 XmlWriter::writeText( StringRef text, XmlFormatting fmt ) {","        CATCH_ENFORCE(!m_tags.empty(), \"Cannot write text as top level element\");","        if( !text.empty() ){","            bool tagWasOpen = m_tagIsOpen;","            ensureTagClosed();","            if (tagWasOpen \u0026\u0026 shouldIndent(fmt)) {","                m_os \u003c\u003c m_indent;","            }","            m_os \u003c\u003c XmlEncode( text, XmlEncode::ForTextNodes );","            applyFormatting(fmt);","        }","        return *this;","    }","","    XmlWriter\u0026 XmlWriter::writeComment( StringRef text, XmlFormatting fmt ) {","        ensureTagClosed();","        if (shouldIndent(fmt)) {","            m_os \u003c\u003c m_indent;","        }","        m_os \u003c\u003c \"\u003c!-- \" \u003c\u003c text \u003c\u003c \" --\u003e\";","        applyFormatting(fmt);","        return *this;","    }","","    void XmlWriter::writeStylesheetRef( StringRef url ) {","        m_os \u003c\u003c R\"(\u003c?xml-stylesheet type=\"text/xsl\" href=\")\" \u003c\u003c url \u003c\u003c R\"(\"?\u003e)\" \u003c\u003c '\\n';","    }","","    void XmlWriter::ensureTagClosed() {","        if( m_tagIsOpen ) {","            m_os \u003c\u003c '\u003e' \u003c\u003c std::flush;","            newlineIfNecessary();","            m_tagIsOpen = false;","        }","    }","","    void XmlWriter::applyFormatting(XmlFormatting fmt) {","        m_needsNewline = shouldNewline(fmt);","    }","","    void XmlWriter::writeDeclaration() {","        m_os \u003c\u003c R\"(\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e)\" \u003c\u003c '\\n';","    }","","    void XmlWriter::newlineIfNecessary() {","        if( m_needsNewline ) {","            m_os \u003c\u003c '\\n' \u003c\u003c std::flush;","            m_needsNewline = false;","        }","    }","}","","","","","","namespace Catch {","namespace Matchers {","","    std::string MatcherUntypedBase::toString() const {","        if (m_cachedToString.empty()) {","            m_cachedToString = describe();","        }","        return m_cachedToString;","    }","","    MatcherUntypedBase::~MatcherUntypedBase() = default;","","} // namespace Matchers","} // namespace Catch","","","","","namespace Catch {","namespace Matchers {","","    std::string IsEmptyMatcher::describe() const {","        return \"is empty\";","    }","","    std::string HasSizeMatcher::describe() const {","        ReusableStringStream sstr;","        sstr \u003c\u003c \"has size == \" \u003c\u003c m_target_size;","        return sstr.str();","    }","","    IsEmptyMatcher IsEmpty() {","        return {};","    }","","    HasSizeMatcher SizeIs(std::size_t sz) {","        return HasSizeMatcher{ sz };","    }","","} // end namespace Matchers","} // end namespace Catch","","","","namespace Catch {","namespace Matchers {","","bool ExceptionMessageMatcher::match(std::exception const\u0026 ex) const {","    return ex.what() == m_message;","}","","std::string ExceptionMessageMatcher::describe() const {","    return \"exception message matches \\\"\" + m_message + '\"';","}","","ExceptionMessageMatcher Message(std::string const\u0026 message) {","    return ExceptionMessageMatcher(message);","}","","} // namespace Matchers","} // namespace Catch","","","","#include \u003calgorithm\u003e","#include \u003ccmath\u003e","#include \u003ccstdlib\u003e","#include \u003ccstdint\u003e","#include \u003csstream\u003e","#include \u003ciomanip\u003e","#include \u003climits\u003e","","","namespace Catch {","namespace {","","    template \u003ctypename FP\u003e","    bool almostEqualUlps(FP lhs, FP rhs, uint64_t maxUlpDiff) {","        // Comparison with NaN should always be false.","        // This way we can rule it out before getting into the ugly details","        if (Catch::isnan(lhs) || Catch::isnan(rhs)) {","            return false;","        }","","        // This should also handle positive and negative zeros, infinities","        const auto ulpDist = ulpDistance(lhs, rhs);","","        return ulpDist \u003c= maxUlpDiff;","    }","","","template \u003ctypename FP\u003e","FP step(FP start, FP direction, uint64_t steps) {","    for (uint64_t i = 0; i \u003c steps; ++i) {","        start = Catch::nextafter(start, direction);","    }","    return start;","}","","// Performs equivalent check of std::fabs(lhs - rhs) \u003c= margin","// But without the subtraction to allow for INFINITY in comparison","bool marginComparison(double lhs, double rhs, double margin) {","    return (lhs + margin \u003e= rhs) \u0026\u0026 (rhs + margin \u003e= lhs);","}","","template \u003ctypename FloatingPoint\u003e","void write(std::ostream\u0026 out, FloatingPoint num) {","    out \u003c\u003c std::scientific","        \u003c\u003c std::setprecision(std::numeric_limits\u003cFloatingPoint\u003e::max_digits10 - 1)","        \u003c\u003c num;","}","","} // end anonymous namespace","","namespace Matchers {","namespace Detail {","","    enum class FloatingPointKind : uint8_t {","        Float,","        Double","    };","","} // end namespace Detail","","","    WithinAbsMatcher::WithinAbsMatcher(double target, double margin)","        :m_target{ target }, m_margin{ margin } {","        CATCH_ENFORCE(margin \u003e= 0, \"Invalid margin: \" \u003c\u003c margin \u003c\u003c '.'","            \u003c\u003c \" Margin has to be non-negative.\");","    }","","    // Performs equivalent check of std::fabs(lhs - rhs) \u003c= margin","    // But without the subtraction to allow for INFINITY in comparison","    bool WithinAbsMatcher::match(double const\u0026 matchee) const {","        return (matchee + m_margin \u003e= m_target) \u0026\u0026 (m_target + m_margin \u003e= matchee);","    }","","    std::string WithinAbsMatcher::describe() const {","        return \"is within \" + ::Catch::Detail::stringify(m_margin) + \" of \" + ::Catch::Detail::stringify(m_target);","    }","","","    WithinUlpsMatcher::WithinUlpsMatcher(double target, uint64_t ulps, Detail::FloatingPointKind baseType)","        :m_target{ target }, m_ulps{ ulps }, m_type{ baseType } {","        CATCH_ENFORCE(m_type == Detail::FloatingPointKind::Double","                   || m_ulps \u003c (std::numeric_limits\u003cuint32_t\u003e::max)(),","            \"Provided ULP is impossibly large for a float comparison.\");","        CATCH_ENFORCE( std::numeric_limits\u003cdouble\u003e::is_iec559,","                       \"WithinUlp matcher only supports platforms with \"","                       \"IEEE-754 compatible floating point representation\" );","    }","","#if defined(__clang__)","#pragma clang diagnostic push","// Clang \u003c3.5 reports on the default branch in the switch below","#pragma clang diagnostic ignored \"-Wunreachable-code\"","#endif","","    bool WithinUlpsMatcher::match(double const\u0026 matchee) const {","        switch (m_type) {","        case Detail::FloatingPointKind::Float:","            return almostEqualUlps\u003cfloat\u003e(static_cast\u003cfloat\u003e(matchee), static_cast\u003cfloat\u003e(m_target), m_ulps);","        case Detail::FloatingPointKind::Double:","            return almostEqualUlps\u003cdouble\u003e(matchee, m_target, m_ulps);","        default:","            CATCH_INTERNAL_ERROR( \"Unknown Detail::FloatingPointKind value\" );","        }","    }","","#if defined(__clang__)","#pragma clang diagnostic pop","#endif","","    std::string WithinUlpsMatcher::describe() const {","        std::stringstream ret;","","        ret \u003c\u003c \"is within \" \u003c\u003c m_ulps \u003c\u003c \" ULPs of \";","","        if (m_type == Detail::FloatingPointKind::Float) {","            write(ret, static_cast\u003cfloat\u003e(m_target));","            ret \u003c\u003c 'f';","        } else {","            write(ret, m_target);","        }","","        ret \u003c\u003c \" ([\";","        if (m_type == Detail::FloatingPointKind::Double) {","            write( ret,","                   step( m_target,","                         -std::numeric_limits\u003cdouble\u003e::infinity(),","                         m_ulps ) );","            ret \u003c\u003c \", \";","            write( ret,","                   step( m_target,","                         std::numeric_limits\u003cdouble\u003e::infinity(),","                         m_ulps ) );","        } else {","            // We have to cast INFINITY to float because of MinGW, see #1782","            write( ret,","                   step( static_cast\u003cfloat\u003e( m_target ),","                         -std::numeric_limits\u003cfloat\u003e::infinity(),","                         m_ulps ) );","            ret \u003c\u003c \", \";","            write( ret,","                   step( static_cast\u003cfloat\u003e( m_target ),","                         std::numeric_limits\u003cfloat\u003e::infinity(),","                         m_ulps ) );","        }","        ret \u003c\u003c \"])\";","","        return ret.str();","    }","","    WithinRelMatcher::WithinRelMatcher(double target, double epsilon):","        m_target(target),","        m_epsilon(epsilon){","        CATCH_ENFORCE(m_epsilon \u003e= 0., \"Relative comparison with epsilon \u003c  0 does not make sense.\");","        CATCH_ENFORCE(m_epsilon  \u003c 1., \"Relative comparison with epsilon \u003e= 1 does not make sense.\");","    }","","    bool WithinRelMatcher::match(double const\u0026 matchee) const {","        const auto relMargin = m_epsilon * (std::max)(std::fabs(matchee), std::fabs(m_target));","        return marginComparison(matchee, m_target,","                                std::isinf(relMargin)? 0 : relMargin);","    }","","    std::string WithinRelMatcher::describe() const {","        Catch::ReusableStringStream sstr;","        sstr \u003c\u003c \"and \" \u003c\u003c ::Catch::Detail::stringify(m_target) \u003c\u003c \" are within \" \u003c\u003c m_epsilon * 100. \u003c\u003c \"% of each other\";","        return sstr.str();","    }","","","WithinUlpsMatcher WithinULP(double target, uint64_t maxUlpDiff) {","    return WithinUlpsMatcher(target, maxUlpDiff, Detail::FloatingPointKind::Double);","}","","WithinUlpsMatcher WithinULP(float target, uint64_t maxUlpDiff) {","    return WithinUlpsMatcher(target, maxUlpDiff, Detail::FloatingPointKind::Float);","}","","WithinAbsMatcher WithinAbs(double target, double margin) {","    return WithinAbsMatcher(target, margin);","}","","WithinRelMatcher WithinRel(double target, double eps) {","    return WithinRelMatcher(target, eps);","}","","WithinRelMatcher WithinRel(double target) {","    return WithinRelMatcher(target, std::numeric_limits\u003cdouble\u003e::epsilon() * 100);","}","","WithinRelMatcher WithinRel(float target, float eps) {","    return WithinRelMatcher(target, eps);","}","","WithinRelMatcher WithinRel(float target) {","    return WithinRelMatcher(target, std::numeric_limits\u003cfloat\u003e::epsilon() * 100);","}","","","","bool IsNaNMatcher::match( double const\u0026 matchee ) const {","    return std::isnan( matchee );","}","","std::string IsNaNMatcher::describe() const {","    using namespace std::string_literals;","    return \"is NaN\"s;","}","","IsNaNMatcher IsNaN() { return IsNaNMatcher(); }","","    } // namespace Matchers","} // namespace Catch","","","","","std::string Catch::Matchers::Detail::finalizeDescription(const std::string\u0026 desc) {","    if (desc.empty()) {","        return \"matches undescribed predicate\";","    } else {","        return \"matches predicate: \\\"\" + desc + '\"';","    }","}","","","","namespace Catch {","    namespace Matchers {","        std::string AllTrueMatcher::describe() const { return \"contains only true\"; }","","        AllTrueMatcher AllTrue() { return AllTrueMatcher{}; }","","        std::string NoneTrueMatcher::describe() const { return \"contains no true\"; }","","        NoneTrueMatcher NoneTrue() { return NoneTrueMatcher{}; }","","        std::string AnyTrueMatcher::describe() const { return \"contains at least one true\"; }","","        AnyTrueMatcher AnyTrue() { return AnyTrueMatcher{}; }","    } // namespace Matchers","} // namespace Catch","","","","#include \u003cregex\u003e","","namespace Catch {","namespace Matchers {","","    CasedString::CasedString( std::string const\u0026 str, CaseSensitive caseSensitivity )","    :   m_caseSensitivity( caseSensitivity ),","        m_str( adjustString( str ) )","    {}","    std::string CasedString::adjustString( std::string const\u0026 str ) const {","        return m_caseSensitivity == CaseSensitive::No","               ? toLower( str )","               : str;","    }","    StringRef CasedString::caseSensitivitySuffix() const {","        return m_caseSensitivity == CaseSensitive::Yes","                   ? StringRef()","                   : \" (case insensitive)\"_sr;","    }","","","    StringMatcherBase::StringMatcherBase( StringRef operation, CasedString const\u0026 comparator )","    : m_comparator( comparator ),","      m_operation( operation ) {","    }","","    std::string StringMatcherBase::describe() const {","        std::string description;","        description.reserve(5 + m_operation.size() + m_comparator.m_str.size() +","                                    m_comparator.caseSensitivitySuffix().size());","        description += m_operation;","        description += \": \\\"\";","        description += m_comparator.m_str;","        description += '\"';","        description += m_comparator.caseSensitivitySuffix();","        return description;","    }","","    StringEqualsMatcher::StringEqualsMatcher( CasedString const\u0026 comparator ) : StringMatcherBase( \"equals\"_sr, comparator ) {}","","    bool StringEqualsMatcher::match( std::string const\u0026 source ) const {","        return m_comparator.adjustString( source ) == m_comparator.m_str;","    }","","","    StringContainsMatcher::StringContainsMatcher( CasedString const\u0026 comparator ) : StringMatcherBase( \"contains\"_sr, comparator ) {}","","    bool StringContainsMatcher::match( std::string const\u0026 source ) const {","        return contains( m_comparator.adjustString( source ), m_comparator.m_str );","    }","","","    StartsWithMatcher::StartsWithMatcher( CasedString const\u0026 comparator ) : StringMatcherBase( \"starts with\"_sr, comparator ) {}","","    bool StartsWithMatcher::match( std::string const\u0026 source ) const {","        return startsWith( m_comparator.adjustString( source ), m_comparator.m_str );","    }","","","    EndsWithMatcher::EndsWithMatcher( CasedString const\u0026 comparator ) : StringMatcherBase( \"ends with\"_sr, comparator ) {}","","    bool EndsWithMatcher::match( std::string const\u0026 source ) const {","        return endsWith( m_comparator.adjustString( source ), m_comparator.m_str );","    }","","","","    RegexMatcher::RegexMatcher(std::string regex, CaseSensitive caseSensitivity): m_regex(CATCH_MOVE(regex)), m_caseSensitivity(caseSensitivity) {}","","    bool RegexMatcher::match(std::string const\u0026 matchee) const {","        auto flags = std::regex::ECMAScript; // ECMAScript is the default syntax option anyway","        if (m_caseSensitivity == CaseSensitive::No) {","            flags |= std::regex::icase;","        }","        auto reg = std::regex(m_regex, flags);","        return std::regex_match(matchee, reg);","    }","","    std::string RegexMatcher::describe() const {","        return \"matches \" + ::Catch::Detail::stringify(m_regex) + ((m_caseSensitivity == CaseSensitive::Yes)? \" case sensitively\" : \" case insensitively\");","    }","","","    StringEqualsMatcher Equals( std::string const\u0026 str, CaseSensitive caseSensitivity ) {","        return StringEqualsMatcher( CasedString( str, caseSensitivity) );","    }","    StringContainsMatcher ContainsSubstring( std::string const\u0026 str, CaseSensitive caseSensitivity ) {","        return StringContainsMatcher( CasedString( str, caseSensitivity) );","    }","    EndsWithMatcher EndsWith( std::string const\u0026 str, CaseSensitive caseSensitivity ) {","        return EndsWithMatcher( CasedString( str, caseSensitivity) );","    }","    StartsWithMatcher StartsWith( std::string const\u0026 str, CaseSensitive caseSensitivity ) {","        return StartsWithMatcher( CasedString( str, caseSensitivity) );","    }","","    RegexMatcher Matches(std::string const\u0026 regex, CaseSensitive caseSensitivity) {","        return RegexMatcher(regex, caseSensitivity);","    }","","} // namespace Matchers","} // namespace Catch","","","","namespace Catch {","namespace Matchers {","    MatcherGenericBase::~MatcherGenericBase() = default;","","    namespace Detail {","","        std::string describe_multi_matcher(StringRef combine, std::string const* descriptions_begin, std::string const* descriptions_end) {","            std::string description;","            std::size_t combined_size = 4;","            for ( auto desc = descriptions_begin; desc != descriptions_end; ++desc ) {","                combined_size += desc-\u003esize();","            }","            combined_size += static_cast\u003csize_t\u003e(descriptions_end - descriptions_begin - 1) * combine.size();","","            description.reserve(combined_size);","","            description += \"( \";","            bool first = true;","            for( auto desc = descriptions_begin; desc != descriptions_end; ++desc ) {","                if( first )","                    first = false;","                else","                    description += combine;","                description += *desc;","            }","            description += \" )\";","            return description;","        }","","    } // namespace Detail","} // namespace Matchers","} // namespace Catch","","","","","namespace Catch {","","    // This is the general overload that takes a any string matcher","    // There is another overload, in catch_assertionhandler.h/.cpp, that only takes a string and infers","    // the Equals matcher (so the header does not mention matchers)","    void handleExceptionMatchExpr( AssertionHandler\u0026 handler, StringMatcher const\u0026 matcher ) {","        std::string exceptionMessage = Catch::translateActiveException();","        MatchExpr\u003cstd::string, StringMatcher const\u0026\u003e expr( CATCH_MOVE(exceptionMessage), matcher );","        handler.handleExpr( expr );","    }","","} // namespace Catch","","","","#include \u003costream\u003e","","namespace Catch {","","    AutomakeReporter::~AutomakeReporter() = default;","","    void AutomakeReporter::testCaseEnded(TestCaseStats const\u0026 _testCaseStats) {","        // Possible values to emit are PASS, XFAIL, SKIP, FAIL, XPASS and ERROR.","        m_stream \u003c\u003c \":test-result: \";","        if ( _testCaseStats.totals.testCases.skipped \u003e 0 ) {","            m_stream \u003c\u003c \"SKIP\";","        } else if (_testCaseStats.totals.assertions.allPassed()) {","            m_stream \u003c\u003c \"PASS\";","        } else if (_testCaseStats.totals.assertions.allOk()) {","            m_stream \u003c\u003c \"XFAIL\";","        } else {","            m_stream \u003c\u003c \"FAIL\";","        }","        m_stream \u003c\u003c ' ' \u003c\u003c _testCaseStats.testInfo-\u003ename \u003c\u003c '\\n';","        StreamingReporterBase::testCaseEnded(_testCaseStats);","    }","","    void AutomakeReporter::skipTest(TestCaseInfo const\u0026 testInfo) {","        m_stream \u003c\u003c \":test-result: SKIP \" \u003c\u003c testInfo.name \u003c\u003c '\\n';","    }","","} // end namespace Catch","","","","","","","namespace Catch {","    ReporterBase::ReporterBase( ReporterConfig\u0026\u0026 config ):","        IEventListener( config.fullConfig() ),","        m_wrapped_stream( CATCH_MOVE(config).takeStream() ),","        m_stream( m_wrapped_stream-\u003estream() ),","        m_colour( makeColourImpl( config.colourMode(), m_wrapped_stream.get() ) ),","        m_customOptions( config.customOptions() )","    {}","","    ReporterBase::~ReporterBase() = default;","","    void ReporterBase::listReporters(","        std::vector\u003cReporterDescription\u003e const\u0026 descriptions ) {","        defaultListReporters(m_stream, descriptions, m_config-\u003everbosity());","    }","","    void ReporterBase::listListeners(","        std::vector\u003cListenerDescription\u003e const\u0026 descriptions ) {","        defaultListListeners( m_stream, descriptions );","    }","","    void ReporterBase::listTests(std::vector\u003cTestCaseHandle\u003e const\u0026 tests) {","        defaultListTests(m_stream,","                         m_colour.get(),","                         tests,","                         m_config-\u003ehasTestFilters(),","                         m_config-\u003everbosity());","    }","","    void ReporterBase::listTags(std::vector\u003cTagInfo\u003e const\u0026 tags) {","        defaultListTags( m_stream, tags, m_config-\u003ehasTestFilters() );","    }","","} // namespace Catch","","","","","#include \u003costream\u003e","","namespace Catch {","namespace {","","    // Colour::LightGrey","    static constexpr Colour::Code compactDimColour = Colour::FileName;","","#ifdef CATCH_PLATFORM_MAC","    static constexpr Catch::StringRef compactFailedString = \"FAILED\"_sr;","    static constexpr Catch::StringRef compactPassedString = \"PASSED\"_sr;","#else","    static constexpr Catch::StringRef compactFailedString = \"failed\"_sr;","    static constexpr Catch::StringRef compactPassedString = \"passed\"_sr;","#endif","","// Implementation of CompactReporter formatting","class AssertionPrinter {","public:","    AssertionPrinter\u0026 operator= (AssertionPrinter const\u0026) = delete;","    AssertionPrinter(AssertionPrinter const\u0026) = delete;","    AssertionPrinter(std::ostream\u0026 _stream, AssertionStats const\u0026 _stats, bool _printInfoMessages, ColourImpl* colourImpl_)","        : stream(_stream)","        , result(_stats.assertionResult)","        , messages(_stats.infoMessages)","        , itMessage(_stats.infoMessages.begin())","        , printInfoMessages(_printInfoMessages)","        , colourImpl(colourImpl_)","    {}","","    void print() {","        printSourceInfo();","","        itMessage = messages.begin();","","        switch (result.getResultType()) {","        case ResultWas::Ok:","            printResultType(Colour::ResultSuccess, compactPassedString);","            printOriginalExpression();","            printReconstructedExpression();","            if (!result.hasExpression())","                printRemainingMessages(Colour::None);","            else","                printRemainingMessages();","            break;","        case ResultWas::ExpressionFailed:","            if (result.isOk())","                printResultType(Colour::ResultSuccess, compactFailedString + \" - but was ok\"_sr);","            else","                printResultType(Colour::Error, compactFailedString);","            printOriginalExpression();","            printReconstructedExpression();","            printRemainingMessages();","            break;","        case ResultWas::ThrewException:","            printResultType(Colour::Error, compactFailedString);","            printIssue(\"unexpected exception with message:\");","            printMessage();","            printExpressionWas();","            printRemainingMessages();","            break;","        case ResultWas::FatalErrorCondition:","            printResultType(Colour::Error, compactFailedString);","            printIssue(\"fatal error condition with message:\");","            printMessage();","            printExpressionWas();","            printRemainingMessages();","            break;","        case ResultWas::DidntThrowException:","            printResultType(Colour::Error, compactFailedString);","            printIssue(\"expected exception, got none\");","            printExpressionWas();","            printRemainingMessages();","            break;","        case ResultWas::Info:","            printResultType(Colour::None, \"info\"_sr);","            printMessage();","            printRemainingMessages();","            break;","        case ResultWas::Warning:","            printResultType(Colour::None, \"warning\"_sr);","            printMessage();","            printRemainingMessages();","            break;","        case ResultWas::ExplicitFailure:","            printResultType(Colour::Error, compactFailedString);","            printIssue(\"explicitly\");","            printRemainingMessages(Colour::None);","            break;","        case ResultWas::ExplicitSkip:","            printResultType(Colour::Skip, \"skipped\"_sr);","            printMessage();","            printRemainingMessages();","            break;","            // These cases are here to prevent compiler warnings","        case ResultWas::Unknown:","        case ResultWas::FailureBit:","        case ResultWas::Exception:","            printResultType(Colour::Error, \"** internal error **\");","            break;","        }","    }","","private:","    void printSourceInfo() const {","        stream \u003c\u003c colourImpl-\u003eguardColour( Colour::FileName )","               \u003c\u003c result.getSourceInfo() \u003c\u003c ':';","    }","","    void printResultType(Colour::Code colour, StringRef passOrFail) const {","        if (!passOrFail.empty()) {","            stream \u003c\u003c colourImpl-\u003eguardColour(colour) \u003c\u003c ' ' \u003c\u003c passOrFail;","            stream \u003c\u003c ':';","        }","    }","","    void printIssue(char const* issue) const {","        stream \u003c\u003c ' ' \u003c\u003c issue;","    }","","    void printExpressionWas() {","        if (result.hasExpression()) {","            stream \u003c\u003c ';';","            {","                stream \u003c\u003c colourImpl-\u003eguardColour(compactDimColour) \u003c\u003c \" expression was:\";","            }","            printOriginalExpression();","        }","    }","","    void printOriginalExpression() const {","        if (result.hasExpression()) {","            stream \u003c\u003c ' ' \u003c\u003c result.getExpression();","        }","    }","","    void printReconstructedExpression() const {","        if (result.hasExpandedExpression()) {","            stream \u003c\u003c colourImpl-\u003eguardColour(compactDimColour) \u003c\u003c \" for: \";","            stream \u003c\u003c result.getExpandedExpression();","        }","    }","","    void printMessage() {","        if (itMessage != messages.end()) {","            stream \u003c\u003c \" '\" \u003c\u003c itMessage-\u003emessage \u003c\u003c '\\'';","            ++itMessage;","        }","    }","","    void printRemainingMessages(Colour::Code colour = compactDimColour) {","        if (itMessage == messages.end())","            return;","","        const auto itEnd = messages.cend();","        const auto N = static_cast\u003cstd::size_t\u003e(itEnd - itMessage);","","        stream \u003c\u003c colourImpl-\u003eguardColour( colour ) \u003c\u003c \" with \"","               \u003c\u003c pluralise( N, \"message\"_sr ) \u003c\u003c ':';","","        while (itMessage != itEnd) {","            // If this assertion is a warning ignore any INFO messages","            if (printInfoMessages || itMessage-\u003etype != ResultWas::Info) {","                printMessage();","                if (itMessage != itEnd) {","                    stream \u003c\u003c colourImpl-\u003eguardColour(compactDimColour) \u003c\u003c \" and\";","                }","                continue;","            }","            ++itMessage;","        }","    }","","private:","    std::ostream\u0026 stream;","    AssertionResult const\u0026 result;","    std::vector\u003cMessageInfo\u003e const\u0026 messages;","    std::vector\u003cMessageInfo\u003e::const_iterator itMessage;","    bool printInfoMessages;","    ColourImpl* colourImpl;","};","","} // anon namespace","","        std::string CompactReporter::getDescription() {","            return \"Reports test results on a single line, suitable for IDEs\";","        }","","        void CompactReporter::noMatchingTestCases( StringRef unmatchedSpec ) {","            m_stream \u003c\u003c \"No test cases matched '\" \u003c\u003c unmatchedSpec \u003c\u003c \"'\\n\";","        }","","        void CompactReporter::testRunStarting( TestRunInfo const\u0026 ) {","            if ( m_config-\u003etestSpec().hasFilters() ) {","                m_stream \u003c\u003c m_colour-\u003eguardColour( Colour::BrightYellow )","                         \u003c\u003c \"Filters: \"","                         \u003c\u003c m_config-\u003etestSpec()","                         \u003c\u003c '\\n';","            }","            m_stream \u003c\u003c \"RNG seed: \" \u003c\u003c getSeed() \u003c\u003c '\\n';","        }","","        void CompactReporter::assertionEnded( AssertionStats const\u0026 _assertionStats ) {","            AssertionResult const\u0026 result = _assertionStats.assertionResult;","","            bool printInfoMessages = true;","","            // Drop out if result was successful and we're not printing those","            if( !m_config-\u003eincludeSuccessfulResults() \u0026\u0026 result.isOk() ) {","                if( result.getResultType() != ResultWas::Warning \u0026\u0026 result.getResultType() != ResultWas::ExplicitSkip )","                    return;","                printInfoMessages = false;","            }","","            AssertionPrinter printer( m_stream, _assertionStats, printInfoMessages, m_colour.get() );","            printer.print();","","            m_stream \u003c\u003c '\\n' \u003c\u003c std::flush;","        }","","        void CompactReporter::sectionEnded(SectionStats const\u0026 _sectionStats) {","            double dur = _sectionStats.durationInSeconds;","            if ( shouldShowDuration( *m_config, dur ) ) {","                m_stream \u003c\u003c getFormattedDuration( dur ) \u003c\u003c \" s: \" \u003c\u003c _sectionStats.sectionInfo.name \u003c\u003c '\\n' \u003c\u003c std::flush;","            }","        }","","        void CompactReporter::testRunEnded( TestRunStats const\u0026 _testRunStats ) {","            printTestRunTotals( m_stream, *m_colour, _testRunStats.totals );","            m_stream \u003c\u003c \"\\n\\n\" \u003c\u003c std::flush;","            StreamingReporterBase::testRunEnded( _testRunStats );","        }","","        CompactReporter::~CompactReporter() = default;","","} // end namespace Catch","","","","","#include \u003ccstdio\u003e","","#if defined(_MSC_VER)","#pragma warning(push)","#pragma warning(disable:4061) // Not all labels are EXPLICITLY handled in switch"," // Note that 4062 (not all labels are handled and default is missing) is enabled","#endif","","#if defined(__clang__)","#  pragma clang diagnostic push","// For simplicity, benchmarking-only helpers are always enabled","#  pragma clang diagnostic ignored \"-Wunused-function\"","#endif","","","","namespace Catch {","","namespace {","","// Formatter impl for ConsoleReporter","class ConsoleAssertionPrinter {","public:","    ConsoleAssertionPrinter\u0026 operator= (ConsoleAssertionPrinter const\u0026) = delete;","    ConsoleAssertionPrinter(ConsoleAssertionPrinter const\u0026) = delete;","    ConsoleAssertionPrinter(std::ostream\u0026 _stream, AssertionStats const\u0026 _stats, ColourImpl* colourImpl_, bool _printInfoMessages)","        : stream(_stream),","        stats(_stats),","        result(_stats.assertionResult),","        colour(Colour::None),","        messages(_stats.infoMessages),","        colourImpl(colourImpl_),","        printInfoMessages(_printInfoMessages) {","        switch (result.getResultType()) {","        case ResultWas::Ok:","            colour = Colour::Success;","            passOrFail = \"PASSED\"_sr;","            //if( result.hasMessage() )","            if (messages.size() == 1)","                messageLabel = \"with message\"_sr;","            if (messages.size() \u003e 1)","                messageLabel = \"with messages\"_sr;","            break;","        case ResultWas::ExpressionFailed:","            if (result.isOk()) {","                colour = Colour::Success;","                passOrFail = \"FAILED - but was ok\"_sr;","            } else {","                colour = Colour::Error;","                passOrFail = \"FAILED\"_sr;","            }","            if (messages.size() == 1)","                messageLabel = \"with message\"_sr;","            if (messages.size() \u003e 1)","                messageLabel = \"with messages\"_sr;","            break;","        case ResultWas::ThrewException:","            colour = Colour::Error;","            passOrFail = \"FAILED\"_sr;","            // todo switch","            switch (messages.size()) { case 0:","                messageLabel = \"due to unexpected exception with \"_sr;","                break;","            case 1:","                messageLabel = \"due to unexpected exception with message\"_sr;","                break;","            default:","                messageLabel = \"due to unexpected exception with messages\"_sr;","                break;","            }","            break;","        case ResultWas::FatalErrorCondition:","            colour = Colour::Error;","            passOrFail = \"FAILED\"_sr;","            messageLabel = \"due to a fatal error condition\"_sr;","            break;","        case ResultWas::DidntThrowException:","            colour = Colour::Error;","            passOrFail = \"FAILED\"_sr;","            messageLabel = \"because no exception was thrown where one was expected\"_sr;","            break;","        case ResultWas::Info:","            messageLabel = \"info\"_sr;","            break;","        case ResultWas::Warning:","            messageLabel = \"warning\"_sr;","            break;","        case ResultWas::ExplicitFailure:","            passOrFail = \"FAILED\"_sr;","            colour = Colour::Error;","            if (messages.size() == 1)","                messageLabel = \"explicitly with message\"_sr;","            if (messages.size() \u003e 1)","                messageLabel = \"explicitly with messages\"_sr;","            break;","        case ResultWas::ExplicitSkip:","            colour = Colour::Skip;","            passOrFail = \"SKIPPED\"_sr;","            if (messages.size() == 1)","                messageLabel = \"explicitly with message\"_sr;","            if (messages.size() \u003e 1)","                messageLabel = \"explicitly with messages\"_sr;","            break;","            // These cases are here to prevent compiler warnings","        case ResultWas::Unknown:","        case ResultWas::FailureBit:","        case ResultWas::Exception:","            passOrFail = \"** internal error **\"_sr;","            colour = Colour::Error;","            break;","        }","    }","","    void print() const {","        printSourceInfo();","        if (stats.totals.assertions.total() \u003e 0) {","            printResultType();","            printOriginalExpression();","            printReconstructedExpression();","        } else {","            stream \u003c\u003c '\\n';","        }","        printMessage();","    }","","private:","    void printResultType() const {","        if (!passOrFail.empty()) {","            stream \u003c\u003c colourImpl-\u003eguardColour(colour) \u003c\u003c passOrFail \u003c\u003c \":\\n\";","        }","    }","    void printOriginalExpression() const {","        if (result.hasExpression()) {","            stream \u003c\u003c colourImpl-\u003eguardColour( Colour::OriginalExpression )","                   \u003c\u003c \"  \" \u003c\u003c result.getExpressionInMacro() \u003c\u003c '\\n';","        }","    }","    void printReconstructedExpression() const {","        if (result.hasExpandedExpression()) {","            stream \u003c\u003c \"with expansion:\\n\";","            stream \u003c\u003c colourImpl-\u003eguardColour( Colour::ReconstructedExpression )","                   \u003c\u003c TextFlow::Column( result.getExpandedExpression() )","                          .indent( 2 )","                   \u003c\u003c '\\n';","        }","    }","    void printMessage() const {","        if (!messageLabel.empty())","            stream \u003c\u003c messageLabel \u003c\u003c ':' \u003c\u003c '\\n';","        for (auto const\u0026 msg : messages) {","            // If this assertion is a warning ignore any INFO messages","            if (printInfoMessages || msg.type != ResultWas::Info)","                stream \u003c\u003c TextFlow::Column(msg.message).indent(2) \u003c\u003c '\\n';","        }","    }","    void printSourceInfo() const {","        stream \u003c\u003c colourImpl-\u003eguardColour( Colour::FileName )","               \u003c\u003c result.getSourceInfo() \u003c\u003c \": \";","    }","","    std::ostream\u0026 stream;","    AssertionStats const\u0026 stats;","    AssertionResult const\u0026 result;","    Colour::Code colour;","    StringRef passOrFail;","    StringRef messageLabel;","    std::vector\u003cMessageInfo\u003e const\u0026 messages;","    ColourImpl* colourImpl;","    bool printInfoMessages;","};","","std::size_t makeRatio( std::uint64_t number, std::uint64_t total ) {","    const auto ratio = total \u003e 0 ? CATCH_CONFIG_CONSOLE_WIDTH * number / total : 0;","    return (ratio == 0 \u0026\u0026 number \u003e 0) ? 1 : static_cast\u003cstd::size_t\u003e(ratio);","}","","std::size_t\u0026","findMax( std::size_t\u0026 i, std::size_t\u0026 j, std::size_t\u0026 k, std::size_t\u0026 l ) {","    if (i \u003e j \u0026\u0026 i \u003e k \u0026\u0026 i \u003e l)","        return i;","    else if (j \u003e k \u0026\u0026 j \u003e l)","        return j;","    else if (k \u003e l)","        return k;","    else","        return l;","}","","struct ColumnBreak {};","struct RowBreak {};","struct OutputFlush {};","","class Duration {","    enum class Unit : uint8_t {","        Auto,","        Nanoseconds,","        Microseconds,","        Milliseconds,","        Seconds,","        Minutes","    };","    static const uint64_t s_nanosecondsInAMicrosecond = 1000;","    static const uint64_t s_nanosecondsInAMillisecond = 1000 * s_nanosecondsInAMicrosecond;","    static const uint64_t s_nanosecondsInASecond = 1000 * s_nanosecondsInAMillisecond;","    static const uint64_t s_nanosecondsInAMinute = 60 * s_nanosecondsInASecond;","","    double m_inNanoseconds;","    Unit m_units;","","public:","    explicit Duration(double inNanoseconds, Unit units = Unit::Auto)","        : m_inNanoseconds(inNanoseconds),","        m_units(units) {","        if (m_units == Unit::Auto) {","            if (m_inNanoseconds \u003c s_nanosecondsInAMicrosecond)","                m_units = Unit::Nanoseconds;","            else if (m_inNanoseconds \u003c s_nanosecondsInAMillisecond)","                m_units = Unit::Microseconds;","            else if (m_inNanoseconds \u003c s_nanosecondsInASecond)","                m_units = Unit::Milliseconds;","            else if (m_inNanoseconds \u003c s_nanosecondsInAMinute)","                m_units = Unit::Seconds;","            else","                m_units = Unit::Minutes;","        }","","    }","","    auto value() const -\u003e double {","        switch (m_units) {","        case Unit::Microseconds:","            return m_inNanoseconds / static_cast\u003cdouble\u003e(s_nanosecondsInAMicrosecond);","        case Unit::Milliseconds:","            return m_inNanoseconds / static_cast\u003cdouble\u003e(s_nanosecondsInAMillisecond);","        case Unit::Seconds:","            return m_inNanoseconds / static_cast\u003cdouble\u003e(s_nanosecondsInASecond);","        case Unit::Minutes:","            return m_inNanoseconds / static_cast\u003cdouble\u003e(s_nanosecondsInAMinute);","        default:","            return m_inNanoseconds;","        }","    }","    StringRef unitsAsString() const {","        switch (m_units) {","        case Unit::Nanoseconds:","            return \"ns\"_sr;","        case Unit::Microseconds:","            return \"us\"_sr;","        case Unit::Milliseconds:","            return \"ms\"_sr;","        case Unit::Seconds:","            return \"s\"_sr;","        case Unit::Minutes:","            return \"m\"_sr;","        default:","            return \"** internal error **\"_sr;","        }","","    }","    friend auto operator \u003c\u003c (std::ostream\u0026 os, Duration const\u0026 duration) -\u003e std::ostream\u0026 {","        return os \u003c\u003c duration.value() \u003c\u003c ' ' \u003c\u003c duration.unitsAsString();","    }","};","} // end anon namespace","","enum class Justification : uint8_t {","    Left,","    Right","};","","struct ColumnInfo {","    std::string name;","    std::size_t width;","    Justification justification;","};","","class TablePrinter {","    std::ostream\u0026 m_os;","    std::vector\u003cColumnInfo\u003e m_columnInfos;","    ReusableStringStream m_oss;","    int m_currentColumn = -1;","    bool m_isOpen = false;","","public:","    TablePrinter( std::ostream\u0026 os, std::vector\u003cColumnInfo\u003e columnInfos )","    :   m_os( os ),","        m_columnInfos( CATCH_MOVE( columnInfos ) ) {}","","    auto columnInfos() const -\u003e std::vector\u003cColumnInfo\u003e const\u0026 {","        return m_columnInfos;","    }","","    void open() {","        if (!m_isOpen) {","            m_isOpen = true;","            *this \u003c\u003c RowBreak();","","\t\t\tTextFlow::Columns headerCols;","\t\t\tfor (auto const\u0026 info : m_columnInfos) {","                assert(info.width \u003e 2);","\t\t\t\theaderCols += TextFlow::Column(info.name).width(info.width - 2);","                headerCols += TextFlow::Spacer( 2 );","\t\t\t}","\t\t\tm_os \u003c\u003c headerCols \u003c\u003c '\\n';","","            m_os \u003c\u003c lineOfChars('-') \u003c\u003c '\\n';","        }","    }","    void close() {","        if (m_isOpen) {","            *this \u003c\u003c RowBreak();","            m_os \u003c\u003c '\\n' \u003c\u003c std::flush;","            m_isOpen = false;","        }","    }","","    template\u003ctypename T\u003e","    friend TablePrinter\u0026 operator\u003c\u003c (TablePrinter\u0026 tp, T const\u0026 value) {","        tp.m_oss \u003c\u003c value;","        return tp;","    }","","    friend TablePrinter\u0026 operator\u003c\u003c (TablePrinter\u0026 tp, ColumnBreak) {","        auto colStr = tp.m_oss.str();","        const auto strSize = colStr.size();","        tp.m_oss.str(\"\");","        tp.open();","        if (tp.m_currentColumn == static_cast\u003cint\u003e(tp.m_columnInfos.size() - 1)) {","            tp.m_currentColumn = -1;","            tp.m_os \u003c\u003c '\\n';","        }","        tp.m_currentColumn++;","","        auto colInfo = tp.m_columnInfos[tp.m_currentColumn];","        auto padding = (strSize + 1 \u003c colInfo.width)","            ? std::string(colInfo.width - (strSize + 1), ' ')","            : std::string();","        if (colInfo.justification == Justification::Left)","            tp.m_os \u003c\u003c colStr \u003c\u003c padding \u003c\u003c ' ';","        else","            tp.m_os \u003c\u003c padding \u003c\u003c colStr \u003c\u003c ' ';","        return tp;","    }","","    friend TablePrinter\u0026 operator\u003c\u003c (TablePrinter\u0026 tp, RowBreak) {","        if (tp.m_currentColumn \u003e 0) {","            tp.m_os \u003c\u003c '\\n';","            tp.m_currentColumn = -1;","        }","        return tp;","    }","","    friend TablePrinter\u0026 operator\u003c\u003c(TablePrinter\u0026 tp, OutputFlush) {","        tp.m_os \u003c\u003c std::flush;","        return tp;","    }","};","","ConsoleReporter::ConsoleReporter(ReporterConfig\u0026\u0026 config):","    StreamingReporterBase( CATCH_MOVE( config ) ),","    m_tablePrinter(Detail::make_unique\u003cTablePrinter\u003e(m_stream,","        [\u0026config]() -\u003e std::vector\u003cColumnInfo\u003e {","        if (config.fullConfig()-\u003ebenchmarkNoAnalysis())","        {","            return{","                { \"benchmark name\", CATCH_CONFIG_CONSOLE_WIDTH - 43, Justification::Left },","                { \"     samples\", 14, Justification::Right },","                { \"  iterations\", 14, Justification::Right },","                { \"        mean\", 14, Justification::Right }","            };","        }","        else","        {","            return{","                { \"benchmark name\", CATCH_CONFIG_CONSOLE_WIDTH - 43, Justification::Left },","                { \"samples      mean       std dev\", 14, Justification::Right },","                { \"iterations   low mean   low std dev\", 14, Justification::Right },","                { \"est run time high mean  high std dev\", 14, Justification::Right }","            };","        }","    }())) {}","ConsoleReporter::~ConsoleReporter() = default;","","std::string ConsoleReporter::getDescription() {","    return \"Reports test results as plain lines of text\";","}","","void ConsoleReporter::noMatchingTestCases( StringRef unmatchedSpec ) {","    m_stream \u003c\u003c \"No test cases matched '\" \u003c\u003c unmatchedSpec \u003c\u003c \"'\\n\";","}","","void ConsoleReporter::reportInvalidTestSpec( StringRef arg ) {","    m_stream \u003c\u003c \"Invalid Filter: \" \u003c\u003c arg \u003c\u003c '\\n';","}","","void ConsoleReporter::assertionStarting(AssertionInfo const\u0026) {}","","void ConsoleReporter::assertionEnded(AssertionStats const\u0026 _assertionStats) {","    AssertionResult const\u0026 result = _assertionStats.assertionResult;","","    bool includeResults = m_config-\u003eincludeSuccessfulResults() || !result.isOk();","","    // Drop out if result was successful but we're not printing them.","    // TODO: Make configurable whether skips should be printed","    if (!includeResults \u0026\u0026 result.getResultType() != ResultWas::Warning \u0026\u0026 result.getResultType() != ResultWas::ExplicitSkip)","        return;","","    lazyPrint();","","    ConsoleAssertionPrinter printer(m_stream, _assertionStats, m_colour.get(), includeResults);","    printer.print();","    m_stream \u003c\u003c '\\n' \u003c\u003c std::flush;","}","","void ConsoleReporter::sectionStarting(SectionInfo const\u0026 _sectionInfo) {","    m_tablePrinter-\u003eclose();","    m_headerPrinted = false;","    StreamingReporterBase::sectionStarting(_sectionInfo);","}","void ConsoleReporter::sectionEnded(SectionStats const\u0026 _sectionStats) {","    m_tablePrinter-\u003eclose();","    if (_sectionStats.missingAssertions) {","        lazyPrint();","        auto guard =","            m_colour-\u003eguardColour( Colour::ResultError ).engage( m_stream );","        if (m_sectionStack.size() \u003e 1)","            m_stream \u003c\u003c \"\\nNo assertions in section\";","        else","            m_stream \u003c\u003c \"\\nNo assertions in test case\";","        m_stream \u003c\u003c \" '\" \u003c\u003c _sectionStats.sectionInfo.name \u003c\u003c \"'\\n\\n\" \u003c\u003c std::flush;","    }","    double dur = _sectionStats.durationInSeconds;","    if (shouldShowDuration(*m_config, dur)) {","        m_stream \u003c\u003c getFormattedDuration(dur) \u003c\u003c \" s: \" \u003c\u003c _sectionStats.sectionInfo.name \u003c\u003c '\\n' \u003c\u003c std::flush;","    }","    if (m_headerPrinted) {","        m_headerPrinted = false;","    }","    StreamingReporterBase::sectionEnded(_sectionStats);","}","","void ConsoleReporter::benchmarkPreparing( StringRef name ) {","\tlazyPrintWithoutClosingBenchmarkTable();","","\tauto nameCol = TextFlow::Column( static_cast\u003cstd::string\u003e( name ) )","                       .width( m_tablePrinter-\u003ecolumnInfos()[0].width - 2 );","","\tbool firstLine = true;","\tfor (auto line : nameCol) {","\t\tif (!firstLine)","\t\t\t(*m_tablePrinter) \u003c\u003c ColumnBreak() \u003c\u003c ColumnBreak() \u003c\u003c ColumnBreak();","\t\telse","\t\t\tfirstLine = false;","","\t\t(*m_tablePrinter) \u003c\u003c line \u003c\u003c ColumnBreak();","\t}","}","","void ConsoleReporter::benchmarkStarting(BenchmarkInfo const\u0026 info) {","    (*m_tablePrinter) \u003c\u003c info.samples \u003c\u003c ColumnBreak()","        \u003c\u003c info.iterations \u003c\u003c ColumnBreak();","    if ( !m_config-\u003ebenchmarkNoAnalysis() ) {","        ( *m_tablePrinter )","            \u003c\u003c Duration( info.estimatedDuration ) \u003c\u003c ColumnBreak();","    }","    ( *m_tablePrinter ) \u003c\u003c OutputFlush{};","}","void ConsoleReporter::benchmarkEnded(BenchmarkStats\u003c\u003e const\u0026 stats) {","    if (m_config-\u003ebenchmarkNoAnalysis())","    {","        (*m_tablePrinter) \u003c\u003c Duration(stats.mean.point.count()) \u003c\u003c ColumnBreak();","    }","    else","    {","        (*m_tablePrinter) \u003c\u003c ColumnBreak()","            \u003c\u003c Duration(stats.mean.point.count()) \u003c\u003c ColumnBreak()","            \u003c\u003c Duration(stats.mean.lower_bound.count()) \u003c\u003c ColumnBreak()","            \u003c\u003c Duration(stats.mean.upper_bound.count()) \u003c\u003c ColumnBreak() \u003c\u003c ColumnBreak()","            \u003c\u003c Duration(stats.standardDeviation.point.count()) \u003c\u003c ColumnBreak()","            \u003c\u003c Duration(stats.standardDeviation.lower_bound.count()) \u003c\u003c ColumnBreak()","            \u003c\u003c Duration(stats.standardDeviation.upper_bound.count()) \u003c\u003c ColumnBreak() \u003c\u003c ColumnBreak() \u003c\u003c ColumnBreak() \u003c\u003c ColumnBreak() \u003c\u003c ColumnBreak();","    }","}","","void ConsoleReporter::benchmarkFailed( StringRef error ) {","    auto guard = m_colour-\u003eguardColour( Colour::Red ).engage( m_stream );","    (*m_tablePrinter)","        \u003c\u003c \"Benchmark failed (\" \u003c\u003c error \u003c\u003c ')'","        \u003c\u003c ColumnBreak() \u003c\u003c RowBreak();","}","","void ConsoleReporter::testCaseEnded(TestCaseStats const\u0026 _testCaseStats) {","    m_tablePrinter-\u003eclose();","    StreamingReporterBase::testCaseEnded(_testCaseStats);","    m_headerPrinted = false;","}","void ConsoleReporter::testRunEnded(TestRunStats const\u0026 _testRunStats) {","    printTotalsDivider(_testRunStats.totals);","    printTestRunTotals( m_stream, *m_colour, _testRunStats.totals );","    m_stream \u003c\u003c '\\n' \u003c\u003c std::flush;","    StreamingReporterBase::testRunEnded(_testRunStats);","}","void ConsoleReporter::testRunStarting(TestRunInfo const\u0026 _testRunInfo) {","    StreamingReporterBase::testRunStarting(_testRunInfo);","    if ( m_config-\u003etestSpec().hasFilters() ) {","        m_stream \u003c\u003c m_colour-\u003eguardColour( Colour::BrightYellow ) \u003c\u003c \"Filters: \"","                 \u003c\u003c m_config-\u003etestSpec() \u003c\u003c '\\n';","    }","    m_stream \u003c\u003c \"Randomness seeded to: \" \u003c\u003c getSeed() \u003c\u003c '\\n';","}","","void ConsoleReporter::lazyPrint() {","","    m_tablePrinter-\u003eclose();","    lazyPrintWithoutClosingBenchmarkTable();","}","","void ConsoleReporter::lazyPrintWithoutClosingBenchmarkTable() {","","    if ( !m_testRunInfoPrinted ) {","        lazyPrintRunInfo();","    }","    if (!m_headerPrinted) {","        printTestCaseAndSectionHeader();","        m_headerPrinted = true;","    }","}","void ConsoleReporter::lazyPrintRunInfo() {","    m_stream \u003c\u003c '\\n'","             \u003c\u003c lineOfChars( '~' ) \u003c\u003c '\\n'","             \u003c\u003c m_colour-\u003eguardColour( Colour::SecondaryText )","             \u003c\u003c currentTestRunInfo.name \u003c\u003c \" is a Catch2 v\" \u003c\u003c libraryVersion()","             \u003c\u003c \" host application.\\n\"","             \u003c\u003c \"Run with -? for options\\n\\n\";","","    m_testRunInfoPrinted = true;","}","void ConsoleReporter::printTestCaseAndSectionHeader() {","    assert(!m_sectionStack.empty());","    printOpenHeader(currentTestCaseInfo-\u003ename);","","    if (m_sectionStack.size() \u003e 1) {","        auto guard = m_colour-\u003eguardColour( Colour::Headers ).engage( m_stream );","","        auto","            it = m_sectionStack.begin() + 1, // Skip first section (test case)","            itEnd = m_sectionStack.end();","        for (; it != itEnd; ++it)","            printHeaderString(it-\u003ename, 2);","    }","","    SourceLineInfo lineInfo = m_sectionStack.back().lineInfo;","","","    m_stream \u003c\u003c lineOfChars( '-' ) \u003c\u003c '\\n'","             \u003c\u003c m_colour-\u003eguardColour( Colour::FileName ) \u003c\u003c lineInfo \u003c\u003c '\\n'","             \u003c\u003c lineOfChars( '.' ) \u003c\u003c \"\\n\\n\"","             \u003c\u003c std::flush;","}","","void ConsoleReporter::printClosedHeader(std::string const\u0026 _name) {","    printOpenHeader(_name);","    m_stream \u003c\u003c lineOfChars('.') \u003c\u003c '\\n';","}","void ConsoleReporter::printOpenHeader(std::string const\u0026 _name) {","    m_stream \u003c\u003c lineOfChars('-') \u003c\u003c '\\n';","    {","        auto guard = m_colour-\u003eguardColour( Colour::Headers ).engage( m_stream );","        printHeaderString(_name);","    }","}","","void ConsoleReporter::printHeaderString(std::string const\u0026 _string, std::size_t indent) {","    // We want to get a bit fancy with line breaking here, so that subsequent","    // lines start after \":\" if one is present, e.g.","    // ```","    // blablabla: Fancy","    //            linebreaking","    // ```","    // but we also want to avoid problems with overly long indentation causing","    // the text to take up too many lines, e.g.","    // ```","    // blablabla: F","    //            a","    //            n","    //            c","    //            y","    //            .","    //            .","    //            .","    // ```","    // So we limit the prefix indentation check to first quarter of the possible","    // width","    std::size_t idx = _string.find( \": \" );","    if ( idx != std::string::npos \u0026\u0026 idx \u003c CATCH_CONFIG_CONSOLE_WIDTH / 4 ) {","        idx += 2;","    } else {","        idx = 0;","    }","    m_stream \u003c\u003c TextFlow::Column( _string )","                  .indent( indent + idx )","                  .initialIndent( indent )","           \u003c\u003c '\\n';","}","","void ConsoleReporter::printTotalsDivider(Totals const\u0026 totals) {","    if (totals.testCases.total() \u003e 0) {","        std::size_t failedRatio = makeRatio(totals.testCases.failed, totals.testCases.total());","        std::size_t failedButOkRatio = makeRatio(totals.testCases.failedButOk, totals.testCases.total());","        std::size_t passedRatio = makeRatio(totals.testCases.passed, totals.testCases.total());","        std::size_t skippedRatio = makeRatio(totals.testCases.skipped, totals.testCases.total());","        while (failedRatio + failedButOkRatio + passedRatio + skippedRatio \u003c CATCH_CONFIG_CONSOLE_WIDTH - 1)","            findMax(failedRatio, failedButOkRatio, passedRatio, skippedRatio)++;","        while (failedRatio + failedButOkRatio + passedRatio \u003e CATCH_CONFIG_CONSOLE_WIDTH - 1)","            findMax(failedRatio, failedButOkRatio, passedRatio, skippedRatio)--;","","        m_stream \u003c\u003c m_colour-\u003eguardColour( Colour::Error )","                 \u003c\u003c std::string( failedRatio, '=' )","                 \u003c\u003c m_colour-\u003eguardColour( Colour::ResultExpectedFailure )","                 \u003c\u003c std::string( failedButOkRatio, '=' );","        if ( totals.testCases.allPassed() ) {","            m_stream \u003c\u003c m_colour-\u003eguardColour( Colour::ResultSuccess )","                     \u003c\u003c std::string( passedRatio, '=' );","        } else {","            m_stream \u003c\u003c m_colour-\u003eguardColour( Colour::Success )","                     \u003c\u003c std::string( passedRatio, '=' );","        }","        m_stream \u003c\u003c m_colour-\u003eguardColour( Colour::Skip )","                 \u003c\u003c std::string( skippedRatio, '=' );","    } else {","        m_stream \u003c\u003c m_colour-\u003eguardColour( Colour::Warning )","                 \u003c\u003c std::string( CATCH_CONFIG_CONSOLE_WIDTH - 1, '=' );","    }","    m_stream \u003c\u003c '\\n';","}","","} // end namespace Catch","","#if defined(_MSC_VER)","#pragma warning(pop)","#endif","","#if defined(__clang__)","#  pragma clang diagnostic pop","#endif","","","","","#include \u003calgorithm\u003e","#include \u003ccassert\u003e","","namespace Catch {","    namespace {","        struct BySectionInfo {","            BySectionInfo( SectionInfo const\u0026 other ): m_other( other ) {}","            BySectionInfo( BySectionInfo const\u0026 other ) = default;","            bool operator()(","                Detail::unique_ptr\u003cCumulativeReporterBase::SectionNode\u003e const\u0026","                    node ) const {","                return (","                    ( node-\u003estats.sectionInfo.name == m_other.name ) \u0026\u0026","                    ( node-\u003estats.sectionInfo.lineInfo == m_other.lineInfo ) );","            }","            void operator=( BySectionInfo const\u0026 ) = delete;","","        private:","            SectionInfo const\u0026 m_other;","        };","","    } // namespace","","    namespace Detail {","        AssertionOrBenchmarkResult::AssertionOrBenchmarkResult(","            AssertionStats const\u0026 assertion ):","            m_assertion( assertion ) {}","","        AssertionOrBenchmarkResult::AssertionOrBenchmarkResult(","            BenchmarkStats\u003c\u003e const\u0026 benchmark ):","            m_benchmark( benchmark ) {}","","        bool AssertionOrBenchmarkResult::isAssertion() const {","            return m_assertion.some();","        }","        bool AssertionOrBenchmarkResult::isBenchmark() const {","            return m_benchmark.some();","        }","","        AssertionStats const\u0026 AssertionOrBenchmarkResult::asAssertion() const {","            assert(m_assertion.some());","","            return *m_assertion;","        }","        BenchmarkStats\u003c\u003e const\u0026 AssertionOrBenchmarkResult::asBenchmark() const {","            assert(m_benchmark.some());","","            return *m_benchmark;","        }","","    }","","    CumulativeReporterBase::~CumulativeReporterBase() = default;","","    void CumulativeReporterBase::benchmarkEnded(BenchmarkStats\u003c\u003e const\u0026 benchmarkStats) {","        m_sectionStack.back()-\u003eassertionsAndBenchmarks.emplace_back(benchmarkStats);","    }","","    void","    CumulativeReporterBase::sectionStarting( SectionInfo const\u0026 sectionInfo ) {","        // We need a copy, because SectionStats expect to take ownership","        SectionStats incompleteStats( SectionInfo(sectionInfo), Counts(), 0, false );","        SectionNode* node;","        if ( m_sectionStack.empty() ) {","            if ( !m_rootSection ) {","                m_rootSection =","                    Detail::make_unique\u003cSectionNode\u003e( incompleteStats );","            }","            node = m_rootSection.get();","        } else {","            SectionNode\u0026 parentNode = *m_sectionStack.back();","            auto it = std::find_if( parentNode.childSections.begin(),","                                    parentNode.childSections.end(),","                                    BySectionInfo( sectionInfo ) );","            if ( it == parentNode.childSections.end() ) {","                auto newNode =","                    Detail::make_unique\u003cSectionNode\u003e( incompleteStats );","                node = newNode.get();","                parentNode.childSections.push_back( CATCH_MOVE( newNode ) );","            } else {","                node = it-\u003eget();","            }","        }","","        m_deepestSection = node;","        m_sectionStack.push_back( node );","    }","","    void CumulativeReporterBase::assertionEnded(","        AssertionStats const\u0026 assertionStats ) {","        assert( !m_sectionStack.empty() );","        // AssertionResult holds a pointer to a temporary DecomposedExpression,","        // which getExpandedExpression() calls to build the expression string.","        // Our section stack copy of the assertionResult will likely outlive the","        // temporary, so it must be expanded or discarded now to avoid calling","        // a destroyed object later.","        if ( m_shouldStoreFailedAssertions \u0026\u0026","             !assertionStats.assertionResult.isOk() ) {","            static_cast\u003cvoid\u003e(","                assertionStats.assertionResult.getExpandedExpression() );","        }","        if ( m_shouldStoreSuccesfulAssertions \u0026\u0026","             assertionStats.assertionResult.isOk() ) {","            static_cast\u003cvoid\u003e(","                assertionStats.assertionResult.getExpandedExpression() );","        }","        SectionNode\u0026 sectionNode = *m_sectionStack.back();","        sectionNode.assertionsAndBenchmarks.emplace_back( assertionStats );","    }","","    void CumulativeReporterBase::sectionEnded( SectionStats const\u0026 sectionStats ) {","        assert( !m_sectionStack.empty() );","        SectionNode\u0026 node = *m_sectionStack.back();","        node.stats = sectionStats;","        m_sectionStack.pop_back();","    }","","    void CumulativeReporterBase::testCaseEnded(","        TestCaseStats const\u0026 testCaseStats ) {","        auto node = Detail::make_unique\u003cTestCaseNode\u003e( testCaseStats );","        assert( m_sectionStack.size() == 0 );","        node-\u003echildren.push_back( CATCH_MOVE(m_rootSection) );","        m_testCases.push_back( CATCH_MOVE(node) );","","        assert( m_deepestSection );","        m_deepestSection-\u003estdOut = testCaseStats.stdOut;","        m_deepestSection-\u003estdErr = testCaseStats.stdErr;","    }","","","    void CumulativeReporterBase::testRunEnded( TestRunStats const\u0026 testRunStats ) {","        assert(!m_testRun \u0026\u0026 \"CumulativeReporterBase assumes there can only be one test run\");","        m_testRun = Detail::make_unique\u003cTestRunNode\u003e( testRunStats );","        m_testRun-\u003echildren.swap( m_testCases );","        testRunEndedCumulative();","    }","","    bool CumulativeReporterBase::SectionNode::hasAnyAssertions() const {","        return std::any_of(","            assertionsAndBenchmarks.begin(),","            assertionsAndBenchmarks.end(),","            []( Detail::AssertionOrBenchmarkResult const\u0026 res ) {","                return res.isAssertion();","            } );","    }","","} // end namespace Catch","","","","","namespace Catch {","","    void EventListenerBase::fatalErrorEncountered( StringRef ) {}","","    void EventListenerBase::benchmarkPreparing( StringRef ) {}","    void EventListenerBase::benchmarkStarting( BenchmarkInfo const\u0026 ) {}","    void EventListenerBase::benchmarkEnded( BenchmarkStats\u003c\u003e const\u0026 ) {}","    void EventListenerBase::benchmarkFailed( StringRef ) {}","","    void EventListenerBase::assertionStarting( AssertionInfo const\u0026 ) {}","","    void EventListenerBase::assertionEnded( AssertionStats const\u0026 ) {}","    void EventListenerBase::listReporters(","        std::vector\u003cReporterDescription\u003e const\u0026 ) {}","    void EventListenerBase::listListeners(","        std::vector\u003cListenerDescription\u003e const\u0026 ) {}","    void EventListenerBase::listTests( std::vector\u003cTestCaseHandle\u003e const\u0026 ) {}","    void EventListenerBase::listTags( std::vector\u003cTagInfo\u003e const\u0026 ) {}","    void EventListenerBase::noMatchingTestCases( StringRef ) {}","    void EventListenerBase::reportInvalidTestSpec( StringRef ) {}","    void EventListenerBase::testRunStarting( TestRunInfo const\u0026 ) {}","    void EventListenerBase::testCaseStarting( TestCaseInfo const\u0026 ) {}","    void EventListenerBase::testCasePartialStarting(TestCaseInfo const\u0026, uint64_t) {}","    void EventListenerBase::sectionStarting( SectionInfo const\u0026 ) {}","    void EventListenerBase::sectionEnded( SectionStats const\u0026 ) {}","    void EventListenerBase::testCasePartialEnded(TestCaseStats const\u0026, uint64_t) {}","    void EventListenerBase::testCaseEnded( TestCaseStats const\u0026 ) {}","    void EventListenerBase::testRunEnded( TestRunStats const\u0026 ) {}","    void EventListenerBase::skipTest( TestCaseInfo const\u0026 ) {}","} // namespace Catch","","","","","#include \u003calgorithm\u003e","#include \u003ccfloat\u003e","#include \u003ccstdio\u003e","#include \u003costream\u003e","#include \u003ciomanip\u003e","","namespace Catch {","","    namespace {","        void listTestNamesOnly(std::ostream\u0026 out,","                               std::vector\u003cTestCaseHandle\u003e const\u0026 tests) {","            for (auto const\u0026 test : tests) {","                auto const\u0026 testCaseInfo = test.getTestCaseInfo();","","                if (startsWith(testCaseInfo.name, '#')) {","                    out \u003c\u003c '\"' \u003c\u003c testCaseInfo.name \u003c\u003c '\"';","                } else {","                    out \u003c\u003c testCaseInfo.name;","                }","","                out \u003c\u003c '\\n';","            }","            out \u003c\u003c std::flush;","        }","    } // end unnamed namespace","","","    // Because formatting using c++ streams is stateful, drop down to C is","    // required Alternatively we could use stringstream, but its performance","    // is... not good.","    std::string getFormattedDuration( double duration ) {","        // Max exponent + 1 is required to represent the whole part","        // + 1 for decimal point","        // + 3 for the 3 decimal places","        // + 1 for null terminator","        const std::size_t maxDoubleSize = DBL_MAX_10_EXP + 1 + 1 + 3 + 1;","        char buffer[maxDoubleSize];","","        // Save previous errno, to prevent sprintf from overwriting it","        ErrnoGuard guard;","#ifdef _MSC_VER","        size_t printedLength = static_cast\u003csize_t\u003e(","            sprintf_s( buffer, \"%.3f\", duration ) );","#else","        size_t printedLength = static_cast\u003csize_t\u003e(","            std::snprintf( buffer, maxDoubleSize, \"%.3f\", duration ) );","#endif","        return std::string( buffer, printedLength );","    }","","    bool shouldShowDuration( IConfig const\u0026 config, double duration ) {","        if ( config.showDurations() == ShowDurations::Always ) {","            return true;","        }","        if ( config.showDurations() == ShowDurations::Never ) {","            return false;","        }","        const double min = config.minDuration();","        return min \u003e= 0 \u0026\u0026 duration \u003e= min;","    }","","    std::string serializeFilters( std::vector\u003cstd::string\u003e const\u0026 filters ) {","        // We add a ' ' separator between each filter","        size_t serialized_size = filters.size() - 1;","        for (auto const\u0026 filter : filters) {","            serialized_size += filter.size();","        }","","        std::string serialized;","        serialized.reserve(serialized_size);","        bool first = true;","","        for (auto const\u0026 filter : filters) {","            if (!first) {","                serialized.push_back(' ');","            }","            first = false;","            serialized.append(filter);","        }","","        return serialized;","    }","","    std::ostream\u0026 operator\u003c\u003c( std::ostream\u0026 out, lineOfChars value ) {","        for ( size_t idx = 0; idx \u003c CATCH_CONFIG_CONSOLE_WIDTH - 1; ++idx ) {","            out.put( value.c );","        }","        return out;","    }","","    void","    defaultListReporters( std::ostream\u0026 out,","                          std::vector\u003cReporterDescription\u003e const\u0026 descriptions,","                          Verbosity verbosity ) {","        out \u003c\u003c \"Available reporters:\\n\";","        const auto maxNameLen =","            std::max_element( descriptions.begin(),","                              descriptions.end(),","                              []( ReporterDescription const\u0026 lhs,","                                  ReporterDescription const\u0026 rhs ) {","                                  return lhs.name.size() \u003c rhs.name.size();","                              } )","                -\u003ename.size();","","        for ( auto const\u0026 desc : descriptions ) {","            if ( verbosity == Verbosity::Quiet ) {","                out \u003c\u003c TextFlow::Column( desc.name )","                           .indent( 2 )","                           .width( 5 + maxNameLen )","                    \u003c\u003c '\\n';","            } else {","                out \u003c\u003c TextFlow::Column( desc.name + ':' )","                               .indent( 2 )","                               .width( 5 + maxNameLen ) +","                           TextFlow::Column( desc.description )","                               .initialIndent( 0 )","                               .indent( 2 )","                               .width( CATCH_CONFIG_CONSOLE_WIDTH - maxNameLen - 8 )","                    \u003c\u003c '\\n';","            }","        }","        out \u003c\u003c '\\n' \u003c\u003c std::flush;","    }","","    void defaultListListeners( std::ostream\u0026 out,","                               std::vector\u003cListenerDescription\u003e const\u0026 descriptions ) {","        out \u003c\u003c \"Registered listeners:\\n\";","","        if(descriptions.empty()) {","            return;","        }","","        const auto maxNameLen =","            std::max_element( descriptions.begin(),","                              descriptions.end(),","                              []( ListenerDescription const\u0026 lhs,","                                  ListenerDescription const\u0026 rhs ) {","                                  return lhs.name.size() \u003c rhs.name.size();","                              } )","                -\u003ename.size();","","        for ( auto const\u0026 desc : descriptions ) {","            out \u003c\u003c TextFlow::Column( static_cast\u003cstd::string\u003e( desc.name ) +","                                     ':' )","                           .indent( 2 )","                           .width( maxNameLen + 5 ) +","                       TextFlow::Column( desc.description )","                           .initialIndent( 0 )","                           .indent( 2 )","                           .width( CATCH_CONFIG_CONSOLE_WIDTH - maxNameLen - 8 )","                \u003c\u003c '\\n';","        }","","        out \u003c\u003c '\\n' \u003c\u003c std::flush;","    }","","    void defaultListTags( std::ostream\u0026 out,","                          std::vector\u003cTagInfo\u003e const\u0026 tags,","                          bool isFiltered ) {","        if ( isFiltered ) {","            out \u003c\u003c \"Tags for matching test cases:\\n\";","        } else {","            out \u003c\u003c \"All available tags:\\n\";","        }","","        for ( auto const\u0026 tagCount : tags ) {","            ReusableStringStream rss;","            rss \u003c\u003c \"  \" \u003c\u003c std::setw( 2 ) \u003c\u003c tagCount.count \u003c\u003c \"  \";","            auto str = rss.str();","            auto wrapper = TextFlow::Column( tagCount.all() )","                               .initialIndent( 0 )","                               .indent( str.size() )","                               .width( CATCH_CONFIG_CONSOLE_WIDTH - 10 );","            out \u003c\u003c str \u003c\u003c wrapper \u003c\u003c '\\n';","        }","        out \u003c\u003c pluralise(tags.size(), \"tag\"_sr) \u003c\u003c \"\\n\\n\" \u003c\u003c std::flush;","    }","","    void defaultListTests(std::ostream\u0026 out, ColourImpl* streamColour, std::vector\u003cTestCaseHandle\u003e const\u0026 tests, bool isFiltered, Verbosity verbosity) {","        // We special case this to provide the equivalent of old","        // `--list-test-names-only`, which could then be used by the","        // `--input-file` option.","        if (verbosity == Verbosity::Quiet) {","            listTestNamesOnly(out, tests);","            return;","        }","","        if (isFiltered) {","            out \u003c\u003c \"Matching test cases:\\n\";","        } else {","            out \u003c\u003c \"All available test cases:\\n\";","        }","","        for (auto const\u0026 test : tests) {","            auto const\u0026 testCaseInfo = test.getTestCaseInfo();","            Colour::Code colour = testCaseInfo.isHidden()","                ? Colour::SecondaryText","                : Colour::None;","            auto colourGuard = streamColour-\u003eguardColour( colour ).engage( out );","","            out \u003c\u003c TextFlow::Column(testCaseInfo.name).indent(2) \u003c\u003c '\\n';","            if (verbosity \u003e= Verbosity::High) {","                out \u003c\u003c TextFlow::Column(Catch::Detail::stringify(testCaseInfo.lineInfo)).indent(4) \u003c\u003c '\\n';","            }","            if (!testCaseInfo.tags.empty() \u0026\u0026","                verbosity \u003e Verbosity::Quiet) {","                out \u003c\u003c TextFlow::Column(testCaseInfo.tagsAsString()).indent(6) \u003c\u003c '\\n';","            }","        }","","        if (isFiltered) {","            out \u003c\u003c pluralise(tests.size(), \"matching test case\"_sr);","        } else {","            out \u003c\u003c pluralise(tests.size(), \"test case\"_sr);","        }","        out \u003c\u003c \"\\n\\n\" \u003c\u003c std::flush;","    }","","    namespace {","        class SummaryColumn {","        public:","            SummaryColumn( std::string suffix, Colour::Code colour ):","                m_suffix( CATCH_MOVE( suffix ) ), m_colour( colour ) {}","","            SummaryColumn\u0026\u0026 addRow( std::uint64_t count ) \u0026\u0026 {","                std::string row = std::to_string(count);","                auto const new_width = std::max( m_width, row.size() );","                if ( new_width \u003e m_width ) {","                    for ( auto\u0026 oldRow : m_rows ) {","                        oldRow.insert( 0, new_width - m_width, ' ' );","                    }","                } else {","                    row.insert( 0, m_width - row.size(), ' ' );","                }","                m_width = new_width;","                m_rows.push_back( row );","                return std::move( *this );","            }","","            std::string const\u0026 getSuffix() const { return m_suffix; }","            Colour::Code getColour() const { return m_colour; }","            std::string const\u0026 getRow( std::size_t index ) const {","                return m_rows[index];","            }","","        private:","            std::string m_suffix;","            Colour::Code m_colour;","            std::size_t m_width = 0;","            std::vector\u003cstd::string\u003e m_rows;","        };","","        void printSummaryRow( std::ostream\u0026 stream,","                              ColourImpl\u0026 colour,","                              StringRef label,","                              std::vector\u003cSummaryColumn\u003e const\u0026 cols,","                              std::size_t row ) {","            for ( auto const\u0026 col : cols ) {","                auto const\u0026 value = col.getRow( row );","                auto const\u0026 suffix = col.getSuffix();","                if ( suffix.empty() ) {","                    stream \u003c\u003c label \u003c\u003c \": \";","                    if ( value != \"0\" ) {","                        stream \u003c\u003c value;","                    } else {","                        stream \u003c\u003c colour.guardColour( Colour::Warning )","                               \u003c\u003c \"- none -\";","                    }","                } else if ( value != \"0\" ) {","                    stream \u003c\u003c colour.guardColour( Colour::LightGrey ) \u003c\u003c \" | \"","                           \u003c\u003c colour.guardColour( col.getColour() ) \u003c\u003c value","                           \u003c\u003c ' ' \u003c\u003c suffix;","                }","            }","            stream \u003c\u003c '\\n';","        }","    } // namespace","","    void printTestRunTotals( std::ostream\u0026 stream,","                             ColourImpl\u0026 streamColour,","                             Totals const\u0026 totals ) {","        if ( totals.testCases.total() == 0 ) {","            stream \u003c\u003c streamColour.guardColour( Colour::Warning )","                   \u003c\u003c \"No tests ran\\n\";","            return;","        }","","        if ( totals.assertions.total() \u003e 0 \u0026\u0026 totals.testCases.allPassed() ) {","            stream \u003c\u003c streamColour.guardColour( Colour::ResultSuccess )","                   \u003c\u003c \"All tests passed\";","            stream \u003c\u003c \" (\"","                   \u003c\u003c pluralise( totals.assertions.passed, \"assertion\"_sr )","                   \u003c\u003c \" in \"","                   \u003c\u003c pluralise( totals.testCases.passed, \"test case\"_sr )","                   \u003c\u003c ')' \u003c\u003c '\\n';","            return;","        }","","        std::vector\u003cSummaryColumn\u003e columns;","        // Don't include \"skipped assertions\" in total count","        const auto totalAssertionCount =","            totals.assertions.total() - totals.assertions.skipped;","        columns.push_back( SummaryColumn( \"\", Colour::None )","                               .addRow( totals.testCases.total() )","                               .addRow( totalAssertionCount ) );","        columns.push_back( SummaryColumn( \"passed\", Colour::Success )","                               .addRow( totals.testCases.passed )","                               .addRow( totals.assertions.passed ) );","        columns.push_back( SummaryColumn( \"failed\", Colour::ResultError )","                               .addRow( totals.testCases.failed )","                               .addRow( totals.assertions.failed ) );","        columns.push_back( SummaryColumn( \"skipped\", Colour::Skip )","                               .addRow( totals.testCases.skipped )","                               // Don't print \"skipped assertions\"","                               .addRow( 0 ) );","        columns.push_back(","            SummaryColumn( \"failed as expected\", Colour::ResultExpectedFailure )","                .addRow( totals.testCases.failedButOk )","                .addRow( totals.assertions.failedButOk ) );","        printSummaryRow( stream, streamColour, \"test cases\"_sr, columns, 0 );","        printSummaryRow( stream, streamColour, \"assertions\"_sr, columns, 1 );","    }","","} // namespace Catch","","","//","","namespace Catch {","    namespace {","        void writeSourceInfo( JsonObjectWriter\u0026 writer,","                              SourceLineInfo const\u0026 sourceInfo ) {","            auto source_location_writer =","                writer.write( \"source-location\"_sr ).writeObject();","            source_location_writer.write( \"filename\"_sr )","                .write( sourceInfo.file );","            source_location_writer.write( \"line\"_sr ).write( sourceInfo.line );","        }","","        void writeTags( JsonArrayWriter writer, std::vector\u003cTag\u003e const\u0026 tags ) {","            for ( auto const\u0026 tag : tags ) {","                writer.write( tag.original );","            }","        }","","        void writeProperties( JsonArrayWriter writer,","                              TestCaseInfo const\u0026 info ) {","            if ( info.isHidden() ) { writer.write( \"is-hidden\"_sr ); }","            if ( info.okToFail() ) { writer.write( \"ok-to-fail\"_sr ); }","            if ( info.expectedToFail() ) {","                writer.write( \"expected-to-fail\"_sr );","            }","            if ( info.throws() ) { writer.write( \"throws\"_sr ); }","        }","","    } // namespace","","    JsonReporter::JsonReporter( ReporterConfig\u0026\u0026 config ):","        StreamingReporterBase{ CATCH_MOVE( config ) } {","","        m_preferences.shouldRedirectStdOut = true;","        // TBD: Do we want to report all assertions? XML reporter does","        //      not, but for machine-parseable reporters I think the answer","        //      should be yes.","        m_preferences.shouldReportAllAssertions = true;","","        m_objectWriters.emplace( m_stream );","        m_writers.emplace( Writer::Object );","        auto\u0026 writer = m_objectWriters.top();","","        writer.write( \"version\"_sr ).write( 1 );","","        {","            auto metadata_writer = writer.write( \"metadata\"_sr ).writeObject();","            metadata_writer.write( \"name\"_sr ).write( m_config-\u003ename() );","            metadata_writer.write( \"rng-seed\"_sr ).write( m_config-\u003erngSeed() );","            metadata_writer.write( \"catch2-version\"_sr )","                .write( libraryVersion() );","            if ( m_config-\u003etestSpec().hasFilters() ) {","                metadata_writer.write( \"filters\"_sr )","                    .write( m_config-\u003etestSpec() );","            }","        }","    }","","    JsonReporter::~JsonReporter() {","        endListing();","        // TODO: Ensure this closes the top level object, add asserts","        assert( m_writers.size() == 1 \u0026\u0026 \"Only the top level object should be open\" );","        assert( m_writers.top() == Writer::Object );","        endObject();","        m_stream \u003c\u003c '\\n' \u003c\u003c std::flush;","        assert( m_writers.empty() );","    }","","    JsonArrayWriter\u0026 JsonReporter::startArray() {","        m_arrayWriters.emplace( m_arrayWriters.top().writeArray() );","        m_writers.emplace( Writer::Array );","        return m_arrayWriters.top();","    }","    JsonArrayWriter\u0026 JsonReporter::startArray( StringRef key ) {","        m_arrayWriters.emplace(","            m_objectWriters.top().write( key ).writeArray() );","        m_writers.emplace( Writer::Array );","        return m_arrayWriters.top();","    }","","    JsonObjectWriter\u0026 JsonReporter::startObject() {","        m_objectWriters.emplace( m_arrayWriters.top().writeObject() );","        m_writers.emplace( Writer::Object );","        return m_objectWriters.top();","    }","    JsonObjectWriter\u0026 JsonReporter::startObject( StringRef key ) {","        m_objectWriters.emplace(","            m_objectWriters.top().write( key ).writeObject() );","        m_writers.emplace( Writer::Object );","        return m_objectWriters.top();","    }","","    void JsonReporter::endObject() {","        assert( isInside( Writer::Object ) );","        m_objectWriters.pop();","        m_writers.pop();","    }","    void JsonReporter::endArray() {","        assert( isInside( Writer::Array ) );","        m_arrayWriters.pop();","        m_writers.pop();","    }","","    bool JsonReporter::isInside( Writer writer ) {","        return !m_writers.empty() \u0026\u0026 m_writers.top() == writer;","    }","","    void JsonReporter::startListing() {","        if ( !m_startedListing ) { startObject( \"listings\"_sr ); }","        m_startedListing = true;","    }","    void JsonReporter::endListing() {","        if ( m_startedListing ) { endObject(); }","        m_startedListing = false;","    }","","    std::string JsonReporter::getDescription() {","        return \"Outputs listings as JSON. Test listing is Work-in-Progress!\";","    }","","    void JsonReporter::testRunStarting( TestRunInfo const\u0026 runInfo ) {","        StreamingReporterBase::testRunStarting( runInfo );","        endListing();","","        assert( isInside( Writer::Object ) );","        startObject( \"test-run\"_sr );","        startArray( \"test-cases\"_sr );","    }","","     static void writeCounts( JsonObjectWriter\u0026\u0026 writer, Counts const\u0026 counts ) {","        writer.write( \"passed\"_sr ).write( counts.passed );","        writer.write( \"failed\"_sr ).write( counts.failed );","        writer.write( \"fail-but-ok\"_sr ).write( counts.failedButOk );","        writer.write( \"skipped\"_sr ).write( counts.skipped );","    }","","    void JsonReporter::testRunEnded(TestRunStats const\u0026 runStats) {","        assert( isInside( Writer::Array ) );","        // End \"test-cases\"","        endArray();","","        {","            auto totals =","                m_objectWriters.top().write( \"totals\"_sr ).writeObject();","            writeCounts( totals.write( \"assertions\"_sr ).writeObject(),","                         runStats.totals.assertions );","            writeCounts( totals.write( \"test-cases\"_sr ).writeObject(),","                         runStats.totals.testCases );","        }","","        // End the \"test-run\" object","        endObject();","    }","","    void JsonReporter::testCaseStarting( TestCaseInfo const\u0026 tcInfo ) {","        StreamingReporterBase::testCaseStarting( tcInfo );","","        assert( isInside( Writer::Array ) \u0026\u0026","                \"We should be in the 'test-cases' array\" );","        startObject();","        // \"test-info\" prelude","        {","            auto testInfo =","                m_objectWriters.top().write( \"test-info\"_sr ).writeObject();","            // TODO: handle testName vs className!!","            testInfo.write( \"name\"_sr ).write( tcInfo.name );","            writeSourceInfo(testInfo, tcInfo.lineInfo);","            writeTags( testInfo.write( \"tags\"_sr ).writeArray(), tcInfo.tags );","            writeProperties( testInfo.write( \"properties\"_sr ).writeArray(),","                             tcInfo );","        }","","","        // Start the array for individual test runs (testCasePartial pairs)","        startArray( \"runs\"_sr );","    }","","    void JsonReporter::testCaseEnded( TestCaseStats const\u0026 tcStats ) {","        StreamingReporterBase::testCaseEnded( tcStats );","","        // We need to close the 'runs' array before finishing the test case","        assert( isInside( Writer::Array ) );","        endArray();","","        {","            auto totals =","                m_objectWriters.top().write( \"totals\"_sr ).writeObject();","            writeCounts( totals.write( \"assertions\"_sr ).writeObject(),","                         tcStats.totals.assertions );","            // We do not write the test case totals, because there will always be just one test case here.","            // TODO: overall \"result\" -\u003e success, skip, fail here? Or in partial result?","        }","        // We do not write out stderr/stdout, because we instead wrote those out in partial runs","","        // TODO: aborting?","","        // And we also close this test case's object","        assert( isInside( Writer::Object ) );","        endObject();","    }","","    void JsonReporter::testCasePartialStarting( TestCaseInfo const\u0026 /*tcInfo*/,","                                                uint64_t index ) {","        startObject();","        m_objectWriters.top().write( \"run-idx\"_sr ).write( index );","        startArray( \"path\"_sr );","        // TODO: we want to delay most of the printing to the 'root' section","        // TODO: childSection key name?","    }","","    void JsonReporter::testCasePartialEnded( TestCaseStats const\u0026 tcStats,","                                             uint64_t /*index*/ ) {","        // Fixme: the top level section handles this.","        //// path object","        endArray();","        if ( !tcStats.stdOut.empty() ) {","            m_objectWriters.top()","                .write( \"captured-stdout\"_sr )","                .write( tcStats.stdOut );","        }","        if ( !tcStats.stdErr.empty() ) {","            m_objectWriters.top()","                .write( \"captured-stderr\"_sr )","                .write( tcStats.stdErr );","        }","        {","            auto totals =","                m_objectWriters.top().write( \"totals\"_sr ).writeObject();","            writeCounts( totals.write( \"assertions\"_sr ).writeObject(),","                         tcStats.totals.assertions );","            // We do not write the test case totals, because there will","            // always be just one test case here.","            // TODO: overall \"result\" -\u003e success, skip, fail here? Or in","            // partial result?","        }","        // TODO: aborting?","        // run object","        endObject();","    }","","    void JsonReporter::sectionStarting( SectionInfo const\u0026 sectionInfo ) {","        assert( isInside( Writer::Array ) \u0026\u0026","                \"Section should always start inside an object\" );","        // We want to nest top level sections, even though it shares name","        // and source loc with the TEST_CASE","        auto\u0026 sectionObject = startObject();","        sectionObject.write( \"kind\"_sr ).write( \"section\"_sr );","        sectionObject.write( \"name\"_sr ).write( sectionInfo.name );","        writeSourceInfo( m_objectWriters.top(), sectionInfo.lineInfo );","","","        // TBD: Do we want to create this event lazily? It would become","        //      rather complex, but we could do it, and it would look","        //      better for empty sections. OTOH, empty sections should","        //      be rare.","        startArray( \"path\"_sr );","    }","    void JsonReporter::sectionEnded( SectionStats const\u0026 /*sectionStats */) {","        // End the subpath array","        endArray();","        // TODO: metadata","        // TODO: what info do we have here?","","        // End the section object","        endObject();","    }","","    void JsonReporter::assertionStarting( AssertionInfo const\u0026 /*assertionInfo*/ ) {}","    void JsonReporter::assertionEnded( AssertionStats const\u0026 assertionStats ) {","        // TODO: There is lot of different things to handle here, but","        //       we can fill it in later, after we show that the basic","        //       outline and streaming reporter impl works well enough.","        //if ( !m_config-\u003eincludeSuccessfulResults()","        //    \u0026\u0026 assertionStats.assertionResult.isOk() ) {","        //    return;","        //}","        assert( isInside( Writer::Array ) );","        auto assertionObject = m_arrayWriters.top().writeObject();","","        assertionObject.write( \"kind\"_sr ).write( \"assertion\"_sr );","        writeSourceInfo( assertionObject,","                         assertionStats.assertionResult.getSourceInfo() );","        assertionObject.write( \"status\"_sr )","            .write( assertionStats.assertionResult.isOk() );","        // TODO: handling of result.","        // TODO: messages","        // TODO: totals?","    }","","","    void JsonReporter::benchmarkPreparing( StringRef name ) { (void)name; }","    void JsonReporter::benchmarkStarting( BenchmarkInfo const\u0026 ) {}","    void JsonReporter::benchmarkEnded( BenchmarkStats\u003c\u003e const\u0026 ) {}","    void JsonReporter::benchmarkFailed( StringRef error ) { (void)error; }","","    void JsonReporter::listReporters(","        std::vector\u003cReporterDescription\u003e const\u0026 descriptions ) {","        startListing();","","        auto writer =","            m_objectWriters.top().write( \"reporters\"_sr ).writeArray();","        for ( auto const\u0026 desc : descriptions ) {","            auto desc_writer = writer.writeObject();","            desc_writer.write( \"name\"_sr ).write( desc.name );","            desc_writer.write( \"description\"_sr ).write( desc.description );","        }","    }","    void JsonReporter::listListeners(","        std::vector\u003cListenerDescription\u003e const\u0026 descriptions ) {","        startListing();","","        auto writer =","            m_objectWriters.top().write( \"listeners\"_sr ).writeArray();","","        for ( auto const\u0026 desc : descriptions ) {","            auto desc_writer = writer.writeObject();","            desc_writer.write( \"name\"_sr ).write( desc.name );","            desc_writer.write( \"description\"_sr ).write( desc.description );","        }","    }","    void JsonReporter::listTests( std::vector\u003cTestCaseHandle\u003e const\u0026 tests ) {","        startListing();","","        auto writer = m_objectWriters.top().write( \"tests\"_sr ).writeArray();","","        for ( auto const\u0026 test : tests ) {","            auto desc_writer = writer.writeObject();","            auto const\u0026 info = test.getTestCaseInfo();","","            desc_writer.write( \"name\"_sr ).write( info.name );","            desc_writer.write( \"class-name\"_sr ).write( info.className );","            {","                auto tag_writer = desc_writer.write( \"tags\"_sr ).writeArray();","                for ( auto const\u0026 tag : info.tags ) {","                    tag_writer.write( tag.original );","                }","            }","            writeSourceInfo( desc_writer, info.lineInfo );","        }","    }","    void JsonReporter::listTags( std::vector\u003cTagInfo\u003e const\u0026 tags ) {","        startListing();","","        auto writer = m_objectWriters.top().write( \"tags\"_sr ).writeArray();","        for ( auto const\u0026 tag : tags ) {","            auto tag_writer = writer.writeObject();","            {","                auto aliases_writer =","                    tag_writer.write( \"aliases\"_sr ).writeArray();","                for ( auto alias : tag.spellings ) {","                    aliases_writer.write( alias );","                }","            }","            tag_writer.write( \"count\"_sr ).write( tag.count );","        }","    }","} // namespace Catch","","","","","#include \u003ccassert\u003e","#include \u003cctime\u003e","#include \u003calgorithm\u003e","#include \u003ciomanip\u003e","","namespace Catch {","","    namespace {","        std::string getCurrentTimestamp() {","            time_t rawtime;","            std::time(\u0026rawtime);","","            std::tm timeInfo = {};","#if defined (_MSC_VER) || defined (__MINGW32__)","            gmtime_s(\u0026timeInfo, \u0026rawtime);","#elif defined (CATCH_PLATFORM_PLAYSTATION)","            gmtime_s(\u0026rawtime, \u0026timeInfo);","#elif defined (__IAR_SYSTEMS_ICC__)","            timeInfo = *std::gmtime(\u0026rawtime);","#else","            gmtime_r(\u0026rawtime, \u0026timeInfo);","#endif","","            auto const timeStampSize = sizeof(\"2017-01-16T17:06:45Z\");","            char timeStamp[timeStampSize];","            const char * const fmt = \"%Y-%m-%dT%H:%M:%SZ\";","","            std::strftime(timeStamp, timeStampSize, fmt, \u0026timeInfo);","","            return std::string(timeStamp, timeStampSize - 1);","        }","","        std::string fileNameTag(std::vector\u003cTag\u003e const\u0026 tags) {","            auto it = std::find_if(begin(tags),","                                   end(tags),","                                   [] (Tag const\u0026 tag) {","                                       return tag.original.size() \u003e 0","                                           \u0026\u0026 tag.original[0] == '#'; });","            if (it != tags.end()) {","                return static_cast\u003cstd::string\u003e(","                    it-\u003eoriginal.substr(1, it-\u003eoriginal.size() - 1)","                );","            }","            return std::string();","        }","","        // Formats the duration in seconds to 3 decimal places.","        // This is done because some genius defined Maven Surefire schema","        // in a way that only accepts 3 decimal places, and tools like","        // Jenkins use that schema for validation JUnit reporter output.","        std::string formatDuration( double seconds ) {","            ReusableStringStream rss;","            rss \u003c\u003c std::fixed \u003c\u003c std::setprecision( 3 ) \u003c\u003c seconds;","            return rss.str();","        }","","        static void normalizeNamespaceMarkers(std::string\u0026 str) {","            std::size_t pos = str.find( \"::\" );","            while ( pos != std::string::npos ) {","                str.replace( pos, 2, \".\" );","                pos += 1;","                pos = str.find( \"::\", pos );","            }","        }","","    } // anonymous namespace","","    JunitReporter::JunitReporter( ReporterConfig\u0026\u0026 _config )","        :   CumulativeReporterBase( CATCH_MOVE(_config) ),","            xml( m_stream )","        {","            m_preferences.shouldRedirectStdOut = true;","            m_preferences.shouldReportAllAssertions = false;","            m_shouldStoreSuccesfulAssertions = false;","        }","","    std::string JunitReporter::getDescription() {","        return \"Reports test results in an XML format that looks like Ant's junitreport target\";","    }","","    void JunitReporter::testRunStarting( TestRunInfo const\u0026 runInfo )  {","        CumulativeReporterBase::testRunStarting( runInfo );","        xml.startElement( \"testsuites\" );","        suiteTimer.start();","        stdOutForSuite.clear();","        stdErrForSuite.clear();","        unexpectedExceptions = 0;","    }","","    void JunitReporter::testCaseStarting( TestCaseInfo const\u0026 testCaseInfo ) {","        m_okToFail = testCaseInfo.okToFail();","    }","","    void JunitReporter::assertionEnded( AssertionStats const\u0026 assertionStats ) {","        if( assertionStats.assertionResult.getResultType() == ResultWas::ThrewException \u0026\u0026 !m_okToFail )","            unexpectedExceptions++;","        CumulativeReporterBase::assertionEnded( assertionStats );","    }","","    void JunitReporter::testCaseEnded( TestCaseStats const\u0026 testCaseStats ) {","        stdOutForSuite += testCaseStats.stdOut;","        stdErrForSuite += testCaseStats.stdErr;","        CumulativeReporterBase::testCaseEnded( testCaseStats );","    }","","    void JunitReporter::testRunEndedCumulative() {","        const auto suiteTime = suiteTimer.getElapsedSeconds();","        writeRun( *m_testRun, suiteTime );","        xml.endElement();","    }","","    void JunitReporter::writeRun( TestRunNode const\u0026 testRunNode, double suiteTime ) {","        XmlWriter::ScopedElement e = xml.scopedElement( \"testsuite\" );","","        TestRunStats const\u0026 stats = testRunNode.value;","        xml.writeAttribute( \"name\"_sr, stats.runInfo.name );","        xml.writeAttribute( \"errors\"_sr, unexpectedExceptions );","        xml.writeAttribute( \"failures\"_sr, stats.totals.assertions.failed-unexpectedExceptions );","        xml.writeAttribute( \"skipped\"_sr, stats.totals.assertions.skipped );","        xml.writeAttribute( \"tests\"_sr, stats.totals.assertions.total() );","        xml.writeAttribute( \"hostname\"_sr, \"tbd\"_sr ); // !TBD","        if( m_config-\u003eshowDurations() == ShowDurations::Never )","            xml.writeAttribute( \"time\"_sr, \"\"_sr );","        else","            xml.writeAttribute( \"time\"_sr, formatDuration( suiteTime ) );","        xml.writeAttribute( \"timestamp\"_sr, getCurrentTimestamp() );","","        // Write properties","        {","            auto properties = xml.scopedElement(\"properties\");","            xml.scopedElement(\"property\")","                .writeAttribute(\"name\"_sr, \"random-seed\"_sr)","                .writeAttribute(\"value\"_sr, m_config-\u003erngSeed());","            if (m_config-\u003etestSpec().hasFilters()) {","                xml.scopedElement(\"property\")","                    .writeAttribute(\"name\"_sr, \"filters\"_sr)","                    .writeAttribute(\"value\"_sr, m_config-\u003etestSpec());","            }","        }","","        // Write test cases","        for( auto const\u0026 child : testRunNode.children )","            writeTestCase( *child );","","        xml.scopedElement( \"system-out\" ).writeText( trim( stdOutForSuite ), XmlFormatting::Newline );","        xml.scopedElement( \"system-err\" ).writeText( trim( stdErrForSuite ), XmlFormatting::Newline );","    }","","    void JunitReporter::writeTestCase( TestCaseNode const\u0026 testCaseNode ) {","        TestCaseStats const\u0026 stats = testCaseNode.value;","","        // All test cases have exactly one section - which represents the","        // test case itself. That section may have 0-n nested sections","        assert( testCaseNode.children.size() == 1 );","        SectionNode const\u0026 rootSection = *testCaseNode.children.front();","","        std::string className =","            static_cast\u003cstd::string\u003e( stats.testInfo-\u003eclassName );","","        if( className.empty() ) {","            className = fileNameTag(stats.testInfo-\u003etags);","            if ( className.empty() ) {","                className = \"global\";","            }","        }","","        if ( !m_config-\u003ename().empty() )","            className = static_cast\u003cstd::string\u003e(m_config-\u003ename()) + '.' + className;","","        normalizeNamespaceMarkers(className);","","        writeSection( className, \"\", rootSection, stats.testInfo-\u003eokToFail() );","    }","","    void JunitReporter::writeSection( std::string const\u0026 className,","                                      std::string const\u0026 rootName,","                                      SectionNode const\u0026 sectionNode,","                                      bool testOkToFail) {","        std::string name = trim( sectionNode.stats.sectionInfo.name );","        if( !rootName.empty() )","            name = rootName + '/' + name;","","        if ( sectionNode.stats.assertions.total() \u003e 0","           || !sectionNode.stdOut.empty()","           || !sectionNode.stdErr.empty() ) {","            XmlWriter::ScopedElement e = xml.scopedElement( \"testcase\" );","            if( className.empty() ) {","                xml.writeAttribute( \"classname\"_sr, name );","                xml.writeAttribute( \"name\"_sr, \"root\"_sr );","            }","            else {","                xml.writeAttribute( \"classname\"_sr, className );","                xml.writeAttribute( \"name\"_sr, name );","            }","            xml.writeAttribute( \"time\"_sr, formatDuration( sectionNode.stats.durationInSeconds ) );","            // This is not ideal, but it should be enough to mimic gtest's","            // junit output.","            // Ideally the JUnit reporter would also handle `skipTest`","            // events and write those out appropriately.","            xml.writeAttribute( \"status\"_sr, \"run\"_sr );","","            if (sectionNode.stats.assertions.failedButOk) {","                xml.scopedElement(\"skipped\")","                    .writeAttribute(\"message\", \"TEST_CASE tagged with !mayfail\");","            }","","            writeAssertions( sectionNode );","","","            if( !sectionNode.stdOut.empty() )","                xml.scopedElement( \"system-out\" ).writeText( trim( sectionNode.stdOut ), XmlFormatting::Newline );","            if( !sectionNode.stdErr.empty() )","                xml.scopedElement( \"system-err\" ).writeText( trim( sectionNode.stdErr ), XmlFormatting::Newline );","        }","        for( auto const\u0026 childNode : sectionNode.childSections )","            if( className.empty() )","                writeSection( name, \"\", *childNode, testOkToFail );","            else","                writeSection( className, name, *childNode, testOkToFail );","    }","","    void JunitReporter::writeAssertions( SectionNode const\u0026 sectionNode ) {","        for (auto const\u0026 assertionOrBenchmark : sectionNode.assertionsAndBenchmarks) {","            if (assertionOrBenchmark.isAssertion()) {","                writeAssertion(assertionOrBenchmark.asAssertion());","            }","        }","    }","","    void JunitReporter::writeAssertion( AssertionStats const\u0026 stats ) {","        AssertionResult const\u0026 result = stats.assertionResult;","        if ( !result.isOk() ||","             result.getResultType() == ResultWas::ExplicitSkip ) {","            std::string elementName;","            switch( result.getResultType() ) {","                case ResultWas::ThrewException:","                case ResultWas::FatalErrorCondition:","                    elementName = \"error\";","                    break;","                case ResultWas::ExplicitFailure:","                case ResultWas::ExpressionFailed:","                case ResultWas::DidntThrowException:","                    elementName = \"failure\";","                    break;","                case ResultWas::ExplicitSkip:","                    elementName = \"skipped\";","                    break;","                // We should never see these here:","                case ResultWas::Info:","                case ResultWas::Warning:","                case ResultWas::Ok:","                case ResultWas::Unknown:","                case ResultWas::FailureBit:","                case ResultWas::Exception:","                    elementName = \"internalError\";","                    break;","            }","","            XmlWriter::ScopedElement e = xml.scopedElement( elementName );","","            xml.writeAttribute( \"message\"_sr, result.getExpression() );","            xml.writeAttribute( \"type\"_sr, result.getTestMacroName() );","","            ReusableStringStream rss;","            if ( result.getResultType() == ResultWas::ExplicitSkip ) {","                rss \u003c\u003c \"SKIPPED\\n\";","            } else {","                rss \u003c\u003c \"FAILED\" \u003c\u003c \":\\n\";","                if (result.hasExpression()) {","                    rss \u003c\u003c \"  \";","                    rss \u003c\u003c result.getExpressionInMacro();","                    rss \u003c\u003c '\\n';","                }","                if (result.hasExpandedExpression()) {","                    rss \u003c\u003c \"with expansion:\\n\";","                    rss \u003c\u003c TextFlow::Column(result.getExpandedExpression()).indent(2) \u003c\u003c '\\n';","                }","            }","","            if( result.hasMessage() )","                rss \u003c\u003c result.getMessage() \u003c\u003c '\\n';","            for( auto const\u0026 msg : stats.infoMessages )","                if( msg.type == ResultWas::Info )","                    rss \u003c\u003c msg.message \u003c\u003c '\\n';","","            rss \u003c\u003c \"at \" \u003c\u003c result.getSourceInfo();","            xml.writeText( rss.str(), XmlFormatting::Newline );","        }","    }","","} // end namespace Catch","","","","","#include \u003costream\u003e","","namespace Catch {","    void MultiReporter::updatePreferences(IEventListener const\u0026 reporterish) {","        m_preferences.shouldRedirectStdOut |=","            reporterish.getPreferences().shouldRedirectStdOut;","        m_preferences.shouldReportAllAssertions |=","            reporterish.getPreferences().shouldReportAllAssertions;","    }","","    void MultiReporter::addListener( IEventListenerPtr\u0026\u0026 listener ) {","        updatePreferences(*listener);","        m_reporterLikes.insert(m_reporterLikes.begin() + m_insertedListeners, CATCH_MOVE(listener) );","        ++m_insertedListeners;","    }","","    void MultiReporter::addReporter( IEventListenerPtr\u0026\u0026 reporter ) {","        updatePreferences(*reporter);","","        // We will need to output the captured stdout if there are reporters","        // that do not want it captured.","        // We do not consider listeners, because it is generally assumed that","        // listeners are output-transparent, even though they can ask for stdout","        // capture to do something with it.","        m_haveNoncapturingReporters |= !reporter-\u003egetPreferences().shouldRedirectStdOut;","","        // Reporters can always be placed to the back without breaking the","        // reporting order","        m_reporterLikes.push_back( CATCH_MOVE( reporter ) );","    }","","    void MultiReporter::noMatchingTestCases( StringRef unmatchedSpec ) {","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003enoMatchingTestCases( unmatchedSpec );","        }","    }","","    void MultiReporter::fatalErrorEncountered( StringRef error ) {","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003efatalErrorEncountered( error );","        }","    }","","    void MultiReporter::reportInvalidTestSpec( StringRef arg ) {","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003ereportInvalidTestSpec( arg );","        }","    }","","    void MultiReporter::benchmarkPreparing( StringRef name ) {","        for (auto\u0026 reporterish : m_reporterLikes) {","            reporterish-\u003ebenchmarkPreparing(name);","        }","    }","    void MultiReporter::benchmarkStarting( BenchmarkInfo const\u0026 benchmarkInfo ) {","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003ebenchmarkStarting( benchmarkInfo );","        }","    }","    void MultiReporter::benchmarkEnded( BenchmarkStats\u003c\u003e const\u0026 benchmarkStats ) {","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003ebenchmarkEnded( benchmarkStats );","        }","    }","","    void MultiReporter::benchmarkFailed( StringRef error ) {","        for (auto\u0026 reporterish : m_reporterLikes) {","            reporterish-\u003ebenchmarkFailed(error);","        }","    }","","    void MultiReporter::testRunStarting( TestRunInfo const\u0026 testRunInfo ) {","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003etestRunStarting( testRunInfo );","        }","    }","","    void MultiReporter::testCaseStarting( TestCaseInfo const\u0026 testInfo ) {","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003etestCaseStarting( testInfo );","        }","    }","","    void","    MultiReporter::testCasePartialStarting( TestCaseInfo const\u0026 testInfo,","                                                uint64_t partNumber ) {","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003etestCasePartialStarting( testInfo, partNumber );","        }","    }","","    void MultiReporter::sectionStarting( SectionInfo const\u0026 sectionInfo ) {","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003esectionStarting( sectionInfo );","        }","    }","","    void MultiReporter::assertionStarting( AssertionInfo const\u0026 assertionInfo ) {","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003eassertionStarting( assertionInfo );","        }","    }","","    void MultiReporter::assertionEnded( AssertionStats const\u0026 assertionStats ) {","        const bool reportByDefault =","            assertionStats.assertionResult.getResultType() != ResultWas::Ok ||","            m_config-\u003eincludeSuccessfulResults();","","        for ( auto \u0026 reporterish : m_reporterLikes ) {","            if ( reportByDefault ||","                 reporterish-\u003egetPreferences().shouldReportAllAssertions ) {","                    reporterish-\u003eassertionEnded( assertionStats );","            }","        }","    }","","    void MultiReporter::sectionEnded( SectionStats const\u0026 sectionStats ) {","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003esectionEnded( sectionStats );","        }","    }","","    void MultiReporter::testCasePartialEnded( TestCaseStats const\u0026 testStats,","                                                  uint64_t partNumber ) {","        if ( m_preferences.shouldRedirectStdOut \u0026\u0026","             m_haveNoncapturingReporters ) {","            if ( !testStats.stdOut.empty() ) {","                Catch::cout() \u003c\u003c testStats.stdOut \u003c\u003c std::flush;","            }","            if ( !testStats.stdErr.empty() ) {","                Catch::cerr() \u003c\u003c testStats.stdErr \u003c\u003c std::flush;","            }","        }","","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003etestCasePartialEnded( testStats, partNumber );","        }","    }","","    void MultiReporter::testCaseEnded( TestCaseStats const\u0026 testCaseStats ) {","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003etestCaseEnded( testCaseStats );","        }","    }","","    void MultiReporter::testRunEnded( TestRunStats const\u0026 testRunStats ) {","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003etestRunEnded( testRunStats );","        }","    }","","","    void MultiReporter::skipTest( TestCaseInfo const\u0026 testInfo ) {","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003eskipTest( testInfo );","        }","    }","","    void MultiReporter::listReporters(std::vector\u003cReporterDescription\u003e const\u0026 descriptions) {","        for (auto\u0026 reporterish : m_reporterLikes) {","            reporterish-\u003elistReporters(descriptions);","        }","    }","","    void MultiReporter::listListeners(","        std::vector\u003cListenerDescription\u003e const\u0026 descriptions ) {","        for ( auto\u0026 reporterish : m_reporterLikes ) {","            reporterish-\u003elistListeners( descriptions );","        }","    }","","    void MultiReporter::listTests(std::vector\u003cTestCaseHandle\u003e const\u0026 tests) {","        for (auto\u0026 reporterish : m_reporterLikes) {","            reporterish-\u003elistTests(tests);","        }","    }","","    void MultiReporter::listTags(std::vector\u003cTagInfo\u003e const\u0026 tags) {","        for (auto\u0026 reporterish : m_reporterLikes) {","            reporterish-\u003elistTags(tags);","        }","    }","","} // end namespace Catch","","","","","","namespace Catch {","    namespace Detail {","","        void registerReporterImpl( std::string const\u0026 name,","                                   IReporterFactoryPtr reporterPtr ) {","            CATCH_TRY {","                getMutableRegistryHub().registerReporter(","                    name, CATCH_MOVE( reporterPtr ) );","            }","            CATCH_CATCH_ALL {","                // Do not throw when constructing global objects, instead","                // register the exception to be processed later","                getMutableRegistryHub().registerStartupException();","            }","        }","","        void registerListenerImpl( Detail::unique_ptr\u003cEventListenerFactory\u003e listenerFactory ) {","            getMutableRegistryHub().registerListener( CATCH_MOVE(listenerFactory) );","        }","","","    } // namespace Detail","} // namespace Catch","","","","","#include \u003cmap\u003e","","namespace Catch {","","    namespace {","        std::string createMetadataString(IConfig const\u0026 config) {","            ReusableStringStream sstr;","            if ( config.testSpec().hasFilters() ) {","                sstr \u003c\u003c \"filters='\"","                         \u003c\u003c config.testSpec()","                         \u003c\u003c \"' \";","            }","            sstr \u003c\u003c \"rng-seed=\" \u003c\u003c config.rngSeed();","            return sstr.str();","        }","    }","","    void SonarQubeReporter::testRunStarting(TestRunInfo const\u0026 testRunInfo) {","        CumulativeReporterBase::testRunStarting(testRunInfo);","","        xml.writeComment( createMetadataString( *m_config ) );","        xml.startElement(\"testExecutions\");","        xml.writeAttribute(\"version\"_sr, '1');","    }","","    void SonarQubeReporter::writeRun( TestRunNode const\u0026 runNode ) {","        std::map\u003cStringRef, std::vector\u003cTestCaseNode const*\u003e\u003e testsPerFile;","","        for ( auto const\u0026 child : runNode.children ) {","            testsPerFile[child-\u003evalue.testInfo-\u003elineInfo.file].push_back(","                child.get() );","        }","","        for ( auto const\u0026 kv : testsPerFile ) {","            writeTestFile( kv.first, kv.second );","        }","    }","","    void SonarQubeReporter::writeTestFile(StringRef filename, std::vector\u003cTestCaseNode const*\u003e const\u0026 testCaseNodes) {","        XmlWriter::ScopedElement e = xml.scopedElement(\"file\");","        xml.writeAttribute(\"path\"_sr, filename);","","        for (auto const\u0026 child : testCaseNodes)","            writeTestCase(*child);","    }","","    void SonarQubeReporter::writeTestCase(TestCaseNode const\u0026 testCaseNode) {","        // All test cases have exactly one section - which represents the","        // test case itself. That section may have 0-n nested sections","        assert(testCaseNode.children.size() == 1);","        SectionNode const\u0026 rootSection = *testCaseNode.children.front();","        writeSection(\"\", rootSection, testCaseNode.value.testInfo-\u003eokToFail());","    }","","    void SonarQubeReporter::writeSection(std::string const\u0026 rootName, SectionNode const\u0026 sectionNode, bool okToFail) {","        std::string name = trim(sectionNode.stats.sectionInfo.name);","        if (!rootName.empty())","            name = rootName + '/' + name;","","        if ( sectionNode.stats.assertions.total() \u003e 0","            || !sectionNode.stdOut.empty()","            || !sectionNode.stdErr.empty() ) {","            XmlWriter::ScopedElement e = xml.scopedElement(\"testCase\");","            xml.writeAttribute(\"name\"_sr, name);","            xml.writeAttribute(\"duration\"_sr, static_cast\u003clong\u003e(sectionNode.stats.durationInSeconds * 1000));","","            writeAssertions(sectionNode, okToFail);","        }","","        for (auto const\u0026 childNode : sectionNode.childSections)","            writeSection(name, *childNode, okToFail);","    }","","    void SonarQubeReporter::writeAssertions(SectionNode const\u0026 sectionNode, bool okToFail) {","        for (auto const\u0026 assertionOrBenchmark : sectionNode.assertionsAndBenchmarks) {","            if (assertionOrBenchmark.isAssertion()) {","                writeAssertion(assertionOrBenchmark.asAssertion(), okToFail);","            }","        }","    }","","    void SonarQubeReporter::writeAssertion(AssertionStats const\u0026 stats, bool okToFail) {","        AssertionResult const\u0026 result = stats.assertionResult;","        if ( !result.isOk() ||","             result.getResultType() == ResultWas::ExplicitSkip ) {","            std::string elementName;","            if (okToFail) {","                elementName = \"skipped\";","            } else {","                switch (result.getResultType()) {","                case ResultWas::ThrewException:","                case ResultWas::FatalErrorCondition:","                    elementName = \"error\";","                    break;","                case ResultWas::ExplicitFailure:","                case ResultWas::ExpressionFailed:","                case ResultWas::DidntThrowException:","                    elementName = \"failure\";","                    break;","                case ResultWas::ExplicitSkip:","                    elementName = \"skipped\";","                    break;","                    // We should never see these here:","                case ResultWas::Info:","                case ResultWas::Warning:","                case ResultWas::Ok:","                case ResultWas::Unknown:","                case ResultWas::FailureBit:","                case ResultWas::Exception:","                    elementName = \"internalError\";","                    break;","                }","            }","","            XmlWriter::ScopedElement e = xml.scopedElement(elementName);","","            ReusableStringStream messageRss;","            messageRss \u003c\u003c result.getTestMacroName() \u003c\u003c '(' \u003c\u003c result.getExpression() \u003c\u003c ')';","            xml.writeAttribute(\"message\"_sr, messageRss.str());","","            ReusableStringStream textRss;","            if ( result.getResultType() == ResultWas::ExplicitSkip ) {","                textRss \u003c\u003c \"SKIPPED\\n\";","            } else {","                textRss \u003c\u003c \"FAILED:\\n\";","                if (result.hasExpression()) {","                    textRss \u003c\u003c '\\t' \u003c\u003c result.getExpressionInMacro() \u003c\u003c '\\n';","                }","                if (result.hasExpandedExpression()) {","                    textRss \u003c\u003c \"with expansion:\\n\\t\" \u003c\u003c result.getExpandedExpression() \u003c\u003c '\\n';","                }","            }","","            if (result.hasMessage())","                textRss \u003c\u003c result.getMessage() \u003c\u003c '\\n';","","            for (auto const\u0026 msg : stats.infoMessages)","                if (msg.type == ResultWas::Info)","                    textRss \u003c\u003c msg.message \u003c\u003c '\\n';","","            textRss \u003c\u003c \"at \" \u003c\u003c result.getSourceInfo();","            xml.writeText(textRss.str(), XmlFormatting::Newline);","        }","    }","","} // end namespace Catch","","","","namespace Catch {","","    StreamingReporterBase::~StreamingReporterBase() = default;","","    void","    StreamingReporterBase::testRunStarting( TestRunInfo const\u0026 _testRunInfo ) {","        currentTestRunInfo = _testRunInfo;","    }","","    void StreamingReporterBase::testRunEnded( TestRunStats const\u0026 ) {","        currentTestCaseInfo = nullptr;","    }","","} // end namespace Catch","","","","#include \u003calgorithm\u003e","#include \u003costream\u003e","","namespace Catch {","","    namespace {","        // Yes, this has to be outside the class and namespaced by naming.","        // Making older compiler happy is hard.","        static constexpr StringRef tapFailedString = \"not ok\"_sr;","        static constexpr StringRef tapPassedString = \"ok\"_sr;","        static constexpr Colour::Code tapDimColour = Colour::FileName;","","        class TapAssertionPrinter {","        public:","            TapAssertionPrinter\u0026 operator= (TapAssertionPrinter const\u0026) = delete;","            TapAssertionPrinter(TapAssertionPrinter const\u0026) = delete;","            TapAssertionPrinter(std::ostream\u0026 _stream, AssertionStats const\u0026 _stats, std::size_t _counter, ColourImpl* colour_)","                : stream(_stream)","                , result(_stats.assertionResult)","                , messages(_stats.infoMessages)","                , itMessage(_stats.infoMessages.begin())","                , printInfoMessages(true)","                , counter(_counter)","                , colourImpl( colour_ ) {}","","            void print() {","                itMessage = messages.begin();","","                switch (result.getResultType()) {","                case ResultWas::Ok:","                    printResultType(tapPassedString);","                    printOriginalExpression();","                    printReconstructedExpression();","                    if (!result.hasExpression())","                        printRemainingMessages(Colour::None);","                    else","                        printRemainingMessages();","                    break;","                case ResultWas::ExpressionFailed:","                    if (result.isOk()) {","                        printResultType(tapPassedString);","                    } else {","                        printResultType(tapFailedString);","                    }","                    printOriginalExpression();","                    printReconstructedExpression();","                    if (result.isOk()) {","                        printIssue(\" # TODO\");","                    }","                    printRemainingMessages();","                    break;","                case ResultWas::ThrewException:","                    printResultType(tapFailedString);","                    printIssue(\"unexpected exception with message:\"_sr);","                    printMessage();","                    printExpressionWas();","                    printRemainingMessages();","                    break;","                case ResultWas::FatalErrorCondition:","                    printResultType(tapFailedString);","                    printIssue(\"fatal error condition with message:\"_sr);","                    printMessage();","                    printExpressionWas();","                    printRemainingMessages();","                    break;","                case ResultWas::DidntThrowException:","                    printResultType(tapFailedString);","                    printIssue(\"expected exception, got none\"_sr);","                    printExpressionWas();","                    printRemainingMessages();","                    break;","                case ResultWas::Info:","                    printResultType(\"info\"_sr);","                    printMessage();","                    printRemainingMessages();","                    break;","                case ResultWas::Warning:","                    printResultType(\"warning\"_sr);","                    printMessage();","                    printRemainingMessages();","                    break;","                case ResultWas::ExplicitFailure:","                    printResultType(tapFailedString);","                    printIssue(\"explicitly\"_sr);","                    printRemainingMessages(Colour::None);","                    break;","                case ResultWas::ExplicitSkip:","                    printResultType(tapPassedString);","                    printIssue(\" # SKIP\"_sr);","                    printMessage();","                    printRemainingMessages();","                    break;","                    // These cases are here to prevent compiler warnings","                case ResultWas::Unknown:","                case ResultWas::FailureBit:","                case ResultWas::Exception:","                    printResultType(\"** internal error **\"_sr);","                    break;","                }","            }","","        private:","            void printResultType(StringRef passOrFail) const {","                if (!passOrFail.empty()) {","                    stream \u003c\u003c passOrFail \u003c\u003c ' ' \u003c\u003c counter \u003c\u003c \" -\";","                }","            }","","            void printIssue(StringRef issue) const {","                stream \u003c\u003c ' ' \u003c\u003c issue;","            }","","            void printExpressionWas() {","                if (result.hasExpression()) {","                    stream \u003c\u003c ';';","                    stream \u003c\u003c colourImpl-\u003eguardColour( tapDimColour )","                           \u003c\u003c \" expression was:\";","                    printOriginalExpression();","                }","            }","","            void printOriginalExpression() const {","                if (result.hasExpression()) {","                    stream \u003c\u003c ' ' \u003c\u003c result.getExpression();","                }","            }","","            void printReconstructedExpression() const {","                if (result.hasExpandedExpression()) {","                    stream \u003c\u003c colourImpl-\u003eguardColour( tapDimColour ) \u003c\u003c \" for: \";","","                    std::string expr = result.getExpandedExpression();","                    std::replace(expr.begin(), expr.end(), '\\n', ' ');","                    stream \u003c\u003c expr;","                }","            }","","            void printMessage() {","                if (itMessage != messages.end()) {","                    stream \u003c\u003c \" '\" \u003c\u003c itMessage-\u003emessage \u003c\u003c '\\'';","                    ++itMessage;","                }","            }","","            void printRemainingMessages(Colour::Code colour = tapDimColour) {","                if (itMessage == messages.end()) {","                    return;","                }","","                // using messages.end() directly (or auto) yields compilation error:","                std::vector\u003cMessageInfo\u003e::const_iterator itEnd = messages.end();","                const std::size_t N = static_cast\u003cstd::size_t\u003e(itEnd - itMessage);","","                stream \u003c\u003c colourImpl-\u003eguardColour( colour ) \u003c\u003c \" with \"","                       \u003c\u003c pluralise( N, \"message\"_sr ) \u003c\u003c ':';","","                for (; itMessage != itEnd; ) {","                    // If this assertion is a warning ignore any INFO messages","                    if (printInfoMessages || itMessage-\u003etype != ResultWas::Info) {","                        stream \u003c\u003c \" '\" \u003c\u003c itMessage-\u003emessage \u003c\u003c '\\'';","                        if (++itMessage != itEnd) {","                            stream \u003c\u003c colourImpl-\u003eguardColour(tapDimColour) \u003c\u003c \" and\";","                        }","                    }","                }","            }","","        private:","            std::ostream\u0026 stream;","            AssertionResult const\u0026 result;","            std::vector\u003cMessageInfo\u003e const\u0026 messages;","            std::vector\u003cMessageInfo\u003e::const_iterator itMessage;","            bool printInfoMessages;","            std::size_t counter;","            ColourImpl* colourImpl;","        };","","    } // End anonymous namespace","","    void TAPReporter::testRunStarting( TestRunInfo const\u0026 ) {","        if ( m_config-\u003etestSpec().hasFilters() ) {","            m_stream \u003c\u003c \"# filters: \" \u003c\u003c m_config-\u003etestSpec() \u003c\u003c '\\n';","        }","        m_stream \u003c\u003c \"# rng-seed: \" \u003c\u003c m_config-\u003erngSeed() \u003c\u003c '\\n';","    }","","    void TAPReporter::noMatchingTestCases( StringRef unmatchedSpec ) {","        m_stream \u003c\u003c \"# No test cases matched '\" \u003c\u003c unmatchedSpec \u003c\u003c \"'\\n\";","    }","","    void TAPReporter::assertionEnded(AssertionStats const\u0026 _assertionStats) {","        ++counter;","","        m_stream \u003c\u003c \"# \" \u003c\u003c currentTestCaseInfo-\u003ename \u003c\u003c '\\n';","        TapAssertionPrinter printer(m_stream, _assertionStats, counter, m_colour.get());","        printer.print();","","        m_stream \u003c\u003c '\\n' \u003c\u003c std::flush;","    }","","    void TAPReporter::testRunEnded(TestRunStats const\u0026 _testRunStats) {","        m_stream \u003c\u003c \"1..\" \u003c\u003c _testRunStats.totals.assertions.total();","        if (_testRunStats.totals.testCases.total() == 0) {","            m_stream \u003c\u003c \" # Skipped: No tests ran.\";","        }","        m_stream \u003c\u003c \"\\n\\n\" \u003c\u003c std::flush;","        StreamingReporterBase::testRunEnded(_testRunStats);","    }","","","","","} // end namespace Catch","","","","","#include \u003ccassert\u003e","#include \u003costream\u003e","","namespace Catch {","","    namespace {","        // if string has a : in first line will set indent to follow it on","        // subsequent lines","        void printHeaderString(std::ostream\u0026 os, std::string const\u0026 _string, std::size_t indent = 0) {","            std::size_t i = _string.find(\": \");","            if (i != std::string::npos)","                i += 2;","            else","                i = 0;","            os \u003c\u003c TextFlow::Column(_string)","                  .indent(indent + i)","                  .initialIndent(indent) \u003c\u003c '\\n';","        }","","        std::string escape(StringRef str) {","            std::string escaped = static_cast\u003cstd::string\u003e(str);","            replaceInPlace(escaped, \"|\", \"||\");","            replaceInPlace(escaped, \"'\", \"|'\");","            replaceInPlace(escaped, \"\\n\", \"|n\");","            replaceInPlace(escaped, \"\\r\", \"|r\");","            replaceInPlace(escaped, \"[\", \"|[\");","            replaceInPlace(escaped, \"]\", \"|]\");","            return escaped;","        }","    } // end anonymous namespace","","","    TeamCityReporter::~TeamCityReporter() = default;","","    void TeamCityReporter::testRunStarting( TestRunInfo const\u0026 runInfo ) {","        m_stream \u003c\u003c \"##teamcity[testSuiteStarted name='\" \u003c\u003c escape( runInfo.name )","               \u003c\u003c \"']\\n\";","    }","","    void TeamCityReporter::testRunEnded( TestRunStats const\u0026 runStats ) {","        m_stream \u003c\u003c \"##teamcity[testSuiteFinished name='\"","               \u003c\u003c escape( runStats.runInfo.name ) \u003c\u003c \"']\\n\";","    }","","    void TeamCityReporter::assertionEnded(AssertionStats const\u0026 assertionStats) {","        AssertionResult const\u0026 result = assertionStats.assertionResult;","        if ( !result.isOk() ||","             result.getResultType() == ResultWas::ExplicitSkip ) {","","            ReusableStringStream msg;","            if (!m_headerPrintedForThisSection)","                printSectionHeader(msg.get());","            m_headerPrintedForThisSection = true;","","            msg \u003c\u003c result.getSourceInfo() \u003c\u003c '\\n';","","            switch (result.getResultType()) {","            case ResultWas::ExpressionFailed:","                msg \u003c\u003c \"expression failed\";","                break;","            case ResultWas::ThrewException:","                msg \u003c\u003c \"unexpected exception\";","                break;","            case ResultWas::FatalErrorCondition:","                msg \u003c\u003c \"fatal error condition\";","                break;","            case ResultWas::DidntThrowException:","                msg \u003c\u003c \"no exception was thrown where one was expected\";","                break;","            case ResultWas::ExplicitFailure:","                msg \u003c\u003c \"explicit failure\";","                break;","            case ResultWas::ExplicitSkip:","                msg \u003c\u003c \"explicit skip\";","                break;","","                // We shouldn't get here because of the isOk() test","            case ResultWas::Ok:","            case ResultWas::Info:","            case ResultWas::Warning:","                CATCH_ERROR(\"Internal error in TeamCity reporter\");","                // These cases are here to prevent compiler warnings","            case ResultWas::Unknown:","            case ResultWas::FailureBit:","            case ResultWas::Exception:","                CATCH_ERROR(\"Not implemented\");","            }","            if (assertionStats.infoMessages.size() == 1)","                msg \u003c\u003c \" with message:\";","            if (assertionStats.infoMessages.size() \u003e 1)","                msg \u003c\u003c \" with messages:\";","            for (auto const\u0026 messageInfo : assertionStats.infoMessages)","                msg \u003c\u003c \"\\n  \\\"\" \u003c\u003c messageInfo.message \u003c\u003c '\"';","","","            if (result.hasExpression()) {","                msg \u003c\u003c","                    \"\\n  \" \u003c\u003c result.getExpressionInMacro() \u003c\u003c \"\\n\"","                    \"with expansion:\\n\"","                    \"  \" \u003c\u003c result.getExpandedExpression() \u003c\u003c '\\n';","            }","","            if ( result.getResultType() == ResultWas::ExplicitSkip ) {","                m_stream \u003c\u003c \"##teamcity[testIgnored\";","            } else if ( currentTestCaseInfo-\u003eokToFail() ) {","                msg \u003c\u003c \"- failure ignore as test marked as 'ok to fail'\\n\";","                m_stream \u003c\u003c \"##teamcity[testIgnored\";","            } else {","                m_stream \u003c\u003c \"##teamcity[testFailed\";","            }","            m_stream \u003c\u003c \" name='\" \u003c\u003c escape( currentTestCaseInfo-\u003ename ) \u003c\u003c '\\''","                     \u003c\u003c \" message='\" \u003c\u003c escape( msg.str() ) \u003c\u003c '\\'' \u003c\u003c \"]\\n\";","        }","        m_stream.flush();","    }","","    void TeamCityReporter::testCaseStarting(TestCaseInfo const\u0026 testInfo) {","        m_testTimer.start();","        StreamingReporterBase::testCaseStarting(testInfo);","        m_stream \u003c\u003c \"##teamcity[testStarted name='\"","            \u003c\u003c escape(testInfo.name) \u003c\u003c \"']\\n\";","        m_stream.flush();","    }","","    void TeamCityReporter::testCaseEnded(TestCaseStats const\u0026 testCaseStats) {","        StreamingReporterBase::testCaseEnded(testCaseStats);","        auto const\u0026 testCaseInfo = *testCaseStats.testInfo;","        if (!testCaseStats.stdOut.empty())","            m_stream \u003c\u003c \"##teamcity[testStdOut name='\"","            \u003c\u003c escape(testCaseInfo.name)","            \u003c\u003c \"' out='\" \u003c\u003c escape(testCaseStats.stdOut) \u003c\u003c \"']\\n\";","        if (!testCaseStats.stdErr.empty())","            m_stream \u003c\u003c \"##teamcity[testStdErr name='\"","            \u003c\u003c escape(testCaseInfo.name)","            \u003c\u003c \"' out='\" \u003c\u003c escape(testCaseStats.stdErr) \u003c\u003c \"']\\n\";","        m_stream \u003c\u003c \"##teamcity[testFinished name='\"","            \u003c\u003c escape(testCaseInfo.name) \u003c\u003c \"' duration='\"","            \u003c\u003c m_testTimer.getElapsedMilliseconds() \u003c\u003c \"']\\n\";","        m_stream.flush();","    }","","    void TeamCityReporter::printSectionHeader(std::ostream\u0026 os) {","        assert(!m_sectionStack.empty());","","        if (m_sectionStack.size() \u003e 1) {","            os \u003c\u003c lineOfChars('-') \u003c\u003c '\\n';","","            std::vector\u003cSectionInfo\u003e::const_iterator","                it = m_sectionStack.begin() + 1, // Skip first section (test case)","                itEnd = m_sectionStack.end();","            for (; it != itEnd; ++it)","                printHeaderString(os, it-\u003ename);","            os \u003c\u003c lineOfChars('-') \u003c\u003c '\\n';","        }","","        SourceLineInfo lineInfo = m_sectionStack.front().lineInfo;","","        os \u003c\u003c lineInfo \u003c\u003c '\\n';","        os \u003c\u003c lineOfChars('.') \u003c\u003c \"\\n\\n\";","    }","","} // end namespace Catch","","","","","#if defined(_MSC_VER)","#pragma warning(push)","#pragma warning(disable:4061) // Not all labels are EXPLICITLY handled in switch","                              // Note that 4062 (not all labels are handled","                              // and default is missing) is enabled","#endif","","namespace Catch {","    XmlReporter::XmlReporter( ReporterConfig\u0026\u0026 _config )","    :   StreamingReporterBase( CATCH_MOVE(_config) ),","        m_xml(m_stream)","    {","        m_preferences.shouldRedirectStdOut = true;","        m_preferences.shouldReportAllAssertions = true;","    }","","    XmlReporter::~XmlReporter() = default;","","    std::string XmlReporter::getDescription() {","        return \"Reports test results as an XML document\";","    }","","    std::string XmlReporter::getStylesheetRef() const {","        return std::string();","    }","","    void XmlReporter::writeSourceInfo( SourceLineInfo const\u0026 sourceInfo ) {","        m_xml","            .writeAttribute( \"filename\"_sr, sourceInfo.file )","            .writeAttribute( \"line\"_sr, sourceInfo.line );","    }","","    void XmlReporter::testRunStarting( TestRunInfo const\u0026 testInfo ) {","        StreamingReporterBase::testRunStarting( testInfo );","        std::string stylesheetRef = getStylesheetRef();","        if( !stylesheetRef.empty() )","            m_xml.writeStylesheetRef( stylesheetRef );","        m_xml.startElement(\"Catch2TestRun\")","             .writeAttribute(\"name\"_sr, m_config-\u003ename())","             .writeAttribute(\"rng-seed\"_sr, m_config-\u003erngSeed())","             .writeAttribute(\"xml-format-version\"_sr, 3)","             .writeAttribute(\"catch2-version\"_sr, libraryVersion());","        if ( m_config-\u003etestSpec().hasFilters() ) {","            m_xml.writeAttribute( \"filters\"_sr, m_config-\u003etestSpec() );","        }","    }","","    void XmlReporter::testCaseStarting( TestCaseInfo const\u0026 testInfo ) {","        StreamingReporterBase::testCaseStarting(testInfo);","        m_xml.startElement( \"TestCase\" )","            .writeAttribute( \"name\"_sr, trim( StringRef(testInfo.name) ) )","            .writeAttribute( \"tags\"_sr, testInfo.tagsAsString() );","","        writeSourceInfo( testInfo.lineInfo );","","        if ( m_config-\u003eshowDurations() == ShowDurations::Always )","            m_testCaseTimer.start();","        m_xml.ensureTagClosed();","    }","","    void XmlReporter::sectionStarting( SectionInfo const\u0026 sectionInfo ) {","        StreamingReporterBase::sectionStarting( sectionInfo );","        if( m_sectionDepth++ \u003e 0 ) {","            m_xml.startElement( \"Section\" )","                .writeAttribute( \"name\"_sr, trim( StringRef(sectionInfo.name) ) );","            writeSourceInfo( sectionInfo.lineInfo );","            m_xml.ensureTagClosed();","        }","    }","","    void XmlReporter::assertionStarting( AssertionInfo const\u0026 ) { }","","    void XmlReporter::assertionEnded( AssertionStats const\u0026 assertionStats ) {","","        AssertionResult const\u0026 result = assertionStats.assertionResult;","","        bool includeResults = m_config-\u003eincludeSuccessfulResults() || !result.isOk();","","        if( includeResults || result.getResultType() == ResultWas::Warning ) {","            // Print any info messages in \u003cInfo\u003e tags.","            for( auto const\u0026 msg : assertionStats.infoMessages ) {","                if( msg.type == ResultWas::Info \u0026\u0026 includeResults ) {","                    auto t = m_xml.scopedElement( \"Info\" );","                    writeSourceInfo( msg.lineInfo );","                    t.writeText( msg.message );","                } else if ( msg.type == ResultWas::Warning ) {","                    auto t = m_xml.scopedElement( \"Warning\" );","                    writeSourceInfo( msg.lineInfo );","                    t.writeText( msg.message );","                }","            }","        }","","        // Drop out if result was successful but we're not printing them.","        if ( !includeResults \u0026\u0026 result.getResultType() != ResultWas::Warning \u0026\u0026","             result.getResultType() != ResultWas::ExplicitSkip ) {","            return;","        }","","        // Print the expression if there is one.","        if( result.hasExpression() ) {","            m_xml.startElement( \"Expression\" )","                .writeAttribute( \"success\"_sr, result.succeeded() )","                .writeAttribute( \"type\"_sr, result.getTestMacroName() );","","            writeSourceInfo( result.getSourceInfo() );","","            m_xml.scopedElement( \"Original\" )","                .writeText( result.getExpression() );","            m_xml.scopedElement( \"Expanded\" )","                .writeText( result.getExpandedExpression() );","        }","","        // And... Print a result applicable to each result type.","        switch( result.getResultType() ) {","            case ResultWas::ThrewException:","                m_xml.startElement( \"Exception\" );","                writeSourceInfo( result.getSourceInfo() );","                m_xml.writeText( result.getMessage() );","                m_xml.endElement();","                break;","            case ResultWas::FatalErrorCondition:","                m_xml.startElement( \"FatalErrorCondition\" );","                writeSourceInfo( result.getSourceInfo() );","                m_xml.writeText( result.getMessage() );","                m_xml.endElement();","                break;","            case ResultWas::Info:","                m_xml.scopedElement( \"Info\" )","                     .writeText( result.getMessage() );","                break;","            case ResultWas::Warning:","                // Warning will already have been written","                break;","            case ResultWas::ExplicitFailure:","                m_xml.startElement( \"Failure\" );","                writeSourceInfo( result.getSourceInfo() );","                m_xml.writeText( result.getMessage() );","                m_xml.endElement();","                break;","            case ResultWas::ExplicitSkip:","                m_xml.startElement( \"Skip\" );","                writeSourceInfo( result.getSourceInfo() );","                m_xml.writeText( result.getMessage() );","                m_xml.endElement();","                break;","            default:","                break;","        }","","        if( result.hasExpression() )","            m_xml.endElement();","    }","","    void XmlReporter::sectionEnded( SectionStats const\u0026 sectionStats ) {","        StreamingReporterBase::sectionEnded( sectionStats );","        if ( --m_sectionDepth \u003e 0 ) {","            {","                XmlWriter::ScopedElement e = m_xml.scopedElement( \"OverallResults\" );","                e.writeAttribute( \"successes\"_sr, sectionStats.assertions.passed );","                e.writeAttribute( \"failures\"_sr, sectionStats.assertions.failed );","                e.writeAttribute( \"expectedFailures\"_sr, sectionStats.assertions.failedButOk );","                e.writeAttribute( \"skipped\"_sr, sectionStats.assertions.skipped \u003e 0 );","","                if ( m_config-\u003eshowDurations() == ShowDurations::Always )","                    e.writeAttribute( \"durationInSeconds\"_sr, sectionStats.durationInSeconds );","            }","            // Ends assertion tag","            m_xml.endElement();","        }","    }","","    void XmlReporter::testCaseEnded( TestCaseStats const\u0026 testCaseStats ) {","        StreamingReporterBase::testCaseEnded( testCaseStats );","        XmlWriter::ScopedElement e = m_xml.scopedElement( \"OverallResult\" );","        e.writeAttribute( \"success\"_sr, testCaseStats.totals.assertions.allOk() );","        e.writeAttribute( \"skips\"_sr, testCaseStats.totals.assertions.skipped );","","        if ( m_config-\u003eshowDurations() == ShowDurations::Always )","            e.writeAttribute( \"durationInSeconds\"_sr, m_testCaseTimer.getElapsedSeconds() );","        if( !testCaseStats.stdOut.empty() )","            m_xml.scopedElement( \"StdOut\" ).writeText( trim( StringRef(testCaseStats.stdOut) ), XmlFormatting::Newline );","        if( !testCaseStats.stdErr.empty() )","            m_xml.scopedElement( \"StdErr\" ).writeText( trim( StringRef(testCaseStats.stdErr) ), XmlFormatting::Newline );","","        m_xml.endElement();","    }","","    void XmlReporter::testRunEnded( TestRunStats const\u0026 testRunStats ) {","        StreamingReporterBase::testRunEnded( testRunStats );","        m_xml.scopedElement( \"OverallResults\" )","            .writeAttribute( \"successes\"_sr, testRunStats.totals.assertions.passed )","            .writeAttribute( \"failures\"_sr, testRunStats.totals.assertions.failed )","            .writeAttribute( \"expectedFailures\"_sr, testRunStats.totals.assertions.failedButOk )","            .writeAttribute( \"skips\"_sr, testRunStats.totals.assertions.skipped );","        m_xml.scopedElement( \"OverallResultsCases\")","            .writeAttribute( \"successes\"_sr, testRunStats.totals.testCases.passed )","            .writeAttribute( \"failures\"_sr, testRunStats.totals.testCases.failed )","            .writeAttribute( \"expectedFailures\"_sr, testRunStats.totals.testCases.failedButOk )","            .writeAttribute( \"skips\"_sr, testRunStats.totals.testCases.skipped );","        m_xml.endElement();","    }","","    void XmlReporter::benchmarkPreparing( StringRef name ) {","        m_xml.startElement(\"BenchmarkResults\")","             .writeAttribute(\"name\"_sr, name);","    }","","    void XmlReporter::benchmarkStarting(BenchmarkInfo const \u0026info) {","        m_xml.writeAttribute(\"samples\"_sr, info.samples)","            .writeAttribute(\"resamples\"_sr, info.resamples)","            .writeAttribute(\"iterations\"_sr, info.iterations)","            .writeAttribute(\"clockResolution\"_sr, info.clockResolution)","            .writeAttribute(\"estimatedDuration\"_sr, info.estimatedDuration)","            .writeComment(\"All values in nano seconds\"_sr);","    }","","    void XmlReporter::benchmarkEnded(BenchmarkStats\u003c\u003e const\u0026 benchmarkStats) {","        m_xml.scopedElement(\"mean\")","            .writeAttribute(\"value\"_sr, benchmarkStats.mean.point.count())","            .writeAttribute(\"lowerBound\"_sr, benchmarkStats.mean.lower_bound.count())","            .writeAttribute(\"upperBound\"_sr, benchmarkStats.mean.upper_bound.count())","            .writeAttribute(\"ci\"_sr, benchmarkStats.mean.confidence_interval);","        m_xml.scopedElement(\"standardDeviation\")","            .writeAttribute(\"value\"_sr, benchmarkStats.standardDeviation.point.count())","            .writeAttribute(\"lowerBound\"_sr, benchmarkStats.standardDeviation.lower_bound.count())","            .writeAttribute(\"upperBound\"_sr, benchmarkStats.standardDeviation.upper_bound.count())","            .writeAttribute(\"ci\"_sr, benchmarkStats.standardDeviation.confidence_interval);","        m_xml.scopedElement(\"outliers\")","            .writeAttribute(\"variance\"_sr, benchmarkStats.outlierVariance)","            .writeAttribute(\"lowMild\"_sr, benchmarkStats.outliers.low_mild)","            .writeAttribute(\"lowSevere\"_sr, benchmarkStats.outliers.low_severe)","            .writeAttribute(\"highMild\"_sr, benchmarkStats.outliers.high_mild)","            .writeAttribute(\"highSevere\"_sr, benchmarkStats.outliers.high_severe);","        m_xml.endElement();","    }","","    void XmlReporter::benchmarkFailed(StringRef error) {","        m_xml.scopedElement(\"failed\").","            writeAttribute(\"message\"_sr, error);","        m_xml.endElement();","    }","","    void XmlReporter::listReporters(std::vector\u003cReporterDescription\u003e const\u0026 descriptions) {","        auto outerTag = m_xml.scopedElement(\"AvailableReporters\");","        for (auto const\u0026 reporter : descriptions) {","            auto inner = m_xml.scopedElement(\"Reporter\");","            m_xml.startElement(\"Name\", XmlFormatting::Indent)","                 .writeText(reporter.name, XmlFormatting::None)","                 .endElement(XmlFormatting::Newline);","            m_xml.startElement(\"Description\", XmlFormatting::Indent)","                 .writeText(reporter.description, XmlFormatting::None)","                 .endElement(XmlFormatting::Newline);","        }","    }","","    void XmlReporter::listListeners(std::vector\u003cListenerDescription\u003e const\u0026 descriptions) {","        auto outerTag = m_xml.scopedElement( \"RegisteredListeners\" );","        for ( auto const\u0026 listener : descriptions ) {","            auto inner = m_xml.scopedElement( \"Listener\" );","            m_xml.startElement( \"Name\", XmlFormatting::Indent )","                .writeText( listener.name, XmlFormatting::None )","                .endElement( XmlFormatting::Newline );","            m_xml.startElement( \"Description\", XmlFormatting::Indent )","                .writeText( listener.description, XmlFormatting::None )","                .endElement( XmlFormatting::Newline );","        }","    }","","    void XmlReporter::listTests(std::vector\u003cTestCaseHandle\u003e const\u0026 tests) {","        auto outerTag = m_xml.scopedElement(\"MatchingTests\");","        for (auto const\u0026 test : tests) {","            auto innerTag = m_xml.scopedElement(\"TestCase\");","            auto const\u0026 testInfo = test.getTestCaseInfo();","            m_xml.startElement(\"Name\", XmlFormatting::Indent)","                 .writeText(testInfo.name, XmlFormatting::None)","                 .endElement(XmlFormatting::Newline);","            m_xml.startElement(\"ClassName\", XmlFormatting::Indent)","                 .writeText(testInfo.className, XmlFormatting::None)","                 .endElement(XmlFormatting::Newline);","            m_xml.startElement(\"Tags\", XmlFormatting::Indent)","                 .writeText(testInfo.tagsAsString(), XmlFormatting::None)","                 .endElement(XmlFormatting::Newline);","","            auto sourceTag = m_xml.scopedElement(\"SourceInfo\");","            m_xml.startElement(\"File\", XmlFormatting::Indent)","                 .writeText(testInfo.lineInfo.file, XmlFormatting::None)","                 .endElement(XmlFormatting::Newline);","            m_xml.startElement(\"Line\", XmlFormatting::Indent)","                 .writeText(std::to_string(testInfo.lineInfo.line), XmlFormatting::None)","                 .endElement(XmlFormatting::Newline);","        }","    }","","    void XmlReporter::listTags(std::vector\u003cTagInfo\u003e const\u0026 tags) {","        auto outerTag = m_xml.scopedElement(\"TagsFromMatchingTests\");","        for (auto const\u0026 tag : tags) {","            auto innerTag = m_xml.scopedElement(\"Tag\");","            m_xml.startElement(\"Count\", XmlFormatting::Indent)","                 .writeText(std::to_string(tag.count), XmlFormatting::None)","                 .endElement(XmlFormatting::Newline);","            auto aliasTag = m_xml.scopedElement(\"Aliases\");","            for (auto const\u0026 alias : tag.spellings) {","                m_xml.startElement(\"Alias\", XmlFormatting::Indent)","                     .writeText(alias, XmlFormatting::None)","                     .endElement(XmlFormatting::Newline);","            }","        }","    }","","} // end namespace Catch","","#if defined(_MSC_VER)","#pragma warning(pop)","#endif"],"stylingDirectives":[[],[[0,40,"pl-c"],[0,2,"pl-c"]],[[0,61,"pl-c"],[0,2,"pl-c"]],[[0,50,"pl-c"],[0,2,"pl-c"]],[[0,48,"pl-c"],[0,2,"pl-c"]],[],[[0,35,"pl-c"],[0,2,"pl-c"]],[],[[0,16,"pl-c"],[0,2,"pl-c"]],[[0,41,"pl-c"],[0,2,"pl-c"]],[[0,62,"pl-c"],[0,2,"pl-c"]],[[0,61,"pl-c"],[0,2,"pl-c"]],[[0,44,"pl-c"],[0,2,"pl-c"]],[[0,62,"pl-c"],[0,2,"pl-c"]],[],[[1,8,"pl-k"],[9,32,"pl-s"],[9,10,"pl-pds"],[31,32,"pl-pds"]],[],[],[[1,7,"pl-k"]],[[1,7,"pl-k"],[8,42,"pl-en"]],[],[],[[1,3,"pl-k"]],[],[[0,70,"pl-c"],[0,2,"pl-c"]],[[0,49,"pl-c"],[0,2,"pl-c"]],[[1,3,"pl-k"]],[[3,9,"pl-k"],[10,18,"pl-en"]],[[1,6,"pl-k"]],[[1,3,"pl-k"]],[[3,9,"pl-k"],[10,29,"pl-en"]],[[1,6,"pl-k"]],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[],[[1,6,"pl-k"],[7,41,"pl-c"],[7,9,"pl-c"]],[],[[1,6,"pl-k"],[7,44,"pl-c"],[7,9,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,23,"pl-en"]],[[8,17,"pl-k"],[18,24,"pl-en"]],[[12,51,"pl-en"],[56,63,"pl-k"]],[[10,29,"pl-c"],[10,12,"pl-c"]],[[6,28,"pl-c"],[6,8,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[[0,36,"pl-c"],[0,2,"pl-c"]],[],[],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,23,"pl-en"]],[[8,17,"pl-k"],[18,24,"pl-en"]],[[27,34,"pl-en"],[35,40,"pl-k"]],[[16,18,"pl-k"],[25,44,"pl-c1"]],[[32,38,"pl-k"]],[[28,35,"pl-c1"],[36,47,"pl-k"],[48,54,"pl-c1"]],[[20,23,"pl-k"],[25,29,"pl-k"]],[[32,41,"pl-c1"],[52,57,"pl-c1"]],[],[],[[20,24,"pl-k"],[36,77,"pl-c1"]],[[28,55,"pl-c1"]],[[28,46,"pl-c1"]],[[32,36,"pl-c1"]],[[32,36,"pl-c1"],[49,53,"pl-c1"]],[[20,24,"pl-k"],[36,79,"pl-c1"]],[[32,36,"pl-c1"],[48,52,"pl-c1"],[65,69,"pl-c1"]],[],[[20,24,"pl-k"],[53,59,"pl-k"]],[[24,30,"pl-k"]],[[28,37,"pl-c1"],[40,45,"pl-smi"]],[[32,41,"pl-c1"],[44,55,"pl-smi"]],[[32,41,"pl-c1"],[44,55,"pl-smi"]],[[34,53,"pl-smi"]],[],[],[],[[29,36,"pl-c1"],[45,49,"pl-c1"]],[[20,23,"pl-k"],[25,29,"pl-k"]],[[33,42,"pl-c1"],[44,53,"pl-c1"]],[],[],[[20,26,"pl-k"]],[[24,34,"pl-c1"]],[[24,37,"pl-c1"],[47,51,"pl-smi"]],[[24,37,"pl-c1"],[47,65,"pl-smi"]],[],[[33,49,"pl-smi"]],[],[[18,22,"pl-k"]],[],[[28,35,"pl-c1"],[36,47,"pl-k"],[48,54,"pl-c1"]],[],[[37,46,"pl-c1"],[47,48,"pl-c1"]],[[20,23,"pl-k"],[28,29,"pl-c1"]],[[20,23,"pl-k"],[25,29,"pl-k"]],[[32,41,"pl-c1"]],[],[],[],[],[[20,26,"pl-k"]],[[24,34,"pl-c1"]],[[63,66,"pl-c1"]],[[45,54,"pl-c1"],[56,57,"pl-c1"]],[[45,54,"pl-c1"],[56,57,"pl-c1"]],[[45,54,"pl-c1"],[56,57,"pl-c1"]],[[45,48,"pl-c1"]],[],[[24,27,"pl-c1"]],[],[],[],[[10,29,"pl-c"],[10,12,"pl-c"]],[[6,28,"pl-c"],[6,8,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,23,"pl-en"]],[[8,17,"pl-k"],[18,24,"pl-en"]],[[12,18,"pl-k"],[19,29,"pl-en"]],[[16,20,"pl-k"],[21,29,"pl-en"],[34,39,"pl-k"]],[],[],[[12,50,"pl-en"],[55,62,"pl-k"]],[[12,48,"pl-en"]],[[16,17,"pl-en"],[19,22,"pl-k"]],[[10,29,"pl-c"],[10,12,"pl-c"]],[[6,28,"pl-c"],[6,8,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,23,"pl-en"]],[[8,17,"pl-k"],[18,24,"pl-en"]],[[12,18,"pl-k"],[19,39,"pl-en"]],[[16,21,"pl-k"],[22,26,"pl-k"],[28,32,"pl-en"],[35,40,"pl-k"],[41,49,"pl-k"],[50,58,"pl-k"]],[],[],[[12,17,"pl-k"],[18,22,"pl-k"],[24,50,"pl-en"],[53,58,"pl-k"],[59,67,"pl-k"]],[[16,22,"pl-k"],[23,81,"pl-s"],[23,24,"pl-pds"],[80,81,"pl-pds"]],[],[],[[12,16,"pl-k"],[17,43,"pl-en"]],[[16,38,"pl-c1"]],[],[],[[10,29,"pl-c"],[10,12,"pl-c"]],[[6,28,"pl-c"],[6,8,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[[0,36,"pl-c"],[0,2,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,16,"pl-s"],[9,10,"pl-pds"],[15,16,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[],[],[[1,3,"pl-k"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[[1,6,"pl-k"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,23,"pl-en"]],[[8,17,"pl-k"],[18,24,"pl-en"]],[[12,21,"pl-k"]],[],[[16,25,"pl-k"],[26,34,"pl-k"],[41,49,"pl-k"]],[[16,22,"pl-k"]],[[16,24,"pl-en"]],[[26,34,"pl-k"],[35,38,"pl-k"]],[[26,32,"pl-k"],[33,38,"pl-k"]],[[26,32,"pl-k"],[33,38,"pl-k"]],[],[[20,24,"pl-k"],[29,40,"pl-k"],[41,47,"pl-c1"]],[[56,62,"pl-c1"],[64,68,"pl-c1"],[70,71,"pl-c1"],[77,78,"pl-c1"]],[],[],[[24,31,"pl-c1"]],[[32,38,"pl-k"]],[[30,37,"pl-c1"]],[[20,23,"pl-k"],[26,32,"pl-c1"],[37,38,"pl-c1"]],[[34,39,"pl-c1"]],[[24,27,"pl-k"],[30,36,"pl-c1"],[41,42,"pl-c1"]],[[38,47,"pl-c1"],[55,59,"pl-c1"]],[],[[24,29,"pl-k"],[30,34,"pl-k"]],[[28,37,"pl-c1"],[49,53,"pl-c1"],[67,71,"pl-c1"],[86,90,"pl-c1"]],[[28,37,"pl-c1"]],[],[[20,29,"pl-c1"],[35,40,"pl-c1"],[48,51,"pl-c1"]],[[20,26,"pl-k"]],[],[],[[16,22,"pl-k"],[23,29,"pl-k"],[30,46,"pl-en"],[57,63,"pl-k"]],[[57,63,"pl-k"]],[[48,51,"pl-k"]],[[20,26,"pl-k"],[39,44,"pl-smi"]],[[20,26,"pl-k"],[37,42,"pl-smi"]],[[20,26,"pl-k"],[41,42,"pl-c1"]],[[20,26,"pl-k"],[53,54,"pl-c1"],[62,71,"pl-c1"]],[[20,26,"pl-k"]],[[20,26,"pl-k"]],[],[[20,24,"pl-k"],[52,58,"pl-k"],[66,72,"pl-k"]],[[24,30,"pl-k"]],[[24,30,"pl-k"]],[[24,30,"pl-k"]],[[24,30,"pl-k"]],[[24,30,"pl-k"]],[[24,30,"pl-k"],[47,48,"pl-c1"]],[[24,30,"pl-k"],[31,42,"pl-k"],[43,46,"pl-k"],[50,51,"pl-c1"]],[[56,65,"pl-c1"]],[],[],[[20,24,"pl-k"],[50,56,"pl-k"]],[[24,30,"pl-k"]],[[24,30,"pl-k"]],[],[],[[20,26,"pl-k"],[39,46,"pl-c1"],[48,49,"pl-c1"]],[[39,46,"pl-c1"]],[[55,60,"pl-c1"],[62,63,"pl-c1"]],[[55,60,"pl-c1"]],[],[],[],[[16,22,"pl-k"],[23,29,"pl-k"],[30,37,"pl-en"],[39,45,"pl-k"]],[[20,78,"pl-c"],[20,22,"pl-c"]],[[20,64,"pl-c"],[20,22,"pl-c"]],[[20,26,"pl-k"]],[],[[25,28,"pl-c1"],[32,35,"pl-c1"],[46,49,"pl-c1"]],[],[[20,22,"pl-k"],[29,37,"pl-c1"]],[[32,40,"pl-c1"]],[[29,54,"pl-c1"]],[[29,53,"pl-c1"]],[[28,53,"pl-c1"]],[[28,52,"pl-c1"]],[[29,53,"pl-c1"]],[[28,53,"pl-c1"]],[[28,53,"pl-c1"]],[[29,54,"pl-c1"]],[[29,54,"pl-c1"]],[[28,53,"pl-c1"]],[[29,54,"pl-c1"]],[[29,54,"pl-c1"]],[[28,52,"pl-c1"]],[[29,54,"pl-c1"]],[[29,54,"pl-c1"]],[[28,53,"pl-c1"]],[[29,54,"pl-c1"]],[[29,54,"pl-c1"]],[[28,52,"pl-c1"]],[[29,54,"pl-c1"]],[[29,53,"pl-c1"]],[[28,50,"pl-c1"]],[[28,49,"pl-c1"]],[[22,26,"pl-k"],[27,29,"pl-k"],[36,45,"pl-c1"]],[[28,32,"pl-c1"],[40,48,"pl-c1"]],[[28,53,"pl-c1"]],[[28,53,"pl-c1"]],[[29,54,"pl-c1"]],[[28,53,"pl-c1"]],[[28,53,"pl-c1"]],[[29,53,"pl-c1"]],[[28,53,"pl-c1"]],[[28,53,"pl-c1"]],[[29,54,"pl-c1"]],[[28,53,"pl-c1"]],[[28,53,"pl-c1"]],[[29,53,"pl-c1"]],[[28,53,"pl-c1"]],[[29,53,"pl-c1"]],[[28,52,"pl-c1"]],[[29,53,"pl-c1"]],[[28,51,"pl-c1"]],[[28,49,"pl-c1"]],[[28,49,"pl-c1"]],[[22,26,"pl-k"]],[[28,32,"pl-c1"],[40,48,"pl-c1"]],[[29,54,"pl-c1"]],[[29,54,"pl-c1"]],[[28,53,"pl-c1"]],[[29,54,"pl-c1"]],[[28,53,"pl-c1"]],[[29,54,"pl-c1"]],[[28,53,"pl-c1"]],[[29,54,"pl-c1"]],[[28,53,"pl-c1"]],[[29,54,"pl-c1"]],[[28,53,"pl-c1"]],[[29,54,"pl-c1"]],[[28,53,"pl-c1"]],[[29,54,"pl-c1"]],[[29,54,"pl-c1"]],[[28,49,"pl-c1"]],[[28,49,"pl-c1"]],[],[[20,26,"pl-k"]],[],[],[[16,22,"pl-k"],[23,29,"pl-k"]],[[16,34,"pl-en"],[36,42,"pl-k"],[43,48,"pl-k"],[57,63,"pl-k"],[64,69,"pl-k"]],[[20,24,"pl-k"],[29,59,"pl-c1"]],[[20,26,"pl-k"]],[[24,39,"pl-c1"]],[],[[41,42,"pl-c1"]],[[46,52,"pl-k"],[56,62,"pl-k"]],[[45,51,"pl-k"]],[[45,51,"pl-k"]],[],[[24,35,"pl-k"],[36,42,"pl-k"]],[[20,26,"pl-k"],[27,36,"pl-c1"]],[],[],[[16,22,"pl-k"],[30,39,"pl-en"],[41,47,"pl-k"],[64,70,"pl-k"],[71,76,"pl-k"]],[[64,70,"pl-k"],[71,76,"pl-k"]],[],[],[[20,25,"pl-k"],[26,30,"pl-k"],[48,49,"pl-c1"]],[],[[28,35,"pl-c1"],[37,48,"pl-k"],[49,55,"pl-c1"]],[],[[20,23,"pl-k"],[26,30,"pl-k"]],[[24,38,"pl-c1"]],[[32,41,"pl-c1"],[43,52,"pl-c1"]],[],[],[[20,26,"pl-k"]],[],[],[],[[14,26,"pl-c"],[14,16,"pl-c"]],[[14,33,"pl-c"],[14,16,"pl-c"]],[[14,36,"pl-c"],[14,16,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,23,"pl-en"]],[[8,17,"pl-k"],[18,24,"pl-en"]],[],[[12,18,"pl-k"],[19,44,"pl-en"],[46,49,"pl-k"]],[[46,49,"pl-k"]],[[46,52,"pl-k"]],[[46,52,"pl-k"]],[[16,20,"pl-k"]],[[16,22,"pl-k"],[29,40,"pl-k"],[41,47,"pl-k"],[58,59,"pl-c1"],[68,79,"pl-k"],[80,86,"pl-k"]],[[16,19,"pl-k"],[24,35,"pl-k"],[36,39,"pl-k"]],[[16,22,"pl-k"]],[[16,32,"pl-c1"]],[[16,20,"pl-k"]],[[16,18,"pl-k"],[21,49,"pl-c1"],[54,55,"pl-c1"]],[[20,26,"pl-k"]],[],[],[[16,20,"pl-k"],[28,44,"pl-c1"],[58,59,"pl-c1"]],[[16,22,"pl-k"]],[],[],[],[[12,29,"pl-en"],[31,37,"pl-k"],[38,43,"pl-k"],[52,58,"pl-k"],[59,64,"pl-k"]],[[28,34,"pl-k"],[36,40,"pl-c1"]],[],[[16,20,"pl-k"],[26,51,"pl-c1"],[53,54,"pl-c1"],[56,57,"pl-c1"],[64,68,"pl-c1"],[77,81,"pl-c1"],[91,95,"pl-c1"]],[[16,20,"pl-k"],[26,51,"pl-c1"],[53,54,"pl-c1"],[56,57,"pl-c1"],[64,68,"pl-c1"],[77,81,"pl-c1"],[91,95,"pl-c1"]],[[16,20,"pl-k"]],[[16,20,"pl-k"],[40,41,"pl-c1"]],[[16,20,"pl-k"],[40,43,"pl-c1"]],[[16,20,"pl-k"],[40,43,"pl-c1"]],[[16,20,"pl-k"],[40,41,"pl-c1"]],[],[],[[16,19,"pl-k"]],[[20,25,"pl-k"],[26,32,"pl-k"]],[[20,22,"pl-k"]],[[28,38,"pl-smi"]],[[22,26,"pl-k"],[27,29,"pl-k"]],[[28,36,"pl-smi"]],[[22,26,"pl-k"],[27,29,"pl-k"]],[[28,39,"pl-smi"]],[[22,26,"pl-k"],[27,29,"pl-k"]],[[28,37,"pl-smi"]],[],[[24,36,"pl-smi"]],[],[[16,22,"pl-k"]],[],[],[[12,18,"pl-k"],[19,23,"pl-en"],[25,31,"pl-k"],[32,37,"pl-k"],[46,52,"pl-k"],[53,58,"pl-k"]],[[16,20,"pl-k"]],[[16,22,"pl-k"],[29,30,"pl-c1"]],[[16,21,"pl-k"]],[],[],[],[[16,22,"pl-k"],[29,40,"pl-k"],[41,47,"pl-k"]],[],[],[[12,18,"pl-k"],[19,29,"pl-en"],[31,37,"pl-k"]],[[16,22,"pl-k"],[23,32,"pl-c1"],[39,48,"pl-c1"],[50,53,"pl-c1"],[60,63,"pl-c1"]],[],[],[[12,18,"pl-k"],[19,27,"pl-en"],[28,34,"pl-k"]],[[16,22,"pl-k"],[23,30,"pl-c1"],[31,34,"pl-c1"]],[],[],[[12,18,"pl-k"],[19,34,"pl-en"],[35,41,"pl-k"]],[[16,22,"pl-k"],[23,28,"pl-k"],[29,35,"pl-k"],[47,56,"pl-c1"],[57,60,"pl-c1"]],[],[[16,22,"pl-k"],[32,35,"pl-c1"]],[[16,22,"pl-c1"],[28,29,"pl-c1"],[38,39,"pl-c1"]],[[16,18,"pl-k"],[24,25,"pl-c1"],[33,34,"pl-c1"]],[[20,26,"pl-k"]],[],[],[[26,34,"pl-c1"],[35,38,"pl-c1"]],[[16,83,"pl-c"],[16,18,"pl-c"]],[[26,35,"pl-c"],[26,28,"pl-c"],[33,35,"pl-c"]],[[16,58,"pl-c"],[16,18,"pl-c"]],[[16,22,"pl-k"]],[],[],[[21,27,"pl-k"]],[[12,21,"pl-en"],[23,29,"pl-k"]],[[23,29,"pl-k"]],[[23,29,"pl-k"]],[[30,35,"pl-k"]],[[23,29,"pl-en"],[46,52,"pl-k"],[53,58,"pl-k"],[61,67,"pl-k"],[68,73,"pl-k"]],[[16,20,"pl-k"]],[],[[16,22,"pl-k"],[31,40,"pl-c1"]],[[16,55,"pl-c"],[16,18,"pl-c"]],[[16,18,"pl-k"],[34,35,"pl-c1"]],[[20,26,"pl-k"]],[],[[30,39,"pl-c1"]],[[16,22,"pl-k"]],[[20,24,"pl-c1"],[31,35,"pl-c1"],[44,48,"pl-c1"],[58,62,"pl-c1"]],[[16,22,"pl-k"],[37,38,"pl-c1"],[52,53,"pl-c1"]],[[16,19,"pl-k"],[22,28,"pl-k"]],[[20,24,"pl-k"]],[[20,24,"pl-k"]],[[20,24,"pl-k"]],[],[],[],[],[[16,22,"pl-k"],[45,46,"pl-c1"],[49,57,"pl-c1"],[72,75,"pl-c1"]],[[16,20,"pl-k"],[25,36,"pl-k"],[37,41,"pl-k"],[53,57,"pl-c1"]],[[16,22,"pl-k"],[32,43,"pl-k"],[44,50,"pl-k"]],[[20,33,"pl-c1"],[44,49,"pl-c1"]],[[44,47,"pl-c1"]],[[44,50,"pl-k"],[57,63,"pl-k"]],[[20,31,"pl-k"],[32,38,"pl-k"]],[[16,55,"pl-c"],[16,18,"pl-c"]],[[16,18,"pl-k"],[21,49,"pl-c1"],[59,60,"pl-c1"]],[[20,26,"pl-k"]],[],[],[[16,22,"pl-k"],[30,45,"pl-c1"]],[[16,22,"pl-k"],[28,43,"pl-c1"],[47,48,"pl-c1"],[73,74,"pl-c1"]],[],[[16,20,"pl-k"],[33,39,"pl-k"],[47,51,"pl-k"]],[[20,26,"pl-k"],[27,38,"pl-c1"],[40,50,"pl-c1"]],[[40,51,"pl-k"],[52,58,"pl-k"]],[],[[16,20,"pl-k"],[40,46,"pl-k"]],[[20,26,"pl-k"],[40,41,"pl-c1"]],[],[[16,22,"pl-k"]],[[16,22,"pl-k"]],[[16,22,"pl-k"],[28,29,"pl-c1"]],[[16,22,"pl-k"],[28,29,"pl-c1"]],[[16,20,"pl-k"],[26,37,"pl-k"],[38,44,"pl-c1"],[59,63,"pl-c1"],[71,73,"pl-c1"]],[[16,20,"pl-k"]],[[20,31,"pl-k"],[32,38,"pl-c1"],[53,57,"pl-c1"],[69,70,"pl-c1"]],[],[[16,22,"pl-k"]],[],[],[[31,46,"pl-en"],[47,53,"pl-k"]],[[47,55,"pl-k"],[56,59,"pl-k"]],[[47,53,"pl-k"]],[[47,53,"pl-k"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[],[[1,3,"pl-k"]],[[16,20,"pl-k"],[36,42,"pl-c1"],[47,53,"pl-k"],[54,59,"pl-k"],[62,68,"pl-k"],[69,74,"pl-k"]],[],[[20,24,"pl-k"],[32,34,"pl-c1"]],[[20,26,"pl-k"],[27,37,"pl-c1"]],[[36,39,"pl-smi"]],[[24,28,"pl-k"],[41,49,"pl-c1"]],[[24,30,"pl-k"],[31,40,"pl-c1"]],[],[],[],[[16,20,"pl-k"],[35,43,"pl-c1"]],[[16,20,"pl-k"],[37,45,"pl-c1"]],[],[[16,20,"pl-k"],[49,52,"pl-c1"]],[[16,20,"pl-k"],[53,56,"pl-c1"]],[[1,5,"pl-k"]],[[16,20,"pl-k"],[36,42,"pl-c1"],[47,53,"pl-k"],[54,59,"pl-k"],[63,69,"pl-k"],[70,75,"pl-k"]],[],[[20,24,"pl-k"],[32,34,"pl-c1"]],[[32,35,"pl-smi"]],[[20,24,"pl-k"],[37,45,"pl-c1"]],[[20,26,"pl-k"],[27,36,"pl-c1"]],[],[],[[16,20,"pl-k"],[37,45,"pl-c1"]],[[16,20,"pl-k"],[39,47,"pl-c1"]],[[1,6,"pl-k"],[7,25,"pl-c"],[7,9,"pl-c"]],[],[[16,20,"pl-k"],[25,36,"pl-k"],[37,40,"pl-k"],[57,119,"pl-c"],[57,59,"pl-c"]],[[16,22,"pl-k"],[42,66,"pl-c1"]],[],[[16,22,"pl-k"]],[],[[10,29,"pl-c"],[10,12,"pl-c"]],[[6,28,"pl-c"],[6,8,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,16,"pl-s"],[9,10,"pl-pds"],[15,16,"pl-pds"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[],[[0,9,"pl-k"]],[],[[0,62,"pl-c"],[0,2,"pl-c"]],[[0,66,"pl-c"],[0,2,"pl-c"]],[[0,4,"pl-k"],[5,21,"pl-en"],[22,28,"pl-k"],[34,40,"pl-k"],[46,52,"pl-k"]],[[4,10,"pl-k"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,18,"pl-en"],[21,27,"pl-k"]],[[19,30,"pl-k"],[31,37,"pl-k"],[59,64,"pl-k"],[78,81,"pl-c1"]],[[8,16,"pl-en"],[18,21,"pl-c1"]],[[17,20,"pl-c1"]],[],[],[],[[11,25,"pl-en"]],[[8,14,"pl-k"],[15,21,"pl-c1"],[23,24,"pl-c1"]],[],[],[[19,27,"pl-k"],[31,36,"pl-k"]],[[8,12,"pl-k"],[13,17,"pl-smi"],[19,23,"pl-c1"]],[[13,20,"pl-smi"],[29,36,"pl-smi"]],[[8,14,"pl-k"]],[],[],[],[[16,32,"pl-en"],[35,40,"pl-k"]],[],[[15,25,"pl-s"],[15,16,"pl-pds"],[24,25,"pl-pds"],[31,55,"pl-c1"],[70,74,"pl-s"],[70,71,"pl-pds"],[73,74,"pl-pds"]],[[8,14,"pl-k"],[19,22,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,39,"pl-en"],[40,45,"pl-k"],[46,52,"pl-k"],[60,65,"pl-k"]],[[8,102,"pl-c"],[8,10,"pl-c"]],[[8,81,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-k"],[15,31,"pl-c1"]],[[15,31,"pl-c1"],[71,80,"pl-c1"],[81,91,"pl-c1"],[102,103,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,26,"pl-en"],[27,33,"pl-k"]],[[8,21,"pl-c1"],[35,36,"pl-c1"]],[[12,38,"pl-s"],[12,13,"pl-pds"],[37,38,"pl-pds"],[55,58,"pl-s"],[55,56,"pl-pds"],[57,58,"pl-pds"]],[[15,56,"pl-s"],[15,16,"pl-pds"],[55,56,"pl-pds"]],[],[],[],[[4,8,"pl-k"],[9,27,"pl-en"],[28,34,"pl-k"]],[[8,21,"pl-c1"],[36,37,"pl-c1"],[55,58,"pl-c1"]],[[12,39,"pl-s"],[12,13,"pl-pds"],[38,39,"pl-pds"],[57,60,"pl-s"],[57,58,"pl-pds"],[59,60,"pl-pds"]],[[15,53,"pl-s"],[15,16,"pl-pds"],[52,53,"pl-pds"]],[],[],[],[[0,9,"pl-k"],[10,18,"pl-en"]],[[11,19,"pl-k"],[20,22,"pl-s"],[20,21,"pl-pds"],[21,22,"pl-pds"],[25,29,"pl-k"],[30,36,"pl-k"]],[[8,14,"pl-k"],[15,21,"pl-c1"]],[],[[11,19,"pl-k"],[20,22,"pl-s"],[20,21,"pl-pds"],[21,22,"pl-pds"],[25,33,"pl-k"],[34,38,"pl-k"],[39,43,"pl-k"]],[[8,14,"pl-k"],[15,21,"pl-c1"]],[],[[2,27,"pl-c"],[2,4,"pl-c"]],[],[[62,67,"pl-k"]],[[4,10,"pl-k"],[17,25,"pl-c1"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,44,"pl-en"],[91,96,"pl-k"]],[[8,22,"pl-en"]],[[8,18,"pl-en"]],[],[[16,58,"pl-en"],[61,66,"pl-k"]],[],[[8,10,"pl-k"],[36,41,"pl-c1"]],[[12,14,"pl-k"]],[],[],[[46,49,"pl-c1"]],[],[],[[8,14,"pl-k"]],[],[],[[4,36,"pl-en"],[52,57,"pl-k"]],[],[[8,20,"pl-en"]],[],[],[[4,27,"pl-c"],[4,6,"pl-c"]],[[4,8,"pl-k"],[9,35,"pl-en"],[38,43,"pl-k"]],[[8,14,"pl-k"],[15,26,"pl-c1"],[41,51,"pl-smi"]],[],[],[[4,53,"pl-c"],[4,6,"pl-c"]],[[4,8,"pl-k"],[9,30,"pl-en"],[33,38,"pl-k"]],[[8,14,"pl-k"],[15,26,"pl-c1"],[41,51,"pl-smi"],[57,78,"pl-c1"],[87,104,"pl-smi"]],[],[],[[22,52,"pl-en"],[55,60,"pl-k"]],[[8,14,"pl-k"],[28,38,"pl-smi"]],[],[],[[4,8,"pl-k"],[9,39,"pl-en"],[42,47,"pl-k"]],[[8,14,"pl-k"],[23,41,"pl-smi"],[42,47,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,36,"pl-en"],[39,44,"pl-k"]],[[8,14,"pl-k"],[29,36,"pl-smi"],[37,42,"pl-c1"]],[],[],[[16,46,"pl-en"],[49,54,"pl-k"]],[[8,75,"pl-c"],[8,10,"pl-c"]],[[31,38,"pl-c1"],[46,64,"pl-smi"],[65,69,"pl-c1"],[74,75,"pl-c1"]],[[8,10,"pl-k"],[12,23,"pl-c1"],[31,48,"pl-smi"]],[[20,24,"pl-s"],[20,21,"pl-pds"],[23,24,"pl-pds"]],[],[[23,41,"pl-smi"]],[[8,10,"pl-k"],[12,23,"pl-c1"],[31,48,"pl-smi"]],[[20,23,"pl-s"],[20,21,"pl-pds"],[22,23,"pl-pds"]],[],[[8,14,"pl-k"]],[],[],[[16,53,"pl-en"],[56,61,"pl-k"]],[[8,10,"pl-k"],[20,29,"pl-smi"],[30,35,"pl-c1"]],[[12,18,"pl-k"],[19,30,"pl-k"],[52,70,"pl-smi"]],[],[],[[13,20,"pl-c1"],[29,38,"pl-smi"],[39,43,"pl-c1"],[55,73,"pl-smi"],[74,78,"pl-c1"],[83,84,"pl-c1"]],[[23,32,"pl-smi"]],[[16,20,"pl-s"],[16,17,"pl-pds"],[19,20,"pl-pds"]],[[23,41,"pl-smi"]],[[16,20,"pl-s"],[16,17,"pl-pds"],[19,20,"pl-pds"]],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,47,"pl-en"],[50,55,"pl-k"]],[[8,14,"pl-k"],[15,28,"pl-c1"],[34,55,"pl-c1"],[61,74,"pl-c1"]],[],[],[[16,54,"pl-en"],[57,62,"pl-k"]],[[40,61,"pl-c1"]],[[8,14,"pl-k"],[20,25,"pl-c1"]],[[18,31,"pl-c1"]],[],[],[],[[14,41,"pl-en"],[44,49,"pl-k"]],[[8,14,"pl-k"],[28,35,"pl-smi"]],[],[[19,49,"pl-en"],[52,57,"pl-k"]],[[8,14,"pl-k"],[22,30,"pl-smi"]],[],[],[[14,47,"pl-en"],[50,55,"pl-k"]],[[8,14,"pl-k"],[22,31,"pl-smi"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,13,"pl-k"]],[[8,14,"pl-k"],[15,19,"pl-k"],[20,41,"pl-en"]],[[1,3,"pl-k"]],[[12,18,"pl-k"],[19,23,"pl-c1"]],[[1,5,"pl-k"]],[[12,18,"pl-k"],[19,33,"pl-c1"],[35,47,"pl-s"],[35,36,"pl-pds"],[46,47,"pl-pds"],[53,60,"pl-c1"]],[[1,6,"pl-k"]],[],[],[[8,14,"pl-k"],[15,35,"pl-en"]],[[12,20,"pl-k"],[21,24,"pl-k"]],[],[],[],[[8,14,"pl-k"],[46,70,"pl-en"]],[[12,17,"pl-k"],[18,22,"pl-k"],[41,55,"pl-c1"],[57,75,"pl-s"],[57,58,"pl-pds"],[74,75,"pl-pds"]],[[12,17,"pl-k"],[18,22,"pl-k"],[41,55,"pl-c1"],[57,76,"pl-s"],[57,58,"pl-pds"],[75,76,"pl-pds"]],[[12,17,"pl-k"],[18,22,"pl-k"],[44,58,"pl-c1"],[60,84,"pl-s"],[60,61,"pl-pds"],[83,84,"pl-pds"]],[],[],[[12,17,"pl-k"],[18,22,"pl-k"]],[],[[12,14,"pl-k"]],[[16,66,"pl-c"],[16,18,"pl-c"]],[[16,33,"pl-c"],[16,18,"pl-c"]],[[16,20,"pl-k"],[32,37,"pl-k"],[38,42,"pl-k"]],[[20,31,"pl-c1"]],[[27,76,"pl-s"],[27,28,"pl-pds"],[75,76,"pl-pds"]],[[38,76,"pl-s"],[38,39,"pl-pds"],[73,75,"pl-cce"],[75,76,"pl-pds"]],[],[[16,18,"pl-k"]],[[20,24,"pl-c1"],[26,44,"pl-s"],[26,27,"pl-pds"],[43,44,"pl-pds"]],[],[[16,18,"pl-k"]],[[20,24,"pl-c1"],[26,45,"pl-s"],[26,27,"pl-pds"],[44,45,"pl-pds"]],[],[[16,18,"pl-k"]],[[20,24,"pl-c1"],[26,50,"pl-s"],[26,27,"pl-pds"],[49,50,"pl-pds"]],[],[[16,22,"pl-k"]],[],[],[[12,16,"pl-k"],[30,39,"pl-c1"]],[[12,14,"pl-k"]],[[16,27,"pl-c1"]],[[23,71,"pl-s"],[23,24,"pl-pds"],[70,71,"pl-pds"]],[[23,46,"pl-s"],[23,24,"pl-pds"],[43,45,"pl-cce"],[45,46,"pl-pds"]],[[16,22,"pl-k"]],[],[[12,16,"pl-k"],[30,39,"pl-c1"]],[[12,14,"pl-k"]],[[16,27,"pl-c1"]],[[23,71,"pl-s"],[23,24,"pl-pds"],[70,71,"pl-pds"]],[[42,65,"pl-s"],[42,43,"pl-pds"],[62,64,"pl-cce"],[64,65,"pl-pds"]],[[16,22,"pl-k"]],[],[],[[12,18,"pl-k"]],[],[],[],[[6,22,"pl-c"],[6,8,"pl-c"]],[],[],[[4,8,"pl-k"],[9,17,"pl-k"],[43,48,"pl-k"]],[[43,48,"pl-k"]],[[8,14,"pl-k"],[19,23,"pl-smi"],[31,35,"pl-smi"]],[[19,33,"pl-smi"],[41,55,"pl-smi"]],[[19,29,"pl-smi"],[37,47,"pl-smi"]],[[19,32,"pl-smi"],[40,53,"pl-smi"]],[],[],[[4,18,"pl-en"],[31,36,"pl-k"]],[[8,14,"pl-en"]],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,75,"pl-c"],[8,10,"pl-c"]],[[8,36,"pl-c"],[8,10,"pl-c"]],[],[[8,11,"pl-k"],[13,17,"pl-k"],[33,44,"pl-smi"]],[[19,23,"pl-c1"]],[],[[8,11,"pl-k"],[13,17,"pl-k"],[33,46,"pl-smi"]],[[19,23,"pl-c1"]],[],[],[[8,78,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"],[20,42,"pl-smi"],[43,48,"pl-c1"]],[[1,3,"pl-k"]],[[12,17,"pl-k"],[18,22,"pl-k"]],[[1,5,"pl-k"]],[[12,17,"pl-k"],[18,22,"pl-k"],[38,47,"pl-s"],[38,39,"pl-pds"],[46,47,"pl-pds"]],[[1,6,"pl-k"]],[[12,16,"pl-k"],[26,43,"pl-c1"]],[[12,25,"pl-c1"]],[[27,79,"pl-s"],[27,28,"pl-pds"],[78,79,"pl-pds"]],[[50,54,"pl-s"],[50,51,"pl-pds"],[51,53,"pl-cce"],[53,54,"pl-pds"]],[[19,41,"pl-smi"],[42,51,"pl-c1"],[53,62,"pl-c1"]],[],[],[[8,10,"pl-k"],[13,34,"pl-c1"]],[[12,28,"pl-c1"]],[],[],[[8,76,"pl-c"],[8,10,"pl-c"]],[[8,40,"pl-c"],[8,10,"pl-c"]],[[23,29,"pl-smi"],[31,53,"pl-c1"]],[[8,10,"pl-k"],[21,32,"pl-smi"],[33,38,"pl-c1"]],[[31,35,"pl-c1"]],[[12,15,"pl-k"],[18,22,"pl-k"],[23,28,"pl-k"],[50,61,"pl-smi"]],[[23,28,"pl-c1"]],[],[],[[28,36,"pl-c1"]],[],[],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,35,"pl-c"],[8,10,"pl-c"]],[[8,12,"pl-k"],[33,38,"pl-c1"]],[[8,11,"pl-k"],[14,18,"pl-k"],[19,24,"pl-k"],[48,70,"pl-smi"]],[[12,70,"pl-c"],[12,14,"pl-c"]],[[12,70,"pl-c"],[12,14,"pl-c"]],[[12,44,"pl-c"],[12,14,"pl-c"]],[[12,14,"pl-k"],[30,40,"pl-c1"],[43,47,"pl-c1"]],[[16,29,"pl-c1"]],[[31,79,"pl-s"],[31,32,"pl-pds"],[78,79,"pl-pds"]],[[31,51,"pl-s"],[31,32,"pl-pds"],[50,51,"pl-pds"]],[[36,40,"pl-c1"]],[],[],[[37,46,"pl-c1"]],[[29,33,"pl-c1"]],[[29,39,"pl-c1"],[58,68,"pl-c1"]],[[49,70,"pl-smi"]],[[29,39,"pl-c1"],[42,49,"pl-c1"],[56,73,"pl-smi"]],[[29,42,"pl-c1"]],[],[],[],[[4,19,"pl-en"],[24,31,"pl-k"]],[],[],[[4,8,"pl-k"],[9,26,"pl-en"],[29,34,"pl-k"],[46,52,"pl-k"],[60,69,"pl-smi"]],[[4,8,"pl-k"],[9,25,"pl-en"],[28,33,"pl-k"],[46,52,"pl-k"],[60,68,"pl-smi"]],[[4,8,"pl-k"],[9,30,"pl-en"],[33,38,"pl-k"],[46,52,"pl-k"],[60,73,"pl-smi"]],[[4,8,"pl-k"],[9,30,"pl-en"],[33,38,"pl-k"],[46,52,"pl-k"],[60,73,"pl-smi"]],[],[[29,34,"pl-k"],[36,58,"pl-en"],[61,66,"pl-k"],[69,75,"pl-k"],[83,94,"pl-smi"]],[[29,34,"pl-k"],[36,60,"pl-en"],[63,68,"pl-k"],[71,77,"pl-k"],[85,98,"pl-smi"]],[],[[30,35,"pl-k"],[37,61,"pl-en"],[64,69,"pl-k"]],[[8,14,"pl-k"],[22,44,"pl-smi"]],[],[],[[39,44,"pl-k"]],[[4,37,"pl-en"],[40,45,"pl-k"]],[[8,14,"pl-k"]],[],[],[[13,18,"pl-k"],[20,36,"pl-en"],[39,44,"pl-k"],[47,53,"pl-k"]],[[4,8,"pl-k"],[9,31,"pl-en"],[34,39,"pl-k"],[42,48,"pl-k"]],[],[[4,8,"pl-k"],[9,25,"pl-en"],[28,33,"pl-k"],[36,42,"pl-k"],[50,58,"pl-smi"]],[],[[4,24,"pl-c"],[4,6,"pl-c"]],[[4,8,"pl-k"],[9,28,"pl-en"],[31,36,"pl-k"],[57,63,"pl-k"],[72,79,"pl-smi"]],[[14,26,"pl-en"],[29,34,"pl-k"],[37,43,"pl-k"],[51,55,"pl-smi"],[56,61,"pl-c1"],[73,84,"pl-smi"],[94,98,"pl-smi"]],[[4,8,"pl-k"],[9,41,"pl-en"],[44,49,"pl-k"],[57,63,"pl-k"],[71,90,"pl-smi"]],[[4,8,"pl-k"],[9,43,"pl-en"],[46,51,"pl-k"]],[[8,14,"pl-k"],[26,34,"pl-smi"]],[],[[4,8,"pl-k"],[9,44,"pl-en"],[47,52,"pl-k"]],[[8,14,"pl-k"],[26,34,"pl-smi"]],[],[[4,8,"pl-k"],[9,40,"pl-en"],[43,48,"pl-k"],[57,63,"pl-k"],[71,85,"pl-smi"]],[[18,39,"pl-en"],[42,47,"pl-k"],[57,63,"pl-k"],[71,84,"pl-smi"]],[[4,10,"pl-k"],[11,30,"pl-en"],[33,38,"pl-k"],[57,63,"pl-k"],[71,82,"pl-smi"]],[[17,33,"pl-en"],[36,41,"pl-k"],[57,63,"pl-k"],[71,79,"pl-smi"]],[[4,12,"pl-c1"],[13,28,"pl-en"],[31,36,"pl-k"],[57,63,"pl-k"],[71,78,"pl-smi"]],[[4,12,"pl-k"],[13,16,"pl-k"],[17,35,"pl-en"],[38,43,"pl-k"],[57,63,"pl-k"],[71,81,"pl-smi"]],[[4,12,"pl-k"],[13,16,"pl-k"],[17,35,"pl-en"],[38,43,"pl-k"],[57,63,"pl-k"],[71,81,"pl-smi"]],[[15,40,"pl-en"],[43,48,"pl-k"],[57,63,"pl-k"],[71,88,"pl-smi"]],[[4,8,"pl-k"],[9,33,"pl-en"],[36,41,"pl-k"],[57,63,"pl-k"],[71,87,"pl-smi"]],[[4,7,"pl-k"],[8,26,"pl-en"],[29,34,"pl-k"],[57,63,"pl-k"],[71,81,"pl-smi"]],[[4,8,"pl-k"],[9,31,"pl-en"],[34,39,"pl-k"],[57,63,"pl-k"],[71,85,"pl-smi"]],[[14,31,"pl-en"],[34,39,"pl-k"],[57,63,"pl-k"],[71,80,"pl-smi"]],[],[[4,8,"pl-k"],[9,31,"pl-en"],[34,39,"pl-k"],[68,74,"pl-k"],[82,96,"pl-smi"]],[[4,8,"pl-k"],[9,36,"pl-en"],[39,44,"pl-k"],[68,74,"pl-k"],[82,101,"pl-smi"]],[[4,12,"pl-k"],[13,16,"pl-k"],[17,41,"pl-en"],[44,49,"pl-k"],[68,74,"pl-k"],[82,98,"pl-smi"]],[[4,10,"pl-k"],[11,46,"pl-en"],[49,54,"pl-k"],[68,74,"pl-k"],[82,109,"pl-smi"]],[[4,12,"pl-k"],[13,16,"pl-k"],[17,43,"pl-en"],[46,51,"pl-k"],[68,74,"pl-k"],[82,100,"pl-smi"]],[[30,57,"pl-en"],[60,65,"pl-k"],[68,74,"pl-k"],[75,100,"pl-c1"],[108,127,"pl-smi"]],[],[[4,8,"pl-k"],[9,33,"pl-en"]],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,75,"pl-c"],[8,10,"pl-c"]],[[8,69,"pl-c"],[8,10,"pl-c"]],[[8,76,"pl-c"],[8,10,"pl-c"]],[[8,43,"pl-c"],[8,10,"pl-c"]],[[8,13,"pl-k"],[14,18,"pl-k"],[37,51,"pl-c1"],[53,70,"pl-s"],[53,54,"pl-pds"],[69,70,"pl-pds"]],[],[[8,10,"pl-k"]],[[19,41,"pl-smi"],[42,51,"pl-c1"]],[[18,25,"pl-s"],[18,19,"pl-pds"],[24,25,"pl-pds"],[27,38,"pl-c1"]],[],[],[[8,13,"pl-k"],[14,18,"pl-k"],[35,49,"pl-c1"],[51,73,"pl-s"],[51,52,"pl-pds"],[72,73,"pl-pds"]],[[8,10,"pl-k"]],[[12,73,"pl-c"],[12,14,"pl-c"]],[[12,54,"pl-c"],[12,14,"pl-c"]],[[19,30,"pl-smi"],[31,36,"pl-c1"]],[[19,30,"pl-smi"],[31,40,"pl-c1"]],[],[],[[8,13,"pl-k"],[14,18,"pl-k"],[39,63,"pl-c1"]],[[8,10,"pl-k"]],[[26,27,"pl-smi"],[48,61,"pl-smi"]],[],[[12,14,"pl-k"],[19,26,"pl-c1"]],[[21,23,"pl-s"],[21,22,"pl-pds"],[22,23,"pl-pds"]],[[23,33,"pl-smi"],[55,65,"pl-smi"]],[[23,33,"pl-smi"],[55,65,"pl-smi"]],[],[],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[9,17,"pl-c1"],[18,25,"pl-en"]],[[8,14,"pl-k"],[15,32,"pl-c1"],[35,44,"pl-c1"],[48,55,"pl-c1"]],[],[],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,16,"pl-s"],[9,10,"pl-pds"],[15,16,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,80,"pl-c"],[4,6,"pl-c"]],[],[],[[4,32,"pl-en"]],[[8,14,"pl-en"]],[[15,22,"pl-smi"],[33,41,"pl-smi"],[42,45,"pl-c1"]],[[8,24,"pl-c1"],[27,44,"pl-c1"]],[],[],[[4,32,"pl-en"],[56,64,"pl-k"]],[[8,14,"pl-en"]],[[12,19,"pl-smi"],[22,26,"pl-c1"]],[],[],[[4,33,"pl-en"]],[[8,10,"pl-k"],[14,33,"pl-c1"]],[[12,28,"pl-c1"],[31,47,"pl-c1"]],[],[],[],[],[[4,22,"pl-en"]],[[39,44,"pl-k"]],[],[],[[8,23,"pl-en"]],[[8,12,"pl-k"],[28,34,"pl-c1"],[42,48,"pl-c1"]],[[12,17,"pl-k"],[35,38,"pl-s"],[35,36,"pl-pds"],[37,38,"pl-pds"],[42,49,"pl-c1"],[50,61,"pl-k"],[62,70,"pl-k"],[71,75,"pl-k"]],[],[],[[12,17,"pl-k"],[33,36,"pl-s"],[33,34,"pl-pds"],[35,36,"pl-pds"],[40,47,"pl-c1"],[48,59,"pl-k"],[60,68,"pl-k"],[69,73,"pl-k"]],[],[],[[12,18,"pl-k"],[25,31,"pl-c1"],[53,54,"pl-c1"]],[],[[8,12,"pl-k"],[26,32,"pl-c1"],[40,44,"pl-k"]],[[12,15,"pl-k"],[17,21,"pl-k"],[34,35,"pl-c1"],[47,51,"pl-c1"]],[[16,18,"pl-k"]],[[20,26,"pl-k"]],[[16,18,"pl-k"],[32,36,"pl-s"],[32,33,"pl-pds"],[33,35,"pl-cce"],[35,36,"pl-pds"]],[],[],[[12,32,"pl-c1"],[33,78,"pl-s"],[33,34,"pl-pds"],[77,78,"pl-pds"]],[],[],[[8,14,"pl-c1"],[23,24,"pl-c1"]],[[19,23,"pl-k"]],[[8,11,"pl-k"],[13,19,"pl-c1"],[26,27,"pl-c1"],[41,45,"pl-c1"]],[[12,16,"pl-k"]],[[12,18,"pl-k"]],[[12,16,"pl-k"],[17,20,"pl-s"],[17,18,"pl-pds"],[19,20,"pl-pds"]],[[12,16,"pl-k"],[17,20,"pl-s"],[17,18,"pl-pds"],[19,20,"pl-pds"]],[[12,16,"pl-k"],[17,20,"pl-s"],[17,18,"pl-pds"],[19,20,"pl-pds"]],[[12,65,"pl-c"],[12,14,"pl-c"]],[[12,68,"pl-c"],[12,14,"pl-c"]],[[0,23,"pl-c"],[0,2,"pl-c"]],[[25,29,"pl-c1"]],[[16,21,"pl-k"]],[[12,16,"pl-k"],[17,20,"pl-s"],[17,18,"pl-pds"],[19,20,"pl-pds"]],[[12,16,"pl-k"],[17,20,"pl-s"],[17,18,"pl-pds"],[19,20,"pl-pds"]],[[12,16,"pl-k"],[17,20,"pl-s"],[17,18,"pl-pds"],[19,20,"pl-pds"]],[[0,22,"pl-c"],[0,2,"pl-c"]],[[25,28,"pl-c1"]],[[16,21,"pl-k"]],[[12,16,"pl-k"],[17,20,"pl-s"],[17,18,"pl-pds"],[19,20,"pl-pds"]],[[12,16,"pl-k"],[17,21,"pl-s"],[17,18,"pl-pds"],[18,20,"pl-cce"],[20,21,"pl-pds"]],[[22,27,"pl-c1"]],[[16,21,"pl-k"]],[[12,16,"pl-k"],[17,20,"pl-s"],[17,18,"pl-pds"],[19,20,"pl-pds"]],[[16,18,"pl-k"],[45,50,"pl-c1"]],[[31,43,"pl-c1"]],[[31,35,"pl-c1"],[38,45,"pl-smi"],[48,59,"pl-k"],[73,80,"pl-c1"]],[[31,35,"pl-c1"],[38,45,"pl-smi"],[49,55,"pl-s"],[49,50,"pl-pds"],[54,55,"pl-pds"]],[],[],[[16,21,"pl-k"]],[[12,19,"pl-k"],[22,29,"pl-c"],[22,24,"pl-c"]],[],[],[[8,14,"pl-c1"],[24,29,"pl-c1"],[35,56,"pl-s"],[35,36,"pl-pds"],[55,56,"pl-pds"]],[[19,31,"pl-c1"]],[[19,23,"pl-c1"],[26,33,"pl-smi"],[36,47,"pl-k"],[61,68,"pl-c1"],[82,86,"pl-c1"],[91,92,"pl-c1"]],[[19,23,"pl-c1"],[26,33,"pl-smi"],[37,43,"pl-s"],[37,38,"pl-pds"],[42,43,"pl-pds"]],[],[[4,23,"pl-en"]],[[8,10,"pl-k"],[14,33,"pl-c1"]],[[12,18,"pl-c1"],[45,49,"pl-c1"]],[[12,15,"pl-k"],[17,23,"pl-c1"],[28,29,"pl-c1"]],[[32,48,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,31,"pl-en"],[33,39,"pl-c1"],[59,64,"pl-k"]],[[8,14,"pl-c1"],[35,39,"pl-c1"]],[[26,33,"pl-smi"]],[[24,41,"pl-c1"]],[],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,13,"pl-k"]],[],[[8,13,"pl-k"],[14,25,"pl-en"],[28,34,"pl-k"],[35,47,"pl-en"]],[],[],[],[[8,15,"pl-k"],[16,31,"pl-c"],[16,18,"pl-c"]],[[12,23,"pl-en"],[28,35,"pl-k"]],[[29,34,"pl-k"],[36,55,"pl-en"],[58,63,"pl-k"],[64,72,"pl-k"]],[[16,22,"pl-k"]],[],[[30,35,"pl-k"],[37,56,"pl-en"],[59,64,"pl-k"],[65,73,"pl-k"]],[[16,22,"pl-k"]],[],[[41,46,"pl-k"],[48,78,"pl-en"],[81,86,"pl-k"],[87,95,"pl-k"]],[[16,22,"pl-k"]],[],[[30,35,"pl-k"],[37,56,"pl-en"],[59,64,"pl-k"],[65,73,"pl-k"]],[[16,22,"pl-k"]],[],[[37,42,"pl-k"],[44,71,"pl-en"],[74,79,"pl-k"],[80,88,"pl-k"]],[[16,22,"pl-k"]],[],[],[[8,15,"pl-k"],[16,38,"pl-c"],[16,18,"pl-c"]],[[12,16,"pl-k"],[17,33,"pl-en"],[47,52,"pl-k"],[90,98,"pl-k"]],[[35,51,"pl-c1"],[59,69,"pl-c1"]],[],[[12,16,"pl-k"],[17,33,"pl-en"],[86,94,"pl-k"]],[[35,51,"pl-c1"],[53,63,"pl-c1"]],[],[[12,16,"pl-k"],[17,29,"pl-en"],[121,129,"pl-k"]],[[35,47,"pl-c1"],[49,59,"pl-c1"],[71,81,"pl-c1"]],[],[[12,16,"pl-k"],[17,35,"pl-en"],[93,101,"pl-k"]],[[46,64,"pl-c1"],[66,76,"pl-c1"]],[],[[12,16,"pl-k"],[17,33,"pl-en"],[47,52,"pl-k"],[73,78,"pl-k"],[100,105,"pl-k"],[118,126,"pl-k"]],[[35,38,"pl-c1"]],[],[[12,16,"pl-k"],[17,41,"pl-en"],[44,52,"pl-k"],[53,61,"pl-k"]],[[1,3,"pl-k"]],[[36,39,"pl-c1"],[40,62,"pl-c1"]],[[1,5,"pl-k"]],[[16,36,"pl-c1"],[37,116,"pl-s"],[37,38,"pl-pds"],[115,116,"pl-pds"]],[[1,6,"pl-k"]],[],[[40,68,"pl-en"],[71,79,"pl-k"]],[[16,22,"pl-k"]],[],[],[[8,16,"pl-k"]],[],[],[],[],[],[],[],[],[],[[4,9,"pl-k"]],[],[[17,22,"pl-k"],[24,38,"pl-en"]],[[8,14,"pl-k"],[15,40,"pl-c1"]],[],[[25,46,"pl-en"]],[[8,14,"pl-k"],[15,47,"pl-c1"]],[],[[4,8,"pl-k"],[9,16,"pl-en"]],[[8,25,"pl-c1"]],[[8,22,"pl-c1"]],[],[[16,40,"pl-en"]],[[8,14,"pl-k"],[15,29,"pl-c1"],[32,62,"pl-c1"],[65,89,"pl-c1"]],[],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,14,"pl-s"],[9,10,"pl-pds"],[13,14,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,13,"pl-k"]],[[8,14,"pl-k"],[15,24,"pl-k"],[25,28,"pl-k"],[51,53,"pl-c1"]],[[8,14,"pl-k"],[15,24,"pl-k"],[25,28,"pl-k"],[56,57,"pl-c1"]],[[8,14,"pl-k"],[15,24,"pl-k"],[25,28,"pl-k"],[55,56,"pl-c1"]],[[8,14,"pl-k"],[15,24,"pl-k"],[25,28,"pl-k"],[50,51,"pl-c1"]],[[8,14,"pl-k"],[15,24,"pl-k"],[25,28,"pl-k"],[57,58,"pl-c1"]],[[8,14,"pl-k"],[15,24,"pl-k"],[25,28,"pl-k"],[55,56,"pl-c1"]],[],[],[[26,40,"pl-en"],[53,58,"pl-k"]],[[12,16,"pl-k"],[28,49,"pl-c1"],[52,71,"pl-c1"],[74,80,"pl-c1"],[95,105,"pl-c1"]],[[12,25,"pl-c1"],[36,73,"pl-s"],[36,37,"pl-pds"],[72,73,"pl-pds"],[93,97,"pl-s"],[93,94,"pl-pds"],[94,96,"pl-cce"],[96,97,"pl-pds"]],[],[[12,18,"pl-k"]],[],[],[[26,42,"pl-en"],[50,55,"pl-k"]],[[12,14,"pl-k"],[16,37,"pl-c1"],[40,59,"pl-c1"],[62,74,"pl-c1"],[77,82,"pl-c1"]],[[31,56,"pl-c1"],[59,63,"pl-c1"],[69,70,"pl-c1"]],[[16,20,"pl-k"],[21,26,"pl-k"],[43,68,"pl-c1"],[71,72,"pl-c1"]],[[16,22,"pl-k"],[23,37,"pl-c1"]],[[25,29,"pl-smi"]],[[20,34,"pl-c1"]],[[36,46,"pl-c1"],[53,67,"pl-smi"]],[[41,51,"pl-smi"]],[[41,54,"pl-smi"]],[],[],[[12,16,"pl-k"]],[],[[12,16,"pl-k"],[17,22,"pl-k"],[36,57,"pl-c1"],[60,79,"pl-c1"],[82,94,"pl-c1"]],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"]],[[23,34,"pl-c1"],[45,51,"pl-c1"]],[],[],[[12,15,"pl-k"],[18,22,"pl-k"],[23,28,"pl-k"],[53,78,"pl-c1"]],[[23,34,"pl-c1"],[36,50,"pl-c1"]],[[33,37,"pl-smi"]],[[20,34,"pl-c1"]],[[36,46,"pl-c1"],[61,75,"pl-smi"]],[[49,59,"pl-smi"]],[[49,62,"pl-smi"]],[],[],[[12,18,"pl-k"]],[],[],[[8,13,"pl-k"],[14,23,"pl-en"]],[[8,15,"pl-k"]],[[12,20,"pl-k"],[21,30,"pl-en"],[68,73,"pl-k"]],[],[],[[34,44,"pl-c1"]],[],[[16,22,"pl-c1"],[34,42,"pl-c1"],[45,60,"pl-c1"],[63,68,"pl-c1"]],[[24,83,"pl-s"],[24,25,"pl-pds"],[82,83,"pl-pds"]],[],[[16,20,"pl-k"],[21,26,"pl-k"],[43,64,"pl-c1"]],[[16,20,"pl-k"],[21,26,"pl-k"],[49,57,"pl-c1"]],[[16,18,"pl-k"],[31,41,"pl-c1"]],[[20,23,"pl-k"],[26,30,"pl-k"],[31,36,"pl-k"]],[[24,26,"pl-k"],[35,50,"pl-c1"],[53,61,"pl-c1"]],[[36,43,"pl-c1"]],[],[],[[18,22,"pl-k"]],[],[[33,48,"pl-c1"]],[[20,23,"pl-k"],[26,30,"pl-k"],[31,36,"pl-k"]],[[32,38,"pl-c1"],[46,51,"pl-smi"],[52,57,"pl-c1"]],[[46,51,"pl-smi"],[52,55,"pl-c1"]],[],[],[],[[26,37,"pl-c1"],[57,67,"pl-c1"],[81,91,"pl-c1"]],[],[],[[19,26,"pl-en"]],[],[[16,19,"pl-k"],[21,25,"pl-k"],[26,31,"pl-k"]],[[20,22,"pl-k"],[35,43,"pl-c1"]],[[44,51,"pl-c1"]],[[20,24,"pl-k"]],[[36,44,"pl-c1"],[55,70,"pl-c1"]],[],[],[[16,19,"pl-k"],[21,25,"pl-k"],[26,31,"pl-k"]],[[20,22,"pl-k"],[30,35,"pl-smi"],[36,41,"pl-c1"]],[[47,51,"pl-c1"]],[[36,55,"pl-c1"],[63,67,"pl-smi"]],[],[],[],[[16,22,"pl-k"]],[],[],[[12,16,"pl-k"],[17,38,"pl-en"],[41,46,"pl-k"]],[[16,22,"pl-k"]],[],[],[],[[8,16,"pl-k"]],[],[[19,24,"pl-k"]],[],[[36,41,"pl-k"]],[],[[12,16,"pl-k"],[40,45,"pl-c1"]],[],[],[[8,12,"pl-k"],[13,33,"pl-en"]],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"],[40,54,"pl-c1"],[57,76,"pl-c1"],[79,90,"pl-c1"]],[[26,40,"pl-c1"]],[],[],[],[[6,23,"pl-c"],[6,8,"pl-c"]],[],[[4,20,"pl-en"]],[[8,14,"pl-k"],[15,19,"pl-k"],[42,47,"pl-c1"]],[[8,10,"pl-k"]],[[24,44,"pl-c1"],[46,100,"pl-s"],[46,47,"pl-pds"],[99,100,"pl-pds"]],[[30,51,"pl-c1"],[54,78,"pl-c1"]],[],[],[[8,70,"pl-c"],[8,10,"pl-c"]],[[1,3,"pl-k"]],[[8,13,"pl-k"],[14,18,"pl-k"],[33,47,"pl-c1"],[50,77,"pl-c1"],[80,93,"pl-c1"]],[[8,10,"pl-k"],[25,30,"pl-c1"]],[[12,18,"pl-c1"]],[[12,36,"pl-c1"],[39,48,"pl-c1"],[58,61,"pl-c1"]],[],[[34,38,"pl-c1"]],[[12,16,"pl-k"],[29,39,"pl-c1"],[41,50,"pl-s"],[41,42,"pl-pds"],[49,50,"pl-pds"]],[[12,16,"pl-k"],[30,44,"pl-c1"]],[[55,58,"pl-c1"]],[[12,16,"pl-k"],[37,48,"pl-c1"]],[[23,29,"pl-c1"],[35,68,"pl-s"],[35,36,"pl-pds"],[67,68,"pl-pds"],[72,76,"pl-s"],[72,73,"pl-pds"],[73,75,"pl-cce"],[75,76,"pl-pds"]],[[12,58,"pl-c"],[12,14,"pl-c"]],[[12,15,"pl-k"],[18,23,"pl-k"],[24,28,"pl-k"]],[[16,19,"pl-k"]],[[20,42,"pl-c1"]],[[18,23,"pl-k"],[41,46,"pl-k"]],[[31,37,"pl-c1"],[43,59,"pl-c1"],[64,68,"pl-c1"],[73,79,"pl-c1"],[80,81,"pl-c1"],[86,90,"pl-s"],[86,87,"pl-pds"],[87,89,"pl-cce"],[89,90,"pl-pds"]],[],[],[],[[1,6,"pl-k"]],[],[[30,34,"pl-c1"]],[[16,37,"pl-c1"]],[],[[4,21,"pl-en"]],[[8,22,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,26,"pl-en"],[29,34,"pl-k"]],[[8,19,"pl-c1"]],[[19,31,"pl-s"],[19,20,"pl-pds"],[20,22,"pl-cce"],[30,31,"pl-pds"],[35,49,"pl-c1"],[55,59,"pl-s"],[55,56,"pl-pds"],[56,58,"pl-cce"],[58,59,"pl-pds"]],[[28,32,"pl-s"],[28,29,"pl-pds"],[29,31,"pl-cce"],[31,32,"pl-pds"]],[[19,76,"pl-s"],[19,20,"pl-pds"],[71,75,"pl-cce"],[75,76,"pl-pds"]],[],[[4,8,"pl-k"],[9,29,"pl-en"]],[[8,19,"pl-c1"]],[[32,41,"pl-c1"],[42,44,"pl-c1"],[49,64,"pl-s"],[49,50,"pl-pds"],[63,64,"pl-pds"],[68,96,"pl-s"],[68,69,"pl-pds"],[93,95,"pl-cce"],[95,96,"pl-pds"]],[[32,41,"pl-c1"],[42,44,"pl-c1"],[49,61,"pl-s"],[49,50,"pl-pds"],[60,61,"pl-pds"],[65,82,"pl-s"],[65,66,"pl-pds"],[79,81,"pl-cce"],[81,82,"pl-pds"]],[[32,41,"pl-c1"],[42,44,"pl-c1"],[49,62,"pl-s"],[49,50,"pl-pds"],[61,62,"pl-pds"],[66,76,"pl-s"],[66,67,"pl-pds"],[73,75,"pl-cce"],[75,76,"pl-pds"]],[[32,41,"pl-c1"],[42,44,"pl-c1"],[49,60,"pl-s"],[49,50,"pl-pds"],[59,60,"pl-pds"],[64,78,"pl-c1"],[84,88,"pl-s"],[84,85,"pl-pds"],[85,87,"pl-cce"],[87,88,"pl-pds"]],[],[],[[4,7,"pl-k"],[8,33,"pl-en"],[35,38,"pl-k"],[45,49,"pl-k"],[50,55,"pl-k"],[58,63,"pl-k"]],[[8,10,"pl-k"],[37,43,"pl-k"]],[],[[8,12,"pl-k"],[28,33,"pl-c1"],[35,46,"pl-c1"]],[],[[8,10,"pl-k"]],[[12,18,"pl-c1"]],[[12,36,"pl-c1"],[39,48,"pl-c1"],[58,61,"pl-c1"]],[[12,16,"pl-k"],[29,39,"pl-c1"],[41,50,"pl-s"],[41,42,"pl-pds"],[49,50,"pl-pds"]],[[12,16,"pl-k"],[26,40,"pl-c1"],[81,84,"pl-c1"]],[],[[23,29,"pl-c1"]],[[27,38,"pl-c1"]],[[19,43,"pl-s"],[19,20,"pl-pds"],[20,22,"pl-cce"],[40,42,"pl-cce"],[42,43,"pl-pds"]],[[19,35,"pl-c1"],[44,56,"pl-c1"],[61,67,"pl-c1"],[69,70,"pl-c1"]],[[19,25,"pl-s"],[19,20,"pl-pds"],[20,24,"pl-cce"],[24,25,"pl-pds"]],[[23,29,"pl-c1"],[35,62,"pl-s"],[35,36,"pl-pds"],[57,61,"pl-cce"],[61,62,"pl-pds"]],[[12,18,"pl-k"]],[],[],[[8,10,"pl-k"],[25,33,"pl-smi"]],[[12,20,"pl-c1"]],[[8,10,"pl-k"],[25,36,"pl-smi"]],[[12,23,"pl-c1"]],[],[[17,22,"pl-c1"]],[[8,14,"pl-k"],[15,16,"pl-c1"]],[],[],[[1,3,"pl-k"]],[[4,7,"pl-k"],[8,33,"pl-en"],[35,38,"pl-k"],[45,52,"pl-k"],[53,58,"pl-k"],[61,66,"pl-k"]],[],[[8,12,"pl-k"],[26,29,"pl-k"],[30,34,"pl-k"]],[],[[8,11,"pl-k"],[14,17,"pl-k"],[22,23,"pl-c1"]],[[12,15,"pl-k"],[26,45,"pl-c1"],[56,57,"pl-c1"],[69,70,"pl-c1"],[72,79,"pl-c1"],[81,82,"pl-c1"],[84,91,"pl-c1"],[93,100,"pl-c1"]],[],[[28,31,"pl-k"],[32,36,"pl-k"]],[],[[12,31,"pl-c1"],[42,43,"pl-c1"],[55,56,"pl-c1"],[80,87,"pl-c1"],[89,96,"pl-c1"]],[],[],[[8,11,"pl-k"],[25,41,"pl-c1"]],[],[[8,11,"pl-k"],[14,17,"pl-k"],[22,23,"pl-c1"]],[[12,21,"pl-k"]],[],[[8,17,"pl-k"]],[],[[8,14,"pl-k"]],[],[[1,6,"pl-k"]],[],[[4,8,"pl-k"],[9,31,"pl-en"],[44,49,"pl-k"]],[],[[17,22,"pl-c1"]],[],[],[[4,7,"pl-k"],[8,20,"pl-en"]],[[8,10,"pl-k"],[27,42,"pl-smi"],[79,80,"pl-c1"]],[[12,23,"pl-c1"],[29,77,"pl-s"],[29,30,"pl-pds"],[74,76,"pl-cce"],[76,77,"pl-pds"]],[[12,23,"pl-k"],[24,28,"pl-k"],[30,42,"pl-c1"]],[],[[8,11,"pl-k"],[23,34,"pl-c1"]],[[8,10,"pl-k"],[27,42,"pl-smi"],[78,79,"pl-c1"]],[[12,23,"pl-c1"],[29,87,"pl-s"],[29,30,"pl-pds"],[86,87,"pl-pds"],[103,107,"pl-s"],[103,104,"pl-pds"],[104,106,"pl-cce"],[106,107,"pl-pds"]],[[12,23,"pl-k"],[24,28,"pl-k"],[30,42,"pl-c1"]],[],[[8,14,"pl-k"]],[],[],[[18,23,"pl-k"],[25,37,"pl-en"],[40,45,"pl-k"]],[[8,14,"pl-k"]],[],[[4,8,"pl-k"],[9,21,"pl-en"],[37,42,"pl-k"]],[],[],[[16,35,"pl-en"]],[[8,14,"pl-k"]],[],[[12,27,"pl-en"]],[[8,10,"pl-k"]],[],[[8,14,"pl-k"]],[],[],[[4,7,"pl-k"],[8,28,"pl-en"]],[[8,10,"pl-k"],[37,43,"pl-k"]],[],[[8,10,"pl-k"],[25,33,"pl-smi"],[50,61,"pl-smi"]],[[12,18,"pl-k"],[19,20,"pl-c1"]],[],[],[[8,10,"pl-k"],[26,36,"pl-smi"],[53,63,"pl-smi"]],[[12,23,"pl-c1"],[29,48,"pl-s"],[29,30,"pl-pds"],[47,48,"pl-pds"],[65,75,"pl-smi"]],[[29,71,"pl-s"],[29,30,"pl-pds"],[70,71,"pl-pds"]],[[42,52,"pl-smi"],[56,61,"pl-s"],[56,57,"pl-pds"],[58,60,"pl-cce"],[60,61,"pl-pds"]],[],[[12,18,"pl-k"]],[],[],[],[[12,18,"pl-c1"],[22,55,"pl-c"],[22,24,"pl-c"]],[],[[12,19,"pl-c1"]],[],[[12,14,"pl-k"],[29,44,"pl-smi"]],[[16,36,"pl-c1"]],[],[],[[12,89,"pl-c"],[12,14,"pl-c"]],[[12,36,"pl-c1"],[39,48,"pl-c1"],[58,61,"pl-c1"]],[],[[12,71,"pl-c"],[12,14,"pl-c"]],[[12,16,"pl-k"],[28,44,"pl-c1"],[54,57,"pl-c1"]],[],[[12,16,"pl-k"],[17,22,"pl-k"],[49,57,"pl-c1"],[60,75,"pl-c1"]],[[12,14,"pl-k"],[31,36,"pl-c1"]],[[16,19,"pl-k"],[22,26,"pl-k"],[27,32,"pl-k"]],[[30,51,"pl-c1"]],[],[[16,22,"pl-k"]],[],[],[],[[12,34,"pl-c"],[12,14,"pl-c"]],[[12,14,"pl-k"],[16,20,"pl-c1"]],[[16,22,"pl-k"],[23,24,"pl-c1"]],[],[],[[30,40,"pl-c1"],[61,64,"pl-c1"]],[[12,16,"pl-k"],[17,22,"pl-k"],[38,45,"pl-c1"]],[],[[12,14,"pl-k"],[23,44,"pl-c1"]],[[29,56,"pl-c1"]],[[16,44,"pl-c"],[16,18,"pl-c"]],[[16,22,"pl-k"]],[],[],[[12,14,"pl-k"],[24,33,"pl-smi"],[34,39,"pl-c1"],[45,46,"pl-c1"]],[[30,53,"pl-c1"]],[[16,22,"pl-k"]],[],[],[[12,14,"pl-k"],[24,33,"pl-smi"],[34,39,"pl-c1"],[44,45,"pl-c1"]],[[24,33,"pl-smi"],[34,39,"pl-c1"],[52,61,"pl-smi"],[62,69,"pl-smi"]],[[30,53,"pl-c1"]],[[16,22,"pl-k"]],[],[],[[12,14,"pl-k"],[24,34,"pl-smi"],[35,41,"pl-smi"],[46,52,"pl-k"]],[[12,18,"pl-k"],[19,20,"pl-c1"]],[],[],[[1,3,"pl-k"]],[[8,13,"pl-k"]],[[12,23,"pl-c1"],[32,36,"pl-c1"],[42,46,"pl-s"],[42,43,"pl-pds"],[43,45,"pl-cce"],[45,46,"pl-pds"]],[[12,18,"pl-k"]],[],[[1,6,"pl-k"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,50,"pl-en"],[51,55,"pl-k"],[56,61,"pl-k"],[70,74,"pl-k"],[75,80,"pl-k"],[102,107,"pl-k"]],[],[[12,33,"pl-c1"],[36,52,"pl-c1"]],[],[[12,114,"pl-c"],[12,14,"pl-c"]],[[12,33,"pl-c1"],[36,60,"pl-c1"]],[],[],[],[],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,13,"pl-k"]],[[8,13,"pl-k"],[36,43,"pl-c1"]],[[8,21,"pl-en"],[22,28,"pl-k"],[52,58,"pl-k"]],[[22,93,"pl-s"],[22,23,"pl-pds"],[92,93,"pl-pds"]],[],[[8,17,"pl-k"],[37,45,"pl-k"]],[[12,18,"pl-k"],[19,30,"pl-k"]],[[16,27,"pl-k"],[56,67,"pl-k"]],[],[],[],[[8,17,"pl-k"],[38,46,"pl-k"]],[[18,29,"pl-k"]],[[16,27,"pl-k"],[56,67,"pl-k"]],[],[[12,18,"pl-k"]],[],[],[[8,17,"pl-k"],[37,45,"pl-k"]],[[12,18,"pl-k"],[19,30,"pl-k"]],[[16,27,"pl-k"],[56,67,"pl-k"]],[],[],[],[[8,17,"pl-k"],[18,22,"pl-k"],[23,30,"pl-en"]],[[12,25,"pl-c1"],[26,37,"pl-k"],[88,89,"pl-c1"]],[[26,71,"pl-s"],[26,27,"pl-pds"],[70,71,"pl-pds"]],[[12,18,"pl-k"]],[],[],[[27,42,"pl-en"]],[[12,14,"pl-k"],[21,26,"pl-c1"],[36,37,"pl-c1"],[42,45,"pl-s"],[42,43,"pl-pds"],[44,45,"pl-pds"]],[[16,22,"pl-k"]],[[12,16,"pl-k"],[17,19,"pl-k"],[28,37,"pl-s"],[28,29,"pl-pds"],[36,37,"pl-pds"]],[[16,22,"pl-k"]],[[12,16,"pl-k"],[17,19,"pl-k"],[28,41,"pl-s"],[28,29,"pl-pds"],[40,41,"pl-pds"]],[[16,22,"pl-k"]],[[12,16,"pl-k"],[17,19,"pl-k"],[28,38,"pl-s"],[28,29,"pl-pds"],[37,38,"pl-pds"]],[[16,22,"pl-k"]],[[12,16,"pl-k"],[17,19,"pl-k"],[28,42,"pl-s"],[28,29,"pl-pds"],[41,42,"pl-pds"]],[[16,22,"pl-k"]],[[12,16,"pl-k"],[17,19,"pl-k"],[28,40,"pl-s"],[28,29,"pl-pds"],[39,40,"pl-pds"]],[[16,22,"pl-k"]],[[12,16,"pl-k"]],[[16,22,"pl-k"]],[],[[8,12,"pl-k"],[13,26,"pl-en"]],[[12,18,"pl-k"],[19,34,"pl-c1"]],[[23,27,"pl-c1"],[32,33,"pl-c1"]],[[20,32,"pl-c1"],[34,45,"pl-k"],[46,54,"pl-k"],[55,59,"pl-k"],[65,66,"pl-c1"]],[],[[8,12,"pl-k"],[13,34,"pl-en"],[66,71,"pl-k"]],[[12,25,"pl-c1"],[28,41,"pl-c1"]],[[26,39,"pl-s"],[26,27,"pl-pds"],[38,39,"pl-pds"],[50,71,"pl-s"],[50,51,"pl-pds"],[68,70,"pl-cce"],[70,71,"pl-pds"]],[[29,97,"pl-s"],[29,30,"pl-pds"],[94,96,"pl-cce"],[96,97,"pl-pds"]],[],[],[],[[20,35,"pl-en"]],[[12,18,"pl-k"],[19,25,"pl-c1"],[36,37,"pl-c1"]],[[12,18,"pl-k"],[19,41,"pl-s"],[19,20,"pl-pds"],[40,41,"pl-pds"],[44,58,"pl-c1"]],[],[],[[8,17,"pl-k"],[28,47,"pl-en"]],[[12,18,"pl-c1"],[38,42,"pl-c1"]],[[12,17,"pl-k"],[29,30,"pl-c1"],[53,54,"pl-c1"],[59,62,"pl-s"],[59,60,"pl-pds"],[61,62,"pl-pds"]],[],[],[[12,75,"pl-c"],[12,14,"pl-c"]],[[12,14,"pl-k"],[28,29,"pl-c1"],[34,40,"pl-k"],[41,50,"pl-c1"]],[],[],[[12,18,"pl-c1"]],[[12,17,"pl-k"],[31,32,"pl-c1"],[57,58,"pl-c1"],[63,66,"pl-s"],[63,64,"pl-pds"],[65,66,"pl-pds"],[91,92,"pl-c1"],[97,101,"pl-s"],[97,98,"pl-pds"],[98,100,"pl-cce"],[100,101,"pl-pds"]],[],[],[],[[12,18,"pl-k"],[28,34,"pl-c1"]],[],[],[[8,70,"pl-c"],[8,10,"pl-c"]],[[8,17,"pl-k"],[18,24,"pl-c1"],[25,40,"pl-en"]],[[12,41,"pl-c"],[12,14,"pl-c"]],[[12,17,"pl-k"],[18,24,"pl-c1"],[34,35,"pl-c1"],[38,39,"pl-c1"]],[[12,18,"pl-k"],[19,38,"pl-c1"],[49,53,"pl-c1"]],[],[[6,30,"pl-c"],[6,8,"pl-c"]],[],[[4,8,"pl-k"],[9,17,"pl-k"],[25,30,"pl-k"],[41,46,"pl-k"]],[],[[8,14,"pl-k"],[15,18,"pl-c1"],[24,32,"pl-smi"],[38,46,"pl-smi"]],[],[[4,8,"pl-k"],[9,17,"pl-k"],[25,30,"pl-k"],[41,46,"pl-k"]],[],[[8,14,"pl-k"],[15,18,"pl-c1"],[24,32,"pl-smi"],[38,46,"pl-smi"]],[],[],[],[[8,24,"pl-en"]],[[37,42,"pl-k"]],[[40,45,"pl-k"]],[[8,14,"pl-k"]],[],[],[[4,30,"pl-en"]],[[43,48,"pl-k"]],[[46,51,"pl-k"]],[[8,12,"pl-en"]],[[8,17,"pl-en"]],[[8,16,"pl-en"]],[],[[46,50,"pl-smi"]],[[8,67,"pl-c"],[8,10,"pl-c"]],[[8,59,"pl-c"],[8,10,"pl-c"]],[[8,12,"pl-k"],[41,45,"pl-c1"],[50,65,"pl-c1"],[76,80,"pl-smi"]],[[20,27,"pl-c1"]],[],[[8,68,"pl-c"],[8,10,"pl-c"]],[[8,59,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-c1"],[26,27,"pl-c1"]],[[8,14,"pl-c1"],[24,25,"pl-c1"]],[[8,12,"pl-k"],[21,26,"pl-c1"]],[[8,11,"pl-k"],[13,19,"pl-c1"],[26,27,"pl-c1"],[48,52,"pl-c1"]],[[12,16,"pl-k"]],[[12,14,"pl-k"],[21,24,"pl-s"],[21,22,"pl-pds"],[23,24,"pl-pds"]],[[16,29,"pl-c1"]],[],[[20,74,"pl-s"],[20,21,"pl-pds"],[73,74,"pl-pds"]],[[40,44,"pl-smi"],[48,55,"pl-s"],[48,49,"pl-pds"],[54,55,"pl-pds"]],[],[[24,28,"pl-c1"]],[],[],[[12,14,"pl-k"],[21,24,"pl-s"],[21,22,"pl-pds"],[23,24,"pl-pds"]],[[16,29,"pl-c1"]],[],[[20,71,"pl-s"],[20,21,"pl-pds"],[70,71,"pl-pds"]],[[40,44,"pl-smi"],[48,55,"pl-s"],[48,49,"pl-pds"],[54,55,"pl-pds"]],[],[[24,29,"pl-c1"]],[],[[16,22,"pl-c1"]],[],[[16,70,"pl-c"],[16,18,"pl-c"]],[[16,72,"pl-c"],[16,18,"pl-c"]],[[16,52,"pl-c"],[16,18,"pl-c"]],[[48,54,"pl-c1"],[64,65,"pl-c1"],[87,88,"pl-c1"]],[[16,29,"pl-c1"],[39,44,"pl-c1"]],[[31,81,"pl-s"],[31,32,"pl-pds"],[80,81,"pl-pds"]],[[51,55,"pl-smi"],[59,66,"pl-s"],[59,60,"pl-pds"],[65,66,"pl-pds"]],[],[],[[16,37,"pl-c1"]],[[30,45,"pl-c1"]],[[16,72,"pl-c"],[16,18,"pl-c"]],[[16,72,"pl-c"],[16,18,"pl-c"]],[[16,69,"pl-c"],[16,18,"pl-c"]],[[16,18,"pl-k"],[27,31,"pl-c1"],[36,37,"pl-c1"],[48,49,"pl-c1"],[54,57,"pl-s"],[54,55,"pl-pds"],[56,57,"pl-pds"]],[[36,42,"pl-c1"],[43,44,"pl-c1"],[53,57,"pl-c1"],[62,63,"pl-c1"]],[],[[16,72,"pl-c"],[16,18,"pl-c"]],[[16,72,"pl-c"],[16,18,"pl-c"]],[[16,28,"pl-c"],[16,18,"pl-c"]],[[16,33,"pl-c1"]],[],[],[[8,21,"pl-c1"]],[[23,76,"pl-s"],[23,24,"pl-pds"],[75,76,"pl-pds"]],[[43,47,"pl-smi"],[51,58,"pl-s"],[51,52,"pl-pds"],[57,58,"pl-pds"]],[],[],[[8,30,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"],[12,20,"pl-c1"]],[[12,29,"pl-c1"],[30,33,"pl-s"],[30,31,"pl-pds"],[32,33,"pl-pds"]],[],[],[[8,32,"pl-c"],[8,10,"pl-c"]],[[8,17,"pl-c1"],[18,23,"pl-c1"],[31,34,"pl-c1"]],[[13,18,"pl-c1"],[19,30,"pl-c1"],[31,36,"pl-c1"],[44,47,"pl-c1"]],[[19,22,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,31,"pl-en"],[34,39,"pl-k"]],[[8,14,"pl-k"],[15,22,"pl-c1"]],[],[[4,8,"pl-k"],[9,29,"pl-en"],[32,37,"pl-k"]],[[8,14,"pl-k"],[15,22,"pl-c1"]],[],[[4,8,"pl-k"],[9,31,"pl-en"],[34,39,"pl-k"]],[[8,14,"pl-k"],[15,22,"pl-c1"]],[],[[4,8,"pl-k"],[9,37,"pl-en"],[40,45,"pl-k"]],[[8,14,"pl-k"],[15,22,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,37,"pl-en"]],[[20,28,"pl-smi"],[29,32,"pl-s"],[29,30,"pl-pds"],[31,32,"pl-pds"]],[[20,39,"pl-c1"],[49,53,"pl-smi"]],[[8,25,"pl-c1"]],[],[],[[16,42,"pl-en"],[45,50,"pl-k"]],[],[[8,30,"pl-c"],[8,10,"pl-c"]],[[13,19,"pl-c1"],[32,33,"pl-c1"],[41,45,"pl-c1"]],[[8,11,"pl-k"],[13,18,"pl-k"],[19,23,"pl-k"]],[[29,37,"pl-smi"],[38,42,"pl-c1"]],[],[[12,19,"pl-c1"]],[[8,11,"pl-k"],[13,18,"pl-k"],[19,23,"pl-k"]],[[16,25,"pl-c1"],[26,29,"pl-s"],[26,27,"pl-pds"],[28,29,"pl-pds"]],[[23,31,"pl-smi"]],[[16,25,"pl-c1"],[26,29,"pl-s"],[26,27,"pl-pds"],[28,29,"pl-pds"]],[],[],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,40,"pl-en"]],[[23,26,"pl-s"],[23,24,"pl-pds"],[25,26,"pl-pds"]],[[8,13,"pl-k"],[14,18,"pl-k"],[46,50,"pl-c1"]],[],[[8,13,"pl-k"],[14,18,"pl-k"],[44,48,"pl-c1"]],[[23,26,"pl-s"],[23,24,"pl-pds"],[25,26,"pl-pds"]],[[13,25,"pl-c1"],[26,35,"pl-c1"],[48,53,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,17,"pl-k"],[33,38,"pl-k"],[58,63,"pl-k"]],[[8,74,"pl-c"],[8,10,"pl-c"]],[[8,72,"pl-c"],[8,10,"pl-c"]],[[8,45,"pl-c"],[8,10,"pl-c"]],[[8,13,"pl-k"],[14,18,"pl-k"],[33,37,"pl-smi"],[38,45,"pl-c1"],[51,55,"pl-smi"]],[[8,10,"pl-k"],[24,25,"pl-c1"]],[[12,18,"pl-k"],[29,30,"pl-c1"]],[],[[8,13,"pl-k"],[14,18,"pl-k"],[38,47,"pl-smi"],[48,55,"pl-c1"],[61,70,"pl-smi"]],[[8,10,"pl-k"],[29,30,"pl-c1"]],[[12,18,"pl-k"],[34,35,"pl-c1"]],[],[[8,14,"pl-k"],[19,23,"pl-smi"],[30,34,"pl-smi"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,30,"pl-en"],[44,49,"pl-k"]],[],[],[],[[4,31,"pl-en"],[36,43,"pl-k"]],[],[[16,21,"pl-k"],[23,46,"pl-en"],[49,54,"pl-k"]],[[8,14,"pl-k"]],[],[],[],[[4,38,"pl-en"],[52,57,"pl-k"],[77,82,"pl-k"]],[],[],[],[],[[4,8,"pl-k"],[9,39,"pl-en"],[54,59,"pl-k"],[72,77,"pl-k"]],[[8,14,"pl-k"],[33,40,"pl-c1"],[51,55,"pl-smi"]],[],[],[[4,8,"pl-k"],[9,43,"pl-en"],[65,70,"pl-k"]],[[15,18,"pl-s"],[15,16,"pl-pds"],[17,18,"pl-pds"],[22,26,"pl-c1"],[32,35,"pl-s"],[32,33,"pl-pds"],[34,35,"pl-pds"]],[],[],[],[[4,36,"pl-en"],[50,55,"pl-k"],[74,79,"pl-k"]],[],[],[],[],[[4,8,"pl-k"],[9,38,"pl-en"],[53,58,"pl-k"],[71,76,"pl-k"]],[[8,14,"pl-k"],[15,24,"pl-c1"],[26,31,"pl-c1"],[42,46,"pl-smi"]],[[26,29,"pl-c1"],[40,44,"pl-smi"]],[[26,29,"pl-c1"],[44,47,"pl-c1"],[58,62,"pl-smi"]],[],[],[[4,8,"pl-k"],[9,42,"pl-en"],[64,69,"pl-k"]],[[15,19,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,34,"pl-en"],[49,54,"pl-k"],[67,72,"pl-k"]],[[8,12,"pl-k"],[36,44,"pl-c1"]],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[25,29,"pl-c1"]],[[12,14,"pl-k"],[26,33,"pl-c1"]],[[16,22,"pl-k"],[23,28,"pl-c1"]],[],[],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[12,14,"pl-k"],[25,32,"pl-c1"]],[[16,22,"pl-k"],[23,28,"pl-c1"]],[],[],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,38,"pl-en"],[60,65,"pl-k"]],[[8,12,"pl-k"],[21,25,"pl-c1"]],[[8,11,"pl-k"],[14,18,"pl-k"],[19,24,"pl-k"]],[[12,14,"pl-k"]],[[23,26,"pl-s"],[23,24,"pl-pds"],[25,26,"pl-pds"]],[],[],[[20,25,"pl-c1"]],[],[[8,11,"pl-k"],[14,18,"pl-k"],[19,24,"pl-k"]],[[12,14,"pl-k"]],[[23,26,"pl-s"],[23,24,"pl-pds"],[25,26,"pl-pds"]],[],[],[[20,25,"pl-c1"]],[],[],[],[],[[16,43,"pl-en"],[52,57,"pl-k"]],[],[],[[8,14,"pl-k"],[20,23,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,29,"pl-en"],[32,37,"pl-k"]],[[8,14,"pl-k"],[26,31,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,26,"pl-en"],[41,46,"pl-k"],[59,64,"pl-k"]],[[8,14,"pl-k"],[15,26,"pl-c1"],[38,43,"pl-c1"],[57,60,"pl-c1"],[76,81,"pl-k"],[88,94,"pl-k"],[97,104,"pl-c1"]],[],[],[[22,47,"pl-en"],[77,82,"pl-k"],[103,108,"pl-k"],[119,124,"pl-k"]],[],[[16,23,"pl-c1"],[35,39,"pl-c1"]],[[8,11,"pl-k"],[14,18,"pl-k"],[19,24,"pl-k"]],[[39,44,"pl-k"]],[[12,15,"pl-k"],[18,22,"pl-k"],[23,28,"pl-k"]],[[16,18,"pl-k"],[21,32,"pl-c1"]],[[28,35,"pl-c1"],[42,57,"pl-c1"]],[[35,47,"pl-c1"]],[[20,29,"pl-c1"]],[[29,46,"pl-c1"]],[],[[8,14,"pl-k"]],[],[],[[4,9,"pl-k"],[35,60,"pl-en"],[63,68,"pl-k"]],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,30,"pl-en"],[52,57,"pl-k"]],[[8,12,"pl-k"],[21,25,"pl-c1"]],[[8,11,"pl-k"],[14,18,"pl-k"],[19,24,"pl-k"]],[[12,14,"pl-k"]],[[23,26,"pl-s"],[23,24,"pl-pds"],[25,26,"pl-pds"]],[],[],[[20,25,"pl-c1"]],[],[],[],[],[],[],[],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,13,"pl-k"]],[[8,14,"pl-k"],[15,19,"pl-k"],[20,51,"pl-en"]],[[12,18,"pl-k"],[72,102,"pl-c1"],[105,121,"pl-c1"],[125,130,"pl-c1"]],[],[[6,30,"pl-c"],[6,8,"pl-c"]],[],[[4,8,"pl-k"],[9,21,"pl-en"]],[[23,54,"pl-c1"]],[],[[4,8,"pl-k"],[9,37,"pl-en"],[40,45,"pl-k"]],[[8,14,"pl-k"],[15,46,"pl-c1"]],[],[[4,8,"pl-k"],[9,38,"pl-en"],[41,46,"pl-k"]],[[8,14,"pl-k"],[15,36,"pl-c1"],[39,43,"pl-c1"]],[],[[4,8,"pl-k"],[9,38,"pl-en"],[41,46,"pl-k"]],[[8,14,"pl-k"],[15,26,"pl-k"],[27,35,"pl-k"],[36,39,"pl-k"],[41,63,"pl-c1"],[66,70,"pl-c1"]],[],[[4,8,"pl-k"],[9,33,"pl-en"],[36,41,"pl-k"]],[[8,14,"pl-k"],[15,26,"pl-k"],[27,33,"pl-k"],[35,57,"pl-c1"],[61,70,"pl-c1"]],[],[],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,16,"pl-s"],[9,10,"pl-pds"],[15,16,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[0,9,"pl-k"],[10,16,"pl-en"]],[],[[4,13,"pl-k"]],[[8,13,"pl-k"],[14,17,"pl-k"],[33,36,"pl-c1"]],[],[[8,14,"pl-k"],[15,25,"pl-en"]],[[12,16,"pl-k"],[24,31,"pl-c1"]],[],[],[],[],[[12,18,"pl-k"],[24,29,"pl-en"]],[[16,19,"pl-k"],[26,27,"pl-c1"]],[[16,72,"pl-c"],[16,18,"pl-c"]],[[16,53,"pl-c"],[16,18,"pl-c"]],[[16,20,"pl-k"],[30,46,"pl-k"],[47,51,"pl-k"]],[[16,22,"pl-k"]],[],[],[],[[8,16,"pl-k"],[17,25,"pl-k"]],[[20,30,"pl-en"],[40,43,"pl-k"]],[[12,14,"pl-k"],[16,28,"pl-c1"]],[[16,22,"pl-k"],[23,28,"pl-s"],[23,24,"pl-pds"],[27,28,"pl-pds"]],[],[],[],[[19,36,"pl-c1"]],[],[],[[32,35,"pl-c1"]],[[17,23,"pl-c1"],[30,46,"pl-c1"],[47,50,"pl-s"],[47,48,"pl-pds"],[49,50,"pl-pds"]],[[12,14,"pl-k"],[49,53,"pl-c1"],[58,59,"pl-c1"]],[[16,18,"pl-k"],[28,31,"pl-s"],[28,29,"pl-pds"],[30,31,"pl-pds"]],[],[[22,28,"pl-c1"],[29,30,"pl-c1"],[36,37,"pl-c1"]],[],[[12,18,"pl-k"]],[],[[6,30,"pl-c"],[6,8,"pl-c"]],[],[[16,33,"pl-en"],[52,56,"pl-k"]],[],[[8,76,"pl-c"],[8,10,"pl-c"]],[[8,55,"pl-c"],[8,10,"pl-c"]],[[12,19,"pl-c1"],[27,31,"pl-c1"],[36,37,"pl-c1"]],[],[[8,10,"pl-k"]],[[19,22,"pl-s"],[19,20,"pl-pds"],[21,22,"pl-pds"]],[],[[19,22,"pl-s"],[19,20,"pl-pds"],[21,22,"pl-pds"]],[[12,18,"pl-k"]],[],[],[[15,18,"pl-s"],[15,16,"pl-pds"],[17,18,"pl-pds"]],[[8,11,"pl-k"],[13,17,"pl-k"]],[[12,18,"pl-k"]],[[12,16,"pl-k"],[17,21,"pl-s"],[17,18,"pl-pds"],[18,20,"pl-cce"],[20,21,"pl-pds"]],[[20,26,"pl-c1"],[27,32,"pl-s"],[27,28,"pl-pds"],[28,30,"pl-cce"],[31,32,"pl-pds"]],[[16,21,"pl-k"]],[[12,16,"pl-k"],[17,21,"pl-s"],[17,18,"pl-pds"],[18,20,"pl-cce"],[20,21,"pl-pds"]],[[20,26,"pl-c1"],[27,32,"pl-s"],[27,28,"pl-pds"],[28,30,"pl-cce"],[31,32,"pl-pds"]],[[16,21,"pl-k"]],[[12,16,"pl-k"],[17,21,"pl-s"],[17,18,"pl-pds"],[18,20,"pl-cce"],[20,21,"pl-pds"]],[[20,26,"pl-c1"],[27,32,"pl-s"],[27,28,"pl-pds"],[28,30,"pl-cce"],[31,32,"pl-pds"]],[[16,21,"pl-k"]],[[12,16,"pl-k"],[17,21,"pl-s"],[17,18,"pl-pds"],[18,20,"pl-cce"],[20,21,"pl-pds"]],[[20,26,"pl-c1"],[27,32,"pl-s"],[27,28,"pl-pds"],[28,30,"pl-cce"],[31,32,"pl-pds"]],[[16,21,"pl-k"]],[[12,19,"pl-k"]],[[20,29,"pl-c1"]],[[16,21,"pl-k"]],[],[],[[15,18,"pl-s"],[15,16,"pl-pds"],[17,18,"pl-pds"]],[],[[8,14,"pl-k"]],[],[],[[16,33,"pl-en"]],[[8,14,"pl-k"],[15,32,"pl-c1"],[41,58,"pl-c1"],[61,70,"pl-c1"],[74,88,"pl-c1"]],[],[],[[16,33,"pl-en"],[35,40,"pl-k"],[41,45,"pl-k"],[60,66,"pl-c1"]],[[8,56,"pl-c"],[8,10,"pl-c"]],[[8,11,"pl-k"],[16,17,"pl-c1"],[25,36,"pl-k"],[37,40,"pl-k"],[57,58,"pl-c1"]],[[8,10,"pl-k"],[12,29,"pl-c1"]],[[20,21,"pl-c1"]],[[25,26,"pl-c1"]],[],[],[[8,16,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"],[37,48,"pl-k"],[49,57,"pl-k"],[58,62,"pl-k"],[63,68,"pl-k"]],[],[[15,19,"pl-s"],[15,16,"pl-pds"],[18,19,"pl-pds"],[23,35,"pl-c1"],[36,39,"pl-s"],[36,37,"pl-pds"],[38,39,"pl-pds"]],[[8,11,"pl-k"]],[[20,29,"pl-c1"],[30,31,"pl-c1"],[36,47,"pl-k"],[48,56,"pl-k"]],[[7,13,"pl-k"],[18,21,"pl-c1"]],[],[[2,25,"pl-c"],[2,4,"pl-c"]],[],[],[],[[0,65,"pl-c"],[0,2,"pl-c"]],[[0,2,"pl-c"],[0,2,"pl-c"]],[[0,60,"pl-c"],[0,2,"pl-c"]],[[0,2,"pl-c"],[0,2,"pl-c"]],[[0,65,"pl-c"],[0,2,"pl-c"]],[],[[46,51,"pl-k"]],[[4,10,"pl-k"],[11,36,"pl-c1"]],[],[],[[1,6,"pl-k"]],[],[[4,10,"pl-k"],[11,36,"pl-c1"],[38,47,"pl-c1"],[53,57,"pl-c1"],[65,69,"pl-c1"]],[],[[1,6,"pl-k"]],[],[[24,28,"pl-k"],[29,34,"pl-k"],[46,50,"pl-k"],[51,56,"pl-k"]],[[4,6,"pl-k"]],[[8,14,"pl-k"],[15,40,"pl-c1"]],[[6,10,"pl-k"]],[[8,14,"pl-k"],[16,31,"pl-s"],[16,17,"pl-pds"],[30,31,"pl-pds"]],[],[],[[24,28,"pl-k"],[40,44,"pl-k"],[53,95,"pl-c"],[53,55,"pl-c"]],[[4,6,"pl-k"]],[[8,14,"pl-k"],[15,40,"pl-c1"]],[[6,10,"pl-k"]],[[8,14,"pl-k"],[16,31,"pl-s"],[16,17,"pl-pds"],[30,31,"pl-pds"]],[],[],[],[[1,6,"pl-k"]],[[47,52,"pl-k"]],[],[[6,13,"pl-c1"],[19,23,"pl-c1"]],[[4,7,"pl-k"],[9,13,"pl-k"]],[[19,23,"pl-c1"],[27,38,"pl-k"],[39,43,"pl-k"],[50,53,"pl-s"],[50,51,"pl-pds"],[52,53,"pl-pds"]],[],[[4,10,"pl-k"],[13,37,"pl-c1"]],[],[],[[2,7,"pl-k"]],[],[[4,10,"pl-k"],[38,45,"pl-c1"],[46,58,"pl-c1"]],[],[[2,7,"pl-k"]],[],[[24,31,"pl-k"],[32,37,"pl-k"],[49,56,"pl-k"],[57,62,"pl-k"]],[[4,6,"pl-k"]],[[8,14,"pl-k"],[17,41,"pl-c1"]],[[6,10,"pl-k"]],[[8,14,"pl-k"],[16,31,"pl-s"],[16,17,"pl-pds"],[30,31,"pl-pds"]],[],[],[[24,31,"pl-k"],[44,51,"pl-k"]],[[4,6,"pl-k"]],[[8,14,"pl-k"],[17,41,"pl-c1"]],[[6,10,"pl-k"]],[[8,14,"pl-k"],[16,31,"pl-s"],[16,17,"pl-pds"],[30,31,"pl-pds"]],[],[],[[1,6,"pl-k"]],[],[[1,3,"pl-k"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[4,10,"pl-k"],[13,37,"pl-c1"],[54,62,"pl-k"],[63,67,"pl-k"],[68,72,"pl-k"]],[],[[1,6,"pl-k"],[7,42,"pl-c"],[7,9,"pl-c"]],[],[[24,27,"pl-k"],[38,41,"pl-k"]],[[4,10,"pl-k"],[13,37,"pl-c1"],[38,49,"pl-k"],[50,54,"pl-k"],[55,59,"pl-k"]],[],[[24,28,"pl-k"],[39,43,"pl-k"]],[[4,10,"pl-k"],[13,37,"pl-c1"],[38,49,"pl-k"],[50,54,"pl-k"],[55,59,"pl-k"]],[],[[24,28,"pl-k"],[29,33,"pl-k"],[44,48,"pl-k"],[49,53,"pl-k"]],[],[],[[4,6,"pl-k"]],[[15,21,"pl-s"],[15,16,"pl-pds"],[20,21,"pl-pds"],[46,49,"pl-s"],[46,47,"pl-pds"],[48,49,"pl-pds"]],[],[[4,10,"pl-k"],[15,18,"pl-c1"]],[],[],[[24,32,"pl-k"],[33,36,"pl-k"],[47,55,"pl-k"],[56,59,"pl-k"]],[[4,10,"pl-k"],[13,37,"pl-c1"],[38,49,"pl-k"],[50,58,"pl-k"],[59,63,"pl-k"],[64,68,"pl-k"]],[],[[24,32,"pl-k"],[33,37,"pl-k"],[48,56,"pl-k"],[57,61,"pl-k"]],[[4,10,"pl-k"],[13,37,"pl-c1"],[38,49,"pl-k"],[50,58,"pl-k"],[59,63,"pl-k"],[64,68,"pl-k"]],[],[[24,32,"pl-k"],[33,37,"pl-k"],[38,42,"pl-k"],[53,61,"pl-k"],[62,66,"pl-k"],[67,71,"pl-k"]],[],[],[[4,6,"pl-k"]],[[15,21,"pl-s"],[15,16,"pl-pds"],[20,21,"pl-pds"],[46,49,"pl-s"],[46,47,"pl-pds"],[48,49,"pl-pds"]],[],[[4,10,"pl-k"],[15,18,"pl-c1"]],[],[],[[24,30,"pl-k"],[31,35,"pl-k"],[46,52,"pl-k"],[53,57,"pl-k"]],[[4,6,"pl-k"],[17,21,"pl-s"],[17,18,"pl-pds"],[18,20,"pl-cce"],[20,21,"pl-pds"]],[[8,14,"pl-k"],[15,22,"pl-s"],[15,16,"pl-pds"],[17,19,"pl-cce"],[21,22,"pl-pds"]],[[6,10,"pl-k"],[11,13,"pl-k"],[24,28,"pl-s"],[24,25,"pl-pds"],[25,27,"pl-cce"],[27,28,"pl-pds"]],[[8,14,"pl-k"],[15,22,"pl-s"],[15,16,"pl-pds"],[17,19,"pl-cce"],[21,22,"pl-pds"]],[[6,10,"pl-k"],[11,13,"pl-k"],[24,28,"pl-s"],[24,25,"pl-pds"],[25,27,"pl-cce"],[27,28,"pl-pds"]],[[8,14,"pl-k"],[15,22,"pl-s"],[15,16,"pl-pds"],[17,19,"pl-cce"],[21,22,"pl-pds"]],[[6,10,"pl-k"],[11,13,"pl-k"],[24,28,"pl-s"],[24,25,"pl-pds"],[25,27,"pl-cce"],[27,28,"pl-pds"]],[[8,14,"pl-k"],[15,22,"pl-s"],[15,16,"pl-pds"],[17,19,"pl-cce"],[21,22,"pl-pds"]],[[6,10,"pl-k"],[11,13,"pl-k"],[15,19,"pl-s"],[15,16,"pl-pds"],[16,18,"pl-cce"],[18,19,"pl-pds"],[40,43,"pl-s"],[40,41,"pl-pds"],[42,43,"pl-pds"]],[[8,14,"pl-k"],[17,41,"pl-c1"],[42,53,"pl-k"],[54,62,"pl-k"],[63,66,"pl-k"]],[[6,10,"pl-k"]],[[8,12,"pl-k"],[23,28,"pl-s"],[23,24,"pl-pds"],[27,28,"pl-pds"]],[[14,15,"pl-c1"]],[[8,14,"pl-k"]],[],[],[[24,28,"pl-k"],[39,43,"pl-k"]],[[4,10,"pl-k"],[13,37,"pl-c1"],[38,49,"pl-k"],[50,56,"pl-k"],[57,61,"pl-k"]],[],[[24,32,"pl-k"],[33,37,"pl-k"],[48,56,"pl-k"],[57,61,"pl-k"]],[[4,10,"pl-k"],[13,37,"pl-c1"],[38,49,"pl-k"],[50,54,"pl-k"]],[],[],[[0,3,"pl-k"],[16,21,"pl-k"],[56,61,"pl-k"]],[],[[24,29,"pl-k"],[40,45,"pl-k"]],[[4,10,"pl-k"],[11,29,"pl-c1"],[50,53,"pl-s"],[50,51,"pl-pds"],[52,53,"pl-pds"]],[],[],[[0,3,"pl-k"],[16,22,"pl-k"],[57,63,"pl-k"]],[],[[24,30,"pl-k"],[41,47,"pl-k"]],[[4,10,"pl-k"],[11,29,"pl-c1"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[19,27,"pl-k"],[39,44,"pl-k"],[54,59,"pl-k"]],[],[[13,19,"pl-smi"],[37,43,"pl-smi"]],[[13,19,"pl-smi"],[37,43,"pl-smi"]],[[13,24,"pl-smi"],[47,58,"pl-smi"]],[[13,20,"pl-smi"],[39,46,"pl-smi"]],[[8,14,"pl-k"]],[],[],[[20,28,"pl-k"],[41,46,"pl-k"]],[[24,30,"pl-smi"]],[[24,30,"pl-smi"]],[[29,40,"pl-smi"]],[[25,32,"pl-smi"]],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[],[[9,17,"pl-c1"],[18,31,"pl-en"],[34,39,"pl-k"]],[[8,14,"pl-k"]],[],[[4,8,"pl-k"],[9,26,"pl-en"],[29,34,"pl-k"]],[[8,14,"pl-k"],[25,26,"pl-c1"],[45,46,"pl-c1"],[61,62,"pl-c1"]],[],[[4,8,"pl-k"],[9,22,"pl-en"],[25,30,"pl-k"]],[[8,14,"pl-k"],[25,26,"pl-c1"]],[],[],[[19,27,"pl-k"],[39,44,"pl-k"],[54,59,"pl-k"]],[],[[13,23,"pl-smi"],[45,55,"pl-smi"]],[[13,22,"pl-smi"],[43,52,"pl-smi"]],[[8,14,"pl-k"]],[],[],[[20,28,"pl-k"],[41,46,"pl-k"]],[[28,38,"pl-smi"]],[[27,36,"pl-smi"]],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[],[[11,24,"pl-en"],[33,38,"pl-k"],[53,58,"pl-k"]],[[23,27,"pl-c1"]],[[8,10,"pl-k"],[17,27,"pl-smi"],[28,34,"pl-smi"],[37,38,"pl-c1"]],[[19,28,"pl-smi"],[29,35,"pl-smi"]],[[8,12,"pl-k"],[13,15,"pl-k"],[22,32,"pl-smi"],[33,44,"pl-smi"],[47,48,"pl-c1"]],[[19,28,"pl-smi"],[29,40,"pl-smi"]],[[8,12,"pl-k"],[13,15,"pl-k"],[23,33,"pl-smi"],[34,41,"pl-smi"],[44,45,"pl-c1"]],[[20,29,"pl-smi"],[30,37,"pl-smi"]],[[8,12,"pl-k"]],[[19,28,"pl-smi"],[29,35,"pl-smi"]],[[8,14,"pl-k"]],[],[],[],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,20,"pl-en"]],[[8,12,"pl-k"],[13,35,"pl-en"]],[],[[12,33,"pl-c1"],[36,54,"pl-c1"]],[[16,26,"pl-c1"]],[],[[6,25,"pl-c"],[6,8,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[],[[12,20,"pl-k"],[21,24,"pl-k"]],[[12,20,"pl-k"],[21,24,"pl-k"]],[[12,20,"pl-k"],[21,24,"pl-k"]],[[12,16,"pl-k"],[17,22,"pl-k"],[25,30,"pl-k"]],[[12,20,"pl-k"],[21,24,"pl-k"]],[],[[8,20,"pl-en"]],[],[],[],[],[],[[18,26,"pl-k"],[58,63,"pl-k"]],[[23,35,"pl-smi"],[39,42,"pl-s"],[39,40,"pl-pds"],[41,42,"pl-pds"]],[[23,35,"pl-smi"],[39,42,"pl-s"],[39,40,"pl-pds"],[41,42,"pl-pds"]],[[23,34,"pl-smi"]],[[8,68,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"],[20,30,"pl-smi"],[31,32,"pl-c1"]],[[18,21,"pl-s"],[18,19,"pl-pds"],[20,21,"pl-pds"],[33,43,"pl-smi"]],[[18,21,"pl-s"],[18,19,"pl-pds"],[20,21,"pl-pds"],[33,44,"pl-smi"]],[],[[8,14,"pl-k"]],[],[],[[12,17,"pl-k"],[19,33,"pl-en"]],[[8,14,"pl-k"],[23,30,"pl-smi"],[32,33,"pl-c1"],[35,36,"pl-c1"],[38,39,"pl-c1"],[41,43,"pl-s"],[41,42,"pl-pds"],[42,43,"pl-pds"],[45,46,"pl-c1"]],[[8,14,"pl-k"]],[],[],[],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,9,"pl-k"],[10,14,"pl-k"],[16,40,"pl-en"],[43,48,"pl-k"],[49,57,"pl-k"]],[[8,14,"pl-k"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,41,"pl-en"],[46,53,"pl-k"]],[],[[0,9,"pl-k"],[10,20,"pl-en"]],[],[[0,9,"pl-k"],[10,16,"pl-en"]],[],[],[[4,8,"pl-k"],[9,34,"pl-en"],[35,39,"pl-k"],[40,45,"pl-k"]],[[8,30,"pl-c1"]],[],[[2,25,"pl-c"],[2,4,"pl-c"]],[],[[4,47,"pl-en"],[52,59,"pl-k"]],[],[[23,46,"pl-en"],[87,92,"pl-k"]],[[8,14,"pl-k"],[15,31,"pl-c1"],[34,57,"pl-c1"]],[],[],[[23,45,"pl-en"]],[],[],[[8,14,"pl-k"],[15,31,"pl-c1"],[34,56,"pl-c1"]],[[37,47,"pl-c1"]],[],[],[[2,25,"pl-c"],[2,4,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,24,"pl-en"]],[[8,17,"pl-k"],[18,24,"pl-en"]],[[17,25,"pl-c1"],[26,33,"pl-en"],[38,44,"pl-k"],[45,54,"pl-c1"]],[[10,29,"pl-c"],[10,12,"pl-c"]],[],[[8,14,"pl-k"],[15,38,"pl-en"],[39,43,"pl-k"],[44,50,"pl-k"]],[[12,17,"pl-en"],[19,23,"pl-k"],[24,30,"pl-k"],[34,38,"pl-k"],[39,45,"pl-k"],[49,57,"pl-c1"]],[[16,19,"pl-en"]],[],[],[[43,47,"pl-k"],[48,54,"pl-k"]],[],[],[[32,36,"pl-k"],[37,43,"pl-k"]],[[12,16,"pl-k"],[17,23,"pl-k"],[27,31,"pl-k"],[32,38,"pl-k"],[47,55,"pl-c1"]],[[12,19,"pl-en"]],[[12,23,"pl-k"],[24,28,"pl-k"],[31,35,"pl-c1"]],[],[],[[32,36,"pl-k"],[37,43,"pl-k"],[46,70,"pl-en"]],[[12,19,"pl-k"]],[[8,12,"pl-k"],[37,41,"pl-k"],[42,48,"pl-k"]],[[40,44,"pl-c1"],[55,58,"pl-smi"]],[[12,18,"pl-k"],[19,23,"pl-c1"]],[],[[6,29,"pl-c"],[6,8,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,35,"pl-en"],[40,47,"pl-k"]],[],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,21,"pl-en"],[26,33,"pl-k"]],[],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,47,"pl-en"],[52,59,"pl-k"]],[[4,63,"pl-en"],[68,75,"pl-k"]],[],[],[],[],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,24,"pl-en"]],[],[[8,12,"pl-k"],[13,46,"pl-en"]],[[12,16,"pl-k"],[23,27,"pl-c1"]],[[12,14,"pl-k"]],[[34,39,"pl-c1"]],[],[],[[12,18,"pl-k"]],[],[],[[18,62,"pl-en"],[65,70,"pl-k"]],[[12,14,"pl-k"],[35,40,"pl-c1"]],[[36,49,"pl-c1"]],[],[[12,18,"pl-k"]],[],[],[[6,29,"pl-c"],[6,8,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,31,"pl-en"],[36,43,"pl-k"]],[[4,45,"pl-en"],[50,57,"pl-k"]],[],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,34,"pl-en"]],[[16,21,"pl-k"]],[],[],[],[[8,16,"pl-en"]],[[8,20,"pl-en"]],[[8,20,"pl-en"]],[[8,23,"pl-en"]],[],[[32,58,"pl-en"]],[[8,14,"pl-c1"]],[[8,14,"pl-k"],[15,25,"pl-c1"]],[],[[12,17,"pl-k"],[20,46,"pl-en"],[49,54,"pl-k"],[57,63,"pl-k"]],[[15,41,"pl-en"],[44,49,"pl-k"],[52,58,"pl-k"]],[],[[39,44,"pl-k"]],[[4,33,"pl-en"],[36,41,"pl-k"]],[[8,14,"pl-k"]],[],[],[[4,35,"pl-en"],[40,47,"pl-k"]],[],[[4,34,"pl-en"],[52,57,"pl-k"]],[[61,66,"pl-k"]],[[43,48,"pl-k"]],[],[[8,20,"pl-en"]],[],[],[[8,10,"pl-k"],[28,38,"pl-c1"]],[[12,47,"pl-c"],[12,14,"pl-c"]],[[12,65,"pl-c"],[12,14,"pl-c"]],[[27,34,"pl-smi"],[52,68,"pl-c1"],[88,101,"pl-c1"],[121,134,"pl-c1"]],[[20,26,"pl-smi"],[27,34,"pl-smi"],[37,48,"pl-k"],[78,88,"pl-c1"]],[],[[25,34,"pl-c1"],[36,46,"pl-c1"],[55,61,"pl-smi"]],[],[],[],[[4,30,"pl-en"]],[[40,45,"pl-k"]],[[33,39,"pl-k"]],[[33,37,"pl-k"]],[],[],[],[],[],[],[],[[4,32,"pl-en"],[48,53,"pl-k"]],[[42,47,"pl-k"]],[],[],[[35,39,"pl-k"]],[],[],[],[],[],[],[],[],[[4,30,"pl-en"],[46,51,"pl-k"]],[[27,32,"pl-k"]],[[20,24,"pl-k"]],[],[],[],[],[],[[4,35,"pl-en"],[40,47,"pl-k"]],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,39,"pl-en"],[44,51,"pl-k"]],[[4,47,"pl-en"],[52,59,"pl-k"]],[],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,41,"pl-en"],[46,53,"pl-k"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[],[],[[27,32,"pl-k"]],[],[],[],[[8,23,"pl-en"]],[],[[24,46,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,37,"pl-en"],[60,65,"pl-k"]],[[24,34,"pl-c1"]],[],[[4,8,"pl-k"],[9,40,"pl-en"]],[[24,37,"pl-c1"],[68,78,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,38,"pl-en"],[41,46,"pl-k"]],[[8,14,"pl-k"],[15,32,"pl-c1"],[35,44,"pl-c1"],[48,59,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,35,"pl-en"]],[[22,26,"pl-c1"]],[[8,10,"pl-k"],[23,39,"pl-smi"]],[],[[12,86,"pl-c"],[12,14,"pl-c"]],[[12,84,"pl-c"],[12,14,"pl-c"]],[],[[12,87,"pl-c"],[12,14,"pl-c"]],[[12,37,"pl-c1"]],[],[[8,10,"pl-k"],[23,34,"pl-smi"]],[[12,40,"pl-c1"]],[],[[8,10,"pl-k"],[24,34,"pl-smi"]],[[12,37,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,60,"pl-en"]],[[24,57,"pl-c1"],[76,107,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,58,"pl-en"]],[[24,37,"pl-c1"]],[],[[4,8,"pl-k"],[9,61,"pl-en"]],[[24,37,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,61,"pl-en"]],[[24,58,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,52,"pl-en"]],[[24,37,"pl-c1"]],[],[],[[4,85,"pl-c"],[4,6,"pl-c"]],[[4,97,"pl-c"],[4,6,"pl-c"]],[[4,8,"pl-k"],[9,33,"pl-en"],[74,79,"pl-k"]],[[8,32,"pl-c1"],[43,59,"pl-c1"]],[],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,20,"pl-en"]],[],[[8,12,"pl-k"],[13,42,"pl-en"]],[[62,67,"pl-k"]],[[12,18,"pl-k"],[19,47,"pl-c1"]],[[20,25,"pl-c1"],[33,36,"pl-c1"]],[[20,25,"pl-c1"],[33,36,"pl-c1"]],[[20,24,"pl-k"],[28,32,"pl-k"],[39,45,"pl-k"],[46,53,"pl-c1"],[61,68,"pl-c1"]],[],[],[[8,12,"pl-k"]],[[8,40,"pl-en"]],[[60,65,"pl-k"]],[[12,18,"pl-k"],[19,29,"pl-c1"]],[[20,25,"pl-c1"],[33,36,"pl-c1"]],[[20,25,"pl-c1"],[33,36,"pl-c1"]],[[20,24,"pl-k"],[28,32,"pl-k"],[39,45,"pl-k"],[46,53,"pl-c1"],[62,69,"pl-c1"]],[],[],[[6,25,"pl-c"],[6,8,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"]],[[4,8,"pl-k"],[9,20,"pl-en"],[22,26,"pl-k"]],[[8,14,"pl-k"],[20,23,"pl-s"],[20,21,"pl-pds"],[22,23,"pl-pds"]],[[1,6,"pl-k"]],[[23,26,"pl-s"],[23,24,"pl-pds"],[25,26,"pl-pds"]],[[1,6,"pl-k"]],[],[],[],[[21,33,"pl-en"]],[[8,10,"pl-k"],[21,22,"pl-c1"],[27,30,"pl-s"],[27,28,"pl-pds"],[29,30,"pl-pds"]],[[1,3,"pl-k"]],[[24,25,"pl-c1"],[30,33,"pl-s"],[30,31,"pl-pds"],[32,33,"pl-pds"]],[[1,6,"pl-k"]],[],[[12,18,"pl-k"],[27,33,"pl-c1"],[35,36,"pl-c1"],[46,50,"pl-c1"]],[],[],[[8,14,"pl-k"]],[],[],[[4,10,"pl-k"],[11,17,"pl-c1"],[18,38,"pl-en"]],[[8,12,"pl-k"],[32,36,"pl-k"]],[[12,18,"pl-k"],[24,27,"pl-s"],[24,25,"pl-pds"],[26,27,"pl-pds"],[36,39,"pl-s"],[36,37,"pl-pds"],[38,39,"pl-pds"],[48,51,"pl-s"],[48,49,"pl-pds"],[50,51,"pl-pds"]],[],[[8,14,"pl-c1"],[21,22,"pl-c1"]],[[8,13,"pl-k"],[24,28,"pl-c1"]],[[12,14,"pl-k"],[16,28,"pl-c1"],[41,47,"pl-k"]],[],[],[],[[8,14,"pl-k"]],[],[],[[2,14,"pl-c"],[2,4,"pl-c"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,19,"pl-en"]],[[8,17,"pl-k"],[18,24,"pl-en"]],[],[[12,16,"pl-k"],[17,40,"pl-en"]],[[30,35,"pl-c1"]],[],[[16,41,"pl-c"],[16,18,"pl-c"]],[[16,21,"pl-k"],[43,48,"pl-c1"]],[],[],[],[[16,18,"pl-k"]],[],[[20,22,"pl-k"],[25,36,"pl-c1"],[43,44,"pl-c1"]],[[24,28,"pl-k"],[44,64,"pl-c1"]],[[24,26,"pl-k"]],[[42,51,"pl-c1"]],[],[[39,45,"pl-c1"],[47,48,"pl-c1"]],[[42,51,"pl-c1"]],[],[[39,45,"pl-c1"],[62,63,"pl-c1"],[70,74,"pl-c1"]],[[26,30,"pl-k"]],[[28,30,"pl-k"],[38,42,"pl-c1"],[47,48,"pl-c1"],[57,58,"pl-c1"],[63,66,"pl-s"],[63,64,"pl-pds"],[65,66,"pl-pds"],[75,79,"pl-c1"],[84,85,"pl-c1"]],[[32,78,"pl-c"],[32,34,"pl-c"]],[[32,35,"pl-k"],[38,44,"pl-c1"],[49,50,"pl-c1"],[61,65,"pl-c1"]],[[50,59,"pl-c1"]],[],[[47,53,"pl-c1"],[58,59,"pl-c1"]],[],[[30,34,"pl-k"]],[[46,55,"pl-c1"]],[],[],[],[[22,26,"pl-k"]],[[38,47,"pl-c1"]],[],[],[],[],[],[[12,36,"pl-en"],[43,48,"pl-k"]],[[16,27,"pl-en"]],[],[[12,36,"pl-en"]],[[16,18,"pl-en"]],[[16,26,"pl-c1"]],[],[],[[38,46,"pl-k"]],[[16,18,"pl-k"],[35,39,"pl-c1"],[45,46,"pl-c1"]],[[34,39,"pl-c1"],[55,60,"pl-c1"]],[[18,22,"pl-k"]],[[20,22,"pl-k"]],[],[[20,30,"pl-c1"]],[],[[16,22,"pl-k"],[24,28,"pl-c1"]],[],[],[[25,36,"pl-en"],[50,55,"pl-k"]],[],[],[[16,22,"pl-k"],[23,39,"pl-c1"]],[],[],[[25,36,"pl-en"],[50,55,"pl-k"]],[[38,42,"pl-k"]],[[36,43,"pl-c1"]],[],[[16,18,"pl-k"],[30,33,"pl-s"],[30,31,"pl-pds"],[32,33,"pl-pds"],[46,49,"pl-s"],[46,47,"pl-pds"],[48,49,"pl-pds"],[62,68,"pl-s"],[62,63,"pl-pds"],[67,68,"pl-pds"]],[[30,35,"pl-s"],[30,31,"pl-pds"],[34,35,"pl-pds"],[48,52,"pl-s"],[48,49,"pl-pds"],[51,52,"pl-pds"]],[[29,33,"pl-c1"]],[[18,22,"pl-k"],[23,25,"pl-k"],[37,40,"pl-s"],[37,38,"pl-pds"],[39,40,"pl-pds"],[53,56,"pl-s"],[53,54,"pl-pds"],[55,56,"pl-pds"],[69,76,"pl-s"],[69,70,"pl-pds"],[75,76,"pl-pds"]],[[37,41,"pl-s"],[37,38,"pl-pds"],[40,41,"pl-pds"],[54,59,"pl-s"],[54,55,"pl-pds"],[58,59,"pl-pds"]],[[29,34,"pl-c1"]],[[18,22,"pl-k"]],[[20,26,"pl-k"],[27,53,"pl-c1"]],[[24,75,"pl-s"],[24,25,"pl-pds"],[74,75,"pl-pds"]],[[33,37,"pl-s"],[33,34,"pl-pds"],[34,36,"pl-cce"],[36,37,"pl-pds"]],[],[[16,22,"pl-k"],[23,39,"pl-c1"]],[],[],[[12,18,"pl-c1"],[19,42,"pl-en"],[45,50,"pl-k"],[53,59,"pl-k"],[60,61,"pl-c1"]],[],[[32,49,"pl-en"],[56,61,"pl-k"],[70,75,"pl-k"]],[[16,22,"pl-k"],[23,28,"pl-c1"],[30,41,"pl-k"],[60,67,"pl-c1"],[72,83,"pl-c1"]],[],[],[[12,34,"pl-en"]],[],[[16,22,"pl-en"]],[],[[25,46,"pl-en"],[48,52,"pl-k"]],[],[[16,22,"pl-k"],[23,39,"pl-c1"]],[],[],[[12,35,"pl-en"],[40,47,"pl-k"]],[],[[12,16,"pl-k"],[17,38,"pl-en"],[41,46,"pl-k"],[49,55,"pl-k"],[56,61,"pl-c1"]],[],[[12,16,"pl-k"],[17,33,"pl-en"],[36,41,"pl-k"],[44,50,"pl-k"],[51,56,"pl-c1"]],[],[[12,16,"pl-k"],[17,41,"pl-en"],[44,49,"pl-k"],[52,58,"pl-k"],[59,63,"pl-c1"]],[],[[2,21,"pl-c"],[2,4,"pl-c"]],[],[[36,46,"pl-en"],[59,64,"pl-k"]],[[75,80,"pl-k"]],[[12,16,"pl-k"],[36,44,"pl-c1"]],[[12,14,"pl-k"]],[[16,22,"pl-k"],[23,50,"pl-c1"]],[],[[12,16,"pl-k"]],[[12,14,"pl-k"],[22,26,"pl-smi"]],[[16,22,"pl-k"],[23,54,"pl-c1"],[55,73,"pl-c1"]],[[46,56,"pl-c1"]],[],[[12,18,"pl-c1"],[27,33,"pl-c1"]],[[12,16,"pl-k"]],[[16,27,"pl-k"],[62,65,"pl-c1"]],[],[[12,16,"pl-k"],[36,44,"pl-c1"],[45,56,"pl-k"],[76,81,"pl-smi"]],[[12,14,"pl-k"]],[[16,22,"pl-k"],[23,50,"pl-c1"]],[[12,16,"pl-k"]],[[16,22,"pl-k"],[23,54,"pl-c1"]],[[20,38,"pl-c1"]],[[40,50,"pl-c1"]],[],[],[[8,16,"pl-en"],[17,21,"pl-k"]],[[12,25,"pl-en"]],[],[[28,47,"pl-en"],[50,55,"pl-k"]],[],[[12,16,"pl-k"],[25,29,"pl-c1"]],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"]],[[16,18,"pl-k"]],[[28,33,"pl-c1"]],[[16,20,"pl-k"]],[[27,31,"pl-s"],[27,28,"pl-pds"],[30,31,"pl-pds"]],[],[],[[12,14,"pl-k"],[24,29,"pl-c1"]],[[23,27,"pl-s"],[23,24,"pl-pds"],[26,27,"pl-pds"],[41,44,"pl-s"],[41,42,"pl-pds"],[43,44,"pl-pds"]],[[12,18,"pl-k"],[25,28,"pl-c1"]],[],[],[[8,12,"pl-k"],[13,25,"pl-en"],[46,51,"pl-k"]],[[12,16,"pl-k"],[35,47,"pl-c1"]],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"]],[[16,18,"pl-k"],[20,32,"pl-c1"]],[[20,26,"pl-k"],[27,31,"pl-c1"]],[],[[12,18,"pl-k"],[19,24,"pl-c1"]],[],[],[[36,46,"pl-en"],[59,64,"pl-k"]],[[67,72,"pl-k"]],[[12,16,"pl-k"],[36,44,"pl-c1"]],[[12,14,"pl-k"]],[[16,22,"pl-k"],[23,50,"pl-c1"]],[],[[12,14,"pl-k"]],[[24,28,"pl-smi"]],[[16,20,"pl-k"],[21,26,"pl-k"]],[[16,18,"pl-k"],[20,27,"pl-c1"],[34,39,"pl-smi"]],[[20,22,"pl-k"],[31,37,"pl-c1"]],[[24,28,"pl-k"]],[[28,39,"pl-k"]],[[38,41,"pl-c1"]],[[24,28,"pl-k"],[47,54,"pl-c1"],[55,59,"pl-c1"]],[[24,26,"pl-k"]],[[28,34,"pl-k"],[35,62,"pl-c1"]],[[24,26,"pl-k"],[35,40,"pl-c1"]],[],[[28,34,"pl-k"],[35,66,"pl-c1"],[67,85,"pl-c1"]],[[39,44,"pl-c1"],[48,58,"pl-c1"]],[[22,26,"pl-k"]],[[24,28,"pl-k"]],[[28,39,"pl-k"]],[[38,41,"pl-c1"]],[],[[24,26,"pl-k"]],[[28,34,"pl-k"],[35,76,"pl-c1"]],[[32,62,"pl-s"],[32,33,"pl-pds"],[61,62,"pl-pds"]],[[38,43,"pl-smi"]],[[24,28,"pl-k"],[29,34,"pl-k"]],[[24,26,"pl-k"],[37,41,"pl-smi"]],[[28,34,"pl-k"],[35,76,"pl-c1"]],[[32,62,"pl-s"],[32,33,"pl-pds"],[61,62,"pl-pds"]],[[38,43,"pl-smi"]],[[24,29,"pl-k"],[30,34,"pl-k"],[54,62,"pl-c1"],[63,74,"pl-k"],[97,102,"pl-smi"]],[[24,26,"pl-k"]],[[28,34,"pl-k"],[35,62,"pl-c1"]],[[24,26,"pl-k"],[35,40,"pl-c1"]],[],[[28,34,"pl-k"],[35,66,"pl-c1"],[67,85,"pl-c1"]],[[39,44,"pl-c1"],[48,58,"pl-c1"]],[],[[20,26,"pl-k"],[27,58,"pl-c1"],[59,77,"pl-c1"]],[[50,60,"pl-c1"]],[],[],[[12,18,"pl-k"],[19,50,"pl-c1"]],[[16,34,"pl-c1"],[61,71,"pl-c1"]],[],[],[[23,36,"pl-en"],[39,44,"pl-k"]],[[12,14,"pl-k"],[27,32,"pl-c1"]],[[16,22,"pl-k"],[23,49,"pl-c1"],[50,78,"pl-s"],[50,51,"pl-pds"],[77,78,"pl-pds"]],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"]],[[16,18,"pl-k"],[25,30,"pl-c1"]],[[20,26,"pl-k"],[27,53,"pl-c1"]],[[24,53,"pl-s"],[24,25,"pl-pds"],[52,53,"pl-pds"]],[[1,6,"pl-k"]],[[16,18,"pl-k"],[25,26,"pl-c1"],[31,34,"pl-s"],[31,32,"pl-pds"],[33,34,"pl-pds"],[43,44,"pl-c1"],[49,52,"pl-s"],[49,50,"pl-pds"],[51,52,"pl-pds"]],[[20,26,"pl-k"],[27,53,"pl-c1"]],[[24,64,"pl-s"],[24,25,"pl-pds"],[63,64,"pl-pds"]],[[1,5,"pl-k"]],[[16,18,"pl-k"],[25,26,"pl-c1"],[31,34,"pl-s"],[31,32,"pl-pds"],[33,34,"pl-pds"]],[[20,26,"pl-k"],[27,53,"pl-c1"]],[[24,57,"pl-s"],[24,25,"pl-pds"],[56,57,"pl-pds"]],[[1,6,"pl-k"]],[],[[12,18,"pl-k"],[19,42,"pl-c1"]],[],[],[[8,24,"pl-en"]],[[12,18,"pl-en"],[49,63,"pl-s"],[49,50,"pl-pds"],[62,63,"pl-pds"]],[],[[8,24,"pl-en"]],[],[],[],[],[[12,26,"pl-en"],[39,44,"pl-k"]],[[55,60,"pl-k"]],[[12,18,"pl-k"],[19,50,"pl-c1"]],[[16,34,"pl-c1"],[61,71,"pl-c1"]],[],[],[[21,33,"pl-en"],[46,51,"pl-k"]],[[12,16,"pl-k"],[37,49,"pl-c1"],[50,55,"pl-s"],[50,51,"pl-pds"],[51,53,"pl-cce"],[54,55,"pl-pds"]],[[12,16,"pl-k"]],[],[[26,32,"pl-c1"],[45,46,"pl-c1"]],[],[],[[12,14,"pl-k"]],[[16,22,"pl-k"],[30,38,"pl-c1"]],[[12,16,"pl-k"]],[[16,22,"pl-k"],[23,39,"pl-c1"]],[],[],[],[],[],[[24,32,"pl-k"],[43,48,"pl-k"]],[[22,28,"pl-c1"],[40,43,"pl-c1"]],[[36,45,"pl-smi"],[46,51,"pl-c1"]],[[36,45,"pl-smi"],[46,49,"pl-c1"]],[[19,25,"pl-c1"]],[[23,26,"pl-c1"],[36,42,"pl-smi"],[43,48,"pl-c1"],[58,64,"pl-smi"],[65,68,"pl-c1"]],[[12,18,"pl-k"],[20,24,"pl-c1"]],[],[],[[41,63,"pl-en"],[66,71,"pl-k"]],[],[[17,24,"pl-c1"],[36,40,"pl-c1"]],[[12,15,"pl-k"],[18,22,"pl-k"],[23,28,"pl-k"]],[[21,30,"pl-c1"],[33,47,"pl-c1"]],[],[[12,18,"pl-k"]],[],[],[[8,12,"pl-k"],[13,34,"pl-en"],[55,60,"pl-k"]],[[12,14,"pl-k"],[28,32,"pl-c1"],[35,40,"pl-c1"]],[[22,32,"pl-s"],[22,23,"pl-pds"],[29,31,"pl-cce"],[31,32,"pl-pds"]],[[22,26,"pl-s"],[22,23,"pl-pds"],[25,26,"pl-pds"],[40,44,"pl-c1"],[50,53,"pl-s"],[50,51,"pl-pds"],[52,53,"pl-pds"]],[[16,20,"pl-k"],[32,36,"pl-c1"],[46,50,"pl-c1"]],[[16,19,"pl-k"],[22,26,"pl-k"],[27,32,"pl-k"]],[[20,22,"pl-k"]],[[32,37,"pl-c1"]],[[20,24,"pl-k"]],[[30,33,"pl-s"],[30,31,"pl-pds"],[32,33,"pl-pds"]],[[20,22,"pl-k"],[29,39,"pl-c1"]],[[30,33,"pl-s"],[30,31,"pl-pds"],[32,33,"pl-pds"]],[[35,40,"pl-c1"]],[],[[26,29,"pl-s"],[26,27,"pl-pds"],[28,29,"pl-pds"],[37,41,"pl-c1"],[47,50,"pl-s"],[47,48,"pl-pds"],[49,50,"pl-pds"]],[[20,22,"pl-k"],[29,40,"pl-c1"],[46,47,"pl-c1"]],[[30,37,"pl-s"],[30,31,"pl-pds"],[36,37,"pl-pds"]],[],[[16,18,"pl-k"]],[[26,29,"pl-s"],[26,27,"pl-pds"],[28,29,"pl-pds"]],[[16,18,"pl-k"],[32,37,"pl-c1"]],[[26,36,"pl-s"],[26,27,"pl-pds"],[35,36,"pl-pds"]],[[22,48,"pl-s"],[22,23,"pl-pds"],[23,27,"pl-cce"],[45,47,"pl-cce"],[47,48,"pl-pds"]],[],[],[[12,16,"pl-k"],[24,38,"pl-c1"]],[[12,18,"pl-c1"]],[[12,18,"pl-c1"],[30,31,"pl-c1"]],[[12,15,"pl-k"],[18,22,"pl-k"],[23,28,"pl-k"]],[[56,60,"pl-smi"],[61,65,"pl-c1"],[70,71,"pl-c1"]],[],[[62,63,"pl-c1"]],[],[[12,15,"pl-k"],[18,22,"pl-k"]],[[16,20,"pl-k"],[27,43,"pl-c1"],[45,55,"pl-c1"],[61,65,"pl-smi"]],[[32,37,"pl-c1"]],[[32,38,"pl-c1"],[40,41,"pl-c1"]],[[27,43,"pl-c1"],[45,46,"pl-c1"]],[[27,43,"pl-c1"],[45,56,"pl-k"],[75,87,"pl-smi"]],[[32,37,"pl-c1"],[54,55,"pl-c1"]],[[29,33,"pl-s"],[29,30,"pl-pds"],[30,32,"pl-cce"],[32,33,"pl-pds"]],[],[],[],[[23,39,"pl-en"],[42,47,"pl-k"]],[[12,15,"pl-k"],[18,22,"pl-k"],[23,28,"pl-k"]],[[16,20,"pl-k"],[34,42,"pl-c1"]],[[16,18,"pl-k"]],[[20,26,"pl-k"]],[],[[12,15,"pl-k"],[18,22,"pl-k"],[23,28,"pl-k"]],[[16,20,"pl-k"],[34,42,"pl-c1"]],[[16,18,"pl-k"]],[[20,26,"pl-k"]],[],[[12,18,"pl-k"],[19,37,"pl-c1"]],[],[],[],[[8,21,"pl-en"],[35,40,"pl-k"]],[[52,57,"pl-k"]],[],[[12,18,"pl-k"],[19,29,"pl-en"]],[[27,32,"pl-k"],[43,50,"pl-c1"]],[[16,22,"pl-c1"],[31,32,"pl-c1"]],[],[],[[23,30,"pl-c1"],[42,46,"pl-c1"],[58,62,"pl-c1"]],[[12,15,"pl-k"],[18,22,"pl-k"],[23,28,"pl-k"]],[[27,36,"pl-c1"],[46,47,"pl-c1"]],[],[[12,15,"pl-k"],[18,22,"pl-k"],[23,28,"pl-k"]],[[27,36,"pl-c1"],[46,47,"pl-c1"]],[],[],[[22,25,"pl-c1"]],[],[[12,16,"pl-k"],[26,57,"pl-c1"]],[[16,34,"pl-c1"],[62,72,"pl-c1"]],[[12,17,"pl-k"],[27,32,"pl-c1"],[35,50,"pl-c1"]],[[16,20,"pl-k"],[35,40,"pl-c1"]],[],[[16,19,"pl-k"],[22,26,"pl-k"]],[[20,22,"pl-k"],[35,41,"pl-smi"],[43,54,"pl-c1"],[60,61,"pl-c1"]],[[35,40,"pl-smi"],[53,59,"pl-smi"],[61,72,"pl-c1"]],[[43,49,"pl-smi"],[51,56,"pl-c1"]],[[37,47,"pl-c1"],[56,61,"pl-c1"],[64,79,"pl-c1"]],[[24,26,"pl-k"]],[[28,34,"pl-k"]],[[24,26,"pl-k"],[36,41,"pl-c1"],[44,48,"pl-c1"]],[],[[42,46,"pl-c1"]],[[40,45,"pl-smi"]],[[28,33,"pl-k"]],[],[],[],[],[[16,18,"pl-k"],[28,33,"pl-c1"],[36,40,"pl-c1"]],[[20,26,"pl-k"]],[[16,18,"pl-k"]],[[20,26,"pl-k"],[27,68,"pl-c1"]],[[24,46,"pl-s"],[24,25,"pl-pds"],[45,46,"pl-pds"]],[[31,36,"pl-c1"],[39,54,"pl-c1"],[58,63,"pl-smi"]],[],[[12,50,"pl-c"],[12,14,"pl-c"]],[[12,18,"pl-k"]],[],[],[[8,18,"pl-en"],[19,22,"pl-k"],[29,33,"pl-k"],[34,39,"pl-k"],[41,46,"pl-k"]],[[12,21,"pl-en"],[27,28,"pl-c1"],[46,47,"pl-c1"]],[],[[8,18,"pl-en"]],[[12,21,"pl-en"]],[[12,18,"pl-en"],[34,35,"pl-c1"]],[],[],[[8,18,"pl-en"],[20,24,"pl-k"]],[[12,15,"pl-en"],[22,26,"pl-k"]],[],[[16,22,"pl-k"],[23,39,"pl-c1"]],[],[[12,23,"pl-k"],[33,37,"pl-c1"]],[[16,43,"pl-s"],[16,17,"pl-pds"],[42,43,"pl-pds"],[46,50,"pl-s"],[46,47,"pl-pds"],[49,50,"pl-pds"],[52,56,"pl-s"],[52,53,"pl-pds"],[55,56,"pl-pds"],[58,66,"pl-s"],[58,59,"pl-pds"],[65,66,"pl-pds"]],[[17,25,"pl-c1"]],[],[],[[6,24,"pl-c"],[6,8,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[18,39,"pl-en"]],[],[[8,13,"pl-k"],[14,23,"pl-k"],[24,29,"pl-en"],[29,30,"pl-k"]],[],[[8,12,"pl-k"],[13,18,"pl-k"],[49,54,"pl-k"]],[[12,14,"pl-k"],[28,42,"pl-s"],[28,29,"pl-pds"],[41,42,"pl-pds"]],[[23,31,"pl-smi"],[34,45,"pl-k"],[70,78,"pl-smi"]],[[16,22,"pl-k"],[23,39,"pl-c1"]],[[14,18,"pl-k"],[19,21,"pl-k"],[35,54,"pl-s"],[35,36,"pl-pds"],[53,54,"pl-pds"]],[[23,31,"pl-smi"],[34,45,"pl-k"],[70,78,"pl-smi"]],[[16,22,"pl-k"],[23,39,"pl-c1"]],[],[],[[12,18,"pl-k"],[32,46,"pl-smi"]],[[16,48,"pl-s"],[16,17,"pl-pds"],[47,48,"pl-pds"],[61,65,"pl-s"],[61,62,"pl-pds"],[62,64,"pl-cce"],[64,65,"pl-pds"]],[],[[8,12,"pl-k"],[13,18,"pl-k"],[60,65,"pl-k"]],[[30,31,"pl-smi"],[42,47,"pl-c1"]],[[16,18,"pl-k"],[23,30,"pl-c1"]],[[20,26,"pl-k"],[27,53,"pl-c1"],[55,85,"pl-s"],[55,56,"pl-pds"],[84,85,"pl-pds"],[99,103,"pl-s"],[99,100,"pl-pds"],[100,102,"pl-cce"],[102,103,"pl-pds"]],[],[],[[16,21,"pl-k"],[23,35,"pl-c1"]],[[27,31,"pl-c1"]],[[20,22,"pl-k"],[30,35,"pl-c1"],[42,52,"pl-c1"],[60,63,"pl-s"],[60,61,"pl-pds"],[62,63,"pl-pds"]],[[24,26,"pl-k"],[29,39,"pl-c1"],[47,50,"pl-s"],[47,48,"pl-pds"],[49,50,"pl-pds"]],[[35,38,"pl-s"],[35,36,"pl-pds"],[37,38,"pl-pds"],[41,51,"pl-c1"],[60,63,"pl-s"],[60,61,"pl-pds"],[62,63,"pl-pds"]],[[31,42,"pl-smi"],[43,52,"pl-c1"]],[[31,42,"pl-smi"],[43,55,"pl-c1"],[57,60,"pl-s"],[57,58,"pl-pds"],[59,60,"pl-pds"]],[],[],[[16,41,"pl-c"],[16,18,"pl-c"]],[[16,18,"pl-k"],[27,38,"pl-smi"],[39,44,"pl-c1"]],[[27,38,"pl-smi"],[39,44,"pl-c1"],[53,64,"pl-smi"],[65,68,"pl-c1"],[71,72,"pl-c1"]],[],[[16,22,"pl-k"],[23,39,"pl-c1"]],[],[[8,12,"pl-k"],[13,18,"pl-k"],[51,56,"pl-k"]],[[16,18,"pl-k"],[20,30,"pl-c1"],[32,42,"pl-s"],[32,33,"pl-pds"],[41,42,"pl-pds"]],[[27,35,"pl-smi"]],[[16,20,"pl-k"],[21,23,"pl-k"],[25,35,"pl-c1"],[37,46,"pl-s"],[37,38,"pl-pds"],[45,46,"pl-pds"]],[[27,35,"pl-smi"]],[[16,20,"pl-k"],[21,23,"pl-k"],[25,35,"pl-c1"],[37,45,"pl-s"],[37,38,"pl-pds"],[44,45,"pl-pds"]],[[27,35,"pl-smi"]],[[16,20,"pl-k"]],[[20,26,"pl-k"],[27,53,"pl-c1"],[55,81,"pl-s"],[55,56,"pl-pds"],[80,81,"pl-pds"],[92,96,"pl-s"],[92,93,"pl-pds"],[93,95,"pl-cce"],[95,96,"pl-pds"]],[[16,22,"pl-k"],[23,39,"pl-c1"]],[],[[8,12,"pl-k"],[13,18,"pl-k"],[49,54,"pl-k"]],[[16,18,"pl-k"],[28,34,"pl-s"],[28,29,"pl-pds"],[33,34,"pl-pds"]],[[27,34,"pl-smi"],[37,55,"pl-c1"]],[[20,26,"pl-k"],[27,43,"pl-c1"]],[[18,22,"pl-k"],[23,25,"pl-k"],[35,50,"pl-s"],[35,36,"pl-pds"],[49,50,"pl-pds"]],[[27,34,"pl-smi"],[37,55,"pl-c1"]],[[20,26,"pl-k"],[27,43,"pl-c1"]],[],[],[[16,71,"pl-c"],[16,18,"pl-c"]],[[16,70,"pl-c"],[16,18,"pl-c"]],[[16,20,"pl-k"],[34,43,"pl-c1"],[51,52,"pl-c1"]],[[16,18,"pl-k"]],[[20,26,"pl-k"],[27,53,"pl-c1"],[55,74,"pl-s"],[55,56,"pl-pds"],[73,74,"pl-pds"],[84,95,"pl-s"],[84,85,"pl-pds"],[94,95,"pl-pds"]],[],[[23,30,"pl-smi"]],[[16,22,"pl-k"],[23,39,"pl-c1"]],[],[[8,12,"pl-k"],[13,18,"pl-k"],[59,64,"pl-k"]],[[45,78,"pl-c1"],[79,86,"pl-c1"]],[[12,14,"pl-k"]],[[16,22,"pl-k"],[23,49,"pl-c1"]],[[20,72,"pl-s"],[20,21,"pl-pds"],[71,72,"pl-pds"]],[[20,32,"pl-s"],[20,21,"pl-pds"],[31,32,"pl-pds"]],[[33,54,"pl-s"],[33,34,"pl-pds"],[53,54,"pl-pds"]],[],[[12,16,"pl-k"]],[[12,14,"pl-k"],[18,39,"pl-c1"]],[[16,22,"pl-k"],[23,49,"pl-c1"]],[[20,35,"pl-s"],[20,21,"pl-pds"],[34,35,"pl-pds"]],[[20,55,"pl-s"],[20,21,"pl-pds"],[54,55,"pl-pds"]],[],[[19,36,"pl-smi"]],[[12,18,"pl-k"],[19,35,"pl-c1"]],[],[[8,12,"pl-k"],[13,18,"pl-k"],[57,62,"pl-k"]],[[16,20,"pl-k"],[34,41,"pl-c1"]],[[16,18,"pl-k"],[34,41,"pl-s"],[34,35,"pl-pds"],[40,41,"pl-pds"]],[[27,42,"pl-smi"]],[[16,20,"pl-k"],[21,23,"pl-k"],[39,46,"pl-s"],[39,40,"pl-pds"],[45,46,"pl-pds"]],[[27,42,"pl-smi"]],[[16,20,"pl-k"],[21,23,"pl-k"],[39,45,"pl-s"],[39,40,"pl-pds"],[44,45,"pl-pds"]],[[27,42,"pl-smi"]],[[16,20,"pl-k"],[21,23,"pl-k"],[39,45,"pl-s"],[39,40,"pl-pds"],[44,45,"pl-pds"]],[[27,42,"pl-smi"]],[[16,20,"pl-k"]],[[20,26,"pl-k"],[27,53,"pl-c1"],[55,120,"pl-s"],[55,56,"pl-pds"],[119,120,"pl-pds"],[134,152,"pl-s"],[134,135,"pl-pds"],[151,152,"pl-pds"]],[[12,18,"pl-k"],[19,35,"pl-c1"]],[],[[8,12,"pl-k"],[13,18,"pl-k"],[51,56,"pl-k"]],[[12,16,"pl-k"],[31,38,"pl-c1"]],[[12,14,"pl-k"],[31,38,"pl-s"],[31,32,"pl-pds"],[37,38,"pl-pds"]],[[23,32,"pl-smi"]],[[12,16,"pl-k"],[17,19,"pl-k"],[36,44,"pl-s"],[36,37,"pl-pds"],[43,44,"pl-pds"]],[[23,32,"pl-smi"]],[[12,16,"pl-k"],[17,19,"pl-k"],[36,42,"pl-s"],[36,37,"pl-pds"],[41,42,"pl-pds"]],[[23,32,"pl-smi"]],[[12,16,"pl-k"]],[[16,22,"pl-k"],[23,49,"pl-c1"],[51,78,"pl-s"],[51,52,"pl-pds"],[77,78,"pl-pds"],[93,97,"pl-s"],[93,94,"pl-pds"],[94,96,"pl-cce"],[96,97,"pl-pds"]],[[12,18,"pl-k"],[19,35,"pl-c1"]],[],[[8,12,"pl-k"],[13,18,"pl-k"],[50,55,"pl-k"]],[[12,14,"pl-k"],[34,39,"pl-c1"]],[[16,22,"pl-k"],[23,49,"pl-c1"],[51,82,"pl-s"],[51,52,"pl-pds"],[81,82,"pl-pds"]],[],[],[],[[16,33,"pl-c1"]],[[12,14,"pl-k"]],[[16,22,"pl-k"],[23,49,"pl-c1"]],[[20,53,"pl-s"],[20,21,"pl-pds"],[52,53,"pl-pds"]],[[20,23,"pl-s"],[20,21,"pl-pds"],[22,23,"pl-pds"]],[],[],[[12,16,"pl-k"],[17,22,"pl-k"]],[],[[12,16,"pl-k"],[17,22,"pl-k"]],[[16,30,"pl-c1"],[33,52,"pl-c1"],[55,67,"pl-c1"]],[[12,16,"pl-k"],[36,40,"pl-c1"],[55,59,"pl-c1"]],[],[[12,14,"pl-k"],[37,40,"pl-c1"]],[[16,22,"pl-k"],[23,49,"pl-c1"]],[[20,46,"pl-s"],[20,21,"pl-pds"],[45,46,"pl-pds"],[62,66,"pl-c1"]],[[20,62,"pl-s"],[20,21,"pl-pds"],[61,62,"pl-pds"]],[],[],[],[[12,17,"pl-k"],[18,22,"pl-k"],[52,62,"pl-c1"],[65,69,"pl-c1"]],[[19,41,"pl-smi"],[42,51,"pl-c1"],[53,63,"pl-c1"]],[[12,78,"pl-c"],[12,14,"pl-c"]],[[12,77,"pl-c"],[12,14,"pl-c"]],[[12,79,"pl-c"],[12,14,"pl-c"]],[[12,28,"pl-c"],[12,14,"pl-c"]],[[12,14,"pl-k"]],[[16,19,"pl-k"],[47,48,"pl-c1"]],[[16,19,"pl-k"],[21,25,"pl-k"],[26,31,"pl-k"],[47,69,"pl-smi"]],[[20,22,"pl-k"],[29,39,"pl-c1"],[42,46,"pl-c1"]],[],[],[],[[16,18,"pl-k"],[47,48,"pl-c1"]],[[20,26,"pl-k"],[27,53,"pl-c1"],[55,108,"pl-s"],[55,56,"pl-pds"],[107,108,"pl-pds"]],[],[],[],[[12,18,"pl-k"],[19,35,"pl-c1"]],[],[[8,12,"pl-k"],[13,18,"pl-k"],[52,57,"pl-k"]],[[12,16,"pl-k"],[31,40,"pl-c1"]],[[12,14,"pl-k"]],[[16,22,"pl-k"],[23,49,"pl-c1"]],[[20,39,"pl-s"],[20,21,"pl-pds"],[38,39,"pl-pds"],[55,73,"pl-s"],[55,56,"pl-pds"],[72,73,"pl-pds"]],[],[[12,14,"pl-k"],[33,34,"pl-c1"]],[[16,22,"pl-k"],[23,49,"pl-c1"]],[[20,50,"pl-s"],[20,21,"pl-pds"],[49,50,"pl-pds"]],[],[[19,29,"pl-smi"]],[[12,18,"pl-k"],[19,35,"pl-c1"]],[],[],[[8,12,"pl-k"],[13,18,"pl-k"],[51,56,"pl-k"]],[[12,16,"pl-k"],[31,40,"pl-c1"]],[[12,14,"pl-k"]],[[16,22,"pl-k"],[23,49,"pl-c1"]],[[20,39,"pl-s"],[20,21,"pl-pds"],[38,39,"pl-pds"],[55,73,"pl-s"],[55,56,"pl-pds"],[72,73,"pl-pds"]],[],[[19,29,"pl-smi"]],[[12,18,"pl-k"],[19,35,"pl-c1"]],[],[],[[8,12,"pl-k"]],[[14,21,"pl-c1"],[30,41,"pl-smi"]],[[14,18,"pl-c1"],[27,35,"pl-smi"]],[[14,17,"pl-c1"],[26,45,"pl-smi"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,34,"pl-s"],[23,24,"pl-pds"],[33,34,"pl-pds"]],[[18,54,"pl-s"],[18,19,"pl-pds"],[53,54,"pl-pds"]],[[14,17,"pl-c1"],[26,42,"pl-smi"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,32,"pl-s"],[23,24,"pl-pds"],[31,32,"pl-pds"]],[[18,50,"pl-s"],[18,19,"pl-pds"],[49,50,"pl-pds"]],[[14,17,"pl-c1"],[26,33,"pl-smi"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,34,"pl-s"],[23,24,"pl-pds"],[33,34,"pl-pds"]],[[18,40,"pl-s"],[18,19,"pl-pds"],[39,40,"pl-pds"]],[[14,17,"pl-c1"],[26,40,"pl-smi"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,37,"pl-s"],[23,24,"pl-pds"],[36,37,"pl-pds"]],[[18,52,"pl-s"],[18,19,"pl-pds"],[51,52,"pl-pds"]],[[14,17,"pl-c1"],[26,47,"pl-smi"],[49,59,"pl-s"],[49,50,"pl-pds"],[58,59,"pl-pds"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,30,"pl-s"],[23,24,"pl-pds"],[29,30,"pl-pds"]],[[18,43,"pl-s"],[18,19,"pl-pds"],[42,43,"pl-pds"]],[[14,17,"pl-c1"],[45,65,"pl-s"],[45,46,"pl-pds"],[64,65,"pl-pds"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,35,"pl-s"],[23,24,"pl-pds"],[34,35,"pl-pds"]],[[18,57,"pl-s"],[18,19,"pl-pds"],[56,57,"pl-pds"]],[[14,17,"pl-c1"],[26,30,"pl-smi"],[32,38,"pl-s"],[32,33,"pl-pds"],[37,38,"pl-pds"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,31,"pl-s"],[23,24,"pl-pds"],[30,31,"pl-pds"]],[[18,30,"pl-s"],[18,19,"pl-pds"],[29,30,"pl-pds"]],[[14,17,"pl-c1"],[24,28,"pl-k"],[39,49,"pl-smi"],[52,53,"pl-c1"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,32,"pl-s"],[23,24,"pl-pds"],[31,32,"pl-pds"]],[[18,42,"pl-s"],[18,19,"pl-pds"],[41,42,"pl-pds"]],[[14,17,"pl-c1"],[24,27,"pl-k"],[40,50,"pl-smi"],[59,73,"pl-s"],[59,60,"pl-pds"],[72,73,"pl-pds"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,33,"pl-s"],[23,24,"pl-pds"],[32,33,"pl-pds"]],[[18,42,"pl-s"],[18,19,"pl-pds"],[41,42,"pl-pds"]],[[14,17,"pl-c1"],[44,58,"pl-s"],[44,45,"pl-pds"],[57,58,"pl-pds"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,31,"pl-s"],[23,24,"pl-pds"],[30,31,"pl-pds"]],[[18,35,"pl-s"],[18,19,"pl-pds"],[34,35,"pl-pds"]],[[14,17,"pl-c1"],[24,28,"pl-k"],[45,58,"pl-smi"],[117,125,"pl-s"],[117,118,"pl-pds"],[124,125,"pl-pds"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,36,"pl-s"],[23,24,"pl-pds"],[35,36,"pl-pds"]],[[18,39,"pl-s"],[18,19,"pl-pds"],[38,39,"pl-pds"]],[[14,17,"pl-c1"],[26,37,"pl-smi"],[39,48,"pl-s"],[39,40,"pl-pds"],[47,48,"pl-pds"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,39,"pl-s"],[23,24,"pl-pds"],[38,39,"pl-pds"]],[[18,93,"pl-s"],[18,19,"pl-pds"],[92,93,"pl-pds"]],[[14,17,"pl-c1"],[42,52,"pl-s"],[42,43,"pl-pds"],[51,52,"pl-pds"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,37,"pl-s"],[23,24,"pl-pds"],[36,37,"pl-pds"]],[[18,54,"pl-s"],[18,19,"pl-pds"],[53,54,"pl-pds"]],[[14,17,"pl-c1"],[26,41,"pl-smi"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,44,"pl-s"],[23,24,"pl-pds"],[43,44,"pl-pds"]],[[18,47,"pl-s"],[18,19,"pl-pds"],[46,47,"pl-pds"]],[[14,17,"pl-c1"],[26,39,"pl-smi"],[41,55,"pl-s"],[41,42,"pl-pds"],[54,55,"pl-pds"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,34,"pl-s"],[23,24,"pl-pds"],[33,34,"pl-pds"]],[[18,42,"pl-s"],[18,19,"pl-pds"],[41,42,"pl-pds"]],[[14,17,"pl-c1"],[33,52,"pl-s"],[33,34,"pl-pds"],[51,52,"pl-pds"]],[[17,21,"pl-s"],[17,18,"pl-pds"],[20,21,"pl-pds"],[23,36,"pl-s"],[23,24,"pl-pds"],[35,36,"pl-pds"]],[[18,40,"pl-s"],[18,19,"pl-pds"],[39,40,"pl-pds"]],[[14,17,"pl-c1"],[26,35,"pl-smi"]],[[17,31,"pl-s"],[17,18,"pl-pds"],[30,31,"pl-pds"]],[[18,48,"pl-s"],[18,19,"pl-pds"],[47,48,"pl-pds"]],[[14,17,"pl-c1"],[26,34,"pl-smi"]],[[17,30,"pl-s"],[17,18,"pl-pds"],[29,30,"pl-pds"]],[[18,42,"pl-s"],[18,19,"pl-pds"],[41,42,"pl-pds"]],[[14,17,"pl-c1"],[26,39,"pl-smi"]],[[17,35,"pl-s"],[17,18,"pl-pds"],[34,35,"pl-pds"]],[[18,48,"pl-s"],[18,19,"pl-pds"],[47,48,"pl-pds"]],[[14,17,"pl-c1"],[26,39,"pl-smi"]],[[17,35,"pl-s"],[17,18,"pl-pds"],[34,35,"pl-pds"]],[[18,38,"pl-s"],[18,19,"pl-pds"],[37,38,"pl-pds"]],[[14,17,"pl-c1"],[33,48,"pl-s"],[33,34,"pl-pds"],[47,48,"pl-pds"]],[[17,26,"pl-s"],[17,18,"pl-pds"],[25,26,"pl-pds"]],[[18,54,"pl-s"],[18,19,"pl-pds"],[53,54,"pl-pds"]],[[14,17,"pl-c1"],[31,62,"pl-s"],[31,32,"pl-pds"],[61,62,"pl-pds"]],[[17,29,"pl-s"],[17,18,"pl-pds"],[28,29,"pl-pds"]],[[18,58,"pl-s"],[18,19,"pl-pds"],[57,58,"pl-pds"]],[[14,17,"pl-c1"],[41,66,"pl-s"],[41,42,"pl-pds"],[65,66,"pl-pds"]],[[17,32,"pl-s"],[17,18,"pl-pds"],[31,32,"pl-pds"]],[[18,61,"pl-s"],[18,19,"pl-pds"],[60,61,"pl-pds"]],[[14,17,"pl-c1"],[26,37,"pl-smi"]],[[17,32,"pl-s"],[17,18,"pl-pds"],[31,32,"pl-pds"]],[[18,77,"pl-s"],[18,19,"pl-pds"],[76,77,"pl-pds"]],[[14,17,"pl-c1"],[39,62,"pl-s"],[39,40,"pl-pds"],[61,62,"pl-pds"]],[[17,38,"pl-s"],[17,18,"pl-pds"],[37,38,"pl-pds"]],[[18,55,"pl-s"],[18,19,"pl-pds"],[54,55,"pl-pds"]],[[14,17,"pl-c1"],[26,40,"pl-smi"]],[[17,36,"pl-s"],[17,18,"pl-pds"],[35,36,"pl-pds"]],[[18,46,"pl-s"],[18,19,"pl-pds"],[45,46,"pl-pds"]],[[14,17,"pl-c1"],[26,42,"pl-smi"],[44,53,"pl-s"],[44,45,"pl-pds"],[52,53,"pl-pds"]],[[17,38,"pl-s"],[17,18,"pl-pds"],[37,38,"pl-pds"]],[[18,63,"pl-s"],[18,19,"pl-pds"],[62,63,"pl-pds"]],[[14,17,"pl-c1"],[26,44,"pl-smi"],[46,57,"pl-s"],[46,47,"pl-pds"],[56,57,"pl-pds"]],[[17,40,"pl-s"],[17,18,"pl-pds"],[39,40,"pl-pds"]],[[18,75,"pl-s"],[18,19,"pl-pds"],[74,75,"pl-pds"]],[[14,17,"pl-c1"],[26,53,"pl-smi"],[55,76,"pl-s"],[55,56,"pl-pds"],[75,76,"pl-pds"]],[[17,50,"pl-s"],[17,18,"pl-pds"],[49,50,"pl-pds"]],[[18,90,"pl-s"],[18,19,"pl-pds"],[89,90,"pl-pds"]],[[14,17,"pl-c1"],[26,45,"pl-smi"]],[[17,42,"pl-s"],[17,18,"pl-pds"],[41,42,"pl-pds"]],[[18,74,"pl-s"],[18,19,"pl-pds"],[73,74,"pl-pds"]],[[14,17,"pl-c1"],[26,45,"pl-smi"],[47,68,"pl-s"],[47,48,"pl-pds"],[67,68,"pl-pds"]],[[17,42,"pl-s"],[17,18,"pl-pds"],[41,42,"pl-pds"]],[[18,95,"pl-s"],[18,19,"pl-pds"],[94,95,"pl-pds"]],[[14,17,"pl-c1"],[34,47,"pl-s"],[34,35,"pl-pds"],[46,47,"pl-pds"]],[[17,32,"pl-s"],[17,18,"pl-pds"],[31,32,"pl-pds"]],[[18,68,"pl-s"],[18,19,"pl-pds"],[67,68,"pl-pds"]],[[14,17,"pl-c1"],[34,47,"pl-s"],[34,35,"pl-pds"],[46,47,"pl-pds"]],[[17,32,"pl-s"],[17,18,"pl-pds"],[31,32,"pl-pds"]],[[18,78,"pl-s"],[18,19,"pl-pds"],[77,78,"pl-pds"]],[[14,17,"pl-c1"],[26,40,"pl-smi"]],[[17,43,"pl-s"],[17,18,"pl-pds"],[42,43,"pl-pds"]],[[18,53,"pl-s"],[18,19,"pl-pds"],[52,53,"pl-pds"]],[[14,17,"pl-c1"],[26,37,"pl-smi"],[39,63,"pl-s"],[39,40,"pl-pds"],[62,63,"pl-pds"]],[[18,46,"pl-s"],[18,19,"pl-pds"],[45,46,"pl-pds"]],[],[[8,14,"pl-k"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[[1,3,"pl-k"]],[[5,11,"pl-k"]],[[5,11,"pl-k"]],[[1,6,"pl-k"]],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,27,"pl-en"],[32,39,"pl-k"]],[],[[28,51,"pl-en"]],[[8,14,"pl-k"],[15,26,"pl-c1"],[39,43,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,44,"pl-en"]],[[8,14,"pl-c1"],[42,50,"pl-smi"],[52,58,"pl-c1"]],[[16,78,"pl-s"],[16,17,"pl-pds"],[77,78,"pl-pds"]],[[16,46,"pl-s"],[16,17,"pl-pds"],[45,46,"pl-pds"]],[[8,19,"pl-k"],[20,24,"pl-k"]],[],[[20,24,"pl-c1"]],[[22,25,"pl-c1"]],[],[],[[4,40,"pl-en"]],[[53,58,"pl-k"]],[[8,20,"pl-en"]],[],[[4,40,"pl-en"],[62,70,"pl-k"]],[[8,20,"pl-en"]],[[8,14,"pl-en"]],[[8,17,"pl-en"]],[[12,21,"pl-smi"],[24,29,"pl-c1"]],[],[],[[29,37,"pl-k"],[60,68,"pl-k"]],[[8,13,"pl-k"]],[[8,12,"pl-c1"],[32,44,"pl-smi"]],[[8,12,"pl-c1"],[26,32,"pl-smi"]],[[8,12,"pl-c1"],[29,38,"pl-smi"]],[],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[[4,41,"pl-en"]],[[8,10,"pl-k"]],[[26,29,"pl-c1"]],[],[],[],[],[[4,35,"pl-en"]],[[8,18,"pl-c1"]],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[],[],[[4,35,"pl-en"]],[[8,18,"pl-c1"]],[[8,14,"pl-k"],[15,25,"pl-c1"],[27,31,"pl-c1"]],[],[],[[4,13,"pl-k"]],[[8,79,"pl-c"],[8,10,"pl-c"]],[[8,72,"pl-c"],[8,10,"pl-c"]],[[8,13,"pl-k"],[14,26,"pl-en"],[27,32,"pl-k"]],[[8,15,"pl-k"]],[[12,24,"pl-en"]],[],[[8,16,"pl-k"]],[[12,16,"pl-k"],[17,20,"pl-en"],[37,42,"pl-k"],[43,51,"pl-k"]],[],[[6,18,"pl-c"],[6,8,"pl-c"]],[],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[[1,3,"pl-k"],[42,83,"pl-c"],[42,44,"pl-c"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[0,9,"pl-k"]],[],[[4,9,"pl-k"],[10,25,"pl-en"],[26,31,"pl-k"]],[[4,11,"pl-k"]],[[8,23,"pl-en"]],[[12,22,"pl-en"]],[],[[12,38,"pl-c1"],[40,52,"pl-c1"]],[],[[52,63,"pl-smi"]],[[52,63,"pl-smi"]],[],[],[[8,14,"pl-k"],[15,19,"pl-k"],[20,46,"pl-en"],[55,60,"pl-k"]],[[12,73,"pl-c"],[12,14,"pl-c"]],[[12,70,"pl-c"],[12,14,"pl-c"]],[[12,75,"pl-c"],[12,14,"pl-c"]],[[12,18,"pl-k"],[26,35,"pl-c1"]],[],[],[[4,12,"pl-k"]],[[8,12,"pl-k"],[13,16,"pl-en"],[45,50,"pl-k"],[51,59,"pl-k"]],[[12,18,"pl-k"]],[[16,20,"pl-k"],[40,46,"pl-k"],[47,63,"pl-c1"]],[[16,20,"pl-k"],[40,46,"pl-k"],[47,63,"pl-c1"]],[[16,20,"pl-k"],[40,46,"pl-k"],[47,63,"pl-c1"]],[[16,20,"pl-k"],[40,46,"pl-k"],[47,63,"pl-c1"]],[[16,20,"pl-k"],[40,46,"pl-k"],[47,63,"pl-c1"]],[[16,20,"pl-k"],[40,46,"pl-k"],[47,63,"pl-c1"]],[[16,20,"pl-k"],[40,46,"pl-k"],[47,63,"pl-c1"]],[[16,20,"pl-k"],[40,46,"pl-k"],[47,63,"pl-c1"],[65,66,"pl-c1"]],[],[[16,20,"pl-k"],[44,50,"pl-k"],[51,67,"pl-c1"]],[[16,20,"pl-k"],[44,50,"pl-k"],[51,67,"pl-c1"]],[[16,20,"pl-k"],[44,50,"pl-k"],[51,67,"pl-c1"]],[[16,20,"pl-k"],[44,50,"pl-k"],[51,67,"pl-c1"]],[[16,20,"pl-k"],[44,50,"pl-k"],[51,67,"pl-c1"]],[],[[16,20,"pl-k"],[37,57,"pl-c1"],[59,73,"pl-s"],[59,60,"pl-pds"],[72,73,"pl-pds"]],[],[[16,23,"pl-k"]],[[20,31,"pl-c1"],[33,59,"pl-s"],[33,34,"pl-pds"],[58,59,"pl-pds"]],[],[],[],[[8,12,"pl-k"],[13,29,"pl-en"],[53,58,"pl-k"]],[[12,35,"pl-c1"],[37,49,"pl-c1"]],[],[],[],[],[],[],[],[[2,23,"pl-c"],[2,4,"pl-c"]],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[[1,6,"pl-k"],[7,29,"pl-c"],[7,9,"pl-c"]],[],[],[[1,3,"pl-k"]],[[5,11,"pl-k"],[12,37,"pl-en"]],[[5,12,"pl-k"],[13,23,"pl-s"],[13,14,"pl-pds"],[22,23,"pl-pds"]],[[1,6,"pl-k"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[0,9,"pl-k"]],[],[[4,9,"pl-k"],[10,24,"pl-en"],[25,30,"pl-k"]],[[4,11,"pl-k"]],[[8,22,"pl-en"]],[],[[8,14,"pl-k"],[15,19,"pl-k"],[20,46,"pl-en"],[55,60,"pl-k"]],[[12,70,"pl-c"],[12,14,"pl-c"]],[[12,43,"pl-c"],[12,14,"pl-c"]],[[12,77,"pl-c"],[12,14,"pl-c"]],[[12,77,"pl-c"],[12,14,"pl-c"]],[[12,73,"pl-c"],[12,14,"pl-c"]],[[12,77,"pl-c"],[12,14,"pl-c"]],[[12,75,"pl-c"],[12,14,"pl-c"]],[[12,16,"pl-k"],[36,45,"pl-c1"]],[[1,3,"pl-k"]],[[7,14,"pl-c1"],[31,38,"pl-c1"]],[[26,39,"pl-c"],[26,28,"pl-c"]],[[37,43,"pl-c1"]],[[5,10,"pl-k"]],[[5,7,"pl-k"]],[[38,54,"pl-c1"]],[[5,10,"pl-k"]],[],[[12,18,"pl-k"]],[],[],[[4,12,"pl-k"]],[[8,12,"pl-k"],[13,16,"pl-en"],[45,50,"pl-k"],[51,59,"pl-k"]],[[12,16,"pl-k"]],[[44,50,"pl-c1"],[55,59,"pl-k"],[60,65,"pl-k"]],[[16,76,"pl-c"],[16,18,"pl-c"]],[[16,76,"pl-c"],[16,18,"pl-c"]],[[16,35,"pl-c"],[16,18,"pl-c"]],[[23,29,"pl-s"],[23,24,"pl-pds"],[24,28,"pl-cce"],[28,29,"pl-pds"]],[],[[12,18,"pl-k"]],[[16,20,"pl-k"]],[[16,20,"pl-k"],[40,46,"pl-k"],[47,56,"pl-c1"],[58,63,"pl-s"],[58,59,"pl-pds"],[62,63,"pl-pds"]],[[16,20,"pl-k"],[40,46,"pl-k"],[47,56,"pl-c1"],[58,66,"pl-s"],[58,59,"pl-pds"],[65,66,"pl-pds"]],[[16,20,"pl-k"],[40,46,"pl-k"],[47,56,"pl-c1"],[58,66,"pl-s"],[58,59,"pl-pds"],[65,66,"pl-pds"]],[[16,20,"pl-k"],[40,46,"pl-k"],[47,56,"pl-c1"],[58,66,"pl-s"],[58,59,"pl-pds"],[65,66,"pl-pds"]],[[16,20,"pl-k"],[40,46,"pl-k"],[47,56,"pl-c1"],[58,66,"pl-s"],[58,59,"pl-pds"],[65,66,"pl-pds"]],[[16,20,"pl-k"],[40,46,"pl-k"],[47,56,"pl-c1"],[58,66,"pl-s"],[58,59,"pl-pds"],[65,66,"pl-pds"]],[[16,20,"pl-k"],[40,46,"pl-k"],[47,56,"pl-c1"],[58,66,"pl-s"],[58,59,"pl-pds"],[65,66,"pl-pds"]],[],[[16,20,"pl-k"],[44,50,"pl-k"],[51,60,"pl-c1"],[62,70,"pl-s"],[62,63,"pl-pds"],[69,70,"pl-pds"]],[[16,20,"pl-k"],[44,50,"pl-k"],[51,60,"pl-c1"],[62,70,"pl-s"],[62,63,"pl-pds"],[69,70,"pl-pds"]],[[16,20,"pl-k"],[44,50,"pl-k"],[51,60,"pl-c1"],[62,70,"pl-s"],[62,63,"pl-pds"],[69,70,"pl-pds"]],[[16,20,"pl-k"],[44,50,"pl-k"],[51,60,"pl-c1"],[62,70,"pl-s"],[62,63,"pl-pds"],[69,70,"pl-pds"]],[[16,20,"pl-k"],[44,50,"pl-k"],[51,60,"pl-c1"],[62,70,"pl-s"],[62,63,"pl-pds"],[69,70,"pl-pds"]],[],[[16,20,"pl-k"],[37,57,"pl-c1"],[59,73,"pl-s"],[59,60,"pl-pds"],[72,73,"pl-pds"]],[[16,23,"pl-k"],[25,45,"pl-c1"],[47,73,"pl-s"],[47,48,"pl-pds"],[72,73,"pl-pds"]],[],[],[],[],[[2,23,"pl-c"],[2,4,"pl-c"]],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[35,49,"pl-en"]],[],[[1,3,"pl-k"]],[[8,10,"pl-k"]],[[12,18,"pl-k"]],[],[[1,6,"pl-k"]],[[8,10,"pl-k"]],[[12,18,"pl-k"]],[],[[8,10,"pl-k"]],[[12,18,"pl-k"]],[],[],[[8,10,"pl-k"]],[[1,3,"pl-k"]],[[12,14,"pl-k"],[17,60,"pl-c1"]],[[16,22,"pl-k"]],[],[[1,6,"pl-k"]],[[12,14,"pl-k"],[17,59,"pl-c1"]],[[16,22,"pl-k"]],[],[[12,18,"pl-k"]],[],[],[[8,19,"pl-c1"],[21,66,"pl-s"],[21,22,"pl-pds"],[65,66,"pl-pds"],[70,81,"pl-k"],[82,85,"pl-k"]],[],[],[[4,8,"pl-k"],[9,30,"pl-en"]],[[8,14,"pl-k"]],[[1,3,"pl-k"]],[[8,12,"pl-k"]],[[1,6,"pl-k"]],[[8,12,"pl-k"]],[[8,12,"pl-k"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[19,23,"pl-c1"]],[[8,15,"pl-k"]],[[12,18,"pl-k"],[19,24,"pl-c1"]],[],[],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[[1,3,"pl-k"]],[[5,11,"pl-k"]],[[1,6,"pl-k"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[39,46,"pl-c1"]],[],[[4,8,"pl-k"],[9,23,"pl-en"]],[[8,14,"pl-k"]],[[34,41,"pl-c1"]],[],[[4,8,"pl-k"],[9,31,"pl-en"]],[[25,28,"pl-k"],[29,36,"pl-c1"]],[],[],[[13,37,"pl-en"]],[[8,10,"pl-k"],[42,64,"pl-c1"]],[[8,72,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-k"]],[],[],[[17,26,"pl-en"]],[[8,14,"pl-k"]],[[8,14,"pl-k"]],[],[],[],[],[],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[1,3,"pl-k"]],[[1,8,"pl-k"],[9,24,"pl-s"],[9,10,"pl-pds"],[23,24,"pl-pds"]],[],[[4,13,"pl-k"],[14,19,"pl-en"]],[[8,12,"pl-k"],[13,32,"pl-en"],[46,51,"pl-k"]],[[12,31,"pl-c1"],[52,59,"pl-s"],[52,53,"pl-pds"],[58,59,"pl-pds"],[66,71,"pl-c1"]],[],[],[],[[1,5,"pl-k"]],[],[[4,13,"pl-k"],[14,19,"pl-en"]],[[8,12,"pl-k"],[13,32,"pl-en"],[46,51,"pl-k"]],[[12,32,"pl-en"]],[],[],[],[[1,5,"pl-k"]],[],[[4,13,"pl-k"],[14,19,"pl-en"]],[[8,12,"pl-k"],[13,32,"pl-en"],[46,51,"pl-k"]],[[12,65,"pl-c"],[12,14,"pl-c"]],[[12,23,"pl-c1"]],[],[],[],[[1,6,"pl-k"],[7,18,"pl-c"],[7,9,"pl-c"]],[],[],[],[[1,3,"pl-k"]],[],[[3,10,"pl-k"],[11,20,"pl-s"],[11,12,"pl-pds"],[19,20,"pl-pds"]],[[3,10,"pl-k"],[11,24,"pl-s"],[11,12,"pl-pds"],[23,24,"pl-pds"]],[[3,10,"pl-k"],[11,21,"pl-s"],[11,12,"pl-pds"],[20,21,"pl-pds"]],[[3,10,"pl-k"],[11,20,"pl-s"],[11,12,"pl-pds"],[19,20,"pl-pds"]],[[3,10,"pl-k"],[11,20,"pl-s"],[11,12,"pl-pds"],[19,20,"pl-pds"]],[],[[1,6,"pl-k"]],[[4,62,"pl-c"],[4,6,"pl-c"]],[[4,69,"pl-c"],[4,6,"pl-c"]],[[3,10,"pl-k"],[11,25,"pl-s"],[11,12,"pl-pds"],[24,25,"pl-pds"]],[[1,6,"pl-k"]],[],[[4,13,"pl-k"],[14,19,"pl-en"]],[[9,14,"pl-k"]],[[8,86,"pl-c"],[8,10,"pl-c"]],[[8,76,"pl-c"],[8,10,"pl-c"]],[],[[8,72,"pl-c"],[8,10,"pl-c"]],[[8,77,"pl-c"],[8,10,"pl-c"]],[[8,12,"pl-k"],[13,29,"pl-en"]],[[12,15,"pl-k"],[36,37,"pl-c1"]],[[12,18,"pl-k"],[19,29,"pl-en"]],[[17,23,"pl-c1"]],[],[[12,77,"pl-c"],[12,14,"pl-c"]],[[12,51,"pl-c"],[12,14,"pl-c"]],[],[[17,24,"pl-smi"],[25,31,"pl-smi"],[34,35,"pl-c1"]],[],[[12,80,"pl-c"],[12,14,"pl-c"]],[[12,73,"pl-c"],[12,14,"pl-c"]],[],[[16,17,"pl-c1"]],[[16,17,"pl-c1"]],[[16,17,"pl-c1"]],[[16,17,"pl-c1"],[21,27,"pl-c1"]],[],[[12,27,"pl-c"],[12,14,"pl-c"]],[],[[19,25,"pl-k"]],[[12,14,"pl-k"],[16,22,"pl-c1"],[28,34,"pl-k"],[42,48,"pl-k"],[70,77,"pl-c1"],[79,80,"pl-c1"],[85,86,"pl-c1"]],[[16,27,"pl-c1"],[33,112,"pl-s"],[33,34,"pl-pds"],[34,36,"pl-cce"],[107,111,"pl-cce"],[111,112,"pl-pds"]],[[16,22,"pl-k"],[23,28,"pl-c1"]],[],[],[[12,64,"pl-c"],[12,14,"pl-c"]],[],[[12,18,"pl-k"],[27,34,"pl-smi"],[35,41,"pl-smi"],[57,58,"pl-c1"]],[],[[9,13,"pl-k"]],[[8,12,"pl-k"],[13,29,"pl-en"]],[[12,98,"pl-c"],[12,14,"pl-c"]],[[12,18,"pl-k"],[19,24,"pl-c1"]],[],[[9,14,"pl-k"]],[[6,24,"pl-c"],[6,8,"pl-c"]],[],[[1,5,"pl-k"]],[[5,12,"pl-k"],[13,22,"pl-s"],[13,14,"pl-pds"],[21,22,"pl-pds"]],[[5,12,"pl-k"],[13,21,"pl-s"],[13,14,"pl-pds"],[20,21,"pl-pds"]],[],[[4,13,"pl-k"],[14,19,"pl-en"]],[[8,74,"pl-c"],[8,10,"pl-c"]],[[8,79,"pl-c"],[8,10,"pl-c"]],[[8,77,"pl-c"],[8,10,"pl-c"]],[[8,76,"pl-c"],[8,10,"pl-c"]],[[8,77,"pl-c"],[8,10,"pl-c"]],[[8,76,"pl-c"],[8,10,"pl-c"]],[[8,25,"pl-c"],[8,10,"pl-c"]],[[8,12,"pl-k"],[13,29,"pl-en"]],[[12,71,"pl-c"],[12,14,"pl-c"]],[[12,71,"pl-c"],[12,14,"pl-c"]],[],[[26,28,"pl-smi"],[29,48,"pl-s"],[29,30,"pl-pds"],[47,48,"pl-pds"]],[[12,15,"pl-k"],[35,47,"pl-c1"]],[[16,22,"pl-k"],[23,28,"pl-k"],[29,32,"pl-k"],[46,48,"pl-c1"]],[[16,18,"pl-k"],[25,32,"pl-c1"],[33,34,"pl-c1"],[48,62,"pl-s"],[48,49,"pl-pds"],[59,61,"pl-cce"],[61,62,"pl-pds"],[67,68,"pl-c1"]],[[20,79,"pl-c"],[20,22,"pl-c"]],[[20,78,"pl-c"],[20,22,"pl-c"]],[[20,33,"pl-c"],[20,22,"pl-c"]],[[20,26,"pl-k"],[32,38,"pl-c1"],[77,80,"pl-s"],[77,78,"pl-pds"],[79,80,"pl-pds"]],[],[],[],[[12,18,"pl-k"],[19,24,"pl-c1"]],[],[[6,24,"pl-c"],[6,8,"pl-c"]],[[1,5,"pl-k"]],[[4,10,"pl-k"],[11,14,"pl-s"],[11,12,"pl-pds"],[13,14,"pl-pds"],[37,40,"pl-k"],[51,68,"pl-en"]],[[4,13,"pl-k"],[14,19,"pl-en"]],[[8,12,"pl-k"],[13,29,"pl-en"]],[[12,18,"pl-k"],[19,36,"pl-c1"],[42,43,"pl-c1"]],[],[],[[1,5,"pl-k"]],[[4,10,"pl-k"],[11,14,"pl-s"],[11,12,"pl-pds"],[13,14,"pl-pds"],[37,40,"pl-k"],[51,68,"pl-en"]],[[4,13,"pl-k"],[14,19,"pl-en"]],[[8,12,"pl-k"],[13,29,"pl-en"]],[[12,18,"pl-k"],[19,36,"pl-c1"],[42,43,"pl-c1"]],[],[],[[1,5,"pl-k"]],[[4,13,"pl-k"],[14,19,"pl-en"]],[[7,11,"pl-k"],[12,28,"pl-en"],[33,39,"pl-k"],[40,45,"pl-c1"]],[],[[1,6,"pl-k"],[7,18,"pl-c"],[7,9,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,8,"pl-k"],[9,60,"pl-en"]],[[27,32,"pl-k"]],[[8,80,"pl-c"],[8,10,"pl-c"]],[[8,55,"pl-c"],[8,10,"pl-c"]],[[14,109,"pl-s"],[14,15,"pl-pds"],[108,109,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,38,"pl-en"],[70,75,"pl-k"],[108,113,"pl-k"]],[[8,10,"pl-k"],[16,20,"pl-c1"],[29,33,"pl-c1"],[38,40,"pl-c1"]],[[20,24,"pl-c1"],[25,29,"pl-s"],[25,26,"pl-pds"],[26,28,"pl-cce"],[28,29,"pl-pds"]],[[20,24,"pl-c1"],[25,29,"pl-s"],[25,26,"pl-pds"],[26,28,"pl-cce"],[28,29,"pl-pds"]],[[25,28,"pl-s"],[25,26,"pl-pds"],[27,28,"pl-pds"],[38,41,"pl-s"],[38,39,"pl-pds"],[40,41,"pl-pds"]],[[8,12,"pl-k"]],[[25,29,"pl-s"],[25,26,"pl-pds"],[26,28,"pl-cce"],[28,29,"pl-pds"],[39,43,"pl-s"],[39,40,"pl-pds"],[40,42,"pl-cce"],[42,43,"pl-pds"]],[],[],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[1,3,"pl-k"]],[],[[4,8,"pl-k"],[9,24,"pl-en"],[40,45,"pl-k"]],[[8,19,"pl-c1"],[25,90,"pl-s"],[25,26,"pl-pds"],[87,89,"pl-cce"],[89,90,"pl-pds"]],[[25,44,"pl-s"],[25,26,"pl-pds"],[43,44,"pl-pds"],[50,54,"pl-c1"],[60,64,"pl-s"],[60,61,"pl-pds"],[61,63,"pl-cce"],[63,64,"pl-pds"]],[[8,22,"pl-c1"]],[],[[1,6,"pl-k"]],[],[],[[4,8,"pl-k"],[9,26,"pl-en"],[39,44,"pl-k"]],[[8,23,"pl-c1"],[24,40,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,27,"pl-en"],[40,45,"pl-k"]],[[8,23,"pl-c1"],[24,41,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,28,"pl-en"],[41,46,"pl-k"]],[[8,23,"pl-c1"],[24,42,"pl-c1"]],[],[],[],[],[[2,21,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,59,"pl-en"],[64,71,"pl-k"]],[],[[4,13,"pl-k"],[14,20,"pl-en"]],[],[[8,17,"pl-k"]],[[12,64,"pl-c"],[12,14,"pl-c"]],[[12,81,"pl-c"],[12,14,"pl-c"]],[[22,41,"pl-en"]],[[16,46,"pl-c"],[16,18,"pl-c"]],[[16,22,"pl-c1"],[49,53,"pl-c1"]],[[16,21,"pl-k"],[36,37,"pl-c1"],[67,68,"pl-c1"],[73,76,"pl-s"],[73,74,"pl-pds"],[75,76,"pl-pds"]],[],[],[[16,22,"pl-k"],[36,42,"pl-c1"],[68,72,"pl-c1"]],[],[],[],[[31,41,"pl-en"]],[[12,16,"pl-k"],[30,44,"pl-c1"],[53,56,"pl-s"],[53,54,"pl-pds"],[55,56,"pl-pds"]],[],[[19,26,"pl-c1"],[39,43,"pl-c1"]],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"]],[[23,32,"pl-c1"],[33,37,"pl-c1"],[38,57,"pl-c1"]],[],[[12,18,"pl-k"]],[],[],[[8,27,"pl-en"],[32,39,"pl-k"]],[],[[18,34,"pl-en"],[36,39,"pl-k"],[48,53,"pl-k"]],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"]],[[16,18,"pl-k"],[32,37,"pl-smi"]],[[20,26,"pl-k"],[39,45,"pl-smi"]],[],[[12,18,"pl-k"],[19,50,"pl-s"],[19,20,"pl-pds"],[49,50,"pl-pds"]],[],[],[[44,56,"pl-en"],[115,118,"pl-k"],[120,125,"pl-k"]],[[12,16,"pl-k"]],[[22,28,"pl-smi"]],[[22,30,"pl-smi"],[31,38,"pl-c1"],[47,51,"pl-c1"]],[],[[12,17,"pl-k"],[18,22,"pl-k"],[36,61,"pl-c1"]],[[12,18,"pl-c1"],[31,35,"pl-c1"],[48,52,"pl-c1"]],[[17,23,"pl-c1"],[28,29,"pl-c1"]],[[12,15,"pl-k"],[17,21,"pl-k"]],[[26,34,"pl-smi"],[35,47,"pl-c1"]],[],[[12,18,"pl-k"]],[],[],[[17,22,"pl-k"],[24,56,"pl-en"],[115,118,"pl-k"],[120,125,"pl-k"]],[[24,33,"pl-c1"],[34,46,"pl-c1"]],[[12,18,"pl-k"],[32,36,"pl-c1"]],[],[],[[6,15,"pl-c"],[6,8,"pl-c"]],[[2,10,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[8,30,"pl-en"]],[[8,31,"pl-en"]],[],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[1,3,"pl-k"]],[[4,13,"pl-k"]],[[8,14,"pl-k"],[27,41,"pl-en"]],[],[[56,61,"pl-k"],[64,69,"pl-k"]],[[12,14,"pl-k"],[29,34,"pl-c1"]],[[16,38,"pl-c1"],[40,62,"pl-c1"]],[[14,18,"pl-k"]],[[16,22,"pl-k"],[35,36,"pl-c1"],[39,48,"pl-c1"],[62,67,"pl-c1"],[72,73,"pl-c1"]],[[62,65,"pl-c1"]],[],[],[],[],[[1,6,"pl-k"],[7,50,"pl-c"],[7,9,"pl-c"]],[],[[4,61,"pl-en"],[66,73,"pl-k"]],[],[[4,8,"pl-k"],[9,56,"pl-en"]],[[22,31,"pl-c1"],[33,43,"pl-c1"]],[],[],[[1,3,"pl-k"]],[[16,69,"pl-en"],[72,77,"pl-k"]],[[8,66,"pl-c"],[8,10,"pl-c"]],[[8,72,"pl-c"],[8,10,"pl-c"]],[[8,71,"pl-c"],[8,10,"pl-c"]],[[8,35,"pl-c"],[8,10,"pl-c"]],[[8,69,"pl-c"],[8,10,"pl-c"]],[[8,64,"pl-c"],[8,10,"pl-c"]],[[8,67,"pl-c"],[8,10,"pl-c"]],[[8,27,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"],[13,35,"pl-c1"],[41,48,"pl-c1"]],[[12,18,"pl-k"],[19,65,"pl-s"],[19,20,"pl-pds"],[64,65,"pl-pds"]],[],[],[[8,72,"pl-c"],[8,10,"pl-c"]],[[8,77,"pl-c"],[8,10,"pl-c"]],[[8,11,"pl-k"]],[[12,18,"pl-k"],[19,33,"pl-c1"]],[],[[8,71,"pl-c"],[8,10,"pl-c"]],[[8,57,"pl-c"],[8,10,"pl-c"]],[[8,13,"pl-k"]],[[12,34,"pl-c1"],[35,57,"pl-c1"]],[],[[8,13,"pl-k"]],[[12,34,"pl-c1"],[35,57,"pl-c1"]],[],[[8,13,"pl-k"],[30,35,"pl-k"]],[[12,18,"pl-k"],[22,26,"pl-c1"]],[],[[8,13,"pl-k"],[27,32,"pl-k"]],[[12,18,"pl-k"]],[],[[8,13,"pl-k"],[15,20,"pl-k"],[21,25,"pl-k"]],[[12,18,"pl-k"]],[],[[8,13,"pl-k"]],[[12,18,"pl-k"],[19,38,"pl-s"],[19,20,"pl-pds"],[37,38,"pl-pds"]],[],[],[],[[1,5,"pl-k"],[6,64,"pl-c"],[6,8,"pl-c"]],[[16,69,"pl-en"],[72,77,"pl-k"]],[[8,28,"pl-c1"],[29,109,"pl-s"],[29,30,"pl-pds"],[108,109,"pl-pds"]],[],[[1,6,"pl-k"]],[],[],[],[],[],[[0,9,"pl-c"],[0,2,"pl-c"]],[[0,80,"pl-c"]],[[0,2,"pl-c"]],[[0,74,"pl-c"]],[[0,67,"pl-c"]],[[0,57,"pl-c"]],[[0,18,"pl-c"]],[[0,19,"pl-c"]],[[0,2,"pl-c"]],[[0,71,"pl-c"]],[[0,68,"pl-c"]],[[0,71,"pl-c"]],[[0,49,"pl-c"]],[[0,2,"pl-c"]],[[0,68,"pl-c"]],[[0,71,"pl-c"]],[[0,3,"pl-c"],[1,3,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[],[[1,3,"pl-k"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,72,"pl-c"],[4,6,"pl-c"]],[[4,52,"pl-c"],[4,6,"pl-c"]],[[4,8,"pl-k"],[9,47,"pl-en"]],[[4,8,"pl-k"],[9,50,"pl-en"],[53,61,"pl-k"]],[[4,48,"pl-en"],[53,60,"pl-k"]],[[4,49,"pl-en"],[54,61,"pl-k"]],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[[1,6,"pl-k"],[7,66,"pl-c"],[7,9,"pl-c"]],[],[[1,3,"pl-k"]],[[1,6,"pl-k"]],[[1,6,"pl-k"],[7,64,"pl-c"],[7,9,"pl-c"]],[],[[1,3,"pl-k"]],[],[[0,9,"pl-k"]],[[4,54,"pl-c"],[4,6,"pl-c"]],[[4,8,"pl-k"],[9,20,"pl-en"],[22,26,"pl-k"],[27,32,"pl-k"],[35,40,"pl-k"]],[[8,32,"pl-c1"],[35,51,"pl-c1"],[55,80,"pl-c1"]],[],[],[[4,67,"pl-c"],[4,6,"pl-c"]],[[4,64,"pl-c"],[4,6,"pl-c"]],[[4,46,"pl-c"],[4,6,"pl-c"]],[[4,13,"pl-k"],[19,25,"pl-c1"],[50,52,"pl-c1"],[55,59,"pl-c1"]],[[2,26,"pl-c"],[2,4,"pl-c"]],[],[[1,6,"pl-k"],[7,64,"pl-c"],[7,9,"pl-c"]],[],[[1,3,"pl-k"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,10,"pl-k"],[11,21,"pl-en"],[34,39,"pl-k"],[40,44,"pl-k"]],[],[[4,70,"pl-c"],[4,6,"pl-c"]],[[4,61,"pl-c"],[4,6,"pl-c"]],[[4,56,"pl-c"],[4,6,"pl-c"]],[[4,10,"pl-k"]],[[42,79,"pl-s"],[42,43,"pl-pds"],[78,79,"pl-pds"]],[[36,62,"pl-s"],[36,37,"pl-pds"],[61,62,"pl-pds"]],[[38,79,"pl-s"],[38,39,"pl-pds"],[78,79,"pl-pds"]],[[40,62,"pl-s"],[40,41,"pl-pds"],[61,62,"pl-pds"]],[],[],[[4,10,"pl-k"],[25,48,"pl-en"]],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[12,14,"pl-k"],[31,46,"pl-smi"],[48,61,"pl-smi"],[69,71,"pl-smi"]],[[16,27,"pl-c1"],[32,36,"pl-smi"]],[],[],[[8,64,"pl-c"],[8,10,"pl-c"]],[[8,57,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-k"]],[],[],[[4,68,"pl-c"],[4,6,"pl-c"]],[[4,69,"pl-c"],[4,6,"pl-c"]],[[4,31,"pl-c"],[4,6,"pl-c"]],[[4,10,"pl-k"],[74,81,"pl-c1"]],[],[],[[4,65,"pl-c"],[4,6,"pl-c"]],[[4,44,"pl-c"],[4,6,"pl-c"]],[[4,48,"pl-en"]],[[30,41,"pl-k"]],[[8,10,"pl-k"],[13,36,"pl-c1"]],[[12,65,"pl-c"],[12,14,"pl-c"]],[[12,62,"pl-c"],[12,14,"pl-c"]],[[12,23,"pl-c1"]],[[19,54,"pl-s"],[19,20,"pl-pds"],[53,54,"pl-pds"]],[[19,72,"pl-s"],[19,20,"pl-pds"],[71,72,"pl-pds"]],[],[],[],[[4,62,"pl-c"],[4,6,"pl-c"]],[[4,66,"pl-c"],[4,6,"pl-c"]],[[4,49,"pl-en"],[54,61,"pl-k"]],[],[],[[4,8,"pl-k"],[9,47,"pl-en"]],[[8,56,"pl-c"],[8,10,"pl-c"]],[[42,69,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,50,"pl-en"],[53,61,"pl-k"]],[[8,10,"pl-k"],[12,39,"pl-c1"]],[[12,23,"pl-c1"]],[[19,76,"pl-s"],[19,20,"pl-pds"],[75,76,"pl-pds"]],[[19,85,"pl-s"],[19,20,"pl-pds"],[84,85,"pl-pds"]],[],[[42,49,"pl-c1"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[[1,6,"pl-k"],[7,34,"pl-c"],[7,9,"pl-c"]],[],[[1,3,"pl-k"]],[],[[1,8,"pl-k"],[9,19,"pl-s"],[9,10,"pl-pds"],[18,19,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,10,"pl-k"],[11,21,"pl-en"]],[[8,11,"pl-k"]],[[8,13,"pl-k"],[14,18,"pl-k"]],[],[],[[4,10,"pl-k"]],[[19,55,"pl-s"],[19,20,"pl-pds"],[54,55,"pl-pds"]],[[19,56,"pl-s"],[19,20,"pl-pds"],[55,56,"pl-pds"]],[[19,57,"pl-s"],[19,20,"pl-pds"],[56,57,"pl-pds"]],[[19,60,"pl-s"],[19,20,"pl-pds"],[59,60,"pl-pds"]],[[19,57,"pl-s"],[19,20,"pl-pds"],[56,57,"pl-pds"]],[[19,66,"pl-s"],[19,20,"pl-pds"],[65,66,"pl-pds"]],[],[],[[0,65,"pl-c"],[0,2,"pl-c"]],[[0,67,"pl-c"],[0,2,"pl-c"]],[[0,8,"pl-c"],[0,2,"pl-c"]],[[1,3,"pl-k"]],[[5,11,"pl-k"]],[[5,11,"pl-k"]],[[1,6,"pl-k"]],[],[[4,10,"pl-k"],[11,15,"pl-k"],[31,38,"pl-c1"]],[[4,10,"pl-k"],[16,22,"pl-c1"],[38,39,"pl-c1"]],[[4,10,"pl-k"],[11,18,"pl-c1"]],[[4,10,"pl-k"],[11,17,"pl-k"],[18,27,"pl-en"],[42,48,"pl-k"],[63,69,"pl-k"]],[],[[4,10,"pl-k"],[11,15,"pl-k"],[16,45,"pl-en"],[48,56,"pl-k"]],[[8,70,"pl-c"],[8,10,"pl-c"]],[[8,68,"pl-c"],[8,10,"pl-c"]],[[8,66,"pl-c"],[8,10,"pl-c"]],[[8,38,"pl-c"],[8,10,"pl-c"]],[[8,11,"pl-k"],[18,24,"pl-c1"],[29,30,"pl-c1"],[36,42,"pl-k"],[57,63,"pl-k"]],[[12,21,"pl-c1"],[36,38,"pl-smi"],[59,66,"pl-c1"]],[],[[8,31,"pl-c"],[8,10,"pl-c"]],[[8,19,"pl-c1"],[34,41,"pl-c1"]],[],[],[[4,10,"pl-k"],[11,15,"pl-k"],[16,28,"pl-en"],[30,33,"pl-k"]],[[8,12,"pl-k"],[13,18,"pl-k"],[28,46,"pl-s"],[28,29,"pl-pds"],[45,46,"pl-pds"]],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[12,14,"pl-k"],[27,29,"pl-smi"]],[[27,31,"pl-smi"]],[[16,21,"pl-k"]],[],[],[[8,70,"pl-c"],[8,10,"pl-c"]],[[8,69,"pl-c"],[8,10,"pl-c"]],[[8,46,"pl-c"],[8,10,"pl-c"]],[[8,37,"pl-c1"]],[[8,19,"pl-c1"]],[[8,13,"pl-c1"]],[],[],[[4,48,"pl-en"]],[[8,14,"pl-c1"],[31,95,"pl-s"],[31,32,"pl-pds"],[94,95,"pl-pds"]],[[8,10,"pl-k"],[28,29,"pl-c1"]],[[27,35,"pl-c1"],[36,47,"pl-k"],[48,54,"pl-c1"]],[],[[22,25,"pl-k"],[26,30,"pl-k"]],[],[],[[4,49,"pl-en"]],[[8,16,"pl-k"]],[[8,72,"pl-c"],[8,10,"pl-c"]],[[8,27,"pl-c"],[8,10,"pl-c"]],[[22,29,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,47,"pl-en"]],[[8,15,"pl-c1"]],[[17,22,"pl-smi"]],[[17,24,"pl-smi"]],[[17,25,"pl-smi"],[28,29,"pl-c1"]],[[8,19,"pl-c1"]],[[8,14,"pl-k"],[15,24,"pl-en"]],[],[[11,21,"pl-smi"]],[[11,19,"pl-smi"]],[[8,11,"pl-k"],[18,24,"pl-c1"],[29,30,"pl-c1"],[36,42,"pl-k"],[55,61,"pl-k"]],[[12,21,"pl-c1"],[36,38,"pl-smi"]],[],[],[],[[1,3,"pl-k"]],[[5,11,"pl-k"]],[[1,6,"pl-k"]],[],[],[[4,8,"pl-k"],[9,50,"pl-en"],[53,61,"pl-k"]],[[8,37,"pl-c1"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[[1,6,"pl-k"],[7,36,"pl-c"],[7,9,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,20,"pl-en"]],[],[[8,16,"pl-c1"],[17,30,"pl-en"],[31,36,"pl-k"]],[[12,25,"pl-c1"],[26,32,"pl-k"],[33,38,"pl-k"],[43,49,"pl-k"],[50,58,"pl-c1"],[61,104,"pl-s"],[61,62,"pl-pds"],[103,104,"pl-pds"]],[[12,20,"pl-c1"]],[[12,23,"pl-c1"],[32,38,"pl-k"]],[[12,18,"pl-k"]],[],[],[[8,16,"pl-c1"],[17,30,"pl-en"],[31,37,"pl-k"]],[[12,25,"pl-c1"],[26,32,"pl-k"],[33,39,"pl-k"],[44,50,"pl-k"],[51,59,"pl-c1"],[62,105,"pl-s"],[62,63,"pl-pds"],[104,105,"pl-pds"]],[[12,20,"pl-c1"]],[[12,23,"pl-c1"],[32,38,"pl-k"]],[[12,18,"pl-k"]],[],[],[[1,3,"pl-k"]],[[5,11,"pl-k"]],[[5,11,"pl-k"]],[[1,6,"pl-k"]],[[8,12,"pl-k"],[13,26,"pl-en"],[28,33,"pl-k"],[39,44,"pl-k"],[53,59,"pl-k"]],[[8,12,"pl-k"],[13,26,"pl-en"],[28,34,"pl-k"],[40,46,"pl-k"],[55,61,"pl-k"]],[[1,3,"pl-k"]],[[5,11,"pl-k"]],[[1,6,"pl-k"]],[],[],[[6,29,"pl-c"],[6,8,"pl-c"]],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,20,"pl-en"]],[],[[1,3,"pl-k"]],[[8,12,"pl-k"],[13,18,"pl-k"],[20,26,"pl-en"],[28,32,"pl-k"],[33,38,"pl-k"],[44,50,"pl-k"],[51,58,"pl-c1"]],[[1,5,"pl-k"]],[],[[8,12,"pl-k"],[13,18,"pl-k"],[20,26,"pl-en"],[28,32,"pl-k"],[33,38,"pl-k"]],[[5,7,"pl-k"]],[[9,15,"pl-k"]],[[9,15,"pl-k"],[42,75,"pl-c"],[42,44,"pl-c"]],[[5,10,"pl-k"]],[],[[12,18,"pl-k"],[19,30,"pl-c1"]],[],[[5,7,"pl-k"]],[[9,15,"pl-k"]],[[5,10,"pl-k"]],[],[[1,6,"pl-k"]],[[2,21,"pl-c"],[2,4,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,28,"pl-en"],[33,40,"pl-k"]],[],[[0,9,"pl-k"],[10,16,"pl-en"]],[[4,13,"pl-k"]],[[8,16,"pl-k"],[17,25,"pl-k"],[40,46,"pl-c1"],[58,61,"pl-c1"]],[[8,13,"pl-k"],[14,27,"pl-en"],[28,33,"pl-k"]],[[12,16,"pl-k"]],[],[],[[8,15,"pl-k"]],[[12,25,"pl-en"]],[[16,20,"pl-c1"],[35,41,"pl-k"]],[],[],[[12,26,"pl-en"],[29,37,"pl-k"],[38,46,"pl-k"]],[[16,35,"pl-c1"]],[],[],[[8,16,"pl-k"]],[[12,15,"pl-k"],[16,24,"pl-en"],[26,29,"pl-k"],[34,42,"pl-k"]],[[16,20,"pl-c1"]],[],[[16,18,"pl-k"]],[[20,22,"pl-k"],[24,29,"pl-c1"],[35,40,"pl-c1"]],[[24,32,"pl-c1"],[34,45,"pl-c1"],[47,48,"pl-c1"],[50,61,"pl-k"],[62,66,"pl-k"]],[[20,24,"pl-k"]],[[24,29,"pl-c1"],[31,42,"pl-k"],[43,47,"pl-k"]],[],[[16,22,"pl-k"],[23,24,"pl-c1"]],[],[],[[12,15,"pl-k"],[16,20,"pl-en"],[23,31,"pl-k"]],[[16,18,"pl-k"],[20,25,"pl-c1"],[31,35,"pl-c1"]],[[20,28,"pl-c1"],[30,41,"pl-c1"],[43,48,"pl-c1"],[52,63,"pl-k"],[89,93,"pl-c1"],[98,103,"pl-c1"]],[[20,24,"pl-c1"],[26,31,"pl-c1"],[35,40,"pl-c1"]],[],[[16,22,"pl-k"],[23,24,"pl-c1"]],[],[],[],[[8,83,"pl-c"],[8,10,"pl-c"]],[],[[8,14,"pl-k"],[15,32,"pl-en"]],[],[[12,16,"pl-k"],[17,25,"pl-en"],[41,46,"pl-k"]],[[16,18,"pl-k"],[26,31,"pl-c1"]],[[20,39,"pl-c1"]],[],[],[],[],[[8,83,"pl-c"],[8,10,"pl-c"]],[],[[8,13,"pl-k"],[14,24,"pl-en"],[25,30,"pl-k"]],[],[[8,15,"pl-k"]],[[12,22,"pl-en"],[36,41,"pl-k"]],[[22,26,"pl-c1"],[37,42,"pl-c1"]],[[16,29,"pl-c1"],[38,42,"pl-c1"],[46,70,"pl-s"],[46,47,"pl-pds"],[69,70,"pl-pds"],[86,90,"pl-s"],[86,87,"pl-pds"],[87,89,"pl-cce"],[89,90,"pl-pds"]],[],[],[[8,15,"pl-k"],[16,26,"pl-c"],[16,18,"pl-c"]],[[26,32,"pl-en"],[35,43,"pl-k"]],[[16,22,"pl-k"]],[],[],[],[[8,83,"pl-c"],[8,10,"pl-c"]],[],[[8,13,"pl-k"],[14,24,"pl-en"],[25,30,"pl-k"]],[],[[8,15,"pl-k"]],[[12,61,"pl-c"],[12,14,"pl-c"]],[[12,57,"pl-c"],[12,14,"pl-c"]],[[12,22,"pl-en"]],[],[[8,15,"pl-k"],[16,26,"pl-c"],[16,18,"pl-c"]],[[26,32,"pl-en"],[35,43,"pl-k"],[46,52,"pl-k"]],[[12,16,"pl-k"],[17,26,"pl-en"],[29,34,"pl-k"],[35,43,"pl-k"],[46,52,"pl-k"],[53,57,"pl-c1"]],[],[],[[8,13,"pl-k"],[14,24,"pl-en"],[27,33,"pl-k"],[34,41,"pl-en"]],[],[],[[8,15,"pl-k"]],[[12,61,"pl-c"],[12,14,"pl-c"]],[[12,57,"pl-c"],[12,14,"pl-c"]],[[12,22,"pl-en"]],[],[[8,15,"pl-k"],[16,26,"pl-c"],[16,18,"pl-c"]],[[26,32,"pl-en"],[35,43,"pl-k"],[46,52,"pl-k"]],[[12,16,"pl-k"],[17,26,"pl-en"],[29,34,"pl-k"],[35,43,"pl-k"],[46,52,"pl-k"],[53,57,"pl-c1"]],[],[],[[8,83,"pl-c"],[8,10,"pl-c"]],[],[[8,13,"pl-k"],[14,28,"pl-en"],[29,34,"pl-k"]],[],[],[[8,15,"pl-k"]],[[12,26,"pl-en"]],[],[[16,20,"pl-en"]],[],[],[[8,15,"pl-k"],[16,26,"pl-c"],[16,18,"pl-c"]],[[26,32,"pl-en"],[35,43,"pl-k"],[46,52,"pl-k"]],[],[],[[6,26,"pl-c"],[6,8,"pl-c"]],[[2,21,"pl-c"],[2,4,"pl-c"]],[],[[4,79,"pl-c"],[4,6,"pl-c"]],[],[[4,8,"pl-k"],[9,19,"pl-en"],[33,38,"pl-k"]],[[8,10,"pl-k"],[22,27,"pl-c1"],[45,48,"pl-s"],[45,46,"pl-pds"],[47,48,"pl-pds"]],[[12,18,"pl-k"]],[],[[8,10,"pl-k"],[21,22,"pl-c1"],[27,30,"pl-s"],[27,28,"pl-pds"],[29,30,"pl-pds"]],[[12,14,"pl-k"],[29,37,"pl-s"],[29,30,"pl-pds"],[36,37,"pl-pds"]],[[16,22,"pl-k"]],[[14,18,"pl-k"],[19,21,"pl-k"],[36,45,"pl-s"],[36,37,"pl-pds"],[44,45,"pl-pds"]],[[16,22,"pl-k"]],[[14,18,"pl-k"],[19,21,"pl-k"],[36,45,"pl-s"],[36,37,"pl-pds"],[44,45,"pl-pds"]],[[16,22,"pl-k"]],[[14,18,"pl-k"]],[[16,27,"pl-c1"],[29,53,"pl-s"],[29,30,"pl-pds"],[52,53,"pl-pds"],[69,73,"pl-s"],[69,70,"pl-pds"],[70,72,"pl-cce"],[72,73,"pl-pds"]],[],[],[[8,14,"pl-k"]],[],[],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,8,"pl-k"],[9,26,"pl-en"],[51,59,"pl-c1"]],[[8,11,"pl-k"],[19,27,"pl-c1"],[32,33,"pl-c1"]],[[18,22,"pl-s"],[18,19,"pl-pds"],[21,22,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,38,"pl-en"]],[[40,44,"pl-k"]],[[45,53,"pl-c1"]],[[8,10,"pl-k"],[36,39,"pl-s"],[36,37,"pl-pds"],[38,39,"pl-pds"]],[[23,27,"pl-c1"]],[[14,18,"pl-s"],[14,15,"pl-pds"],[15,17,"pl-cce"],[17,18,"pl-pds"]],[[8,14,"pl-c1"]],[],[],[[4,38,"pl-en"]],[[30,31,"pl-c1"]],[],[[4,38,"pl-en"]],[[45,53,"pl-c1"]],[],[[16,19,"pl-s"],[16,17,"pl-pds"],[18,19,"pl-pds"]],[],[[4,38,"pl-en"],[68,76,"pl-k"]],[[21,25,"pl-smi"]],[[31,45,"pl-smi"]],[[31,45,"pl-smi"]],[[25,33,"pl-smi"]],[[15,23,"pl-smi"],[26,31,"pl-c1"]],[],[],[[4,39,"pl-en"]],[[8,10,"pl-k"],[27,33,"pl-k"]],[],[[16,20,"pl-s"],[16,17,"pl-pds"],[17,19,"pl-cce"],[19,20,"pl-pds"]],[[8,25,"pl-c1"]],[[16,19,"pl-s"],[16,17,"pl-pds"],[18,19,"pl-pds"]],[],[],[[20,43,"pl-en"]],[[8,37,"pl-c1"]],[[51,52,"pl-c1"]],[],[[16,19,"pl-s"],[16,17,"pl-pds"],[18,19,"pl-pds"],[30,36,"pl-s"],[30,31,"pl-pds"],[31,33,"pl-cce"],[35,36,"pl-pds"]],[[8,14,"pl-k"],[55,56,"pl-c1"]],[],[],[[4,36,"pl-en"]],[[29,30,"pl-c1"]],[[4,36,"pl-en"]],[[43,51,"pl-c1"]],[],[[16,19,"pl-s"],[16,17,"pl-pds"],[18,19,"pl-pds"]],[],[[4,36,"pl-en"],[65,73,"pl-k"]],[[21,25,"pl-smi"]],[[31,45,"pl-smi"]],[[31,45,"pl-smi"]],[[25,33,"pl-smi"]],[[15,23,"pl-smi"],[26,31,"pl-c1"]],[],[[4,37,"pl-en"]],[[8,10,"pl-k"],[27,33,"pl-k"]],[],[[16,20,"pl-s"],[16,17,"pl-pds"],[17,19,"pl-cce"],[19,20,"pl-pds"]],[[8,25,"pl-c1"]],[[16,19,"pl-s"],[16,17,"pl-pds"],[18,19,"pl-pds"]],[],[],[[21,49,"pl-en"]],[[8,37,"pl-c1"]],[[51,52,"pl-c1"]],[[8,14,"pl-k"],[56,57,"pl-c1"]],[],[],[[20,47,"pl-en"]],[[8,37,"pl-c1"]],[[51,52,"pl-c1"]],[[8,14,"pl-k"],[55,56,"pl-c1"]],[],[],[[21,43,"pl-en"],[45,49,"pl-k"]],[[8,14,"pl-k"],[15,24,"pl-c1"]],[],[],[[4,36,"pl-en"]],[[29,30,"pl-c1"]],[],[[4,36,"pl-en"]],[[43,51,"pl-c1"]],[],[],[[21,49,"pl-en"]],[[8,14,"pl-k"]],[],[],[[20,47,"pl-en"]],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,31,"pl-en"]],[[8,17,"pl-c1"],[26,30,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,31,"pl-en"],[33,37,"pl-k"]],[[8,17,"pl-c1"],[27,33,"pl-s"],[27,28,"pl-pds"],[32,33,"pl-pds"],[39,46,"pl-s"],[39,40,"pl-pds"],[45,46,"pl-pds"],[51,56,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,35,"pl-en"],[61,65,"pl-k"]],[[8,10,"pl-k"],[31,34,"pl-s"],[31,32,"pl-pds"],[33,34,"pl-pds"]],[[8,11,"pl-k"],[13,17,"pl-k"]],[[12,72,"pl-c"],[12,14,"pl-c"]],[[12,33,"pl-c"],[12,14,"pl-c"]],[[12,70,"pl-c"],[12,14,"pl-c"]],[[12,72,"pl-c"],[12,14,"pl-c"]],[[12,49,"pl-c"],[12,14,"pl-c"]],[[12,14,"pl-k"],[22,25,"pl-s"],[22,23,"pl-pds"],[24,25,"pl-pds"]],[[24,30,"pl-s"],[24,25,"pl-pds"],[25,29,"pl-cce"],[29,30,"pl-pds"]],[[14,18,"pl-k"],[19,21,"pl-k"],[29,33,"pl-s"],[29,30,"pl-pds"],[30,32,"pl-cce"],[32,33,"pl-pds"]],[[24,30,"pl-s"],[24,25,"pl-pds"],[25,29,"pl-cce"],[29,30,"pl-pds"]],[[14,18,"pl-k"],[19,21,"pl-k"],[29,33,"pl-s"],[29,30,"pl-pds"],[30,32,"pl-cce"],[32,33,"pl-pds"]],[[24,29,"pl-s"],[24,25,"pl-pds"],[25,27,"pl-cce"],[28,29,"pl-pds"]],[[14,18,"pl-k"],[19,21,"pl-k"],[29,33,"pl-s"],[29,30,"pl-pds"],[30,32,"pl-cce"],[32,33,"pl-pds"]],[[24,29,"pl-s"],[24,25,"pl-pds"],[25,27,"pl-cce"],[28,29,"pl-pds"]],[[14,18,"pl-k"],[19,21,"pl-k"],[29,33,"pl-s"],[29,30,"pl-pds"],[30,32,"pl-cce"],[32,33,"pl-pds"]],[[24,29,"pl-s"],[24,25,"pl-pds"],[25,27,"pl-cce"],[28,29,"pl-pds"]],[[14,18,"pl-k"],[19,21,"pl-k"],[29,33,"pl-s"],[29,30,"pl-pds"],[30,32,"pl-cce"],[32,33,"pl-pds"]],[[24,29,"pl-s"],[24,25,"pl-pds"],[25,27,"pl-cce"],[28,29,"pl-pds"]],[[14,18,"pl-k"],[19,21,"pl-k"],[29,33,"pl-s"],[29,30,"pl-pds"],[30,32,"pl-cce"],[32,33,"pl-pds"]],[[24,29,"pl-s"],[24,25,"pl-pds"],[25,27,"pl-cce"],[28,29,"pl-pds"]],[[14,18,"pl-k"]],[],[],[],[[8,10,"pl-k"],[31,34,"pl-s"],[31,32,"pl-pds"],[33,34,"pl-pds"]],[],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,8,"pl-k"],[9,17,"pl-k"],[55,60,"pl-k"]],[[8,10,"pl-k"],[21,32,"pl-smi"]],[[18,21,"pl-s"],[18,19,"pl-pds"],[20,21,"pl-pds"]],[],[[8,10,"pl-k"]],[[12,14,"pl-k"],[25,36,"pl-smi"],[49,70,"pl-smi"],[72,90,"pl-c1"]],[[22,25,"pl-s"],[22,23,"pl-pds"],[24,25,"pl-pds"],[39,60,"pl-smi"],[64,67,"pl-s"],[64,65,"pl-pds"],[66,67,"pl-pds"]],[[12,16,"pl-k"]],[[32,53,"pl-smi"]],[[10,14,"pl-k"]],[[18,72,"pl-s"],[18,19,"pl-pds"],[71,72,"pl-pds"]],[],[[8,14,"pl-k"]],[],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,6,"pl-k"]],[[1,8,"pl-k"],[9,19,"pl-s"],[9,10,"pl-pds"],[18,19,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,30,"pl-en"]],[[8,11,"pl-k"],[19,33,"pl-c1"]],[],[],[[8,22,"pl-c1"]],[[8,25,"pl-c1"]],[[8,25,"pl-c1"]],[[8,68,"pl-c"],[8,10,"pl-c"]],[[8,25,"pl-c1"],[27,28,"pl-c1"]],[],[],[],[[1,5,"pl-k"],[6,80,"pl-c"],[6,8,"pl-c"]],[],[[4,37,"pl-en"]],[],[[1,6,"pl-k"],[7,37,"pl-c"],[7,9,"pl-c"]],[],[[0,34,"pl-en"]],[[4,18,"pl-c1"]],[],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"]],[],[[8,12,"pl-k"],[13,22,"pl-en"],[57,62,"pl-k"]],[[12,16,"pl-k"],[17,22,"pl-k"],[42,50,"pl-c1"]],[[12,16,"pl-k"],[36,47,"pl-c1"],[48,69,"pl-c1"]],[[21,30,"pl-c1"]],[],[],[[8,12,"pl-k"],[13,21,"pl-en"],[56,61,"pl-k"]],[[12,16,"pl-k"],[17,22,"pl-k"],[42,50,"pl-c1"]],[[59,70,"pl-c1"],[71,92,"pl-c1"]],[],[],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"]],[[16,19,"pl-k"],[21,25,"pl-k"],[26,31,"pl-k"],[52,67,"pl-c1"],[70,74,"pl-smi"]],[[20,24,"pl-k"],[40,44,"pl-c1"],[53,61,"pl-smi"]],[[20,22,"pl-k"],[40,43,"pl-c1"]],[[39,45,"pl-c1"],[46,60,"pl-c1"],[69,77,"pl-smi"],[79,86,"pl-c1"],[91,96,"pl-smi"]],[[24,30,"pl-smi"],[31,34,"pl-c1"],[43,51,"pl-smi"]],[],[],[],[[46,53,"pl-c1"],[64,68,"pl-c1"]],[[12,15,"pl-k"],[17,21,"pl-k"]],[[22,31,"pl-c1"],[32,42,"pl-c1"],[48,54,"pl-smi"]],[],[],[[21,29,"pl-c1"]],[],[],[[8,12,"pl-k"],[13,26,"pl-en"]],[],[],[[12,16,"pl-k"],[17,22,"pl-k"],[36,50,"pl-c1"],[53,72,"pl-c1"],[75,87,"pl-c1"]],[[25,32,"pl-c1"],[43,47,"pl-c1"]],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"]],[[29,38,"pl-c1"],[45,50,"pl-smi"],[56,62,"pl-smi"],[64,78,"pl-c1"]],[],[],[[21,34,"pl-c1"]],[],[],[[8,12,"pl-k"],[13,26,"pl-en"]],[],[],[[12,16,"pl-k"],[17,22,"pl-k"]],[[16,30,"pl-c1"],[33,52,"pl-c1"],[55,67,"pl-c1"]],[[25,32,"pl-c1"],[44,48,"pl-c1"]],[[12,15,"pl-k"],[18,22,"pl-k"],[23,28,"pl-k"]],[[29,38,"pl-c1"],[47,54,"pl-c1"],[63,77,"pl-c1"]],[],[],[[21,34,"pl-c1"]],[],[],[[6,32,"pl-c"],[6,8,"pl-c"]],[],[[4,8,"pl-k"],[9,21,"pl-en"]],[],[[18,24,"pl-c1"]],[],[],[[16,28,"pl-en"],[31,36,"pl-k"]],[[8,45,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-c1"],[33,37,"pl-c1"],[42,43,"pl-c1"]],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[29,33,"pl-c1"]],[],[],[[29,36,"pl-c1"]],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[19,22,"pl-s"],[19,20,"pl-pds"],[21,22,"pl-pds"]],[],[[19,22,"pl-s"],[19,20,"pl-pds"],[21,22,"pl-pds"]],[],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,13,"pl-en"],[48,53,"pl-k"]],[[8,12,"pl-k"],[22,27,"pl-c1"]],[[8,10,"pl-k"],[19,28,"pl-c1"]],[[21,25,"pl-c1"]],[[12,21,"pl-c1"]],[],[[8,10,"pl-k"],[19,27,"pl-c1"]],[[21,25,"pl-c1"]],[[12,20,"pl-c1"]],[],[[8,10,"pl-k"],[19,32,"pl-c1"]],[[21,25,"pl-c1"]],[[12,25,"pl-c1"]],[],[[8,10,"pl-k"],[20,33,"pl-c1"]],[[21,25,"pl-c1"]],[[12,25,"pl-c1"]],[],[[8,14,"pl-k"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[],[[4,10,"pl-k"]],[],[],[],[[0,81,"pl-c"],[0,2,"pl-c"]],[[1,3,"pl-k"]],[],[[1,3,"pl-k"]],[[0,49,"pl-c"],[0,2,"pl-c"]],[[0,6,"pl-k"],[7,10,"pl-s"],[7,8,"pl-pds"],[9,10,"pl-pds"],[11,14,"pl-k"],[23,28,"pl-en"],[30,33,"pl-k"],[40,47,"pl-k"],[58,65,"pl-k"]],[[1,5,"pl-k"]],[[0,34,"pl-c"],[0,2,"pl-c"]],[[0,3,"pl-k"],[4,8,"pl-smi"],[10,13,"pl-k"],[20,24,"pl-k"]],[],[],[[4,69,"pl-c"],[4,6,"pl-c"]],[[4,70,"pl-c"],[4,6,"pl-c"]],[[5,9,"pl-k"]],[],[[4,10,"pl-k"],[11,25,"pl-c1"],[28,31,"pl-c1"]],[],[],[[7,48,"pl-c"],[7,9,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,28,"pl-en"]],[[47,52,"pl-k"]],[],[],[[8,16,"pl-en"]],[],[],[],[],[[4,61,"pl-c"],[4,6,"pl-c"]],[[4,12,"pl-k"],[13,16,"pl-k"],[44,45,"pl-c1"]],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[1,3,"pl-k"]],[[5,7,"pl-k"]],[[9,16,"pl-k"],[17,23,"pl-s"],[17,18,"pl-pds"],[22,23,"pl-pds"],[24,40,"pl-c"],[24,26,"pl-c"]],[[9,15,"pl-k"],[16,19,"pl-en"]],[[9,15,"pl-k"],[16,20,"pl-en"]],[[9,15,"pl-k"],[16,22,"pl-en"]],[[5,9,"pl-k"]],[[9,16,"pl-k"],[17,27,"pl-s"],[17,18,"pl-pds"],[26,27,"pl-pds"],[28,43,"pl-c"],[28,30,"pl-c"]],[[5,10,"pl-k"]],[[1,6,"pl-k"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,13,"pl-k"]],[[8,68,"pl-c"],[8,10,"pl-c"]],[[8,24,"pl-c"],[8,10,"pl-c"]],[[8,13,"pl-k"],[14,26,"pl-en"],[29,35,"pl-k"],[36,50,"pl-en"]],[[12,16,"pl-k"],[17,29,"pl-en"],[32,40,"pl-k"]],[[12,16,"pl-k"],[17,31,"pl-en"],[34,42,"pl-k"]],[[24,33,"pl-en"],[36,44,"pl-k"],[47,53,"pl-k"]],[[24,33,"pl-en"],[36,44,"pl-k"],[47,53,"pl-k"]],[[12,16,"pl-k"],[17,29,"pl-en"],[32,40,"pl-k"]],[],[],[[8,11,"pl-c"],[8,10,"pl-c"]],[[0,60,"pl-c"]],[[0,10,"pl-c"]],[[0,68,"pl-c"]],[[0,69,"pl-c"]],[[0,17,"pl-c"]],[[0,11,"pl-c"],[9,11,"pl-c"]],[[8,13,"pl-k"],[14,33,"pl-en"]],[],[],[],[],[[8,15,"pl-k"]],[[12,31,"pl-en"]],[],[[16,32,"pl-en"]],[[16,35,"pl-en"]],[[16,25,"pl-en"]],[],[[12,16,"pl-k"],[17,30,"pl-en"]],[[33,38,"pl-c1"],[60,65,"pl-c1"]],[],[[12,16,"pl-k"],[17,29,"pl-en"],[51,56,"pl-c1"]],[],[],[[8,11,"pl-c"],[8,10,"pl-c"]],[[0,71,"pl-c"]],[[0,76,"pl-c"]],[[0,11,"pl-c"],[9,11,"pl-c"]],[[8,13,"pl-k"],[14,28,"pl-en"],[31,37,"pl-k"],[38,52,"pl-en"]],[],[],[],[[8,15,"pl-k"]],[[12,26,"pl-en"]],[[16,22,"pl-en"]],[[16,22,"pl-en"]],[[16,22,"pl-en"]],[],[[12,16,"pl-k"],[17,29,"pl-en"],[32,40,"pl-k"]],[[23,36,"pl-c1"]],[[23,36,"pl-c1"]],[[23,36,"pl-c1"]],[],[[12,16,"pl-k"],[17,31,"pl-en"],[34,42,"pl-k"]],[[23,35,"pl-c1"]],[[23,35,"pl-c1"]],[[23,35,"pl-c1"]],[],[[24,33,"pl-en"],[36,44,"pl-k"],[47,53,"pl-k"],[70,73,"pl-c1"]],[[24,33,"pl-en"],[36,44,"pl-k"],[47,53,"pl-k"],[70,73,"pl-c1"]],[[12,16,"pl-k"],[17,29,"pl-en"],[32,40,"pl-k"]],[[32,35,"pl-c1"],[37,39,"pl-s"],[37,38,"pl-pds"],[38,39,"pl-pds"]],[[32,35,"pl-c1"],[37,39,"pl-s"],[37,38,"pl-pds"],[38,39,"pl-pds"]],[],[],[],[[1,3,"pl-k"]],[],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,71,"pl-c"],[8,10,"pl-c"]],[[8,43,"pl-c"],[8,10,"pl-c"]],[[8,13,"pl-k"],[14,22,"pl-en"]],[[8,15,"pl-k"]],[[12,20,"pl-en"],[31,36,"pl-k"],[42,48,"pl-k"]],[[22,30,"pl-k"],[42,47,"pl-k"],[53,59,"pl-k"]],[[12,20,"pl-en"],[37,43,"pl-k"]],[[22,30,"pl-k"],[48,54,"pl-k"]],[],[[5,7,"pl-k"]],[[12,20,"pl-en"]],[[16,18,"pl-k"],[21,29,"pl-c1"]],[[20,39,"pl-c1"],[41,72,"pl-s"],[41,42,"pl-pds"],[71,72,"pl-pds"]],[],[[16,18,"pl-k"],[21,28,"pl-c1"],[49,54,"pl-s"],[49,50,"pl-pds"],[53,54,"pl-pds"]],[[20,24,"pl-k"],[32,35,"pl-c1"]],[[20,22,"pl-k"],[25,35,"pl-c1"]],[[24,43,"pl-c1"]],[[28,67,"pl-s"],[28,29,"pl-pds"],[66,67,"pl-pds"]],[],[[20,39,"pl-c1"],[41,74,"pl-s"],[41,42,"pl-pds"],[73,74,"pl-pds"]],[],[[44,57,"pl-s"],[44,45,"pl-pds"],[56,57,"pl-pds"]],[],[],[[5,9,"pl-k"]],[[12,20,"pl-en"]],[[25,37,"pl-c1"]],[[16,18,"pl-k"]],[[20,39,"pl-c1"],[41,72,"pl-s"],[41,42,"pl-pds"],[71,72,"pl-pds"]],[],[],[[5,10,"pl-k"]],[],[[12,21,"pl-en"]],[[16,53,"pl-c"],[16,18,"pl-c"]],[[16,27,"pl-c1"]],[[16,72,"pl-c"],[16,18,"pl-c"]],[[16,41,"pl-c"],[16,18,"pl-c"]],[[5,7,"pl-k"]],[[16,27,"pl-c1"]],[[5,10,"pl-k"]],[],[],[[23,30,"pl-en"],[35,41,"pl-k"]],[[24,35,"pl-en"]],[],[[16,25,"pl-k"],[26,30,"pl-k"],[45,48,"pl-c1"]],[[16,20,"pl-k"],[42,43,"pl-c1"]],[[16,20,"pl-k"],[35,40,"pl-c1"]],[[16,29,"pl-c1"],[46,47,"pl-c1"]],[[31,54,"pl-s"],[31,32,"pl-pds"],[53,54,"pl-pds"]],[[16,27,"pl-c1"]],[[16,21,"pl-k"],[38,39,"pl-c1"]],[[20,24,"pl-k"]],[[24,34,"pl-c1"]],[[36,37,"pl-c1"]],[[36,44,"pl-c1"]],[],[[46,50,"pl-s"],[46,47,"pl-pds"],[47,49,"pl-cce"],[49,50,"pl-pds"]],[],[[35,46,"pl-k"],[47,51,"pl-k"]],[],[[16,22,"pl-k"],[28,31,"pl-c1"]],[],[],[[12,16,"pl-k"],[17,22,"pl-en"],[27,38,"pl-c1"]],[],[[8,16,"pl-k"]],[[32,39,"pl-c1"]],[[12,16,"pl-k"],[40,41,"pl-c1"]],[],[],[[8,11,"pl-c"],[8,10,"pl-c"]],[[0,67,"pl-c"]],[[0,10,"pl-c"]],[[0,67,"pl-c"]],[[0,39,"pl-c"]],[[0,11,"pl-c"],[9,11,"pl-c"]],[[8,13,"pl-k"],[14,26,"pl-en"],[29,35,"pl-k"],[36,50,"pl-en"]],[],[[12,15,"pl-k"],[33,34,"pl-c1"]],[[12,15,"pl-k"],[33,34,"pl-c1"]],[],[[12,67,"pl-c"],[12,14,"pl-c"]],[[12,16,"pl-k"],[17,32,"pl-en"]],[[16,27,"pl-c1"]],[[16,22,"pl-c1"]],[[16,75,"pl-c"],[16,18,"pl-c"]],[[16,54,"pl-c"],[16,18,"pl-c"]],[[16,27,"pl-c1"]],[[16,27,"pl-c1"]],[[16,22,"pl-c1"]],[],[],[[8,15,"pl-k"]],[[12,24,"pl-en"]],[[16,29,"pl-en"]],[[16,29,"pl-en"]],[[16,29,"pl-c1"],[48,49,"pl-c1"],[51,73,"pl-s"],[51,52,"pl-pds"],[72,73,"pl-pds"]],[[16,29,"pl-c1"],[48,49,"pl-c1"],[51,73,"pl-s"],[51,52,"pl-pds"],[72,73,"pl-pds"]],[],[],[[24,33,"pl-en"],[36,44,"pl-k"],[47,53,"pl-k"],[64,75,"pl-c1"]],[[24,33,"pl-en"],[36,44,"pl-k"],[47,53,"pl-k"],[64,75,"pl-c1"]],[[12,16,"pl-k"],[17,29,"pl-en"],[32,40,"pl-k"]],[[26,31,"pl-c1"]],[[26,31,"pl-c1"]],[],[],[[12,16,"pl-k"],[17,29,"pl-en"],[32,40,"pl-k"]],[[16,74,"pl-c"],[16,18,"pl-c"]],[[16,73,"pl-c"],[16,18,"pl-c"]],[[16,31,"pl-c1"]],[],[[16,19,"pl-k"]],[[22,26,"pl-c1"],[28,34,"pl-c1"],[46,53,"pl-c1"],[59,65,"pl-c1"]],[[16,29,"pl-c1"],[38,39,"pl-c1"]],[[31,67,"pl-s"],[31,32,"pl-pds"],[66,67,"pl-pds"]],[[22,26,"pl-c1"],[28,34,"pl-c1"],[46,53,"pl-c1"],[59,65,"pl-c1"]],[[16,29,"pl-c1"],[38,39,"pl-c1"]],[[31,67,"pl-s"],[31,32,"pl-pds"],[66,67,"pl-pds"]],[],[[12,16,"pl-k"],[17,31,"pl-en"],[34,42,"pl-k"]],[[16,69,"pl-c"],[16,18,"pl-c"]],[[16,75,"pl-c"],[16,18,"pl-c"]],[[16,31,"pl-c1"]],[],[[16,19,"pl-k"]],[[22,26,"pl-c1"],[43,49,"pl-c1"]],[[16,29,"pl-c1"]],[[27,28,"pl-c1"]],[[20,65,"pl-s"],[20,21,"pl-pds"],[64,65,"pl-pds"]],[[22,26,"pl-c1"],[43,49,"pl-c1"]],[[16,29,"pl-c1"]],[[27,28,"pl-c1"]],[[20,65,"pl-s"],[20,21,"pl-pds"],[64,65,"pl-pds"]],[],[],[],[[1,6,"pl-k"],[7,34,"pl-c"],[7,9,"pl-c"]],[],[[6,22,"pl-c"],[6,8,"pl-c"]],[],[[4,8,"pl-k"],[9,28,"pl-en"]],[[8,14,"pl-k"]],[[8,41,"pl-c"],[8,10,"pl-c"]],[[8,12,"pl-k"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[19,23,"pl-c1"]],[[1,3,"pl-k"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[19,23,"pl-c1"]],[[1,6,"pl-k"]],[[8,15,"pl-k"]],[[12,18,"pl-k"],[19,24,"pl-c1"]],[],[],[],[[39,57,"pl-en"],[59,63,"pl-k"]],[[8,10,"pl-k"]],[[12,40,"pl-c"],[12,14,"pl-c"]],[[1,3,"pl-k"]],[[12,18,"pl-k"]],[[1,5,"pl-k"]],[[12,18,"pl-k"]],[[1,6,"pl-k"]],[[10,14,"pl-k"]],[[12,18,"pl-k"]],[],[],[],[[18,32,"pl-en"]],[[8,14,"pl-k"],[15,28,"pl-c1"],[30,34,"pl-c1"]],[],[],[[18,34,"pl-en"]],[[8,14,"pl-k"],[15,28,"pl-c1"],[30,35,"pl-c1"]],[],[],[[4,35,"pl-en"],[40,47,"pl-k"]],[],[[4,32,"pl-en"],[34,38,"pl-k"]],[[8,18,"pl-en"]],[[8,18,"pl-en"]],[[8,26,"pl-en"]],[],[[8,60,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"],[50,56,"pl-k"]],[],[[8,10,"pl-k"]],[[24,32,"pl-c1"]],[[10,14,"pl-k"]],[[24,34,"pl-c1"]],[],[],[],[[4,33,"pl-en"],[36,44,"pl-k"],[46,51,"pl-c1"]],[[8,10,"pl-k"],[25,31,"pl-k"]],[[8,60,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"],[50,56,"pl-k"]],[],[[8,10,"pl-k"]],[[24,34,"pl-c1"]],[[10,14,"pl-k"]],[[24,32,"pl-c1"]],[],[],[],[[4,32,"pl-en"],[56,64,"pl-k"]],[[8,18,"pl-en"]],[[8,18,"pl-en"]],[[8,26,"pl-en"]],[[8,15,"pl-en"],[17,22,"pl-c1"]],[[12,19,"pl-smi"],[22,26,"pl-c1"]],[],[],[[34,42,"pl-k"],[67,75,"pl-k"]],[[25,35,"pl-smi"]],[[25,35,"pl-smi"]],[[33,51,"pl-smi"]],[[18,23,"pl-c1"]],[[12,19,"pl-smi"],[22,26,"pl-c1"]],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[[1,3,"pl-k"]],[[5,7,"pl-k"]],[[9,14,"pl-k"]],[[9,14,"pl-k"]],[[9,14,"pl-k"]],[[5,10,"pl-k"]],[[1,6,"pl-k"]],[],[],[],[],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[13,21,"pl-k"],[22,25,"pl-k"],[27,36,"pl-en"],[49,54,"pl-k"],[63,66,"pl-k"]],[[8,12,"pl-k"],[23,27,"pl-c1"]],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,49,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"],[21,26,"pl-c1"],[40,41,"pl-c1"],[46,49,"pl-s"],[46,47,"pl-pds"],[48,49,"pl-pds"]],[[12,18,"pl-k"]],[],[],[],[[12,18,"pl-c1"],[25,26,"pl-c1"]],[[12,17,"pl-k"],[18,22,"pl-k"],[29,40,"pl-c1"]],[],[[12,71,"pl-c"],[12,14,"pl-c"]],[[12,74,"pl-c"],[12,14,"pl-c"]],[[12,75,"pl-c"],[12,14,"pl-c"]],[[12,73,"pl-c"],[12,14,"pl-c"]],[[12,14,"pl-k"],[32,36,"pl-c1"]],[[16,22,"pl-k"]],[],[[12,24,"pl-c"],[12,14,"pl-c"]],[[12,14,"pl-k"],[43,51,"pl-k"],[52,55,"pl-k"],[58,61,"pl-c1"]],[[16,22,"pl-k"]],[],[[12,18,"pl-k"],[19,30,"pl-k"],[31,39,"pl-k"],[40,43,"pl-k"]],[],[[8,24,"pl-c1"],[48,53,"pl-k"]],[[12,47,"pl-c"],[12,14,"pl-c"]],[],[[8,24,"pl-c1"],[44,49,"pl-k"]],[[12,64,"pl-c"],[12,14,"pl-c"]],[],[[8,14,"pl-k"]],[],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,16,"pl-s"],[9,10,"pl-pds"],[15,16,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[1,3,"pl-k"]],[[4,8,"pl-k"],[9,14,"pl-en"],[15,20,"pl-k"]],[[8,14,"pl-k"],[15,25,"pl-c1"]],[],[[4,8,"pl-k"],[9,14,"pl-en"],[15,21,"pl-k"]],[[8,14,"pl-k"],[15,25,"pl-c1"]],[],[[1,5,"pl-k"]],[[4,47,"pl-c"],[4,6,"pl-c"]],[[4,8,"pl-k"],[9,14,"pl-en"],[15,20,"pl-k"]],[[8,14,"pl-k"],[15,26,"pl-c1"]],[],[[4,8,"pl-k"],[9,14,"pl-en"],[15,21,"pl-k"]],[[8,14,"pl-k"],[15,26,"pl-c1"]],[],[[1,6,"pl-k"]],[],[[1,3,"pl-k"]],[[4,9,"pl-k"],[10,19,"pl-en"],[21,26,"pl-k"],[30,35,"pl-k"],[42,48,"pl-k"],[49,63,"pl-c1"]],[[4,10,"pl-k"],[11,20,"pl-en"],[22,28,"pl-k"],[32,38,"pl-k"],[45,51,"pl-k"],[52,66,"pl-c1"]],[[1,5,"pl-k"]],[[4,9,"pl-k"],[10,19,"pl-en"],[21,26,"pl-k"],[30,35,"pl-k"],[42,48,"pl-k"],[51,61,"pl-c1"]],[[4,10,"pl-k"],[11,20,"pl-en"],[22,28,"pl-k"],[32,38,"pl-k"],[45,51,"pl-k"],[54,63,"pl-c1"]],[[1,6,"pl-k"]],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[0,9,"pl-k"]],[],[[1,3,"pl-k"]],[[1,7,"pl-k"]],[[1,7,"pl-k"],[30,67,"pl-c"],[30,32,"pl-c"]],[[1,6,"pl-k"]],[[8,57,"pl-c"],[8,10,"pl-c"]],[[8,16,"pl-c1"],[17,29,"pl-en"],[30,38,"pl-c1"],[44,52,"pl-c1"]],[[12,17,"pl-k"],[18,26,"pl-c1"],[34,36,"pl-c1"]],[],[[12,18,"pl-k"]],[],[],[[1,3,"pl-k"]],[[1,7,"pl-k"]],[[1,6,"pl-k"]],[],[],[],[],[[4,28,"pl-en"]],[[8,12,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,26,"pl-en"]],[[18,19,"pl-c1"]],[[10,14,"pl-c1"]],[],[[10,14,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,29,"pl-en"],[30,38,"pl-c1"]],[[8,69,"pl-c"],[8,10,"pl-c"]],[[8,43,"pl-c"],[8,10,"pl-c"]],[[8,11,"pl-k"],[13,21,"pl-c1"],[26,27,"pl-c1"]],[[12,23,"pl-k"],[24,28,"pl-k"],[32,36,"pl-c1"]],[],[],[],[[29,50,"pl-en"]],[[8,35,"pl-c"],[8,10,"pl-c"]],[[8,13,"pl-k"],[14,22,"pl-c1"],[36,47,"pl-k"],[48,56,"pl-c1"],[71,74,"pl-c1"],[90,93,"pl-c1"]],[[8,13,"pl-k"],[14,18,"pl-k"],[28,40,"pl-c1"],[53,64,"pl-k"],[65,73,"pl-c1"],[86,89,"pl-c1"]],[],[[8,24,"pl-c"],[8,10,"pl-c"]],[[28,50,"pl-c1"]],[],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,17,"pl-k"],[32,37,"pl-k"],[56,61,"pl-k"]],[[8,14,"pl-k"],[19,26,"pl-smi"],[34,41,"pl-smi"]],[],[],[[4,8,"pl-k"],[9,17,"pl-k"],[32,37,"pl-k"],[56,61,"pl-k"]],[[8,14,"pl-k"],[19,26,"pl-smi"],[34,41,"pl-smi"]],[],[],[],[],[],[],[],[[1,8,"pl-k"],[9,16,"pl-s"],[9,10,"pl-pds"],[15,16,"pl-pds"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[9,17,"pl-c1"],[18,36,"pl-en"]],[[8,14,"pl-k"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[19,30,"pl-k"],[36,44,"pl-c1"],[47,56,"pl-c1"],[58,65,"pl-c1"]],[],[[8,12,"pl-k"]],[[8,12,"pl-k"]],[],[[12,18,"pl-k"],[45,53,"pl-c1"]],[],[],[[8,15,"pl-k"]],[[12,23,"pl-c1"],[24,51,"pl-s"],[24,25,"pl-pds"],[50,51,"pl-pds"]],[],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,10,"pl-k"],[11,27,"pl-en"]],[],[],[],[],[],[[4,38,"pl-en"]],[[8,14,"pl-en"]],[[8,68,"pl-c"],[8,10,"pl-c"]],[[8,47,"pl-c"],[8,10,"pl-c"]],[[16,25,"pl-smi"],[26,36,"pl-s"],[26,27,"pl-pds"],[35,36,"pl-pds"]],[],[[16,25,"pl-smi"],[26,35,"pl-s"],[26,27,"pl-pds"],[34,35,"pl-pds"]],[],[[16,25,"pl-smi"],[26,35,"pl-s"],[26,27,"pl-pds"],[34,35,"pl-pds"]],[],[[16,25,"pl-smi"],[26,33,"pl-s"],[26,27,"pl-pds"],[32,33,"pl-pds"]],[],[[16,25,"pl-smi"],[26,37,"pl-s"],[26,27,"pl-pds"],[36,37,"pl-pds"]],[],[[16,25,"pl-smi"],[26,31,"pl-s"],[26,27,"pl-pds"],[30,31,"pl-pds"]],[],[[16,25,"pl-smi"],[26,36,"pl-s"],[26,27,"pl-pds"],[35,36,"pl-pds"]],[],[[16,25,"pl-smi"],[26,31,"pl-s"],[26,27,"pl-pds"],[30,31,"pl-pds"]],[],[[16,25,"pl-smi"],[26,32,"pl-s"],[26,27,"pl-pds"],[31,32,"pl-pds"]],[],[],[],[[4,39,"pl-en"],[44,51,"pl-k"]],[],[],[[4,28,"pl-en"],[42,47,"pl-k"]],[[56,61,"pl-k"]],[[8,12,"pl-k"],[26,35,"pl-smi"],[36,40,"pl-c1"]],[[8,10,"pl-k"],[27,36,"pl-smi"],[37,40,"pl-c1"],[45,51,"pl-k"],[52,59,"pl-c1"]],[[8,14,"pl-k"],[19,25,"pl-smi"],[27,33,"pl-c1"],[35,45,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,43,"pl-en"],[57,62,"pl-k"]],[],[[8,21,"pl-c1"],[28,32,"pl-c1"],[34,38,"pl-s"],[34,35,"pl-pds"],[37,38,"pl-pds"],[49,53,"pl-smi"]],[[23,64,"pl-s"],[23,24,"pl-pds"],[63,64,"pl-pds"]],[[27,31,"pl-s"],[27,28,"pl-pds"],[28,30,"pl-cce"],[30,31,"pl-pds"]],[[8,12,"pl-k"],[27,36,"pl-smi"],[37,44,"pl-c1"],[52,62,"pl-c1"]],[[8,21,"pl-c1"],[27,33,"pl-smi"]],[[23,41,"pl-s"],[23,24,"pl-pds"],[40,41,"pl-pds"]],[[27,61,"pl-s"],[27,28,"pl-pds"],[60,61,"pl-pds"]],[],[[4,8,"pl-k"],[9,43,"pl-en"]],[],[[16,25,"pl-smi"],[26,35,"pl-c1"],[37,47,"pl-c1"]],[],[],[],[],[[42,47,"pl-k"]],[[4,34,"pl-en"],[37,42,"pl-k"]],[[8,14,"pl-k"],[23,32,"pl-smi"]],[],[],[[58,63,"pl-k"]],[[4,34,"pl-en"],[37,42,"pl-k"]],[[8,14,"pl-k"],[23,32,"pl-smi"]],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,13,"pl-k"]],[[8,14,"pl-k"],[15,21,"pl-en"]],[],[],[],[[15,26,"pl-en"]],[[12,16,"pl-k"],[28,39,"pl-k"],[40,46,"pl-c1"]],[[16,25,"pl-c1"],[36,41,"pl-c1"],[54,57,"pl-c1"],[61,64,"pl-s"],[61,62,"pl-pds"],[63,64,"pl-pds"]],[[25,30,"pl-c1"]],[],[[12,18,"pl-k"],[30,36,"pl-c1"],[38,39,"pl-c1"]],[[30,36,"pl-c1"],[49,50,"pl-c1"],[61,65,"pl-c1"]],[],[],[],[[4,13,"pl-k"],[14,20,"pl-en"]],[[33,50,"pl-en"]],[[12,18,"pl-k"],[19,28,"pl-k"],[29,33,"pl-k"],[46,50,"pl-s"],[46,47,"pl-pds"],[49,50,"pl-pds"]],[[12,18,"pl-k"],[19,28,"pl-k"],[29,35,"pl-c1"],[52,53,"pl-c1"]],[],[[12,18,"pl-c1"],[34,35,"pl-c1"]],[[12,16,"pl-k"],[54,60,"pl-c1"]],[[16,29,"pl-c1"]],[[37,38,"pl-c1"]],[[20,71,"pl-s"],[20,21,"pl-pds"],[70,71,"pl-pds"]],[],[[16,20,"pl-k"]],[[16,18,"pl-k"]],[[20,25,"pl-k"],[54,58,"pl-c1"]],[[66,67,"pl-c1"]],[],[],[[20,22,"pl-k"],[38,39,"pl-c1"],[55,59,"pl-c1"]],[[51,52,"pl-c1"],[67,68,"pl-c1"]],[[24,30,"pl-k"]],[],[],[[18,23,"pl-k"],[52,56,"pl-c1"]],[],[[16,22,"pl-k"],[23,34,"pl-k"],[35,41,"pl-c1"],[45,46,"pl-c1"]],[],[],[],[],[[12,17,"pl-k"],[48,52,"pl-c1"]],[[16,21,"pl-k"],[22,26,"pl-k"],[43,60,"pl-c1"]],[[22,31,"pl-c1"],[33,44,"pl-k"],[72,78,"pl-c1"]],[],[],[[16,18,"pl-k"],[38,49,"pl-k"],[50,56,"pl-c1"],[60,61,"pl-c1"]],[[20,25,"pl-k"]],[],[],[],[],[[12,45,"pl-c"],[12,14,"pl-c"]],[[12,74,"pl-c"],[12,14,"pl-c"]],[[12,32,"pl-c"],[12,14,"pl-c"]],[[12,14,"pl-k"],[46,50,"pl-c1"]],[[22,34,"pl-c1"]],[],[],[[12,18,"pl-k"]],[],[],[[29,47,"pl-en"]],[[12,14,"pl-k"],[31,40,"pl-s"],[31,32,"pl-pds"],[39,40,"pl-pds"]],[[16,22,"pl-k"]],[[14,18,"pl-k"],[19,21,"pl-k"],[38,44,"pl-s"],[38,39,"pl-pds"],[43,44,"pl-pds"]],[[16,22,"pl-k"]],[[14,18,"pl-k"],[19,21,"pl-k"],[38,45,"pl-s"],[38,39,"pl-pds"],[44,45,"pl-pds"]],[[16,22,"pl-k"]],[[14,18,"pl-k"],[19,21,"pl-k"],[38,44,"pl-s"],[38,39,"pl-pds"],[43,44,"pl-pds"]],[[16,22,"pl-k"]],[[14,18,"pl-k"]],[[16,22,"pl-k"]],[],[],[[6,25,"pl-c"],[6,8,"pl-c"]],[],[],[[4,8,"pl-k"],[9,17,"pl-k"],[34,39,"pl-k"],[59,64,"pl-k"]],[[8,14,"pl-k"],[19,25,"pl-smi"],[33,39,"pl-smi"]],[[19,35,"pl-smi"],[43,59,"pl-smi"]],[[19,31,"pl-smi"],[39,51,"pl-smi"]],[[19,34,"pl-smi"],[42,57,"pl-smi"]],[],[],[[27,44,"pl-en"]],[[8,12,"pl-k"],[21,46,"pl-c1"]],[],[[8,14,"pl-c1"],[22,26,"pl-c1"],[31,32,"pl-c1"],[36,76,"pl-s"],[36,37,"pl-pds"],[75,76,"pl-pds"]],[],[],[],[],[],[[8,60,"pl-c"],[8,10,"pl-c"]],[[8,11,"pl-k"],[14,20,"pl-c1"],[25,26,"pl-c1"],[38,42,"pl-c1"]],[[12,16,"pl-k"],[22,33,"pl-c1"]],[[12,16,"pl-k"],[26,29,"pl-smi"],[42,47,"pl-smi"]],[],[[12,14,"pl-k"],[21,26,"pl-c1"],[38,43,"pl-c1"],[50,82,"pl-c"],[50,52,"pl-c"]],[[16,22,"pl-k"]],[[14,18,"pl-k"],[19,21,"pl-k"],[28,29,"pl-c1"],[34,37,"pl-s"],[34,35,"pl-pds"],[36,37,"pl-pds"]],[[16,75,"pl-c"],[16,18,"pl-c"]],[[16,49,"pl-c"],[16,18,"pl-c"]],[[16,18,"pl-k"],[25,29,"pl-c1"],[35,36,"pl-c1"]],[[20,26,"pl-k"]],[],[],[[16,20,"pl-k"],[35,42,"pl-c1"],[44,55,"pl-c1"],[59,62,"pl-smi"],[65,76,"pl-c1"],[80,85,"pl-smi"]],[[16,18,"pl-k"],[26,32,"pl-smi"]],[[20,80,"pl-c"],[20,22,"pl-c"]],[[20,62,"pl-c"],[20,22,"pl-c"]],[[20,26,"pl-k"]],[],[[14,18,"pl-k"],[19,21,"pl-k"],[31,36,"pl-s"],[31,32,"pl-pds"],[35,36,"pl-pds"]],[[16,33,"pl-c"],[16,18,"pl-c"]],[[16,18,"pl-k"]],[[20,26,"pl-k"]],[],[[33,44,"pl-k"]],[[14,18,"pl-k"],[19,21,"pl-k"],[31,44,"pl-s"],[31,32,"pl-pds"],[43,44,"pl-pds"]],[[16,33,"pl-c"],[16,18,"pl-c"]],[[16,18,"pl-k"]],[[20,26,"pl-k"]],[],[[29,55,"pl-c1"]],[[16,33,"pl-c"],[16,18,"pl-c"]],[[16,18,"pl-k"]],[[20,26,"pl-k"]],[],[[14,18,"pl-k"]],[[16,38,"pl-c"],[16,18,"pl-c"]],[[16,22,"pl-k"]],[],[],[],[[8,14,"pl-k"],[29,39,"pl-c1"],[47,48,"pl-c1"]],[[29,39,"pl-c1"]],[[29,39,"pl-c1"]],[[29,39,"pl-c1"]],[],[],[[0,26,"pl-en"]],[],[],[],[],[[8,14,"pl-en"]],[[8,24,"pl-en"]],[[8,20,"pl-en"]],[[8,23,"pl-en"]],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,87,"pl-c"],[4,6,"pl-c"]],[[4,10,"pl-k"],[11,24,"pl-en"]],[],[[25,31,"pl-c1"]],[[46,80,"pl-c"],[46,48,"pl-c"]],[],[[8,12,"pl-k"],[13,16,"pl-en"]],[[12,14,"pl-k"],[25,30,"pl-c1"]],[[26,35,"pl-c1"]],[[16,22,"pl-k"],[33,37,"pl-c1"],[40,41,"pl-c1"]],[],[[12,16,"pl-k"]],[[16,20,"pl-k"],[38,42,"pl-c1"]],[[25,33,"pl-c1"]],[[16,22,"pl-k"]],[],[],[],[[8,12,"pl-k"],[13,20,"pl-en"],[27,33,"pl-c1"]],[[30,37,"pl-c1"],[60,100,"pl-c"],[60,62,"pl-c"]],[[21,30,"pl-c1"]],[],[],[],[[4,46,"pl-en"]],[],[[8,13,"pl-en"]],[],[],[[4,47,"pl-en"]],[[8,19,"pl-k"],[51,54,"pl-c1"],[55,57,"pl-s"],[55,56,"pl-pds"],[56,57,"pl-pds"]],[[15,20,"pl-c1"]],[[34,44,"pl-c1"],[47,54,"pl-c1"]],[],[],[[16,41,"pl-en"],[44,49,"pl-k"]],[[8,14,"pl-k"],[15,26,"pl-k"],[58,61,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,34,"pl-en"],[48,53,"pl-k"]],[[8,19,"pl-k"],[51,54,"pl-c1"]],[],[],[],[],[],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,13,"pl-k"],[14,24,"pl-en"]],[[8,17,"pl-k"]],[[12,18,"pl-k"],[19,35,"pl-en"],[36,41,"pl-k"]],[],[],[],[[16,32,"pl-en"]],[],[],[],[[20,31,"pl-en"]],[],[[16,22,"pl-k"]],[[16,23,"pl-en"]],[[62,67,"pl-k"]],[],[],[],[[51,65,"pl-c1"]],[[20,74,"pl-c"],[20,22,"pl-c"]],[[20,73,"pl-c"],[20,22,"pl-c"]],[[20,73,"pl-c"],[20,22,"pl-c"]],[[20,73,"pl-c"],[20,22,"pl-c"]],[[20,31,"pl-c"],[20,22,"pl-c"]],[[20,67,"pl-c"],[20,22,"pl-c"]],[[20,56,"pl-c"],[20,22,"pl-c"]],[[20,54,"pl-c"],[20,22,"pl-c"]],[[20,28,"pl-c"],[20,22,"pl-c"]],[[20,22,"pl-c"],[20,22,"pl-c"]],[[20,78,"pl-c"],[20,22,"pl-c"]],[[20,22,"pl-k"],[40,55,"pl-c1"]],[[24,28,"pl-k"],[58,64,"pl-c1"],[68,77,"pl-c1"]],[],[[24,30,"pl-c1"]],[[24,30,"pl-c1"],[45,63,"pl-c1"]],[[34,45,"pl-k"]],[[22,26,"pl-k"],[27,29,"pl-k"]],[[51,60,"pl-c1"]],[],[[24,30,"pl-c1"]],[[24,30,"pl-c1"],[46,64,"pl-c1"]],[],[[28,39,"pl-k"]],[[22,26,"pl-k"]],[[24,30,"pl-k"],[31,38,"pl-c1"]],[],[],[[20,22,"pl-k"],[35,45,"pl-c1"],[61,65,"pl-c1"]],[],[[20,26,"pl-k"]],[],[],[[16,40,"pl-c"],[16,18,"pl-c"]],[[16,20,"pl-k"],[21,39,"pl-en"],[42,47,"pl-k"],[48,56,"pl-k"],[59,65,"pl-k"],[66,70,"pl-c1"]],[[16,20,"pl-k"],[21,33,"pl-en"],[36,41,"pl-k"],[50,58,"pl-k"]],[[20,26,"pl-k"]],[],[[16,20,"pl-k"],[21,26,"pl-en"],[29,37,"pl-k"]],[[20,38,"pl-c1"]],[[20,79,"pl-c"],[20,22,"pl-c"]],[[20,79,"pl-c"],[20,22,"pl-c"]],[[20,65,"pl-c"],[20,22,"pl-c"]],[[20,80,"pl-c"],[20,22,"pl-c"]],[[20,34,"pl-c"],[20,22,"pl-c"]],[[20,76,"pl-c"],[20,22,"pl-c"]],[[20,72,"pl-c"],[20,22,"pl-c"]],[[20,34,"pl-c"],[20,22,"pl-c"]],[[20,25,"pl-k"],[26,30,"pl-k"]],[[24,60,"pl-c"],[24,26,"pl-c"]],[[24,26,"pl-k"],[40,45,"pl-c1"],[52,58,"pl-k"],[59,64,"pl-c1"]],[[24,78,"pl-c"],[24,26,"pl-c"]],[[24,26,"pl-k"],[29,41,"pl-c1"]],[[44,49,"pl-c1"]],[[44,47,"pl-c1"]],[[67,72,"pl-k"]],[],[[37,43,"pl-k"],[53,63,"pl-c1"]],[[51,54,"pl-c1"]],[[28,34,"pl-k"],[35,40,"pl-c1"]],[],[],[[24,77,"pl-c"],[24,26,"pl-c"]],[[24,76,"pl-c"],[24,26,"pl-c"]],[[24,79,"pl-c"],[24,26,"pl-c"]],[[24,40,"pl-c"],[24,26,"pl-c"]],[],[[24,77,"pl-c"],[24,26,"pl-c"]],[[24,63,"pl-c"],[24,26,"pl-c"]],[[24,29,"pl-k"],[41,57,"pl-c1"]],[[45,51,"pl-c1"]],[],[[24,30,"pl-c1"]],[[32,72,"pl-s"],[32,33,"pl-pds"],[71,72,"pl-pds"]],[],[[24,28,"pl-k"],[29,34,"pl-k"]],[[28,39,"pl-k"],[55,60,"pl-k"]],[[24,28,"pl-k"],[29,34,"pl-k"],[60,70,"pl-c1"]],[[24,76,"pl-c"],[24,26,"pl-c"]],[[24,26,"pl-k"],[37,42,"pl-c1"],[49,55,"pl-k"],[56,60,"pl-c1"]],[],[[24,27,"pl-k"],[30,34,"pl-k"],[35,40,"pl-k"]],[[28,30,"pl-k"],[40,56,"pl-c1"]],[[33,42,"pl-c1"],[52,57,"pl-c1"]],[[52,55,"pl-c1"]],[[44,55,"pl-k"],[71,76,"pl-k"]],[],[[49,60,"pl-c1"]],[[45,48,"pl-c1"]],[[32,38,"pl-k"],[39,43,"pl-c1"]],[],[],[[24,30,"pl-k"],[31,36,"pl-c1"]],[],[],[[20,78,"pl-c"],[20,22,"pl-c"]],[[20,79,"pl-c"],[20,22,"pl-c"]],[[20,77,"pl-c"],[20,22,"pl-c"]],[[20,78,"pl-c"],[20,22,"pl-c"]],[[20,26,"pl-c1"],[43,70,"pl-s"],[43,44,"pl-pds"],[69,70,"pl-pds"]],[[20,22,"pl-k"]],[],[[40,51,"pl-c1"]],[[35,40,"pl-c1"]],[],[],[],[],[[16,46,"pl-c"],[16,18,"pl-c"]],[[16,20,"pl-k"],[21,33,"pl-en"],[36,41,"pl-k"],[62,67,"pl-k"],[69,77,"pl-k"]],[[20,26,"pl-k"]],[],[[16,20,"pl-k"],[21,33,"pl-en"],[66,74,"pl-k"]],[[34,44,"pl-c1"]],[],[],[[10,22,"pl-c"],[10,12,"pl-c"]],[],[],[[4,26,"pl-en"],[35,40,"pl-k"]],[[27,31,"pl-en"]],[],[],[[29,38,"pl-c1"],[42,56,"pl-c1"],[57,59,"pl-s"],[57,58,"pl-pds"],[58,59,"pl-pds"],[60,61,"pl-c1"],[64,73,"pl-c1"]],[[8,24,"pl-en"],[58,72,"pl-en"]],[[46,70,"pl-en"]],[],[[8,32,"pl-c1"],[35,51,"pl-c1"],[53,57,"pl-c1"]],[[20,35,"pl-c1"]],[],[],[[4,27,"pl-en"]],[[20,32,"pl-c1"],[33,45,"pl-c1"],[67,75,"pl-c1"]],[],[],[[11,30,"pl-en"],[46,51,"pl-k"]],[[8,13,"pl-k"]],[],[[8,12,"pl-k"],[13,18,"pl-k"],[40,55,"pl-c1"]],[[20,36,"pl-c1"]],[[17,32,"pl-c1"]],[],[],[],[[49,57,"pl-c1"]],[[8,14,"pl-c1"],[27,43,"pl-c1"]],[[8,19,"pl-k"],[50,67,"pl-c1"],[78,94,"pl-c1"]],[],[[8,74,"pl-c"],[8,10,"pl-c"]],[[8,71,"pl-c"],[8,10,"pl-c"]],[[8,72,"pl-c"],[8,10,"pl-c"]],[[8,34,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-c"],[8,10,"pl-c"]],[[8,75,"pl-c"],[8,10,"pl-c"]],[[8,76,"pl-c"],[8,10,"pl-c"]],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,45,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-c"],[8,10,"pl-c"]],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,71,"pl-c"],[8,10,"pl-c"]],[[8,17,"pl-c"],[8,10,"pl-c"]],[[8,24,"pl-c"],[8,10,"pl-c"]],[[8,58,"pl-c"],[8,10,"pl-c"]],[[8,29,"pl-c"],[8,10,"pl-c"]],[[8,62,"pl-c"],[8,10,"pl-c"]],[[8,16,"pl-c"],[8,10,"pl-c"]],[[8,29,"pl-c"],[8,10,"pl-c"]],[[8,62,"pl-c"],[8,10,"pl-c"]],[[8,16,"pl-c"],[8,10,"pl-c"]],[[8,12,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-c"],[8,10,"pl-c"]],[[8,77,"pl-c"],[8,10,"pl-c"]],[[8,77,"pl-c"],[8,10,"pl-c"]],[[8,29,"pl-c"],[8,10,"pl-c"]],[[8,74,"pl-c"],[8,10,"pl-c"]],[[8,79,"pl-c"],[8,10,"pl-c"]],[[8,75,"pl-c"],[8,10,"pl-c"]],[[8,61,"pl-c"],[8,10,"pl-c"]],[[8,15,"pl-c1"]],[],[[8,16,"pl-c1"],[28,29,"pl-c1"]],[],[],[[8,10,"pl-k"]],[[29,39,"pl-c1"]],[[33,56,"pl-c1"],[75,111,"pl-c1"],[121,125,"pl-smi"],[136,144,"pl-smi"]],[],[[24,47,"pl-c1"]],[],[[12,17,"pl-k"],[18,22,"pl-k"]],[[12,26,"pl-c1"]],[[55,64,"pl-c1"]],[[55,64,"pl-c1"]],[[30,42,"pl-c1"]],[],[],[],[[12,17,"pl-k"],[18,22,"pl-k"],[50,55,"pl-c1"]],[[12,16,"pl-k"],[34,47,"pl-c1"],[75,85,"pl-c1"],[99,109,"pl-c1"],[123,131,"pl-c1"]],[[24,44,"pl-c1"]],[],[],[[10,15,"pl-k"],[37,60,"pl-c1"],[67,75,"pl-c1"]],[],[[38,43,"pl-c1"]],[[8,10,"pl-k"],[21,35,"pl-c1"],[53,62,"pl-smi"],[63,69,"pl-smi"],[72,73,"pl-c1"]],[[24,34,"pl-smi"],[35,41,"pl-smi"]],[[24,33,"pl-smi"],[34,40,"pl-smi"]],[[24,33,"pl-smi"],[34,40,"pl-smi"]],[],[[17,26,"pl-smi"],[42,51,"pl-smi"]],[[17,33,"pl-c1"]],[[20,33,"pl-c1"],[34,47,"pl-c1"]],[],[[34,44,"pl-c1"]],[[34,44,"pl-c1"]],[[34,42,"pl-c1"]],[],[[27,34,"pl-c1"]],[[28,35,"pl-c1"]],[],[[8,14,"pl-k"]],[],[],[],[[4,8,"pl-k"],[9,35,"pl-en"]],[[8,10,"pl-k"],[19,32,"pl-c1"]],[[21,31,"pl-smi"],[32,38,"pl-smi"]],[[36,40,"pl-c1"]],[[10,14,"pl-k"],[15,17,"pl-k"],[26,39,"pl-c1"]],[[21,31,"pl-smi"],[32,39,"pl-smi"]],[[36,40,"pl-c1"]],[[10,14,"pl-k"],[15,17,"pl-k"],[27,36,"pl-c1"]],[[36,41,"pl-c1"]],[[12,14,"pl-k"],[23,27,"pl-c1"]],[],[[12,16,"pl-k"],[17,19,"pl-k"],[39,54,"pl-c1"],[57,65,"pl-c1"]],[[25,35,"pl-smi"],[36,47,"pl-smi"]],[[12,16,"pl-k"]],[[25,35,"pl-smi"],[36,42,"pl-smi"]],[],[[8,12,"pl-k"]],[[36,40,"pl-c1"]],[],[],[],[[12,16,"pl-k"],[21,37,"pl-c1"]],[[24,38,"pl-c1"],[40,54,"pl-c1"]],[],[],[[8,10,"pl-k"],[20,33,"pl-c1"]],[[28,33,"pl-c1"]],[],[],[[8,66,"pl-c"],[8,10,"pl-c"]],[[8,50,"pl-c"],[8,10,"pl-c"]],[[23,33,"pl-c1"]],[],[[4,8,"pl-k"],[9,39,"pl-en"]],[[28,37,"pl-smi"],[40,49,"pl-c1"]],[[28,46,"pl-smi"],[49,95,"pl-s"],[49,50,"pl-pds"],[94,95,"pl-pds"]],[[28,45,"pl-smi"]],[],[],[[4,8,"pl-k"],[9,43,"pl-en"],[59,64,"pl-k"]],[[8,12,"pl-k"],[17,33,"pl-c1"]],[[20,37,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,35,"pl-en"]],[[52,57,"pl-k"]],[],[],[[12,35,"pl-c1"]],[[37,73,"pl-c1"]],[],[],[[8,10,"pl-k"],[28,34,"pl-c1"]],[[12,18,"pl-k"],[19,24,"pl-c1"]],[[25,34,"pl-c1"]],[],[[20,31,"pl-smi"],[50,61,"pl-k"]],[[28,36,"pl-smi"],[51,59,"pl-smi"]],[],[],[[12,16,"pl-k"],[21,37,"pl-c1"]],[[24,39,"pl-c1"]],[],[],[[30,40,"pl-smi"]],[],[[8,14,"pl-k"],[15,19,"pl-c1"]],[],[],[[4,39,"pl-en"]],[[56,61,"pl-k"]],[[8,13,"pl-k"],[14,23,"pl-k"],[24,34,"pl-en"],[34,35,"pl-k"]],[[36,61,"pl-c1"]],[],[[12,48,"pl-c1"]],[],[[28,36,"pl-smi"]],[[8,14,"pl-k"]],[],[],[[23,57,"pl-en"]],[],[],[],[],[[8,12,"pl-k"],[26,59,"pl-c1"],[61,72,"pl-k"]],[[8,12,"pl-k"],[48,62,"pl-c1"]],[[8,14,"pl-c1"]],[[27,42,"pl-c1"]],[[12,75,"pl-s"],[12,13,"pl-pds"],[74,75,"pl-pds"]],[],[[8,12,"pl-k"]],[[12,22,"pl-c1"]],[[8,12,"pl-k"],[30,33,"pl-c1"]],[[23,31,"pl-c1"],[33,43,"pl-c1"]],[],[[13,25,"pl-c1"],[27,37,"pl-c1"]],[[13,17,"pl-c1"]],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,45,"pl-en"]],[[8,10,"pl-k"],[23,28,"pl-c1"],[34,35,"pl-c1"]],[[12,18,"pl-k"],[19,24,"pl-c1"]],[[8,10,"pl-k"],[23,49,"pl-c1"]],[[12,18,"pl-k"],[19,24,"pl-c1"]],[[8,10,"pl-k"],[29,43,"pl-c1"],[46,57,"pl-c1"]],[[12,18,"pl-k"],[19,24,"pl-c1"]],[[17,27,"pl-smi"],[28,34,"pl-smi"]],[[19,25,"pl-smi"]],[[8,14,"pl-k"],[15,19,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,33,"pl-en"]],[[37,47,"pl-smi"],[58,72,"pl-smi"]],[[8,12,"pl-k"],[33,57,"pl-c1"]],[],[[8,10,"pl-k"],[30,35,"pl-c1"]],[[29,33,"pl-c1"],[37,42,"pl-c1"]],[[29,37,"pl-c1"]],[],[],[],[[12,16,"pl-k"],[21,37,"pl-c1"]],[[24,36,"pl-c1"]],[[16,28,"pl-c1"],[30,40,"pl-c1"],[50,61,"pl-smi"]],[],[[38,55,"pl-smi"]],[],[],[],[[19,24,"pl-c1"]],[[24,29,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,38,"pl-en"]],[[8,10,"pl-k"],[34,39,"pl-c1"]],[[29,33,"pl-c1"],[37,41,"pl-c1"]],[[10,14,"pl-k"]],[[29,33,"pl-c1"],[37,42,"pl-c1"]],[],[[25,33,"pl-c1"]],[],[[29,38,"pl-c1"],[39,49,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,39,"pl-en"]],[[8,12,"pl-k"],[17,33,"pl-c1"]],[[20,38,"pl-c1"]],[],[[4,8,"pl-k"],[9,38,"pl-en"],[54,59,"pl-k"]],[[8,12,"pl-k"],[17,33,"pl-c1"]],[[20,37,"pl-c1"]],[],[[4,8,"pl-k"],[9,35,"pl-en"],[54,59,"pl-k"]],[[8,12,"pl-k"],[17,33,"pl-c1"]],[[20,34,"pl-c1"]],[],[[4,8,"pl-k"],[9,36,"pl-en"]],[[8,12,"pl-k"],[17,33,"pl-c1"]],[[20,35,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,38,"pl-en"],[51,56,"pl-k"]],[[19,28,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,37,"pl-en"],[50,55,"pl-k"]],[[19,24,"pl-c1"],[25,36,"pl-c1"],[48,53,"pl-c1"],[68,71,"pl-c1"],[96,99,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,43,"pl-en"]],[[24,36,"pl-c1"],[38,48,"pl-c1"]],[],[],[[16,46,"pl-en"],[49,54,"pl-k"]],[[8,14,"pl-k"]],[[32,47,"pl-c1"],[50,54,"pl-smi"]],[[14,25,"pl-c1"]],[],[],[[4,9,"pl-k"],[28,53,"pl-en"],[56,61,"pl-k"]],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,43,"pl-en"]],[[35,40,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,46,"pl-en"]],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,75,"pl-c"],[8,10,"pl-c"]],[[8,24,"pl-c"],[8,10,"pl-c"]],[[8,12,"pl-k"],[17,33,"pl-c1"]],[],[[8,57,"pl-c"],[8,10,"pl-c"]],[[20,41,"pl-c1"]],[],[[8,93,"pl-c"],[8,10,"pl-c"]],[[8,39,"pl-c"],[8,10,"pl-c"]],[[28,38,"pl-smi"],[74,79,"pl-c1"]],[[19,26,"pl-smi"],[29,40,"pl-k"]],[[24,30,"pl-smi"],[52,62,"pl-c1"]],[],[[8,22,"pl-c1"],[23,33,"pl-c1"]],[[8,26,"pl-c1"]],[],[[8,77,"pl-c"],[8,10,"pl-c"]],[[8,112,"pl-c"],[8,10,"pl-c"]],[[8,13,"pl-k"],[33,38,"pl-c1"]],[[12,16,"pl-k"],[39,43,"pl-c1"],[47,62,"pl-c1"]],[[36,47,"pl-c1"],[48,58,"pl-c1"],[62,70,"pl-smi"],[73,83,"pl-c1"],[87,91,"pl-smi"],[99,102,"pl-c1"]],[[12,29,"pl-c1"],[30,40,"pl-c1"]],[],[[8,32,"pl-c1"]],[],[[8,85,"pl-c"],[8,10,"pl-c"]],[[8,12,"pl-k"],[13,18,"pl-k"],[53,68,"pl-c1"]],[[20,35,"pl-smi"],[49,57,"pl-smi"],[72,76,"pl-smi"]],[],[],[[19,25,"pl-smi"],[28,29,"pl-c1"]],[[21,41,"pl-smi"],[42,52,"pl-c1"],[83,84,"pl-c1"],[86,91,"pl-c1"]],[[20,32,"pl-c1"]],[],[[8,12,"pl-k"],[13,18,"pl-k"],[49,64,"pl-c1"]],[],[],[[20,29,"pl-smi"],[30,36,"pl-smi"],[39,40,"pl-c1"]],[[20,30,"pl-smi"],[31,37,"pl-smi"],[40,41,"pl-c1"]],[[20,33,"pl-c1"],[34,47,"pl-c1"]],[],[[34,45,"pl-c1"]],[[34,45,"pl-c1"]],[[34,39,"pl-c1"]],[[17,26,"pl-smi"],[27,33,"pl-smi"]],[[20,32,"pl-c1"],[33,45,"pl-c1"],[67,72,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,40,"pl-en"]],[[9,15,"pl-k"]],[],[],[[4,8,"pl-k"],[9,36,"pl-en"]],[[32,36,"pl-c1"]],[[19,29,"pl-smi"],[30,36,"pl-smi"]],[[8,26,"pl-c1"]],[[24,29,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,29,"pl-en"],[32,37,"pl-k"]],[[8,14,"pl-k"],[24,34,"pl-smi"],[35,41,"pl-smi"],[45,56,"pl-k"],[62,68,"pl-c1"],[80,90,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,35,"pl-en"]],[[8,12,"pl-k"],[13,18,"pl-k"],[53,68,"pl-c1"]],[[20,35,"pl-smi"],[49,57,"pl-smi"],[72,76,"pl-smi"]],[[20,35,"pl-c1"]],[[41,51,"pl-smi"]],[[8,14,"pl-k"],[26,27,"pl-c1"]],[[35,39,"pl-c1"]],[[32,43,"pl-s"],[32,33,"pl-pds"],[42,43,"pl-pds"],[61,69,"pl-smi"],[71,80,"pl-c1"]],[],[],[],[],[[16,20,"pl-k"],[25,39,"pl-c1"]],[[22,27,"pl-c1"]],[[16,36,"pl-c1"]],[],[[29,46,"pl-c1"]],[[10,26,"pl-c1"]],[[12,66,"pl-c"],[12,14,"pl-c"]],[[10,26,"pl-c1"]],[[12,62,"pl-c"],[12,14,"pl-c"]],[],[[12,94,"pl-c"],[12,14,"pl-c"]],[[12,71,"pl-c"],[12,14,"pl-c"]],[[12,14,"pl-k"]],[],[[16,49,"pl-c1"],[72,96,"pl-c1"]],[],[],[[37,47,"pl-smi"]],[[8,12,"pl-k"],[33,57,"pl-c1"]],[],[[27,32,"pl-c1"]],[[8,32,"pl-c1"]],[[19,24,"pl-c1"]],[[24,29,"pl-c1"]],[],[[21,41,"pl-smi"],[42,52,"pl-c1"]],[[20,32,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,41,"pl-en"]],[[8,72,"pl-c"],[8,10,"pl-c"]],[[8,71,"pl-c"],[8,10,"pl-c"]],[[8,46,"pl-c"],[8,10,"pl-c"]],[[35,36,"pl-smi"]],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,73,"pl-c"],[8,10,"pl-c"]],[[9,13,"pl-k"]],[],[[26,32,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,45,"pl-en"]],[[8,76,"pl-c"],[8,10,"pl-c"]],[[8,74,"pl-c"],[8,10,"pl-c"]],[[8,11,"pl-k"],[14,18,"pl-k"],[45,51,"pl-c1"]],[[48,52,"pl-c1"]],[],[],[[12,24,"pl-c1"],[26,36,"pl-c1"]],[],[[29,34,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,31,"pl-en"]],[[22,27,"pl-k"]],[[29,34,"pl-k"]],[],[],[[8,12,"pl-k"],[23,34,"pl-c1"],[41,58,"pl-smi"]],[[8,12,"pl-k"],[27,36,"pl-c1"]],[],[[8,10,"pl-k"]],[[12,14,"pl-k"]],[[16,31,"pl-c1"]],[],[[12,16,"pl-k"]],[[16,26,"pl-c1"]],[],[],[[8,12,"pl-k"]],[[12,22,"pl-c1"]],[[12,28,"pl-c1"]],[],[[8,26,"pl-c1"]],[],[[4,8,"pl-k"],[9,31,"pl-en"]],[[26,31,"pl-k"]],[],[[33,38,"pl-k"]],[[12,16,"pl-k"]],[],[],[[28,32,"pl-smi"],[46,60,"pl-c1"]],[],[[47,57,"pl-c1"]],[[24,36,"pl-smi"],[37,51,"pl-smi"],[52,73,"pl-smi"]],[],[[8,22,"pl-c1"],[24,34,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,34,"pl-en"]],[[26,31,"pl-k"]],[],[],[],[],[],[],[[28,32,"pl-smi"],[46,60,"pl-c1"],[62,67,"pl-c1"]],[[13,20,"pl-smi"],[23,33,"pl-c1"]],[],[[41,51,"pl-c1"]],[],[[8,13,"pl-k"],[14,18,"pl-k"],[42,46,"pl-c1"]],[[8,22,"pl-c1"],[24,34,"pl-c1"]],[[8,10,"pl-k"]],[[12,28,"pl-c1"]],[[10,14,"pl-k"],[15,17,"pl-k"]],[[12,71,"pl-c"],[12,14,"pl-c"]],[[12,30,"pl-c"],[12,14,"pl-c"]],[[21,31,"pl-smi"],[34,38,"pl-c1"]],[],[[8,26,"pl-c1"]],[],[[4,8,"pl-k"],[9,55,"pl-en"]],[[26,31,"pl-k"]],[],[],[[8,21,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,54,"pl-en"]],[[26,31,"pl-k"]],[],[],[],[],[],[[28,32,"pl-smi"],[61,75,"pl-c1"],[77,82,"pl-c1"]],[[13,20,"pl-smi"],[23,33,"pl-c1"]],[[47,57,"pl-c1"]],[[8,22,"pl-c1"],[24,34,"pl-c1"]],[[8,24,"pl-c1"]],[[8,26,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,37,"pl-en"]],[[17,33,"pl-smi"],[46,62,"pl-c1"]],[[17,28,"pl-smi"],[31,39,"pl-c1"],[66,83,"pl-smi"]],[],[],[[4,8,"pl-k"],[9,37,"pl-en"]],[[26,31,"pl-k"]],[],[[8,13,"pl-k"],[14,23,"pl-k"],[24,27,"pl-en"],[44,45,"pl-k"]],[],[],[[28,32,"pl-smi"],[61,75,"pl-c1"],[77,82,"pl-c1"]],[[13,20,"pl-smi"],[23,88,"pl-s"],[23,24,"pl-pds"],[87,88,"pl-pds"]],[[47,57,"pl-c1"]],[[8,22,"pl-c1"],[24,34,"pl-c1"]],[[8,26,"pl-c1"]],[],[[4,8,"pl-k"],[9,34,"pl-en"]],[[26,31,"pl-k"]],[],[],[],[],[],[[28,32,"pl-smi"],[46,60,"pl-c1"],[62,67,"pl-c1"]],[[47,57,"pl-c1"]],[],[[8,13,"pl-k"],[14,18,"pl-k"],[42,46,"pl-c1"]],[[8,22,"pl-c1"],[24,34,"pl-c1"]],[[8,10,"pl-k"],[23,39,"pl-c1"]],[[8,26,"pl-c1"]],[],[],[],[[20,36,"pl-en"]],[[8,10,"pl-k"],[12,16,"pl-k"],[28,45,"pl-c1"],[48,64,"pl-c1"]],[[12,18,"pl-k"]],[[8,12,"pl-k"]],[[12,32,"pl-c1"],[33,61,"pl-s"],[33,34,"pl-pds"],[60,61,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,16,"pl-en"],[25,30,"pl-k"]],[[8,17,"pl-c1"],[20,24,"pl-c1"],[32,39,"pl-c1"]],[],[],[[4,12,"pl-k"],[13,16,"pl-k"],[17,24,"pl-en"]],[[8,14,"pl-k"],[15,32,"pl-c1"],[35,44,"pl-c1"],[48,55,"pl-c1"]],[],[],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,20,"pl-en"]],[[8,14,"pl-en"]],[[8,25,"pl-en"]],[[12,28,"pl-en"]],[[8,70,"pl-c"],[8,10,"pl-c"]],[[8,62,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"]],[[20,25,"pl-c1"]],[],[],[],[[4,20,"pl-en"],[37,42,"pl-k"]],[],[[22,27,"pl-k"],[28,32,"pl-k"],[34,39,"pl-k"]],[[18,27,"pl-s"],[18,19,"pl-pds"],[26,27,"pl-pds"],[29,40,"pl-k"],[46,52,"pl-c1"],[56,57,"pl-c1"]],[],[[12,28,"pl-en"]],[[8,71,"pl-c"],[8,10,"pl-c"]],[[8,78,"pl-c"],[8,10,"pl-c"]],[[8,77,"pl-c"],[8,10,"pl-c"]],[[8,40,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"]],[[19,23,"pl-smi"],[26,37,"pl-k"]],[[19,27,"pl-smi"]],[[20,25,"pl-c1"]],[],[],[],[[4,21,"pl-en"]],[[8,10,"pl-k"]],[[36,46,"pl-c1"],[78,95,"pl-c1"]],[[12,14,"pl-k"],[17,36,"pl-c1"]],[[16,32,"pl-c1"],[35,52,"pl-c1"],[54,64,"pl-c1"]],[[14,18,"pl-k"]],[[16,32,"pl-c1"],[35,47,"pl-c1"],[49,59,"pl-c1"]],[],[],[],[],[[4,67,"pl-c"],[4,6,"pl-c"]],[[13,21,"pl-k"],[22,26,"pl-en"],[29,34,"pl-k"]],[[8,14,"pl-k"]],[],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,13,"pl-k"]],[[8,14,"pl-k"],[15,19,"pl-k"],[20,33,"pl-en"]],[[12,18,"pl-k"],[60,67,"pl-c1"]],[[12,14,"pl-k"]],[[31,34,"pl-k"]],[[12,18,"pl-k"]],[],[],[],[[4,27,"pl-en"],[32,39,"pl-k"]],[],[[4,8,"pl-k"],[9,21,"pl-en"]],[[8,21,"pl-c1"],[25,34,"pl-c1"]],[],[[4,8,"pl-k"],[9,26,"pl-en"]],[[8,12,"pl-k"],[27,40,"pl-c1"]],[[8,11,"pl-k"],[13,17,"pl-k"]],[[12,18,"pl-k"]],[[8,14,"pl-k"]],[[21,28,"pl-c1"]],[],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,8,"pl-k"],[25,33,"pl-k"],[54,59,"pl-k"],[69,74,"pl-k"],[75,83,"pl-k"]],[[8,14,"pl-k"],[29,33,"pl-smi"],[52,56,"pl-smi"],[60,71,"pl-c1"],[84,88,"pl-smi"],[93,94,"pl-c1"]],[],[[4,8,"pl-k"],[25,33,"pl-k"],[53,58,"pl-k"],[68,73,"pl-k"],[74,82,"pl-k"]],[[8,79,"pl-c"],[8,10,"pl-c"]],[[8,86,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-k"],[28,32,"pl-smi"],[52,56,"pl-smi"],[74,78,"pl-smi"],[83,94,"pl-c1"],[107,111,"pl-smi"],[115,116,"pl-c1"]],[],[],[[18,26,"pl-k"],[65,70,"pl-k"]],[[1,7,"pl-k"]],[[19,23,"pl-smi"],[27,30,"pl-s"],[27,28,"pl-pds"],[29,30,"pl-pds"],[39,43,"pl-smi"],[47,50,"pl-s"],[47,48,"pl-pds"],[49,50,"pl-pds"]],[[1,5,"pl-k"]],[[19,23,"pl-smi"],[27,30,"pl-s"],[27,28,"pl-pds"],[29,30,"pl-pds"],[39,43,"pl-smi"]],[[1,6,"pl-k"]],[[8,14,"pl-k"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[1,3,"pl-k"]],[[4,8,"pl-k"],[9,38,"pl-en"],[59,64,"pl-k"],[78,86,"pl-k"]],[],[[25,34,"pl-c1"]],[],[[12,103,"pl-c"],[12,14,"pl-c"]],[[12,26,"pl-c1"]],[],[],[],[[36,41,"pl-k"],[43,82,"pl-en"],[85,90,"pl-k"],[91,99,"pl-k"]],[[8,14,"pl-k"]],[],[[1,6,"pl-k"]],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[],[[1,8,"pl-k"],[9,19,"pl-s"],[9,10,"pl-pds"],[18,19,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[0,57,"pl-c"],[0,2,"pl-c"]],[[1,3,"pl-k"]],[[18,22,"pl-en"],[27,33,"pl-k"]],[[18,22,"pl-en"],[27,33,"pl-k"]],[[18,22,"pl-en"],[27,33,"pl-k"]],[[1,6,"pl-k"]],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,8,"pl-k"],[9,19,"pl-en"],[33,38,"pl-k"],[55,60,"pl-k"]],[[8,14,"pl-k"],[17,21,"pl-c1"],[34,38,"pl-c1"],[44,54,"pl-c1"],[62,67,"pl-c1"],[78,81,"pl-c1"],[87,92,"pl-c1"]],[],[[4,8,"pl-k"],[9,19,"pl-en"],[34,38,"pl-k"]],[[8,14,"pl-k"],[18,23,"pl-c1"],[31,32,"pl-c1"]],[],[[4,8,"pl-k"],[9,17,"pl-en"],[31,36,"pl-k"],[53,58,"pl-k"]],[[8,14,"pl-k"],[17,21,"pl-c1"],[34,38,"pl-c1"],[44,54,"pl-c1"],[62,68,"pl-c1"],[79,83,"pl-c1"],[89,95,"pl-c1"]],[],[[4,8,"pl-k"],[9,17,"pl-en"],[31,36,"pl-k"],[41,45,"pl-k"]],[[8,14,"pl-k"],[18,23,"pl-c1"],[33,37,"pl-c1"],[40,41,"pl-c1"]],[],[[4,8,"pl-k"],[9,17,"pl-en"],[31,36,"pl-k"],[53,58,"pl-k"]],[[8,14,"pl-k"],[17,21,"pl-c1"]],[],[[4,8,"pl-k"],[9,23,"pl-en"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[16,23,"pl-c1"]],[],[],[[16,23,"pl-en"],[37,42,"pl-k"]],[],[[8,22,"pl-c1"]],[[8,14,"pl-k"]],[],[[4,8,"pl-k"],[9,16,"pl-en"],[17,21,"pl-k"]],[[8,14,"pl-k"],[15,26,"pl-k"],[27,31,"pl-k"],[33,45,"pl-c1"],[46,57,"pl-k"],[58,66,"pl-k"],[67,71,"pl-k"]],[],[],[[16,20,"pl-en"],[34,39,"pl-k"]],[[8,14,"pl-k"],[15,19,"pl-k"],[20,25,"pl-k"],[45,54,"pl-s"],[45,46,"pl-pds"],[46,52,"pl-cce"],[53,54,"pl-pds"]],[[43,60,"pl-c1"]],[[41,57,"pl-c1"]],[],[[8,14,"pl-k"],[48,54,"pl-c1"],[63,64,"pl-c1"],[79,90,"pl-c1"]],[],[],[[14,18,"pl-en"]],[[8,13,"pl-k"],[14,18,"pl-k"],[30,34,"pl-k"]],[[12,18,"pl-k"],[24,27,"pl-s"],[24,25,"pl-pds"],[26,27,"pl-pds"],[36,40,"pl-s"],[36,37,"pl-pds"],[37,39,"pl-cce"],[39,40,"pl-pds"],[49,53,"pl-s"],[49,50,"pl-pds"],[50,52,"pl-cce"],[52,53,"pl-pds"],[62,66,"pl-s"],[62,63,"pl-pds"],[63,65,"pl-cce"],[65,66,"pl-pds"]],[],[[8,14,"pl-c1"],[28,29,"pl-c1"]],[[8,13,"pl-k"],[32,36,"pl-c1"],[42,47,"pl-c1"]],[[8,14,"pl-c1"],[30,34,"pl-c1"]],[[8,13,"pl-k"],[40,45,"pl-c1"],[61,62,"pl-c1"]],[],[[8,14,"pl-k"],[19,25,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,23,"pl-en"],[55,60,"pl-k"],[87,92,"pl-k"]],[[13,19,"pl-c1"],[28,32,"pl-c1"]],[[8,10,"pl-k"]],[[12,18,"pl-k"],[19,24,"pl-c1"]],[],[[13,19,"pl-c1"],[32,33,"pl-c1"]],[[30,40,"pl-c1"]],[[12,17,"pl-c1"]],[[8,76,"pl-c"],[8,10,"pl-c"]],[[8,74,"pl-c"],[8,10,"pl-c"]],[[12,19,"pl-c1"],[28,32,"pl-c1"],[49,53,"pl-c1"],[67,71,"pl-c1"]],[[8,10,"pl-k"]],[[16,22,"pl-c1"]],[],[[40,44,"pl-c1"]],[[12,14,"pl-k"],[36,40,"pl-c1"]],[[28,32,"pl-c1"]],[[12,16,"pl-k"]],[],[[10,15,"pl-k"]],[[8,10,"pl-k"],[33,37,"pl-c1"]],[[16,22,"pl-c1"],[51,55,"pl-c1"]],[],[[8,14,"pl-k"],[15,19,"pl-c1"]],[],[],[[27,41,"pl-en"],[58,62,"pl-k"]],[],[[13,19,"pl-c1"],[28,29,"pl-c1"]],[[8,11,"pl-k"],[17,23,"pl-c1"],[30,31,"pl-c1"],[43,47,"pl-c1"]],[[12,14,"pl-k"]],[[16,18,"pl-k"],[34,35,"pl-c1"]],[[31,40,"pl-c1"],[46,52,"pl-c1"]],[[28,29,"pl-c1"]],[],[],[[8,10,"pl-k"],[24,28,"pl-c1"]],[[23,32,"pl-c1"],[38,44,"pl-c1"],[57,61,"pl-c1"]],[[8,14,"pl-k"]],[],[],[[18,26,"pl-k"],[60,65,"pl-k"]],[[25,32,"pl-smi"],[36,39,"pl-s"],[36,37,"pl-pds"],[38,39,"pl-pds"],[54,61,"pl-smi"]],[[8,10,"pl-k"],[23,30,"pl-smi"],[34,35,"pl-c1"]],[[18,21,"pl-s"],[18,19,"pl-pds"],[20,21,"pl-pds"]],[[8,14,"pl-k"]],[],[],[],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,24,"pl-en"],[26,30,"pl-k"],[31,36,"pl-k"],[49,57,"pl-k"]],[],[],[],[],[[4,8,"pl-k"],[20,28,"pl-k"],[45,50,"pl-k"],[51,59,"pl-k"]],[[8,10,"pl-k"],[25,31,"pl-smi"]],[[12,18,"pl-k"],[19,26,"pl-c1"],[40,47,"pl-smi"],[60,61,"pl-c1"]],[],[[8,14,"pl-k"],[15,22,"pl-c1"],[36,43,"pl-smi"],[49,55,"pl-smi"],[59,60,"pl-c1"]],[],[],[[4,7,"pl-k"],[8,26,"pl-en"],[44,49,"pl-k"]],[[8,12,"pl-k"]],[[12,19,"pl-c1"],[34,41,"pl-smi"],[43,51,"pl-c1"],[65,71,"pl-smi"]],[],[[8,72,"pl-c"],[8,10,"pl-c"]],[[8,47,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"],[26,27,"pl-c1"]],[[12,18,"pl-k"]],[],[],[[8,78,"pl-c"],[8,10,"pl-c"]],[[8,21,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"],[26,32,"pl-smi"]],[[12,18,"pl-k"],[20,21,"pl-c1"]],[[10,14,"pl-k"],[15,17,"pl-k"],[33,39,"pl-smi"]],[[12,18,"pl-k"],[19,20,"pl-c1"]],[[10,14,"pl-k"]],[[12,18,"pl-k"],[19,20,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,17,"pl-k"]],[[8,14,"pl-k"],[18,23,"pl-c1"],[28,32,"pl-c1"],[36,47,"pl-k"],[69,73,"pl-c1"]],[],[],[[16,24,"pl-k"]],[],[[12,19,"pl-c1"],[24,28,"pl-c1"],[37,41,"pl-c1"]],[],[],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,17,"pl-k"]],[[12,18,"pl-c1"],[23,27,"pl-c1"],[35,39,"pl-c1"]],[[8,14,"pl-k"]],[],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,39,"pl-en"],[44,51,"pl-k"]],[],[[13,18,"pl-k"],[20,42,"pl-en"],[56,61,"pl-k"],[71,76,"pl-k"]],[[8,12,"pl-k"],[29,33,"pl-c1"]],[[8,10,"pl-k"],[29,32,"pl-c1"]],[[12,18,"pl-k"],[25,31,"pl-smi"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[19,26,"pl-c1"]],[],[],[[16,47,"pl-en"],[61,66,"pl-k"],[89,94,"pl-k"]],[],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[17,23,"pl-c1"],[47,51,"pl-c1"],[65,70,"pl-smi"]],[[12,14,"pl-k"]],[[53,59,"pl-c1"],[61,62,"pl-c1"]],[[48,54,"pl-smi"],[55,58,"pl-smi"]],[[53,59,"pl-c1"],[79,84,"pl-smi"],[85,89,"pl-c1"]],[],[],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,30,"pl-en"],[44,49,"pl-k"],[70,75,"pl-k"],[97,102,"pl-k"]],[[8,21,"pl-c1"],[23,33,"pl-c1"],[41,45,"pl-s"],[41,42,"pl-pds"],[44,45,"pl-pds"],[50,58,"pl-c1"],[66,69,"pl-s"],[66,67,"pl-pds"],[68,69,"pl-pds"]],[[22,43,"pl-s"],[22,23,"pl-pds"],[42,43,"pl-pds"],[56,95,"pl-s"],[56,57,"pl-pds"],[92,94,"pl-cce"],[94,95,"pl-pds"]],[],[[8,21,"pl-c1"],[34,40,"pl-c1"],[41,55,"pl-c1"],[63,71,"pl-c1"],[89,95,"pl-smi"]],[[22,43,"pl-s"],[22,23,"pl-pds"],[42,43,"pl-pds"],[56,81,"pl-s"],[56,57,"pl-pds"],[78,80,"pl-cce"],[80,81,"pl-pds"]],[[25,44,"pl-s"],[25,26,"pl-pds"],[26,28,"pl-cce"],[43,44,"pl-pds"],[48,52,"pl-c1"],[61,69,"pl-smi"],[73,77,"pl-s"],[73,74,"pl-pds"],[74,76,"pl-cce"],[76,77,"pl-pds"]],[[25,43,"pl-s"],[25,26,"pl-pds"],[26,28,"pl-cce"],[42,43,"pl-pds"]],[],[],[[4,41,"pl-en"],[46,53,"pl-k"]],[],[[22,27,"pl-k"],[29,51,"pl-en"]],[[8,14,"pl-k"],[15,29,"pl-c1"],[32,51,"pl-c1"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,42,"pl-en"],[44,50,"pl-c1"]],[],[[4,12,"pl-c1"],[13,41,"pl-en"],[58,63,"pl-k"],[69,74,"pl-k"]],[[8,65,"pl-c"],[8,10,"pl-c"]],[[8,13,"pl-k"],[14,20,"pl-c1"],[29,43,"pl-c1"]],[[8,14,"pl-c1"],[22,43,"pl-c1"]],[[8,11,"pl-k"],[14,19,"pl-k"],[20,24,"pl-k"],[31,35,"pl-smi"]],[],[],[],[[8,11,"pl-k"],[14,19,"pl-k"],[20,24,"pl-k"],[31,40,"pl-smi"]],[],[],[],[[8,11,"pl-k"],[14,19,"pl-k"],[33,37,"pl-smi"]],[[12,15,"pl-k"],[18,23,"pl-k"],[24,28,"pl-k"],[37,45,"pl-smi"]],[],[],[],[],[],[],[[8,13,"pl-k"],[14,22,"pl-c1"],[28,39,"pl-k"],[40,48,"pl-c1"]],[[8,13,"pl-k"],[14,22,"pl-c1"],[29,40,"pl-k"],[41,49,"pl-c1"],[60,62,"pl-c1"]],[[8,14,"pl-k"]],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[[1,8,"pl-k"],[9,14,"pl-s"],[9,10,"pl-pds"],[13,14,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,13,"pl-k"]],[[8,14,"pl-k"],[15,19,"pl-k"],[20,47,"pl-en"]],[[40,45,"pl-k"]],[[12,16,"pl-k"],[48,53,"pl-k"]],[[48,53,"pl-k"]],[[16,22,"pl-k"]],[],[[34,39,"pl-k"],[42,50,"pl-c1"],[68,77,"pl-c1"]],[],[[12,15,"pl-k"],[18,22,"pl-k"],[23,28,"pl-k"]],[[16,21,"pl-k"],[22,26,"pl-k"],[43,58,"pl-c1"]],[[16,21,"pl-k"],[22,26,"pl-k"],[44,50,"pl-c1"]],[[16,29,"pl-c1"],[36,42,"pl-smi"]],[[31,52,"pl-s"],[31,32,"pl-pds"],[49,51,"pl-cce"],[51,52,"pl-pds"]],[[47,51,"pl-smi"],[55,73,"pl-s"],[55,56,"pl-pds"],[56,58,"pl-cce"],[70,72,"pl-cce"],[72,73,"pl-pds"]],[[47,59,"pl-c1"]],[[38,61,"pl-s"],[38,39,"pl-pds"],[39,41,"pl-cce"],[58,60,"pl-cce"],[60,61,"pl-pds"]],[[38,56,"pl-s"],[38,39,"pl-pds"],[39,41,"pl-cce"],[55,56,"pl-pds"]],[[46,51,"pl-smi"],[55,63,"pl-smi"],[67,71,"pl-s"],[67,68,"pl-pds"],[68,70,"pl-cce"],[70,71,"pl-pds"]],[[38,55,"pl-s"],[38,39,"pl-pds"],[39,41,"pl-cce"],[54,55,"pl-pds"],[68,76,"pl-smi"]],[],[],[],[[8,14,"pl-k"],[15,19,"pl-k"],[20,29,"pl-en"],[46,51,"pl-k"]],[[40,45,"pl-k"]],[[39,44,"pl-k"]],[[12,18,"pl-k"],[28,35,"pl-c1"],[46,61,"pl-c1"]],[[19,30,"pl-c1"]],[],[],[[6,30,"pl-c"],[6,8,"pl-c"]],[],[[32,41,"pl-en"],[51,56,"pl-k"],[94,99,"pl-k"]],[[8,14,"pl-k"],[23,31,"pl-c1"]],[[8,12,"pl-k"]],[[12,18,"pl-k"]],[],[[8,12,"pl-k"]],[],[[12,21,"pl-c1"]],[[23,28,"pl-c1"]],[[23,26,"pl-c1"]],[[35,40,"pl-k"],[62,67,"pl-k"]],[[20,26,"pl-k"],[31,46,"pl-c1"],[55,70,"pl-c1"]],[],[],[[12,18,"pl-k"]],[],[[8,12,"pl-k"]],[[12,17,"pl-k"],[63,69,"pl-c1"]],[],[[41,48,"pl-c1"]],[],[[26,33,"pl-c1"],[52,56,"pl-c1"]],[],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"]],[[30,42,"pl-c1"],[43,44,"pl-c1"],[52,67,"pl-c1"]],[],[],[[12,21,"pl-c1"],[37,42,"pl-c1"]],[[37,40,"pl-c1"]],[[40,45,"pl-k"],[65,70,"pl-k"]],[[27,29,"pl-k"],[36,41,"pl-smi"],[49,54,"pl-smi"]],[[31,37,"pl-k"],[42,48,"pl-smi"],[49,64,"pl-c1"]],[[42,48,"pl-smi"],[49,64,"pl-c1"]],[],[[27,33,"pl-k"],[38,43,"pl-smi"],[50,55,"pl-smi"]],[],[],[],[[23,30,"pl-c1"],[45,49,"pl-c1"]],[],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"]],[[27,36,"pl-c1"],[45,51,"pl-smi"]],[],[],[[12,18,"pl-k"]],[],[],[],[[8,28,"pl-c1"],[29,56,"pl-s"],[29,30,"pl-pds"],[55,56,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,20,"pl-en"],[37,42,"pl-k"],[62,67,"pl-k"]],[[8,14,"pl-k"],[25,40,"pl-c1"],[43,49,"pl-c1"],[62,73,"pl-c1"]],[],[],[[32,43,"pl-en"],[73,78,"pl-k"],[100,105,"pl-k"],[125,130,"pl-k"]],[],[[17,24,"pl-c1"],[36,40,"pl-c1"]],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[12,14,"pl-k"],[27,37,"pl-c1"],[53,68,"pl-c1"],[71,79,"pl-c1"]],[[26,36,"pl-c1"],[42,51,"pl-c1"]],[[25,34,"pl-c1"]],[],[],[[8,14,"pl-k"],[15,26,"pl-c1"],[44,54,"pl-c1"],[65,75,"pl-c1"]],[],[[32,37,"pl-k"],[39,60,"pl-en"],[70,75,"pl-k"]],[[8,14,"pl-k"],[15,29,"pl-c1"],[32,51,"pl-c1"],[54,71,"pl-c1"]],[],[],[[4,31,"pl-en"],[36,43,"pl-k"]],[],[[4,8,"pl-k"],[9,35,"pl-en"]],[[18,30,"pl-c1"],[40,43,"pl-c1"],[59,62,"pl-c1"]],[[28,37,"pl-c1"],[47,50,"pl-c1"]],[[27,36,"pl-c1"],[37,47,"pl-c1"]],[[19,28,"pl-c1"],[29,39,"pl-c1"]],[],[],[[31,36,"pl-k"],[38,63,"pl-en"],[66,71,"pl-k"]],[[8,14,"pl-k"]],[],[],[[32,37,"pl-k"],[39,64,"pl-en"],[67,72,"pl-k"]],[[8,14,"pl-k"]],[],[[32,37,"pl-k"],[39,70,"pl-en"],[80,85,"pl-k"],[96,101,"pl-k"]],[[8,10,"pl-k"],[30,35,"pl-c1"]],[[12,39,"pl-c1"]],[],[[8,10,"pl-k"],[42,50,"pl-c1"],[74,79,"pl-c1"]],[[32,41,"pl-c1"]],[[40,48,"pl-c1"]],[],[[8,14,"pl-k"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[1,3,"pl-k"]],[[5,11,"pl-k"]],[[5,11,"pl-k"]],[[1,6,"pl-k"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[0,9,"pl-k"],[10,26,"pl-en"]],[],[[4,36,"pl-en"],[74,79,"pl-k"]],[],[[8,16,"pl-en"]],[],[],[],[[4,23,"pl-en"],[28,35,"pl-k"]],[],[[4,8,"pl-k"],[9,42,"pl-en"]],[],[],[],[[4,8,"pl-k"],[9,27,"pl-en"]],[[19,28,"pl-c1"],[30,40,"pl-c1"]],[],[],[[14,33,"pl-en"],[54,59,"pl-k"]],[[8,12,"pl-k"],[18,30,"pl-c1"]],[[23,28,"pl-c1"]],[[23,26,"pl-c1"]],[[44,49,"pl-k"]],[[16,20,"pl-k"],[21,26,"pl-k"],[51,66,"pl-c1"]],[[16,18,"pl-k"],[33,41,"pl-smi"],[42,46,"pl-smi"]],[[37,45,"pl-smi"],[46,50,"pl-smi"]],[[20,26,"pl-k"],[27,32,"pl-c1"]],[],[[16,22,"pl-k"]],[],[[8,14,"pl-k"],[34,37,"pl-c1"],[48,51,"pl-c1"],[56,63,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,35,"pl-en"],[38,43,"pl-k"],[46,52,"pl-k"],[53,58,"pl-c1"]],[[4,8,"pl-k"],[9,37,"pl-en"],[40,45,"pl-k"],[48,54,"pl-k"],[55,60,"pl-c1"]],[],[[4,8,"pl-k"],[9,25,"pl-en"],[28,33,"pl-k"]],[[8,14,"pl-k"],[44,54,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,29,"pl-en"],[32,37,"pl-k"],[40,46,"pl-k"]],[],[[4,8,"pl-k"],[9,28,"pl-en"]],[[8,10,"pl-k"]],[],[[12,14,"pl-k"]],[[26,35,"pl-c1"]],[],[],[],[],[[14,38,"pl-en"]],[[8,13,"pl-k"],[14,23,"pl-k"],[24,27,"pl-en"],[44,45,"pl-k"]],[],[[12,27,"pl-c1"],[29,37,"pl-s"],[29,30,"pl-pds"],[36,37,"pl-pds"]],[[13,17,"pl-c1"]],[[12,19,"pl-c1"]],[[27,34,"pl-c1"]],[],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,38,"pl-en"]],[],[],[],[[4,8,"pl-k"],[9,39,"pl-en"],[42,47,"pl-k"]],[[8,14,"pl-k"]],[],[[4,8,"pl-k"],[9,42,"pl-en"]],[],[],[],[],[[4,28,"pl-en"]],[],[],[],[],[[4,8,"pl-k"],[9,32,"pl-en"],[35,40,"pl-k"]],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,26,"pl-en"]],[],[[8,18,"pl-c1"]],[[8,10,"pl-k"]],[[22,31,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,27,"pl-en"]],[],[[8,58,"pl-c"],[8,10,"pl-c"]],[[8,13,"pl-k"],[22,36,"pl-c1"],[42,46,"pl-c1"]],[[18,32,"pl-c1"],[35,40,"pl-c1"]],[],[[8,14,"pl-k"]],[[12,16,"pl-k"]],[[16,21,"pl-k"]],[],[[12,16,"pl-k"]],[],[[16,21,"pl-k"]],[[12,16,"pl-k"]],[[16,18,"pl-k"],[20,31,"pl-c1"],[43,48,"pl-c1"],[63,66,"pl-c1"],[85,90,"pl-k"],[96,102,"pl-k"],[106,116,"pl-c1"]],[],[[16,21,"pl-k"]],[],[[12,16,"pl-k"]],[[12,16,"pl-k"]],[[12,16,"pl-k"]],[[16,36,"pl-c1"],[38,57,"pl-s"],[38,39,"pl-pds"],[56,57,"pl-pds"]],[],[[12,19,"pl-k"]],[[16,36,"pl-c1"],[38,55,"pl-s"],[38,39,"pl-pds"],[54,55,"pl-pds"]],[],[[8,20,"pl-c1"]],[[14,27,"pl-c1"]],[],[[4,8,"pl-k"],[9,26,"pl-en"]],[],[[8,10,"pl-k"]],[[22,45,"pl-c1"]],[[8,20,"pl-c1"]],[[14,27,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,34,"pl-en"]],[[8,14,"pl-c1"]],[[14,31,"pl-c1"]],[],[[4,8,"pl-k"],[9,32,"pl-en"]],[[14,31,"pl-c1"],[33,37,"pl-c1"]],[],[],[[4,34,"pl-en"]],[],[],[],[[8,10,"pl-k"]],[[12,17,"pl-k"],[29,45,"pl-c1"]],[[33,39,"pl-c1"]],[],[],[[44,55,"pl-k"]],[[12,26,"pl-c1"],[42,51,"pl-smi"]],[],[],[],[[4,8,"pl-k"],[9,35,"pl-en"],[38,43,"pl-k"]],[[8,12,"pl-k"],[24,28,"pl-c1"]],[],[[8,10,"pl-k"],[22,27,"pl-c1"]],[[25,26,"pl-c1"],[28,33,"pl-c1"]],[[15,24,"pl-c1"],[35,40,"pl-c1"],[54,57,"pl-c1"],[90,93,"pl-c1"]],[[23,46,"pl-c1"]],[],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,41,"pl-en"],[44,49,"pl-k"],[52,58,"pl-k"],[59,63,"pl-c1"]],[],[[20,43,"pl-en"],[85,90,"pl-k"]],[],[],[[39,53,"pl-c1"]],[[8,10,"pl-k"]],[[32,41,"pl-c1"]],[[12,18,"pl-c1"]],[[12,18,"pl-c1"],[34,50,"pl-c1"]],[[22,33,"pl-k"]],[[10,14,"pl-k"]],[[12,16,"pl-k"]],[[33,44,"pl-k"],[74,78,"pl-smi"]],[[49,57,"pl-smi"]],[],[],[[33,36,"pl-c1"]],[[27,35,"pl-c1"],[37,47,"pl-c1"]],[],[],[[8,10,"pl-k"],[18,32,"pl-c1"]],[[21,28,"pl-c1"]],[],[],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,32,"pl-en"]],[[8,10,"pl-k"],[13,23,"pl-c1"]],[[12,16,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,42,"pl-en"],[69,74,"pl-k"]],[[8,10,"pl-k"],[21,26,"pl-c1"]],[[22,29,"pl-c1"],[41,45,"pl-c1"],[58,62,"pl-c1"],[67,68,"pl-c1"]],[[22,34,"pl-c1"],[49,84,"pl-c"],[49,51,"pl-c"]],[[22,34,"pl-c1"],[49,84,"pl-c"],[49,51,"pl-c"]],[[22,28,"pl-c1"],[40,43,"pl-c1"],[55,60,"pl-c1"],[72,75,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,39,"pl-en"],[64,69,"pl-k"]],[[8,10,"pl-k"],[20,24,"pl-c1"],[29,30,"pl-c1"]],[[22,28,"pl-c1"],[40,43,"pl-c1"],[55,60,"pl-c1"],[63,64,"pl-c1"],[74,77,"pl-c1"]],[],[],[[14,41,"pl-en"],[44,49,"pl-k"]],[[8,14,"pl-k"]],[],[],[[2,31,"pl-c"],[2,4,"pl-c"]],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[[1,3,"pl-k"]],[[5,11,"pl-k"]],[[1,6,"pl-k"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,8,"pl-k"],[9,37,"pl-en"]],[[1,3,"pl-k"]],[[8,13,"pl-k"]],[[1,5,"pl-k"]],[[8,19,"pl-c1"],[21,59,"pl-s"],[21,22,"pl-pds"],[58,59,"pl-pds"]],[[1,6,"pl-k"]],[],[],[[4,8,"pl-k"],[9,34,"pl-en"]],[[1,3,"pl-k"]],[[8,13,"pl-k"],[14,38,"pl-smi"]],[[1,5,"pl-k"]],[[8,19,"pl-c1"],[21,83,"pl-s"],[21,22,"pl-pds"],[82,83,"pl-pds"]],[[1,6,"pl-k"]],[],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[[1,8,"pl-k"],[9,19,"pl-s"],[9,10,"pl-pds"],[18,19,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,8,"pl-k"],[9,38,"pl-en"]],[[4,8,"pl-k"],[9,39,"pl-en"]],[[4,31,"pl-en"],[36,43,"pl-k"]],[],[[4,13,"pl-k"]],[[8,14,"pl-k"],[25,41,"pl-en"]],[[12,14,"pl-k"],[18,28,"pl-c1"],[49,52,"pl-s"],[49,50,"pl-pds"],[51,52,"pl-pds"]],[[16,22,"pl-k"]],[],[],[[12,78,"pl-c"],[12,14,"pl-c"]],[[12,17,"pl-k"],[18,22,"pl-k"]],[[34,40,"pl-c1"],[42,43,"pl-c1"],[63,67,"pl-c1"]],[],[[12,16,"pl-k"],[32,58,"pl-c1"],[71,74,"pl-c1"]],[[12,16,"pl-k"],[30,56,"pl-c1"],[69,74,"pl-c1"]],[],[[12,72,"pl-c"],[12,14,"pl-c"]],[[12,71,"pl-c"],[12,14,"pl-c"]],[[12,72,"pl-c"],[12,14,"pl-c"]],[[12,64,"pl-c"],[12,14,"pl-c"]],[[12,16,"pl-k"],[30,39,"pl-c1"],[67,70,"pl-s"],[67,68,"pl-pds"],[69,70,"pl-pds"],[75,76,"pl-c1"]],[[12,16,"pl-k"]],[[16,25,"pl-c1"],[40,41,"pl-c1"],[55,58,"pl-s"],[55,56,"pl-pds"],[57,58,"pl-pds"]],[],[[12,16,"pl-k"],[17,22,"pl-k"]],[[12,16,"pl-k"],[17,22,"pl-k"],[71,72,"pl-c1"]],[],[[12,18,"pl-k"],[30,36,"pl-c1"]],[[16,27,"pl-k"],[33,39,"pl-c1"]],[[16,27,"pl-k"],[33,39,"pl-c1"]],[],[],[[8,13,"pl-k"],[14,35,"pl-en"],[36,41,"pl-k"]],[[12,17,"pl-k"],[29,33,"pl-k"]],[],[],[[8,15,"pl-k"]],[[12,21,"pl-k"],[22,43,"pl-en"],[71,79,"pl-k"]],[],[],[[12,16,"pl-k"],[17,23,"pl-en"],[26,31,"pl-k"],[32,40,"pl-k"],[43,59,"pl-c1"]],[],[],[[6,18,"pl-c"],[6,8,"pl-c"]],[],[[37,52,"pl-en"],[54,58,"pl-k"]],[[8,14,"pl-k"]],[],[],[[4,20,"pl-en"],[79,84,"pl-k"],[133,138,"pl-k"],[154,162,"pl-k"]],[],[[12,33,"pl-c1"]],[[21,33,"pl-c1"]],[[24,40,"pl-c1"]],[[28,44,"pl-c1"]],[],[],[[24,34,"pl-c1"]],[],[],[[12,114,"pl-c"],[12,14,"pl-c"]],[[12,33,"pl-c1"],[36,60,"pl-c1"]],[],[],[],[],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,34,"pl-en"],[54,59,"pl-k"]],[],[[20,41,"pl-en"],[55,60,"pl-k"]],[],[[22,27,"pl-c1"]],[[30,43,"pl-c1"]],[[22,27,"pl-c1"]],[[20,27,"pl-c1"],[34,38,"pl-c1"]],[[22,29,"pl-c1"],[36,40,"pl-c1"]],[[27,28,"pl-c1"]],[],[[8,11,"pl-k"],[21,22,"pl-c1"],[38,42,"pl-c1"]],[[10,30,"pl-c"],[10,12,"pl-c"]],[[11,13,"pl-k"],[16,25,"pl-c1"]],[[26,40,"pl-smi"],[41,50,"pl-c1"]],[[15,20,"pl-k"]],[],[[8,15,"pl-c1"]],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[[13,37,"pl-en"]],[[8,17,"pl-c1"]],[[8,14,"pl-k"],[15,25,"pl-c1"]],[],[[4,8,"pl-k"],[9,34,"pl-en"],[36,40,"pl-k"]],[[8,10,"pl-k"],[45,49,"pl-s"],[45,46,"pl-pds"],[46,48,"pl-cce"],[48,49,"pl-pds"]],[[12,18,"pl-c1"]],[[12,28,"pl-c1"]],[[12,18,"pl-k"],[19,23,"pl-c1"]],[[9,13,"pl-k"],[14,16,"pl-k"],[50,53,"pl-s"],[50,51,"pl-pds"],[52,53,"pl-pds"]],[[12,18,"pl-k"],[19,27,"pl-c1"]],[],[],[[8,14,"pl-k"]],[[8,12,"pl-k"]],[[12,14,"pl-k"],[16,31,"pl-c1"]],[[16,22,"pl-k"],[23,27,"pl-c1"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[[12,27,"pl-c1"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[[12,19,"pl-c1"]],[[12,28,"pl-c1"]],[[12,18,"pl-k"],[19,23,"pl-c1"]],[[8,15,"pl-k"]],[[8,12,"pl-k"]],[[8,12,"pl-k"]],[[12,14,"pl-k"],[16,32,"pl-c1"]],[[16,22,"pl-k"],[23,27,"pl-c1"]],[[12,17,"pl-k"]],[],[],[],[[8,10,"pl-k"],[13,26,"pl-c1"]],[],[],[],[[8,14,"pl-k"],[15,19,"pl-c1"]],[],[[4,79,"pl-c"],[4,6,"pl-c"]],[[4,72,"pl-c"],[4,6,"pl-c"]],[[4,8,"pl-k"],[9,40,"pl-en"],[42,46,"pl-k"]],[[8,14,"pl-k"]],[[8,12,"pl-k"],[13,16,"pl-s"],[13,14,"pl-pds"],[15,16,"pl-pds"]],[[12,18,"pl-k"],[19,23,"pl-c1"]],[[8,12,"pl-k"],[13,16,"pl-s"],[13,14,"pl-pds"],[15,16,"pl-pds"]],[[26,30,"pl-c1"]],[[12,18,"pl-k"],[19,24,"pl-c1"]],[[8,12,"pl-k"],[13,16,"pl-s"],[13,14,"pl-pds"],[15,16,"pl-pds"]],[[12,24,"pl-c1"]],[[12,18,"pl-k"],[19,24,"pl-c1"]],[[8,12,"pl-k"],[13,16,"pl-s"],[13,14,"pl-pds"],[15,16,"pl-pds"]],[[12,24,"pl-c1"]],[[12,18,"pl-k"],[19,24,"pl-c1"]],[[8,15,"pl-k"]],[[12,24,"pl-c1"]],[[12,18,"pl-k"],[19,24,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,40,"pl-en"],[42,46,"pl-k"]],[[8,10,"pl-k"],[17,20,"pl-s"],[17,18,"pl-pds"],[19,20,"pl-pds"]],[[12,14,"pl-k"],[31,41,"pl-s"],[31,32,"pl-pds"],[40,41,"pl-pds"]],[[30,34,"pl-c1"]],[[12,16,"pl-k"]],[[16,23,"pl-c1"]],[[12,24,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,41,"pl-en"],[43,47,"pl-k"]],[[8,10,"pl-k"],[13,26,"pl-c1"]],[[12,18,"pl-k"],[19,24,"pl-c1"]],[],[[8,15,"pl-c1"]],[[8,14,"pl-k"],[15,19,"pl-c1"]],[],[[4,8,"pl-k"],[9,37,"pl-en"]],[],[],[[4,8,"pl-k"],[9,32,"pl-en"]],[[8,14,"pl-k"]],[[8,12,"pl-k"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[19,33,"pl-c1"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[19,32,"pl-c1"]],[[8,12,"pl-k"]],[[12,32,"pl-c1"]],[[12,18,"pl-k"]],[[8,12,"pl-k"]],[[8,15,"pl-k"]],[[12,18,"pl-k"],[19,31,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,31,"pl-en"]],[[8,20,"pl-c1"]],[],[[22,31,"pl-c1"]],[],[[4,8,"pl-k"],[9,38,"pl-en"],[40,44,"pl-k"],[49,54,"pl-k"]],[[8,14,"pl-k"]],[[12,19,"pl-k"]],[[16,22,"pl-k"],[23,28,"pl-c1"]],[[12,16,"pl-k"]],[[16,22,"pl-k"],[28,31,"pl-s"],[28,29,"pl-pds"],[30,31,"pl-pds"]],[[12,16,"pl-k"]],[[16,22,"pl-k"],[28,31,"pl-s"],[28,29,"pl-pds"],[30,31,"pl-pds"]],[[12,16,"pl-k"]],[[16,22,"pl-k"],[23,27,"pl-c1"]],[[12,16,"pl-k"]],[[16,22,"pl-k"],[28,31,"pl-s"],[28,29,"pl-pds"],[30,31,"pl-pds"]],[[12,16,"pl-k"]],[[16,22,"pl-k"],[28,31,"pl-s"],[28,29,"pl-pds"],[30,31,"pl-pds"],[40,43,"pl-s"],[40,41,"pl-pds"],[42,43,"pl-pds"]],[],[],[],[[4,8,"pl-k"],[9,34,"pl-en"]],[[8,10,"pl-k"],[29,39,"pl-smi"],[40,45,"pl-c1"],[68,79,"pl-smi"],[80,85,"pl-c1"]],[[23,32,"pl-smi"],[33,42,"pl-c1"],[44,54,"pl-c1"]],[[30,46,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,37,"pl-en"]],[],[],[],[[4,8,"pl-k"],[9,45,"pl-en"]],[],[],[],[[4,8,"pl-k"],[9,33,"pl-en"]],[[6,8,"pl-k"]],[[9,62,"pl-c"],[9,11,"pl-c"]],[],[[23,27,"pl-c1"]],[[21,26,"pl-c1"]],[[23,28,"pl-c1"]],[[28,29,"pl-c1"]],[[9,15,"pl-k"],[16,21,"pl-c1"]],[],[[6,13,"pl-c1"]],[[6,15,"pl-c1"]],[[6,12,"pl-k"],[13,17,"pl-c1"],[19,28,"pl-c"],[19,21,"pl-c"]],[],[],[[16,49,"pl-en"]],[],[[8,11,"pl-k"],[18,24,"pl-c1"],[29,30,"pl-c1"],[50,54,"pl-c1"]],[[26,32,"pl-c1"],[33,34,"pl-c1"],[66,72,"pl-c1"],[96,97,"pl-c1"]],[[22,27,"pl-c1"]],[[8,10,"pl-k"],[12,22,"pl-c1"],[30,40,"pl-s"],[30,31,"pl-pds"],[39,40,"pl-pds"]],[[26,30,"pl-c1"]],[[26,32,"pl-c1"],[33,34,"pl-c1"]],[],[],[[22,27,"pl-c1"]],[[27,28,"pl-c1"]],[],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,39,"pl-en"]],[[8,12,"pl-k"],[21,38,"pl-c1"]],[],[[8,10,"pl-k"],[19,24,"pl-c1"]],[[12,14,"pl-k"]],[[32,43,"pl-smi"],[44,56,"pl-c1"]],[[14,18,"pl-k"]],[[32,42,"pl-smi"],[43,55,"pl-c1"]],[],[],[[20,25,"pl-c1"]],[[22,27,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,38,"pl-en"]],[[8,12,"pl-k"],[21,38,"pl-c1"]],[],[[8,10,"pl-k"],[19,24,"pl-c1"]],[[12,79,"pl-c"],[12,14,"pl-c"]],[[12,77,"pl-c"],[12,14,"pl-c"]],[[12,14,"pl-k"],[22,26,"pl-c1"],[31,32,"pl-c1"],[42,43,"pl-c1"],[48,51,"pl-s"],[48,49,"pl-pds"],[50,51,"pl-pds"]],[[22,27,"pl-c1"],[34,39,"pl-c1"]],[[16,18,"pl-k"]],[[36,47,"pl-smi"],[48,60,"pl-c1"],[103,106,"pl-s"],[103,104,"pl-pds"],[105,106,"pl-pds"]],[[18,22,"pl-k"]],[[36,46,"pl-smi"],[47,59,"pl-c1"],[102,105,"pl-s"],[102,103,"pl-pds"],[104,105,"pl-pds"]],[],[],[[12,14,"pl-k"]],[[32,43,"pl-smi"],[44,56,"pl-c1"]],[[14,18,"pl-k"]],[[32,42,"pl-smi"],[43,55,"pl-c1"]],[],[],[[20,25,"pl-c1"]],[[22,27,"pl-c1"]],[],[],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"]],[[4,8,"pl-k"],[9,21,"pl-en"],[23,27,"pl-k"]],[[8,14,"pl-k"],[20,23,"pl-s"],[20,21,"pl-pds"],[22,23,"pl-pds"],[32,36,"pl-s"],[32,33,"pl-pds"],[33,35,"pl-cce"],[35,36,"pl-pds"],[45,49,"pl-s"],[45,46,"pl-pds"],[46,48,"pl-cce"],[48,49,"pl-pds"],[58,62,"pl-s"],[58,59,"pl-pds"],[59,61,"pl-cce"],[61,62,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,26,"pl-en"],[28,32,"pl-k"]],[[8,14,"pl-k"],[15,20,"pl-k"],[21,25,"pl-k"],[36,43,"pl-s"],[36,37,"pl-pds"],[42,43,"pl-pds"]],[[8,14,"pl-k"],[15,26,"pl-c1"],[38,44,"pl-k"],[56,57,"pl-c1"],[63,70,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,25,"pl-en"],[27,31,"pl-k"]],[[8,14,"pl-k"],[15,20,"pl-k"],[21,25,"pl-k"],[36,54,"pl-s"],[36,37,"pl-pds"],[51,53,"pl-cce"],[53,54,"pl-pds"]],[[8,14,"pl-k"],[15,26,"pl-c1"],[38,44,"pl-k"],[56,57,"pl-c1"],[63,70,"pl-c1"]],[],[],[[2,14,"pl-c"],[2,4,"pl-c"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,22,"pl-en"]],[[8,12,"pl-k"],[13,49,"pl-en"]],[[12,15,"pl-k"],[18,22,"pl-k"],[37,42,"pl-c1"],[61,64,"pl-c1"]],[[16,55,"pl-c"],[16,18,"pl-c"]],[[16,21,"pl-k"],[39,42,"pl-c1"],[55,61,"pl-s"],[55,56,"pl-pds"],[56,60,"pl-cce"],[60,61,"pl-pds"]],[[29,30,"pl-c1"],[43,46,"pl-c1"],[60,61,"pl-c1"],[67,70,"pl-s"],[67,68,"pl-pds"],[69,70,"pl-pds"]],[[20,24,"pl-k"],[39,40,"pl-c1"]],[[20,25,"pl-k"],[47,50,"pl-c1"]],[[30,37,"pl-c1"],[63,66,"pl-s"],[63,64,"pl-pds"],[65,66,"pl-pds"]],[],[],[[20,22,"pl-k"],[44,47,"pl-c1"],[64,67,"pl-s"],[64,65,"pl-pds"],[66,67,"pl-pds"]],[[24,29,"pl-k"]],[],[[20,34,"pl-c"],[20,22,"pl-c"]],[],[[20,75,"pl-c"],[20,22,"pl-c"]],[[20,52,"pl-c"],[20,22,"pl-c"]],[[34,35,"pl-c1"]],[],[[16,18,"pl-k"],[36,39,"pl-c1"]],[],[],[],[],[],[],[[8,46,"pl-en"],[60,65,"pl-k"]],[[12,20,"pl-en"]],[[12,28,"pl-c1"]],[],[],[[8,46,"pl-en"]],[[12,20,"pl-en"]],[[12,28,"pl-c1"]],[],[],[[43,68,"pl-en"],[71,76,"pl-k"]],[[12,18,"pl-k"],[19,33,"pl-c1"]],[],[],[[43,66,"pl-en"],[69,74,"pl-k"]],[[12,18,"pl-k"],[19,33,"pl-c1"]],[],[],[[20,49,"pl-en"]],[[72,77,"pl-k"]],[[12,77,"pl-c"],[12,14,"pl-c"]],[[12,78,"pl-c"],[12,14,"pl-c"]],[[12,75,"pl-c"],[12,14,"pl-c"]],[[12,74,"pl-c"],[12,14,"pl-c"]],[[12,78,"pl-c"],[12,14,"pl-c"]],[[12,31,"pl-c"],[12,14,"pl-c"]],[[12,16,"pl-k"],[23,34,"pl-c1"],[45,49,"pl-c1"],[51,56,"pl-c1"],[70,75,"pl-c1"]],[[67,71,"pl-smi"]],[[40,44,"pl-smi"]],[[12,26,"pl-c1"],[32,37,"pl-c1"],[45,48,"pl-c1"],[56,61,"pl-c1"],[69,73,"pl-k"]],[[16,22,"pl-k"],[59,62,"pl-s"],[59,60,"pl-pds"],[61,62,"pl-pds"]],[],[[12,18,"pl-k"]],[],[],[[8,12,"pl-k"],[13,68,"pl-en"]],[[12,80,"pl-c"],[12,14,"pl-c"]],[[12,17,"pl-c"],[12,14,"pl-c"]],[[12,17,"pl-k"],[38,41,"pl-c1"],[56,62,"pl-s"],[56,57,"pl-pds"],[57,61,"pl-cce"],[61,62,"pl-pds"]],[[27,28,"pl-c1"],[42,45,"pl-c1"],[62,63,"pl-c1"],[69,72,"pl-s"],[69,70,"pl-pds"],[71,72,"pl-pds"]],[[16,20,"pl-k"],[37,38,"pl-c1"]],[[16,21,"pl-k"],[44,47,"pl-c1"]],[[26,33,"pl-c1"],[59,62,"pl-s"],[59,60,"pl-pds"],[61,62,"pl-pds"]],[],[],[[16,18,"pl-k"],[41,44,"pl-c1"]],[],[[20,25,"pl-k"]],[],[[16,71,"pl-c"],[16,18,"pl-c"]],[[16,48,"pl-c"],[16,18,"pl-c"]],[[32,33,"pl-c1"]],[],[],[],[[8,12,"pl-k"],[13,56,"pl-en"]],[[12,18,"pl-c1"],[38,41,"pl-c1"]],[],[[12,31,"pl-c1"]],[],[],[[8,12,"pl-k"],[13,58,"pl-en"]],[[12,18,"pl-c1"],[38,43,"pl-c1"]],[],[[12,80,"pl-c"],[12,14,"pl-c"]],[[12,33,"pl-c"],[12,14,"pl-c"]],[[12,17,"pl-k"]],[[16,21,"pl-k"],[33,39,"pl-s"],[33,34,"pl-pds"],[34,38,"pl-cce"],[38,39,"pl-pds"]],[[20,26,"pl-c1"],[46,51,"pl-c1"]],[],[],[[16,79,"pl-c"],[16,18,"pl-c"]],[[16,71,"pl-c"],[16,18,"pl-c"]],[[16,22,"pl-c1"],[42,47,"pl-c1"]],[[16,22,"pl-c1"],[33,39,"pl-s"],[33,34,"pl-pds"],[34,38,"pl-cce"],[38,39,"pl-pds"]],[],[],[],[],[[8,14,"pl-k"],[15,19,"pl-k"],[20,30,"pl-en"],[51,56,"pl-k"]],[],[[12,18,"pl-k"],[30,33,"pl-c1"]],[[21,33,"pl-c1"]],[[22,34,"pl-c1"],[40,49,"pl-c1"]],[[19,36,"pl-c1"]],[[19,35,"pl-c1"],[41,50,"pl-c1"]],[],[],[[8,12,"pl-k"],[13,47,"pl-en"]],[[26,31,"pl-c1"]],[],[[31,36,"pl-k"],[62,70,"pl-smi"]],[],[[12,14,"pl-k"],[44,47,"pl-c1"]],[],[[16,22,"pl-k"]],[],[],[[12,18,"pl-c1"],[48,51,"pl-c1"]],[[12,14,"pl-k"],[33,37,"pl-s"],[33,34,"pl-pds"],[34,36,"pl-cce"],[36,37,"pl-pds"]],[],[[12,17,"pl-k"],[18,22,"pl-k"],[48,55,"pl-smi"],[58,68,"pl-c1"]],[[17,23,"pl-c1"],[37,38,"pl-c1"]],[[12,17,"pl-k"],[47,50,"pl-c1"]],[[65,69,"pl-s"],[65,66,"pl-pds"],[66,68,"pl-cce"],[68,69,"pl-pds"]],[],[],[],[],[[12,71,"pl-c"],[12,14,"pl-c"]],[[12,70,"pl-c"],[12,14,"pl-c"]],[[12,24,"pl-c"],[12,14,"pl-c"]],[[12,14,"pl-k"]],[],[[14,18,"pl-k"]],[[16,70,"pl-c"],[16,18,"pl-c"]],[[16,77,"pl-c"],[16,18,"pl-c"]],[[16,33,"pl-c"],[16,18,"pl-c"]],[],[[16,21,"pl-k"],[37,38,"pl-c1"]],[[25,35,"pl-c1"]],[],[],[],[[16,21,"pl-k"],[37,38,"pl-c1"]],[[24,36,"pl-c1"],[49,58,"pl-c1"]],[],[],[],[],[[16,78,"pl-c"],[16,18,"pl-c"]],[[16,54,"pl-c"],[16,18,"pl-c"]],[[16,18,"pl-k"],[35,36,"pl-c1"]],[[34,38,"pl-c1"]],[[43,52,"pl-c1"]],[],[],[],[],[[8,14,"pl-c1"],[15,49,"pl-en"],[52,57,"pl-k"]],[[12,16,"pl-k"],[51,59,"pl-smi"],[60,65,"pl-c1"]],[[42,57,"pl-smi"]],[],[[12,18,"pl-k"],[59,67,"pl-smi"]],[],[],[[20,62,"pl-en"]],[],[[53,58,"pl-k"]],[],[[12,17,"pl-k"],[18,22,"pl-k"],[40,50,"pl-c1"]],[[12,75,"pl-c"],[12,14,"pl-c"]],[[16,22,"pl-c1"],[40,43,"pl-s"],[40,41,"pl-pds"],[42,43,"pl-pds"]],[[12,40,"pl-c"],[12,14,"pl-c"]],[[28,36,"pl-smi"],[37,46,"pl-c1"]],[[12,14,"pl-k"],[37,46,"pl-c1"],[48,51,"pl-s"],[48,49,"pl-pds"],[50,51,"pl-pds"]],[],[[12,18,"pl-k"]],[],[],[[8,46,"pl-en"],[55,60,"pl-k"]],[[12,20,"pl-en"]],[[12,23,"pl-en"]],[[12,21,"pl-en"]],[[12,22,"pl-en"]],[[12,18,"pl-c1"],[29,36,"pl-smi"],[48,56,"pl-smi"]],[[12,18,"pl-c1"],[29,44,"pl-smi"]],[[29,36,"pl-smi"],[48,63,"pl-smi"]],[[12,22,"pl-c1"]],[[12,14,"pl-k"]],[[39,47,"pl-smi"],[48,51,"pl-c1"]],[],[],[],[[44,52,"pl-k"],[56,61,"pl-k"]],[[12,18,"pl-c1"]],[[12,18,"pl-k"],[19,37,"pl-c1"]],[],[],[[56,64,"pl-k"]],[],[[31,36,"pl-k"],[62,70,"pl-smi"]],[[12,14,"pl-k"],[45,48,"pl-c1"],[70,74,"pl-s"],[70,71,"pl-pds"],[71,73,"pl-cce"],[73,74,"pl-pds"]],[],[[14,18,"pl-k"]],[[16,21,"pl-k"],[52,55,"pl-c1"]],[[24,36,"pl-c1"]],[],[],[],[],[[12,14,"pl-k"],[45,48,"pl-c1"],[55,65,"pl-c1"]],[[12,18,"pl-k"],[20,24,"pl-c1"]],[],[],[[55,63,"pl-k"],[67,70,"pl-k"]],[[27,31,"pl-smi"],[34,38,"pl-c1"]],[[12,20,"pl-k"]],[[12,18,"pl-k"]],[],[],[[22,30,"pl-k"],[59,64,"pl-k"]],[[12,16,"pl-k"],[25,29,"pl-c1"]],[[12,15,"pl-k"],[18,22,"pl-k"]],[[16,18,"pl-k"]],[[28,33,"pl-c1"]],[[18,22,"pl-k"]],[[26,30,"pl-s"],[26,27,"pl-pds"],[27,29,"pl-cce"],[29,30,"pl-pds"]],[],[],[],[[12,18,"pl-k"]],[],[],[[15,21,"pl-en"],[23,29,"pl-c1"]],[[24,26,"pl-s"],[24,25,"pl-pds"],[25,26,"pl-pds"]],[[16,21,"pl-c1"]],[[12,18,"pl-k"]],[],[],[[8,35,"pl-en"],[45,50,"pl-k"]],[[12,21,"pl-en"],[63,64,"pl-c1"]],[],[[24,31,"pl-c1"],[43,47,"pl-c1"]],[[12,15,"pl-k"],[18,22,"pl-k"],[23,28,"pl-k"]],[[28,37,"pl-c1"],[43,46,"pl-c1"]],[],[],[],[[8,35,"pl-en"],[45,50,"pl-k"]],[[12,21,"pl-en"]],[[12,29,"pl-en"]],[],[[24,31,"pl-c1"],[43,47,"pl-c1"]],[[12,15,"pl-k"],[18,22,"pl-k"],[23,28,"pl-k"]],[[28,37,"pl-c1"],[43,48,"pl-c1"]],[],[],[],[[39,47,"pl-k"],[51,56,"pl-k"]],[],[],[[12,15,"pl-k"],[18,24,"pl-c1"],[29,30,"pl-c1"],[46,50,"pl-c1"]],[[16,21,"pl-k"],[22,26,"pl-k"],[48,53,"pl-c1"]],[[16,18,"pl-k"],[52,55,"pl-c1"]],[],[],[],[],[[28,33,"pl-c1"]],[[20,22,"pl-k"],[29,33,"pl-c1"]],[[32,38,"pl-c1"],[52,56,"pl-c1"],[60,63,"pl-s"],[60,61,"pl-pds"],[62,63,"pl-pds"]],[],[[18,22,"pl-k"]],[[28,34,"pl-c1"],[43,46,"pl-s"],[43,44,"pl-pds"],[45,46,"pl-pds"]],[],[],[[12,18,"pl-k"]],[],[],[[46,54,"pl-k"]],[[12,15,"pl-k"],[18,24,"pl-c1"],[29,30,"pl-c1"],[46,50,"pl-c1"]],[[16,18,"pl-k"],[52,55,"pl-c1"]],[],[],[],[[12,18,"pl-k"],[20,24,"pl-c1"]],[],[],[[45,53,"pl-k"],[57,60,"pl-k"]],[[21,25,"pl-smi"],[28,32,"pl-c1"]],[[12,20,"pl-k"]],[[12,18,"pl-k"]],[],[],[[22,30,"pl-k"],[60,65,"pl-k"]],[[12,16,"pl-k"],[25,29,"pl-c1"]],[[12,15,"pl-k"],[18,22,"pl-k"]],[[16,18,"pl-k"]],[[28,33,"pl-c1"]],[[18,22,"pl-k"]],[[26,30,"pl-s"],[26,27,"pl-pds"],[27,29,"pl-cce"],[29,30,"pl-pds"]],[],[],[],[[12,18,"pl-k"]],[],[],[[16,24,"pl-k"],[34,39,"pl-k"],[53,58,"pl-k"]],[],[],[],[[12,18,"pl-k"]],[],[[16,24,"pl-k"]],[],[[20,30,"pl-c1"]],[[20,30,"pl-c1"]],[[12,18,"pl-k"]],[],[],[[17,25,"pl-k"],[50,55,"pl-k"]],[[16,25,"pl-smi"],[26,35,"pl-c1"]],[[12,18,"pl-k"]],[],[[17,25,"pl-k"]],[[16,25,"pl-smi"],[26,35,"pl-c1"],[37,47,"pl-c1"]],[[12,18,"pl-k"]],[],[[16,24,"pl-k"],[35,40,"pl-k"],[54,59,"pl-k"]],[[12,16,"pl-k"],[17,25,"pl-smi"]],[],[[12,18,"pl-k"]],[],[[16,24,"pl-k"]],[[19,29,"pl-c1"]],[[12,18,"pl-k"],[19,29,"pl-c1"]],[],[],[[6,27,"pl-c"],[6,8,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,8,"pl-k"],[9,28,"pl-en"]],[[1,3,"pl-k"]],[[8,14,"pl-k"],[15,20,"pl-c1"]],[[1,5,"pl-k"]],[[8,14,"pl-k"],[15,39,"pl-c1"],[44,45,"pl-c1"]],[[1,5,"pl-k"]],[[8,14,"pl-k"],[15,38,"pl-c1"]],[[1,6,"pl-k"]],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,36,"pl-en"],[50,55,"pl-k"]],[],[],[[8,17,"pl-en"]],[],[[8,10,"pl-k"],[12,22,"pl-c1"],[35,38,"pl-s"],[35,36,"pl-pds"],[37,38,"pl-pds"]],[[34,40,"pl-c1"],[42,43,"pl-c1"]],[],[],[[8,10,"pl-k"],[12,20,"pl-c1"],[33,36,"pl-s"],[33,34,"pl-pds"],[35,36,"pl-pds"]],[[34,40,"pl-c1"],[42,43,"pl-c1"],[55,59,"pl-c1"],[62,63,"pl-c1"]],[[25,36,"pl-k"]],[],[],[],[[4,8,"pl-k"],[9,33,"pl-en"],[47,52,"pl-k"],[60,65,"pl-k"]],[[8,14,"pl-k"]],[[12,16,"pl-k"]],[[16,22,"pl-k"],[36,51,"pl-c1"]],[[12,16,"pl-k"]],[[16,22,"pl-k"],[23,31,"pl-c1"],[33,48,"pl-c1"]],[[12,16,"pl-k"]],[[16,22,"pl-k"],[23,33,"pl-c1"],[35,50,"pl-c1"]],[[12,16,"pl-k"]],[[16,22,"pl-k"],[23,31,"pl-c1"],[33,48,"pl-c1"]],[[12,19,"pl-k"]],[[16,36,"pl-c1"],[38,52,"pl-s"],[38,39,"pl-pds"],[51,52,"pl-pds"]],[],[],[],[[16,48,"pl-en"],[62,67,"pl-k"],[75,80,"pl-k"]],[[8,14,"pl-k"],[15,19,"pl-c1"],[62,69,"pl-c1"]],[],[],[],[],[[0,68,"pl-c"],[0,2,"pl-c"]],[[0,58,"pl-c"],[0,2,"pl-c"]],[[0,39,"pl-c"],[0,2,"pl-c"]],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,22,"pl-s"],[9,10,"pl-pds"],[21,22,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[0,9,"pl-k"]],[],[[4,10,"pl-c1"],[11,24,"pl-en"],[25,33,"pl-k"],[34,38,"pl-k"]],[[8,10,"pl-k"],[17,21,"pl-c1"],[26,30,"pl-c1"]],[[12,18,"pl-k"],[19,20,"pl-c1"]],[],[[8,10,"pl-k"],[17,21,"pl-c1"],[26,30,"pl-c1"]],[[12,18,"pl-k"],[19,20,"pl-c1"]],[],[[8,10,"pl-k"],[17,21,"pl-c1"],[26,30,"pl-c1"]],[[12,18,"pl-k"],[19,20,"pl-c1"]],[],[[8,28,"pl-c1"],[29,77,"pl-s"],[29,30,"pl-pds"],[76,77,"pl-pds"]],[],[],[[4,12,"pl-c1"],[13,24,"pl-en"],[25,33,"pl-k"],[34,38,"pl-k"]],[[8,10,"pl-k"],[17,21,"pl-c1"],[26,30,"pl-c1"]],[[12,18,"pl-k"],[23,27,"pl-c1"]],[],[[8,10,"pl-k"],[17,21,"pl-c1"],[26,30,"pl-c1"]],[[12,18,"pl-k"],[23,27,"pl-c1"]],[],[[8,10,"pl-k"],[17,21,"pl-c1"],[26,30,"pl-c1"]],[[12,18,"pl-k"],[23,27,"pl-c1"]],[],[[8,28,"pl-c1"],[29,77,"pl-s"],[29,30,"pl-pds"],[76,77,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,22,"pl-en"],[41,49,"pl-k"],[50,54,"pl-k"]],[[32,33,"pl-smi"],[37,42,"pl-c1"]],[[14,19,"pl-s"],[14,15,"pl-pds"],[15,17,"pl-cce"],[18,19,"pl-pds"]],[[45,57,"pl-c1"],[58,61,"pl-s"],[58,59,"pl-pds"],[60,61,"pl-pds"],[66,75,"pl-c1"],[76,77,"pl-c1"]],[[15,26,"pl-k"],[27,30,"pl-k"]],[[11,16,"pl-c1"]],[],[],[[4,13,"pl-k"],[14,18,"pl-k"],[19,32,"pl-en"]],[[8,14,"pl-k"],[18,29,"pl-k"],[35,52,"pl-c1"]],[],[],[[4,13,"pl-k"],[14,18,"pl-k"],[19,31,"pl-en"]],[[8,14,"pl-k"],[18,29,"pl-k"],[35,52,"pl-c1"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[[4,8,"pl-k"],[9,28,"pl-en"],[49,54,"pl-k"]],[[8,83,"pl-c"],[8,10,"pl-c"]],[[8,50,"pl-c"],[8,10,"pl-c"]],[],[[8,11,"pl-k"],[18,24,"pl-c1"],[31,32,"pl-c1"],[46,50,"pl-c1"]],[[12,20,"pl-k"],[21,25,"pl-k"],[30,41,"pl-k"],[42,50,"pl-k"],[51,55,"pl-k"]],[[12,18,"pl-k"]],[[12,16,"pl-k"],[17,20,"pl-s"],[17,18,"pl-pds"],[19,20,"pl-pds"],[30,36,"pl-s"],[30,31,"pl-pds"],[35,36,"pl-pds"],[38,43,"pl-k"]],[[12,16,"pl-k"],[17,20,"pl-s"],[17,18,"pl-pds"],[19,20,"pl-pds"],[30,37,"pl-s"],[30,31,"pl-pds"],[36,37,"pl-pds"],[39,44,"pl-k"]],[],[[12,16,"pl-k"],[17,20,"pl-s"],[17,18,"pl-pds"],[19,20,"pl-pds"]],[[16,56,"pl-c"],[16,18,"pl-c"]],[[16,18,"pl-k"],[26,27,"pl-c1"],[43,44,"pl-c1"],[49,52,"pl-s"],[49,50,"pl-pds"],[51,52,"pl-pds"],[68,69,"pl-c1"],[74,77,"pl-s"],[74,75,"pl-pds"],[76,77,"pl-pds"]],[[26,32,"pl-s"],[26,27,"pl-pds"],[31,32,"pl-pds"]],[[16,20,"pl-k"]],[],[[16,21,"pl-k"]],[],[[12,16,"pl-k"],[17,21,"pl-s"],[17,18,"pl-pds"],[18,20,"pl-cce"],[20,21,"pl-pds"]],[[16,18,"pl-k"]],[[26,34,"pl-s"],[26,27,"pl-pds"],[33,34,"pl-pds"]],[[16,20,"pl-k"]],[],[[16,21,"pl-k"]],[],[[12,19,"pl-k"]],[[16,65,"pl-c"],[16,18,"pl-c"]],[],[[16,62,"pl-c"],[16,18,"pl-c"]],[[16,110,"pl-c"],[16,18,"pl-c"]],[[16,18,"pl-k"],[24,28,"pl-c1"],[37,41,"pl-c1"],[49,53,"pl-c1"],[63,67,"pl-c1"]],[[20,33,"pl-c1"]],[[20,25,"pl-k"]],[],[],[[16,50,"pl-c"],[16,18,"pl-c"]],[[16,18,"pl-k"],[24,28,"pl-c1"]],[],[[20,25,"pl-k"]],[],[],[[16,34,"pl-c"],[16,18,"pl-c"]],[[16,85,"pl-c"],[16,18,"pl-c"]],[[16,109,"pl-c"],[16,18,"pl-c"]],[[16,68,"pl-c"],[16,18,"pl-c"]],[[16,65,"pl-c"],[16,18,"pl-c"]],[[16,34,"pl-c"],[16,18,"pl-c"]],[[16,18,"pl-k"],[25,29,"pl-c1"]],[[25,29,"pl-c1"]],[[20,33,"pl-c1"]],[[20,25,"pl-k"]],[],[],[[16,20,"pl-k"],[32,45,"pl-c1"]],[[16,87,"pl-c"],[16,18,"pl-c"]],[[16,18,"pl-k"],[37,38,"pl-c1"],[48,52,"pl-c1"]],[[20,33,"pl-c1"]],[[20,25,"pl-k"]],[],[[16,50,"pl-c"],[16,18,"pl-c"]],[[16,73,"pl-c"],[16,18,"pl-c"]],[[16,89,"pl-c"],[16,18,"pl-c"]],[[16,20,"pl-k"],[29,33,"pl-c1"]],[[16,24,"pl-c1"],[33,44,"pl-c1"]],[[16,19,"pl-k"],[26,32,"pl-c1"],[37,38,"pl-c1"]],[[20,28,"pl-k"],[29,33,"pl-k"],[39,50,"pl-k"],[51,59,"pl-k"],[60,64,"pl-k"]],[[36,40,"pl-c1"],[45,49,"pl-c1"]],[[38,39,"pl-c1"],[49,53,"pl-c1"]],[],[],[[16,18,"pl-k"]],[[20,59,"pl-c"],[20,22,"pl-c"]],[],[[20,41,"pl-c"],[20,22,"pl-c"]],[[29,33,"pl-c1"]],[[21,25,"pl-c1"],[46,51,"pl-c1"],[68,69,"pl-c1"]],[[21,26,"pl-c1"],[46,53,"pl-c1"],[68,69,"pl-c1"]],[[20,49,"pl-c"],[20,22,"pl-c"]],[[30,38,"pl-c1"]],[],[[20,33,"pl-c1"]],[[20,25,"pl-k"]],[],[],[[16,78,"pl-c"],[16,18,"pl-c"]],[[16,19,"pl-k"],[26,32,"pl-c1"],[37,38,"pl-c1"]],[],[],[[34,35,"pl-c1"]],[[16,21,"pl-k"]],[],[],[],[],[[18,26,"pl-k"],[60,65,"pl-k"]],[[18,26,"pl-c1"]],[[8,14,"pl-k"]],[],[],[[4,43,"pl-en"]],[],[[8,13,"pl-en"]],[],[],[[4,43,"pl-en"],[69,77,"pl-k"]],[],[],[],[[14,22,"pl-smi"],[25,32,"pl-c1"]],[[14,19,"pl-smi"]],[],[[56,64,"pl-k"],[91,99,"pl-k"]],[[8,10,"pl-k"]],[[22,32,"pl-c1"]],[],[[25,33,"pl-smi"]],[[14,22,"pl-smi"],[25,32,"pl-c1"]],[[22,27,"pl-smi"]],[[14,19,"pl-smi"]],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[],[],[[4,44,"pl-en"]],[[8,10,"pl-k"]],[[22,32,"pl-c1"]],[],[],[],[],[[4,39,"pl-en"]],[[18,27,"pl-c1"]],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[],[],[[4,44,"pl-en"]],[],[[18,32,"pl-c1"]],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[],[],[[4,24,"pl-en"]],[],[[8,24,"pl-c1"]],[],[],[[4,25,"pl-en"]],[[8,13,"pl-k"],[23,28,"pl-c1"]],[[12,22,"pl-c1"]],[],[[8,26,"pl-c1"]],[],[],[[15,38,"pl-en"],[52,57,"pl-k"]],[[8,23,"pl-c1"]],[[8,26,"pl-c1"]],[[8,10,"pl-k"],[12,24,"pl-c1"]],[],[[24,28,"pl-s"],[24,25,"pl-pds"],[27,28,"pl-pds"]],[],[[16,19,"pl-s"],[16,17,"pl-pds"],[18,19,"pl-pds"]],[[15,24,"pl-c1"]],[[22,26,"pl-c1"]],[[8,23,"pl-c1"]],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[],[[29,53,"pl-en"],[67,72,"pl-k"]],[[22,28,"pl-smi"],[30,34,"pl-c1"]],[[8,20,"pl-c1"]],[[8,14,"pl-k"]],[],[],[[15,36,"pl-en"]],[[28,34,"pl-c1"],[35,36,"pl-c1"],[47,51,"pl-c1"],[56,57,"pl-c1"]],[],[[8,10,"pl-k"]],[[20,24,"pl-s"],[20,21,"pl-pds"],[23,24,"pl-pds"]],[[26,31,"pl-c1"]],[[10,14,"pl-k"]],[[12,30,"pl-c1"]],[[12,14,"pl-k"],[16,28,"pl-c1"]],[],[],[[20,24,"pl-s"],[20,21,"pl-pds"],[23,24,"pl-pds"],[35,39,"pl-c1"],[45,48,"pl-s"],[45,46,"pl-pds"],[47,48,"pl-pds"]],[],[],[[8,23,"pl-c1"]],[[15,23,"pl-c1"]],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[],[[15,40,"pl-en"]],[],[[8,10,"pl-k"],[18,23,"pl-c1"],[40,45,"pl-c1"]],[[20,23,"pl-s"],[20,21,"pl-pds"],[22,23,"pl-pds"],[35,40,"pl-s"],[35,36,"pl-pds"],[37,39,"pl-cce"],[39,40,"pl-pds"],[44,53,"pl-c1"],[96,99,"pl-s"],[96,97,"pl-pds"],[98,99,"pl-pds"]],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[],[[15,40,"pl-en"],[58,62,"pl-k"]],[[8,22,"pl-c1"],[42,48,"pl-s"],[42,43,"pl-pds"],[47,48,"pl-pds"],[54,61,"pl-s"],[54,55,"pl-pds"],[60,61,"pl-pds"]],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[],[[15,40,"pl-en"]],[[42,46,"pl-k"],[47,52,"pl-k"]],[[8,22,"pl-c1"],[30,39,"pl-c1"]],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[],[[15,35,"pl-en"]],[[8,21,"pl-c1"],[30,35,"pl-c1"],[39,79,"pl-s"],[39,40,"pl-pds"],[78,79,"pl-pds"]],[[8,10,"pl-k"],[18,23,"pl-c1"]],[[12,16,"pl-k"]],[[12,27,"pl-c1"]],[[12,14,"pl-k"],[30,42,"pl-c1"]],[],[],[[20,29,"pl-c1"]],[[12,27,"pl-c1"]],[],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[],[[15,38,"pl-en"]],[[8,23,"pl-c1"]],[[8,10,"pl-k"],[12,24,"pl-c1"]],[],[],[[16,23,"pl-s"],[16,17,"pl-pds"],[22,23,"pl-pds"],[35,41,"pl-s"],[35,36,"pl-pds"],[40,41,"pl-pds"]],[[8,23,"pl-c1"]],[[8,14,"pl-k"],[16,20,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,38,"pl-en"]],[[16,60,"pl-s"],[16,19,"pl-pds"],[58,60,"pl-pds"],[71,79,"pl-s"],[71,74,"pl-pds"],[77,79,"pl-pds"],[83,87,"pl-s"],[83,84,"pl-pds"],[84,86,"pl-cce"],[86,87,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,35,"pl-en"]],[[8,10,"pl-k"]],[[20,23,"pl-s"],[20,21,"pl-pds"],[22,23,"pl-pds"]],[[12,30,"pl-c1"]],[[26,31,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,35,"pl-en"]],[[25,38,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,36,"pl-en"]],[[16,59,"pl-s"],[16,19,"pl-pds"],[57,59,"pl-pds"],[63,67,"pl-s"],[63,64,"pl-pds"],[64,66,"pl-cce"],[66,67,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,38,"pl-en"]],[[8,10,"pl-k"]],[[20,24,"pl-s"],[20,21,"pl-pds"],[21,23,"pl-cce"],[23,24,"pl-pds"]],[[29,34,"pl-c1"]],[],[],[],[],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[0,9,"pl-k"],[10,18,"pl-en"]],[],[[16,44,"pl-en"],[47,52,"pl-k"]],[[8,10,"pl-k"],[29,34,"pl-c1"]],[[31,39,"pl-c1"]],[],[[8,14,"pl-k"]],[],[],[[4,43,"pl-en"],[48,55,"pl-k"]],[],[[2,23,"pl-c"],[2,4,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[0,9,"pl-k"],[10,18,"pl-en"]],[],[[16,40,"pl-en"],[43,48,"pl-k"]],[[8,14,"pl-k"],[15,25,"pl-s"],[15,16,"pl-pds"],[24,25,"pl-pds"]],[],[],[[16,40,"pl-en"],[43,48,"pl-k"]],[],[[16,30,"pl-s"],[16,17,"pl-pds"],[29,30,"pl-pds"]],[[8,14,"pl-k"],[20,23,"pl-c1"]],[],[],[[19,26,"pl-en"]],[[8,14,"pl-k"]],[],[],[[19,25,"pl-en"],[31,37,"pl-c1"]],[[8,14,"pl-k"]],[],[],[[2,27,"pl-c"],[2,4,"pl-c"]],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[0,9,"pl-k"],[10,18,"pl-en"]],[],[[0,4,"pl-k"],[5,35,"pl-en"],[51,56,"pl-k"],[62,67,"pl-k"]],[[4,10,"pl-k"],[14,18,"pl-c1"]],[],[],[[12,45,"pl-en"],[48,53,"pl-k"]],[[4,10,"pl-k"],[11,41,"pl-s"],[11,12,"pl-pds"],[38,40,"pl-cce"],[40,41,"pl-pds"],[56,59,"pl-s"],[56,57,"pl-pds"],[58,59,"pl-pds"]],[],[],[[24,31,"pl-en"],[44,49,"pl-k"]],[[4,10,"pl-k"],[11,34,"pl-c1"]],[],[],[[2,23,"pl-c"],[2,4,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[[1,8,"pl-k"],[9,16,"pl-s"],[9,10,"pl-pds"],[15,16,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[0,9,"pl-k"]],[],[[4,13,"pl-k"],[14,22,"pl-k"]],[[4,8,"pl-k"],[9,24,"pl-en"],[41,49,"pl-c1"]],[[8,54,"pl-c"],[8,10,"pl-c"]],[[8,75,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"],[12,24,"pl-c1"],[33,45,"pl-c1"]],[[12,18,"pl-k"],[19,24,"pl-c1"]],[],[],[[8,74,"pl-c"],[8,10,"pl-c"]],[[8,13,"pl-k"],[14,18,"pl-k"],[29,40,"pl-c1"]],[],[[8,14,"pl-k"]],[],[],[],[[0,9,"pl-k"],[10,18,"pl-k"]],[[3,7,"pl-en"],[32,40,"pl-c1"]],[[4,7,"pl-k"],[9,17,"pl-c1"],[22,23,"pl-c1"]],[[16,32,"pl-c1"]],[],[[4,10,"pl-k"]],[],[],[[0,62,"pl-c"],[0,2,"pl-c"]],[[0,66,"pl-c"],[0,2,"pl-c"]],[[0,4,"pl-k"],[5,21,"pl-en"],[22,28,"pl-k"],[34,40,"pl-k"],[46,52,"pl-k"]],[[4,10,"pl-k"]],[],[],[[0,9,"pl-k"],[10,18,"pl-k"]],[[0,4,"pl-k"],[5,10,"pl-en"]],[],[[11,28,"pl-c1"],[80,81,"pl-c1"]],[],[],[],[[2,28,"pl-c"],[2,4,"pl-c"]],[],[[0,9,"pl-k"],[10,18,"pl-en"]],[[0,9,"pl-k"],[10,16,"pl-en"]],[],[[4,8,"pl-k"],[9,14,"pl-k"],[15,32,"pl-en"],[35,42,"pl-c1"]],[],[],[],[],[[2,25,"pl-c"],[2,4,"pl-c"]],[],[],[[4,38,"pl-en"],[39,45,"pl-k"],[54,60,"pl-k"]],[],[[8,21,"pl-c1"],[32,33,"pl-c1"],[35,53,"pl-s"],[35,36,"pl-pds"],[52,53,"pl-pds"],[67,70,"pl-s"],[67,68,"pl-pds"],[69,70,"pl-pds"]],[[15,48,"pl-s"],[15,16,"pl-pds"],[47,48,"pl-pds"]],[],[],[[4,66,"pl-c"],[4,6,"pl-c"]],[[4,70,"pl-c"],[4,6,"pl-c"]],[[4,8,"pl-k"],[9,32,"pl-en"],[33,39,"pl-k"],[40,45,"pl-k"],[56,61,"pl-k"]],[[8,14,"pl-k"]],[],[],[[16,42,"pl-en"],[45,50,"pl-k"]],[[8,14,"pl-k"],[15,27,"pl-s"],[15,16,"pl-pds"],[26,27,"pl-pds"],[32,56,"pl-c1"],[69,75,"pl-s"],[69,70,"pl-pds"],[74,75,"pl-pds"],[80,104,"pl-c1"]],[],[],[],[[4,40,"pl-en"],[41,47,"pl-k"],[56,64,"pl-c1"]],[],[[8,21,"pl-c1"]],[[52,60,"pl-c1"]],[[12,70,"pl-s"],[12,13,"pl-pds"],[69,70,"pl-pds"]],[[8,21,"pl-c1"],[43,49,"pl-k"]],[[23,72,"pl-s"],[23,24,"pl-pds"],[71,72,"pl-pds"]],[[23,74,"pl-s"],[23,24,"pl-pds"],[73,74,"pl-pds"]],[],[],[[1,3,"pl-k"]],[[1,7,"pl-k"]],[[0,63,"pl-c"],[0,2,"pl-c"]],[[1,7,"pl-k"]],[[1,6,"pl-k"]],[],[[4,8,"pl-k"],[9,33,"pl-en"],[34,40,"pl-k"],[41,46,"pl-k"],[57,62,"pl-k"]],[[8,14,"pl-k"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[35,40,"pl-k"],[42,53,"pl-k"],[54,59,"pl-k"],[71,82,"pl-k"],[83,88,"pl-k"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[35,41,"pl-k"]],[[8,15,"pl-k"]],[[12,32,"pl-c1"],[34,75,"pl-s"],[34,35,"pl-pds"],[74,75,"pl-pds"]],[],[],[],[[1,3,"pl-k"]],[[1,7,"pl-k"]],[[1,6,"pl-k"]],[],[[16,43,"pl-en"],[46,51,"pl-k"]],[],[],[[15,27,"pl-s"],[15,16,"pl-pds"],[26,27,"pl-pds"],[41,52,"pl-s"],[41,42,"pl-pds"],[51,52,"pl-pds"]],[],[[8,10,"pl-k"]],[[12,17,"pl-c1"],[23,34,"pl-k"],[35,40,"pl-k"]],[[19,22,"pl-s"],[19,20,"pl-pds"],[21,22,"pl-pds"]],[[10,14,"pl-k"]],[[12,17,"pl-c1"]],[],[],[[15,20,"pl-s"],[15,16,"pl-pds"],[19,20,"pl-pds"]],[[8,10,"pl-k"]],[[12,17,"pl-c1"]],[[19,23,"pl-c1"]],[[46,52,"pl-k"],[55,63,"pl-c1"]],[],[[19,23,"pl-s"],[19,20,"pl-pds"],[22,23,"pl-pds"]],[[12,17,"pl-c1"]],[[19,23,"pl-c1"]],[[45,51,"pl-k"],[54,62,"pl-c1"]],[],[[10,14,"pl-k"]],[[12,76,"pl-c"],[12,14,"pl-c"]],[[12,17,"pl-c1"]],[[19,23,"pl-c1"],[25,36,"pl-k"],[37,42,"pl-k"]],[[46,51,"pl-k"],[54,62,"pl-c1"]],[],[[19,23,"pl-s"],[19,20,"pl-pds"],[22,23,"pl-pds"]],[[12,17,"pl-c1"]],[[19,23,"pl-c1"],[25,36,"pl-k"],[37,42,"pl-k"]],[[45,50,"pl-k"],[53,61,"pl-c1"]],[],[],[[15,19,"pl-s"],[15,16,"pl-pds"],[18,19,"pl-pds"]],[],[[8,14,"pl-k"],[19,22,"pl-c1"]],[],[],[[4,38,"pl-en"],[39,45,"pl-k"],[54,60,"pl-k"]],[[8,16,"pl-en"]],[[8,17,"pl-en"]],[[8,21,"pl-c1"],[35,36,"pl-c1"],[39,99,"pl-s"],[39,40,"pl-pds"],[98,99,"pl-pds"]],[[8,21,"pl-c1"],[35,36,"pl-c1"],[39,99,"pl-s"],[39,40,"pl-pds"],[98,99,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,32,"pl-en"],[33,39,"pl-k"],[40,45,"pl-k"],[56,61,"pl-k"]],[[8,13,"pl-k"],[14,18,"pl-k"],[54,63,"pl-c1"],[74,83,"pl-c1"]],[[8,14,"pl-k"],[15,31,"pl-c1"]],[[32,42,"pl-c1"],[55,56,"pl-c1"]],[],[],[[16,42,"pl-en"],[45,50,"pl-k"]],[],[[16,22,"pl-s"],[16,17,"pl-pds"],[21,22,"pl-pds"],[28,52,"pl-c1"],[66,80,"pl-s"],[66,67,"pl-pds"],[79,80,"pl-pds"],[96,99,"pl-c1"],[104,121,"pl-s"],[104,105,"pl-pds"],[120,121,"pl-pds"]],[[8,14,"pl-k"],[20,23,"pl-c1"]],[],[],[],[[18,27,"pl-en"],[28,34,"pl-k"],[43,51,"pl-c1"]],[[4,10,"pl-k"],[11,28,"pl-c1"]],[],[],[[18,27,"pl-en"],[28,33,"pl-k"],[42,50,"pl-c1"]],[[4,10,"pl-k"],[11,28,"pl-c1"]],[],[],[[17,26,"pl-en"],[27,33,"pl-k"],[42,48,"pl-k"]],[[4,10,"pl-k"],[11,27,"pl-c1"]],[],[],[[17,26,"pl-en"],[27,33,"pl-k"],[42,48,"pl-k"]],[[4,10,"pl-k"],[11,27,"pl-c1"]],[],[],[[17,26,"pl-en"],[27,33,"pl-k"]],[[4,10,"pl-k"],[11,27,"pl-c1"],[56,62,"pl-k"],[65,72,"pl-c1"],[77,80,"pl-c1"]],[],[],[[17,26,"pl-en"],[27,32,"pl-k"],[41,46,"pl-k"]],[[4,10,"pl-k"],[11,27,"pl-c1"]],[],[],[[17,26,"pl-en"],[27,32,"pl-k"]],[[4,10,"pl-k"],[11,27,"pl-c1"],[56,61,"pl-k"],[64,71,"pl-c1"],[76,79,"pl-c1"]],[],[],[],[],[[0,4,"pl-k"],[5,24,"pl-en"],[26,32,"pl-k"],[33,38,"pl-k"],[50,55,"pl-k"]],[[4,10,"pl-k"],[11,21,"pl-c1"]],[],[],[[12,34,"pl-en"],[37,42,"pl-k"]],[[4,9,"pl-k"],[10,19,"pl-k"],[20,23,"pl-en"],[40,41,"pl-k"]],[[4,10,"pl-k"],[11,19,"pl-s"],[11,12,"pl-pds"],[18,19,"pl-pds"]],[],[],[[13,18,"pl-en"],[23,29,"pl-k"],[30,42,"pl-c1"]],[],[[6,27,"pl-c"],[6,8,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[12,56,"pl-en"],[57,62,"pl-k"]],[[4,6,"pl-k"],[13,18,"pl-c1"]],[[8,14,"pl-k"],[15,46,"pl-s"],[15,16,"pl-pds"],[45,46,"pl-pds"]],[[6,10,"pl-k"]],[[8,14,"pl-k"],[15,38,"pl-s"],[15,16,"pl-pds"],[35,37,"pl-cce"],[37,38,"pl-pds"],[48,51,"pl-s"],[48,49,"pl-pds"],[50,51,"pl-pds"]],[],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,22,"pl-en"]],[[20,44,"pl-en"],[47,52,"pl-k"],[55,61,"pl-k"],[62,82,"pl-s"],[62,63,"pl-pds"],[81,82,"pl-pds"]],[],[[23,30,"pl-en"],[35,41,"pl-k"]],[],[[20,45,"pl-en"],[48,53,"pl-k"],[56,62,"pl-k"],[63,81,"pl-s"],[63,64,"pl-pds"],[80,81,"pl-pds"]],[],[[24,32,"pl-en"],[37,43,"pl-k"]],[],[[20,44,"pl-en"],[47,52,"pl-k"],[55,61,"pl-k"],[62,90,"pl-s"],[62,63,"pl-pds"],[89,90,"pl-pds"]],[],[[23,30,"pl-en"],[35,41,"pl-k"]],[[6,27,"pl-c"],[6,8,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,16,"pl-s"],[9,10,"pl-pds"],[15,16,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[0,9,"pl-k"],[10,18,"pl-en"]],[],[[4,28,"pl-en"],[42,47,"pl-k"]],[],[[8,13,"pl-en"]],[],[[16,41,"pl-en"],[55,60,"pl-k"],[68,73,"pl-k"]],[[8,14,"pl-k"]],[[17,24,"pl-c1"]],[],[],[[14,48,"pl-en"],[51,56,"pl-k"]],[[8,14,"pl-k"]],[[21,30,"pl-c1"]],[[21,42,"pl-s"],[21,22,"pl-pds"],[41,42,"pl-pds"]],[],[],[],[[4,40,"pl-en"],[75,80,"pl-k"]],[],[],[],[],[[16,43,"pl-en"],[46,51,"pl-k"]],[],[[20,27,"pl-c1"],[28,29,"pl-c1"],[44,48,"pl-c1"],[66,71,"pl-smi"],[72,76,"pl-c1"]],[[49,70,"pl-c1"],[73,77,"pl-c1"]],[],[[23,29,"pl-s"],[23,24,"pl-pds"],[26,28,"pl-cce"],[28,29,"pl-pds"]],[[36,41,"pl-smi"]],[[23,26,"pl-s"],[23,24,"pl-pds"],[25,26,"pl-pds"]],[[36,57,"pl-c1"]],[[8,14,"pl-k"]],[],[],[[4,44,"pl-en"],[58,63,"pl-k"],[99,107,"pl-s"],[99,100,"pl-pds"],[106,107,"pl-pds"]],[],[[4,8,"pl-k"],[9,35,"pl-en"],[49,54,"pl-k"],[65,70,"pl-k"]],[[8,14,"pl-k"],[28,40,"pl-c1"],[67,72,"pl-smi"]],[],[],[],[[4,48,"pl-en"],[62,67,"pl-k"],[103,113,"pl-s"],[103,104,"pl-pds"],[112,113,"pl-pds"]],[],[[4,8,"pl-k"],[9,37,"pl-en"],[51,56,"pl-k"],[67,72,"pl-k"]],[[8,14,"pl-k"],[15,23,"pl-c1"],[38,50,"pl-c1"],[75,80,"pl-smi"]],[],[],[],[[4,40,"pl-en"],[54,59,"pl-k"],[95,108,"pl-s"],[95,96,"pl-pds"],[107,108,"pl-pds"]],[],[[4,8,"pl-k"],[9,33,"pl-en"],[47,52,"pl-k"],[63,68,"pl-k"]],[[8,14,"pl-k"],[15,25,"pl-c1"],[40,52,"pl-c1"],[77,82,"pl-smi"]],[],[],[],[[4,36,"pl-en"],[50,55,"pl-k"],[91,102,"pl-s"],[91,92,"pl-pds"],[101,102,"pl-pds"]],[],[[4,8,"pl-k"],[9,31,"pl-en"],[45,50,"pl-k"],[61,66,"pl-k"]],[[8,14,"pl-k"],[15,23,"pl-c1"],[38,50,"pl-c1"],[75,80,"pl-smi"]],[],[],[],[],[[4,30,"pl-en"]],[],[[4,8,"pl-k"],[9,28,"pl-en"],[41,46,"pl-k"],[57,62,"pl-k"]],[[8,12,"pl-k"],[45,94,"pl-c"],[45,47,"pl-c"]],[[8,10,"pl-k"]],[],[],[[8,12,"pl-k"],[19,29,"pl-c1"]],[[8,14,"pl-k"],[15,31,"pl-c1"]],[],[],[[16,38,"pl-en"],[41,46,"pl-k"]],[[8,14,"pl-k"],[15,25,"pl-s"],[15,16,"pl-pds"],[24,25,"pl-pds"],[30,54,"pl-c1"],[110,129,"pl-s"],[110,111,"pl-pds"],[128,129,"pl-pds"],[132,153,"pl-s"],[132,133,"pl-pds"],[152,153,"pl-pds"]],[],[],[],[[24,30,"pl-en"],[44,49,"pl-k"]],[[8,14,"pl-k"],[15,34,"pl-c1"],[36,47,"pl-c1"]],[],[[26,43,"pl-en"],[57,62,"pl-k"]],[[8,14,"pl-k"],[15,36,"pl-c1"],[38,49,"pl-c1"]],[],[[20,28,"pl-en"],[42,47,"pl-k"]],[[8,14,"pl-k"],[15,30,"pl-c1"],[32,43,"pl-c1"]],[],[[22,32,"pl-en"],[46,51,"pl-k"]],[[8,14,"pl-k"],[15,32,"pl-c1"],[34,45,"pl-c1"]],[],[],[[17,24,"pl-en"],[37,42,"pl-k"]],[[8,14,"pl-k"],[15,27,"pl-c1"]],[],[],[[2,23,"pl-c"],[2,4,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[0,9,"pl-k"],[10,18,"pl-en"]],[[4,43,"pl-en"],[48,55,"pl-k"]],[],[[4,13,"pl-k"],[14,20,"pl-en"]],[],[[20,42,"pl-en"],[74,79,"pl-k"],[113,118,"pl-k"]],[],[[17,23,"pl-c1"],[40,41,"pl-c1"]],[[12,15,"pl-k"],[18,22,"pl-k"]],[[39,43,"pl-c1"]],[],[[29,40,"pl-k"],[41,47,"pl-c1"],[89,90,"pl-c1"],[102,106,"pl-c1"]],[],[[24,31,"pl-c1"]],[],[[27,31,"pl-s"],[27,28,"pl-pds"],[30,31,"pl-pds"]],[[12,16,"pl-k"],[25,29,"pl-c1"]],[[12,15,"pl-k"],[17,21,"pl-k"]],[[16,18,"pl-k"]],[[28,33,"pl-c1"]],[[16,20,"pl-k"]],[],[],[],[[27,31,"pl-s"],[27,28,"pl-pds"],[30,31,"pl-pds"]],[[12,18,"pl-k"]],[],[],[[6,25,"pl-c"],[6,8,"pl-c"]],[[2,23,"pl-c"],[2,4,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,67,"pl-c"],[4,6,"pl-c"]],[[4,103,"pl-c"],[4,6,"pl-c"]],[[4,67,"pl-c"],[4,6,"pl-c"]],[[4,8,"pl-k"],[9,33,"pl-en"],[76,81,"pl-k"]],[[39,70,"pl-c1"]],[[45,50,"pl-k"],[53,57,"pl-c1"],[59,69,"pl-c1"]],[[16,26,"pl-c1"]],[],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,39,"pl-en"],[44,51,"pl-k"]],[],[[4,8,"pl-k"],[9,40,"pl-en"],[55,60,"pl-k"]],[[8,80,"pl-c"],[8,10,"pl-c"]],[[20,36,"pl-s"],[20,21,"pl-pds"],[35,36,"pl-pds"]],[[8,10,"pl-k"],[28,34,"pl-smi"],[35,44,"pl-smi"],[45,52,"pl-smi"],[55,56,"pl-c1"]],[[24,30,"pl-s"],[24,25,"pl-pds"],[29,30,"pl-pds"]],[[10,14,"pl-k"],[15,17,"pl-k"],[34,40,"pl-smi"],[41,51,"pl-smi"],[52,61,"pl-c1"]],[[24,30,"pl-s"],[24,25,"pl-pds"],[29,30,"pl-pds"]],[[10,14,"pl-k"],[15,17,"pl-k"],[34,40,"pl-smi"],[41,51,"pl-smi"],[52,57,"pl-c1"]],[[24,31,"pl-s"],[24,25,"pl-pds"],[30,31,"pl-pds"]],[[10,14,"pl-k"]],[[24,30,"pl-s"],[24,25,"pl-pds"],[29,30,"pl-pds"]],[],[[20,23,"pl-s"],[20,21,"pl-pds"],[22,23,"pl-pds"],[42,50,"pl-smi"],[52,56,"pl-smi"],[60,64,"pl-s"],[60,61,"pl-pds"],[61,63,"pl-cce"],[63,64,"pl-pds"]],[[8,44,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,35,"pl-en"],[49,54,"pl-k"]],[[20,41,"pl-s"],[20,21,"pl-pds"],[40,41,"pl-pds"],[54,58,"pl-smi"],[62,66,"pl-s"],[62,63,"pl-pds"],[63,65,"pl-cce"],[65,66,"pl-pds"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,30,"pl-en"]],[[8,22,"pl-en"]],[[8,24,"pl-en"]],[[8,16,"pl-en"],[36,42,"pl-en"]],[],[],[],[],[[4,31,"pl-en"],[36,43,"pl-k"]],[],[[4,8,"pl-k"],[9,36,"pl-en"]],[[41,46,"pl-k"]],[[8,28,"pl-c1"],[63,72,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,36,"pl-en"]],[[41,46,"pl-k"]],[[8,28,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,32,"pl-en"],[61,66,"pl-k"]],[[8,24,"pl-c1"]],[[34,37,"pl-c1"]],[],[[35,49,"pl-c1"]],[[35,44,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,31,"pl-en"],[53,58,"pl-k"]],[[8,23,"pl-c1"],[51,65,"pl-c1"]],[],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[0,9,"pl-k"]],[],[[4,24,"pl-c"],[4,6,"pl-c"]],[[4,10,"pl-k"],[11,20,"pl-k"]],[],[[1,6,"pl-k"]],[[4,10,"pl-k"],[11,20,"pl-k"],[60,68,"pl-s"],[60,61,"pl-pds"],[67,68,"pl-pds"]],[[4,10,"pl-k"],[11,20,"pl-k"],[60,68,"pl-s"],[60,61,"pl-pds"],[67,68,"pl-pds"]],[[1,5,"pl-k"]],[[4,10,"pl-k"],[11,20,"pl-k"],[60,68,"pl-s"],[60,61,"pl-pds"],[67,68,"pl-pds"]],[[4,10,"pl-k"],[11,20,"pl-k"],[60,68,"pl-s"],[60,61,"pl-pds"],[67,68,"pl-pds"]],[[1,6,"pl-k"]],[],[[0,47,"pl-c"],[0,2,"pl-c"]],[[0,5,"pl-k"],[6,22,"pl-en"]],[[0,7,"pl-k"]],[[22,30,"pl-k"],[50,55,"pl-k"],[60,66,"pl-k"]],[[4,20,"pl-en"],[38,43,"pl-k"],[48,54,"pl-k"]],[[4,20,"pl-en"],[59,64,"pl-k"],[74,78,"pl-k"]],[],[],[],[],[],[],[],[],[[4,8,"pl-k"],[9,14,"pl-en"]],[[8,23,"pl-c1"]],[],[[29,34,"pl-c1"]],[],[[8,14,"pl-k"],[23,36,"pl-c1"]],[[8,12,"pl-k"]],[[12,27,"pl-c1"]],[[12,35,"pl-c1"]],[[12,40,"pl-c1"]],[[12,14,"pl-k"],[24,37,"pl-c1"]],[[16,38,"pl-c1"]],[[12,16,"pl-k"]],[[16,38,"pl-c1"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[[12,14,"pl-k"],[23,27,"pl-c1"]],[[16,31,"pl-c1"],[77,92,"pl-s"],[77,78,"pl-pds"],[91,92,"pl-pds"]],[[12,16,"pl-k"]],[[16,31,"pl-c1"]],[[12,35,"pl-c1"]],[[12,40,"pl-c1"]],[[12,34,"pl-c1"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[[12,27,"pl-c1"]],[[12,22,"pl-c1"],[23,59,"pl-s"],[23,24,"pl-pds"],[58,59,"pl-pds"]],[[12,24,"pl-c1"]],[[12,30,"pl-c1"]],[[12,34,"pl-c1"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[[12,27,"pl-c1"]],[[12,22,"pl-c1"],[23,60,"pl-s"],[23,24,"pl-pds"],[59,60,"pl-pds"]],[[12,24,"pl-c1"]],[[12,30,"pl-c1"]],[[12,34,"pl-c1"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[[12,27,"pl-c1"]],[[12,22,"pl-c1"],[23,53,"pl-s"],[23,24,"pl-pds"],[52,53,"pl-pds"]],[[12,30,"pl-c1"]],[[12,34,"pl-c1"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[[12,27,"pl-c1"],[42,48,"pl-s"],[42,43,"pl-pds"],[47,48,"pl-pds"]],[[12,24,"pl-c1"]],[[12,34,"pl-c1"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[[12,27,"pl-c1"],[42,51,"pl-s"],[42,43,"pl-pds"],[50,51,"pl-pds"]],[[12,24,"pl-c1"]],[[12,34,"pl-c1"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[[12,27,"pl-c1"]],[[12,22,"pl-c1"],[23,35,"pl-s"],[23,24,"pl-pds"],[34,35,"pl-pds"]],[[12,34,"pl-c1"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[[12,27,"pl-c1"],[42,51,"pl-s"],[42,43,"pl-pds"],[50,51,"pl-pds"]],[[12,24,"pl-c1"]],[[12,34,"pl-c1"]],[[12,17,"pl-k"]],[[12,64,"pl-c"],[12,14,"pl-c"]],[[8,12,"pl-k"]],[[8,12,"pl-k"]],[[8,12,"pl-k"]],[[12,27,"pl-c1"],[43,65,"pl-s"],[43,44,"pl-pds"],[64,65,"pl-pds"]],[[12,17,"pl-k"]],[],[],[],[[0,8,"pl-k"]],[[4,8,"pl-k"],[9,24,"pl-en"],[27,32,"pl-k"]],[[30,41,"pl-c1"]],[[25,38,"pl-c1"],[44,47,"pl-s"],[44,45,"pl-pds"],[46,47,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,24,"pl-en"],[68,73,"pl-k"]],[[8,10,"pl-k"],[24,29,"pl-c1"]],[[34,45,"pl-c1"],[57,60,"pl-s"],[57,58,"pl-pds"],[59,60,"pl-pds"]],[[22,25,"pl-s"],[22,23,"pl-pds"],[24,25,"pl-pds"]],[],[],[],[[4,8,"pl-k"],[9,19,"pl-en"],[20,24,"pl-k"],[25,30,"pl-k"],[39,44,"pl-k"]],[[18,21,"pl-s"],[18,19,"pl-pds"],[20,21,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,27,"pl-en"]],[[8,10,"pl-k"],[19,32,"pl-c1"]],[[22,25,"pl-s"],[22,23,"pl-pds"],[24,25,"pl-pds"]],[],[[38,49,"pl-c1"],[71,89,"pl-s"],[71,72,"pl-pds"],[88,89,"pl-pds"]],[],[[12,35,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,32,"pl-en"],[35,40,"pl-k"]],[[8,10,"pl-k"],[19,32,"pl-c1"]],[[22,25,"pl-s"],[22,23,"pl-pds"],[24,25,"pl-pds"],[36,49,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,37,"pl-en"],[40,45,"pl-k"]],[[8,10,"pl-k"],[19,40,"pl-c1"]],[[34,45,"pl-c1"],[67,75,"pl-s"],[67,68,"pl-pds"],[74,75,"pl-pds"]],[[29,50,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,21,"pl-en"]],[[8,10,"pl-k"],[34,37,"pl-c1"]],[[22,26,"pl-s"],[22,23,"pl-pds"],[25,26,"pl-pds"],[41,48,"pl-smi"],[52,56,"pl-s"],[52,53,"pl-pds"],[53,55,"pl-cce"],[55,56,"pl-pds"]],[],[],[],[],[[4,8,"pl-k"],[9,31,"pl-en"]],[[8,10,"pl-k"],[34,37,"pl-c1"]],[[12,18,"pl-k"]],[],[[8,13,"pl-k"],[14,18,"pl-k"],[36,40,"pl-c1"]],[[8,13,"pl-k"],[14,18,"pl-k"],[23,34,"pl-k"],[40,46,"pl-c1"]],[],[[30,41,"pl-c1"],[55,63,"pl-s"],[55,56,"pl-pds"],[62,63,"pl-pds"]],[[18,27,"pl-c1"],[32,41,"pl-s"],[32,33,"pl-pds"],[40,41,"pl-pds"],[50,53,"pl-s"],[50,51,"pl-pds"],[52,53,"pl-pds"]],[],[[8,13,"pl-k"]],[[12,70,"pl-c"],[12,14,"pl-c"]],[[12,14,"pl-k"],[48,52,"pl-smi"]],[[16,28,"pl-c1"]],[[16,18,"pl-k"]],[[42,53,"pl-c1"],[75,81,"pl-s"],[75,76,"pl-pds"],[80,81,"pl-pds"]],[],[[16,24,"pl-k"]],[],[],[],[],[],[[0,8,"pl-k"]],[],[[20,25,"pl-k"]],[[29,34,"pl-k"]],[],[[4,8,"pl-k"]],[],[],[],[[2,19,"pl-c"],[2,4,"pl-c"]],[],[[20,51,"pl-en"]],[[12,18,"pl-k"],[19,77,"pl-s"],[19,20,"pl-pds"],[76,77,"pl-pds"]],[],[],[[8,12,"pl-k"],[13,49,"pl-en"]],[[24,49,"pl-s"],[24,25,"pl-pds"],[48,49,"pl-pds"],[70,75,"pl-s"],[70,71,"pl-pds"],[72,74,"pl-cce"],[74,75,"pl-pds"]],[],[],[[8,12,"pl-k"],[13,45,"pl-en"],[59,64,"pl-k"]],[[12,14,"pl-k"],[27,35,"pl-c1"],[38,48,"pl-c1"]],[[38,49,"pl-c1"]],[[28,39,"pl-s"],[28,29,"pl-pds"],[38,39,"pl-pds"]],[[38,46,"pl-c1"]],[[28,32,"pl-s"],[28,29,"pl-pds"],[29,31,"pl-cce"],[31,32,"pl-pds"]],[],[[24,36,"pl-s"],[24,25,"pl-pds"],[35,36,"pl-pds"],[40,47,"pl-c1"],[53,57,"pl-s"],[53,54,"pl-pds"],[54,56,"pl-cce"],[56,57,"pl-pds"]],[],[],[[8,12,"pl-k"],[13,44,"pl-en"],[61,66,"pl-k"]],[[28,33,"pl-k"],[60,75,"pl-smi"]],[],[[12,16,"pl-k"],[37,41,"pl-c1"]],[],[[12,77,"pl-c"],[12,14,"pl-c"]],[[12,14,"pl-k"],[27,51,"pl-c1"],[64,68,"pl-c1"]],[[16,18,"pl-k"],[27,40,"pl-c1"],[75,88,"pl-c1"]],[[20,26,"pl-k"]],[[36,41,"pl-c1"]],[],[],[[29,36,"pl-smi"],[93,96,"pl-c1"]],[[20,25,"pl-c1"]],[],[[24,28,"pl-s"],[24,25,"pl-pds"],[25,27,"pl-cce"],[27,28,"pl-pds"]],[],[],[[8,12,"pl-k"],[13,42,"pl-en"],[56,61,"pl-k"]],[[12,18,"pl-k"],[39,56,"pl-smi"]],[[12,14,"pl-k"],[17,35,"pl-c1"]],[[28,48,"pl-c1"],[59,65,"pl-s"],[59,60,"pl-pds"],[64,65,"pl-pds"],[83,94,"pl-smi"],[95,99,"pl-smi"],[103,107,"pl-s"],[103,104,"pl-pds"],[104,106,"pl-cce"],[106,107,"pl-pds"]],[],[],[],[[8,12,"pl-k"],[13,42,"pl-en"],[57,62,"pl-k"]],[[12,30,"pl-c1"],[67,73,"pl-smi"]],[[24,30,"pl-s"],[24,25,"pl-pds"],[25,29,"pl-cce"],[29,30,"pl-pds"]],[[12,47,"pl-c1"]],[],[],[[8,41,"pl-en"],[46,53,"pl-k"]],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[],[[1,3,"pl-k"]],[[1,7,"pl-k"]],[[1,7,"pl-k"],[30,80,"pl-c"],[30,32,"pl-c"]],[[1,81,"pl-c"],[1,3,"pl-c"]],[[1,6,"pl-k"]],[],[[1,3,"pl-k"]],[[3,9,"pl-k"]],[[0,63,"pl-c"],[0,2,"pl-c"]],[[3,9,"pl-k"]],[[1,6,"pl-k"]],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[0,9,"pl-k"]],[],[[0,37,"pl-c"],[0,2,"pl-c"]],[[0,5,"pl-k"],[6,29,"pl-en"]],[[0,7,"pl-k"]],[[29,37,"pl-k"],[64,69,"pl-k"],[74,80,"pl-k"]],[[4,27,"pl-en"],[52,57,"pl-k"],[62,68,"pl-k"]],[[4,27,"pl-en"],[66,71,"pl-k"],[106,110,"pl-k"]],[],[[8,13,"pl-en"]],[],[],[],[],[],[[8,14,"pl-k"],[23,36,"pl-c1"]],[[8,12,"pl-k"]],[],[[25,33,"pl-s"],[25,26,"pl-pds"],[32,33,"pl-pds"]],[[12,39,"pl-c"],[12,14,"pl-c"]],[[12,14,"pl-k"],[25,29,"pl-c1"],[35,36,"pl-c1"]],[[31,45,"pl-s"],[31,32,"pl-pds"],[44,45,"pl-pds"]],[[12,14,"pl-k"],[25,29,"pl-c1"],[34,35,"pl-c1"]],[[31,46,"pl-s"],[31,32,"pl-pds"],[45,46,"pl-pds"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[[12,14,"pl-k"],[23,27,"pl-c1"]],[],[[29,50,"pl-s"],[29,30,"pl-pds"],[49,50,"pl-pds"]],[[14,18,"pl-k"]],[],[[29,37,"pl-s"],[29,30,"pl-pds"],[36,37,"pl-pds"]],[],[[12,14,"pl-k"],[25,29,"pl-c1"],[35,36,"pl-c1"]],[[31,45,"pl-s"],[31,32,"pl-pds"],[44,45,"pl-pds"]],[[12,14,"pl-k"],[25,29,"pl-c1"],[34,35,"pl-c1"]],[[31,46,"pl-s"],[31,32,"pl-pds"],[45,46,"pl-pds"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[],[[25,33,"pl-s"],[25,26,"pl-pds"],[32,33,"pl-pds"]],[[12,26,"pl-c"],[12,14,"pl-c"]],[[12,18,"pl-k"],[29,33,"pl-c1"],[39,43,"pl-k"],[44,45,"pl-c1"]],[[31,66,"pl-s"],[31,32,"pl-pds"],[65,66,"pl-pds"]],[[16,21,"pl-k"]],[[12,16,"pl-k"],[17,18,"pl-c1"]],[[31,73,"pl-s"],[31,32,"pl-pds"],[72,73,"pl-pds"]],[[16,21,"pl-k"]],[[12,19,"pl-k"]],[[31,74,"pl-s"],[31,32,"pl-pds"],[73,74,"pl-pds"]],[[16,21,"pl-k"]],[],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[],[[25,33,"pl-s"],[25,26,"pl-pds"],[32,33,"pl-pds"]],[[27,59,"pl-s"],[27,28,"pl-pds"],[58,59,"pl-pds"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[],[[25,33,"pl-s"],[25,26,"pl-pds"],[32,33,"pl-pds"]],[[27,83,"pl-s"],[27,28,"pl-pds"],[82,83,"pl-pds"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[[27,33,"pl-s"],[27,28,"pl-pds"],[32,33,"pl-pds"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[[27,36,"pl-s"],[27,28,"pl-pds"],[35,36,"pl-pds"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[[25,33,"pl-s"],[25,26,"pl-pds"],[32,33,"pl-pds"]],[],[[12,14,"pl-k"],[25,29,"pl-c1"],[35,36,"pl-c1"]],[[31,56,"pl-s"],[31,32,"pl-pds"],[55,56,"pl-pds"]],[[12,14,"pl-k"],[25,29,"pl-c1"],[34,35,"pl-c1"]],[[31,57,"pl-s"],[31,32,"pl-pds"],[56,57,"pl-pds"]],[[12,17,"pl-k"]],[[8,12,"pl-k"]],[],[[25,34,"pl-s"],[25,26,"pl-pds"],[33,34,"pl-pds"]],[[12,14,"pl-k"],[25,29,"pl-c1"],[35,36,"pl-c1"]],[[31,56,"pl-s"],[31,32,"pl-pds"],[55,56,"pl-pds"]],[[12,14,"pl-k"],[25,29,"pl-c1"],[34,35,"pl-c1"]],[[31,57,"pl-s"],[31,32,"pl-pds"],[56,57,"pl-pds"]],[[12,17,"pl-k"]],[[12,64,"pl-c"],[12,14,"pl-c"]],[[8,12,"pl-k"]],[[8,12,"pl-k"]],[[8,12,"pl-k"]],[[25,47,"pl-s"],[25,26,"pl-pds"],[46,47,"pl-pds"]],[],[[12,17,"pl-k"]],[],[],[],[[4,8,"pl-k"],[9,14,"pl-en"],[17,22,"pl-k"]],[[8,23,"pl-c1"]],[[8,10,"pl-k"],[18,24,"pl-smi"],[25,35,"pl-smi"],[36,41,"pl-c1"],[46,47,"pl-c1"]],[[12,27,"pl-c1"]],[[12,35,"pl-c1"]],[[12,40,"pl-c1"]],[[10,14,"pl-k"]],[[22,26,"pl-s"],[22,23,"pl-pds"],[23,25,"pl-cce"],[25,26,"pl-pds"]],[],[[8,20,"pl-c1"]],[],[],[[0,8,"pl-k"]],[[4,8,"pl-k"],[9,24,"pl-en"],[27,32,"pl-k"]],[[8,10,"pl-k"],[24,29,"pl-c1"]],[[34,45,"pl-c1"],[71,76,"pl-s"],[71,72,"pl-pds"],[73,75,"pl-cce"],[75,76,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,32,"pl-en"],[35,40,"pl-k"]],[[8,10,"pl-k"],[19,32,"pl-c1"]],[[34,45,"pl-c1"]],[[22,26,"pl-s"],[22,23,"pl-pds"],[25,26,"pl-pds"],[37,57,"pl-c1"],[63,67,"pl-s"],[63,64,"pl-pds"],[64,66,"pl-cce"],[66,67,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,37,"pl-en"],[40,45,"pl-k"]],[[8,10,"pl-k"],[19,40,"pl-c1"]],[[22,41,"pl-s"],[22,23,"pl-pds"],[38,40,"pl-cce"],[40,41,"pl-pds"]],[[34,45,"pl-c1"]],[[22,38,"pl-c1"],[47,68,"pl-c1"]],[[27,33,"pl-c1"],[35,36,"pl-c1"]],[[22,26,"pl-s"],[22,23,"pl-pds"],[23,25,"pl-cce"],[25,26,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,21,"pl-en"],[24,29,"pl-k"]],[[8,10,"pl-k"],[26,31,"pl-c1"]],[[38,41,"pl-s"],[38,39,"pl-pds"],[40,41,"pl-pds"],[45,49,"pl-s"],[45,46,"pl-pds"],[46,48,"pl-cce"],[48,49,"pl-pds"]],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[12,70,"pl-c"],[12,14,"pl-c"]],[[12,14,"pl-k"],[41,45,"pl-smi"]],[[26,42,"pl-c1"],[47,54,"pl-smi"],[56,62,"pl-c1"],[63,64,"pl-c1"],[69,73,"pl-s"],[69,70,"pl-pds"],[70,72,"pl-cce"],[72,73,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,24,"pl-en"],[27,32,"pl-k"]],[[30,41,"pl-c1"]],[[25,38,"pl-c1"],[44,48,"pl-s"],[44,45,"pl-pds"],[47,48,"pl-pds"]],[],[],[],[[19,24,"pl-k"]],[[20,25,"pl-k"]],[],[],[],[[29,34,"pl-k"]],[],[[4,8,"pl-k"]],[],[],[[5,11,"pl-c1"],[12,21,"pl-en"],[28,36,"pl-c1"],[50,58,"pl-c1"]],[[4,9,"pl-k"],[10,14,"pl-k"],[31,32,"pl-c1"],[81,82,"pl-c1"]],[[4,10,"pl-k"],[21,22,"pl-c1"],[35,36,"pl-c1"],[40,41,"pl-c1"],[44,55,"pl-k"],[61,67,"pl-c1"]],[],[],[[5,11,"pl-c1"]],[[0,7,"pl-en"],[14,20,"pl-c1"],[30,36,"pl-c1"],[46,52,"pl-c1"],[62,68,"pl-c1"]],[[4,6,"pl-k"]],[[8,14,"pl-k"]],[[4,8,"pl-k"],[9,11,"pl-k"]],[[8,14,"pl-k"]],[[4,8,"pl-k"],[9,11,"pl-k"]],[[8,14,"pl-k"]],[[4,8,"pl-k"]],[[8,14,"pl-k"]],[],[],[[0,6,"pl-k"],[7,18,"pl-en"]],[[0,6,"pl-k"],[7,15,"pl-en"]],[[0,6,"pl-k"],[7,18,"pl-en"]],[],[[0,5,"pl-k"],[6,14,"pl-en"]],[[4,8,"pl-k"],[9,14,"pl-k"],[15,19,"pl-en"],[22,29,"pl-c1"]],[],[],[],[],[],[],[],[[4,10,"pl-k"],[11,16,"pl-k"],[17,25,"pl-c1"],[56,60,"pl-c1"]],[[4,10,"pl-k"],[11,16,"pl-k"],[17,25,"pl-c1"],[56,60,"pl-c1"]],[[4,10,"pl-k"],[11,16,"pl-k"],[17,25,"pl-c1"],[51,55,"pl-c1"]],[[4,10,"pl-k"],[11,16,"pl-k"],[17,25,"pl-c1"],[51,53,"pl-c1"]],[],[[4,10,"pl-k"]],[],[],[[0,7,"pl-k"]],[[4,12,"pl-k"],[13,21,"pl-en"],[22,28,"pl-k"]],[],[],[[8,10,"pl-k"]],[[12,14,"pl-k"]],[],[[12,16,"pl-k"],[17,19,"pl-k"]],[],[[12,16,"pl-k"],[17,19,"pl-k"]],[],[[12,16,"pl-k"],[17,19,"pl-k"]],[],[[12,16,"pl-k"]],[],[],[],[],[],[[4,8,"pl-k"],[9,14,"pl-en"],[17,22,"pl-k"]],[[8,14,"pl-k"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[37,48,"pl-k"],[49,55,"pl-k"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[37,48,"pl-k"],[49,55,"pl-k"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[37,48,"pl-k"],[49,55,"pl-k"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[37,48,"pl-k"],[49,55,"pl-k"]],[[8,15,"pl-k"]],[[12,18,"pl-k"]],[],[],[[14,27,"pl-en"],[30,35,"pl-k"]],[[8,14,"pl-k"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[19,23,"pl-s"],[19,20,"pl-pds"],[22,23,"pl-pds"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[19,23,"pl-s"],[19,20,"pl-pds"],[22,23,"pl-pds"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[19,23,"pl-s"],[19,20,"pl-pds"],[22,23,"pl-pds"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[19,22,"pl-s"],[19,20,"pl-pds"],[21,22,"pl-pds"]],[[8,12,"pl-k"]],[[12,18,"pl-k"],[19,22,"pl-s"],[19,20,"pl-pds"],[21,22,"pl-pds"]],[[8,15,"pl-k"]],[[12,18,"pl-k"],[19,41,"pl-s"],[19,20,"pl-pds"],[40,41,"pl-pds"]],[],[],[],[[4,10,"pl-k"],[11,15,"pl-k"],[16,24,"pl-k"],[56,61,"pl-k"]],[[8,14,"pl-k"],[30,35,"pl-c1"],[41,44,"pl-s"],[41,42,"pl-pds"],[43,44,"pl-pds"],[57,70,"pl-c1"]],[],[],[[2,23,"pl-c"],[2,4,"pl-c"]],[],[[0,4,"pl-k"],[5,10,"pl-k"],[11,24,"pl-en"],[27,34,"pl-c1"]],[],[],[],[],[[0,6,"pl-k"],[7,17,"pl-en"]],[],[[9,15,"pl-c1"]],[],[],[],[[0,5,"pl-k"],[6,18,"pl-en"]],[],[],[],[[4,7,"pl-k"],[27,28,"pl-c1"]],[[4,8,"pl-k"],[20,25,"pl-c1"]],[],[[0,7,"pl-k"]],[[4,16,"pl-en"]],[],[[8,21,"pl-en"]],[],[[4,8,"pl-k"],[9,20,"pl-en"],[23,28,"pl-k"],[56,61,"pl-k"]],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"],[9,13,"pl-en"]],[[8,10,"pl-k"]],[[23,27,"pl-c1"]],[[13,17,"pl-c1"],[21,29,"pl-c1"]],[],[],[[3,6,"pl-k"],[8,12,"pl-k"],[13,18,"pl-k"]],[[16,22,"pl-c1"],[28,33,"pl-smi"],[36,37,"pl-c1"]],[[18,34,"pl-c1"],[40,44,"pl-smi"],[46,51,"pl-c1"],[57,62,"pl-smi"],[65,66,"pl-c1"]],[[30,46,"pl-c1"],[48,49,"pl-c1"]],[],[[25,29,"pl-s"],[25,26,"pl-pds"],[26,28,"pl-cce"],[28,29,"pl-pds"]],[],[[20,31,"pl-c1"],[32,35,"pl-s"],[32,33,"pl-pds"],[34,35,"pl-pds"],[40,44,"pl-s"],[40,41,"pl-pds"],[41,43,"pl-cce"],[43,44,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,14,"pl-en"]],[[8,10,"pl-k"]],[[13,17,"pl-c1"],[21,29,"pl-c1"]],[[20,24,"pl-s"],[20,21,"pl-pds"],[21,23,"pl-cce"],[23,24,"pl-pds"]],[[23,28,"pl-c1"]],[],[],[],[[4,12,"pl-k"],[13,21,"pl-k"]],[[4,10,"pl-k"],[25,33,"pl-k"],[57,62,"pl-k"]],[[11,16,"pl-smi"]],[[8,14,"pl-k"]],[],[],[[4,10,"pl-k"],[25,33,"pl-k"]],[[8,12,"pl-k"],[25,30,"pl-smi"],[31,34,"pl-c1"]],[[8,13,"pl-k"],[14,18,"pl-k"],[36,40,"pl-c1"]],[[11,16,"pl-smi"],[17,20,"pl-c1"],[21,23,"pl-s"],[21,22,"pl-pds"],[22,23,"pl-pds"]],[[11,15,"pl-c1"]],[[8,10,"pl-k"],[15,30,"pl-smi"],[34,45,"pl-k"],[46,49,"pl-k"],[54,67,"pl-smi"],[68,72,"pl-c1"],[77,78,"pl-c1"]],[[15,30,"pl-smi"],[34,35,"pl-c1"]],[[15,19,"pl-smi"],[23,27,"pl-s"],[23,24,"pl-pds"],[24,26,"pl-cce"],[26,27,"pl-pds"]],[],[[11,26,"pl-smi"]],[],[[8,12,"pl-k"],[26,39,"pl-smi"],[43,58,"pl-smi"]],[[8,12,"pl-k"],[34,35,"pl-c1"],[46,51,"pl-smi"]],[[14,25,"pl-c1"],[34,39,"pl-smi"],[53,54,"pl-c1"],[57,60,"pl-s"],[57,58,"pl-pds"],[59,60,"pl-pds"]],[[14,25,"pl-c1"]],[[8,10,"pl-k"],[20,33,"pl-smi"]],[[15,19,"pl-smi"],[44,47,"pl-s"],[44,45,"pl-pds"],[46,47,"pl-pds"]],[[8,12,"pl-k"]],[[15,19,"pl-smi"],[44,47,"pl-s"],[44,45,"pl-pds"],[46,47,"pl-pds"]],[[8,14,"pl-k"]],[],[],[[4,10,"pl-k"],[25,33,"pl-k"]],[[8,10,"pl-k"],[15,30,"pl-smi"],[33,34,"pl-c1"]],[[15,19,"pl-smi"],[23,27,"pl-s"],[23,24,"pl-pds"],[24,26,"pl-cce"],[26,27,"pl-pds"]],[[15,30,"pl-smi"],[34,35,"pl-c1"]],[],[[8,14,"pl-k"]],[],[],[[4,10,"pl-k"],[25,33,"pl-k"]],[[11,15,"pl-smi"]],[[8,14,"pl-k"]],[],[],[],[[0,32,"pl-en"]],[],[],[],[[8,10,"pl-k"],[19,29,"pl-c1"],[33,52,"pl-c1"]],[],[[12,18,"pl-k"]],[[18,34,"pl-s"],[18,19,"pl-pds"],[33,34,"pl-pds"],[65,67,"pl-c1"]],[[18,32,"pl-s"],[18,19,"pl-pds"],[31,32,"pl-pds"],[34,36,"pl-c1"]],[[18,32,"pl-s"],[18,19,"pl-pds"],[31,32,"pl-pds"],[34,36,"pl-c1"]],[[18,32,"pl-s"],[18,19,"pl-pds"],[31,32,"pl-pds"],[34,36,"pl-c1"]],[],[],[[8,12,"pl-k"]],[],[[12,18,"pl-k"]],[[18,34,"pl-s"],[18,19,"pl-pds"],[33,34,"pl-pds"],[65,67,"pl-c1"]],[[18,51,"pl-s"],[18,19,"pl-pds"],[50,51,"pl-pds"],[53,55,"pl-c1"]],[[18,55,"pl-s"],[18,19,"pl-pds"],[54,55,"pl-pds"],[57,59,"pl-c1"]],[[18,56,"pl-s"],[18,19,"pl-pds"],[55,56,"pl-pds"],[58,60,"pl-c1"]],[],[],[],[[0,33,"pl-en"],[38,45,"pl-k"]],[],[[12,43,"pl-en"]],[[4,10,"pl-k"],[11,56,"pl-s"],[11,12,"pl-pds"],[55,56,"pl-pds"]],[],[],[[0,4,"pl-k"],[5,41,"pl-en"]],[[16,41,"pl-s"],[16,17,"pl-pds"],[40,41,"pl-pds"],[62,67,"pl-s"],[62,63,"pl-pds"],[64,66,"pl-cce"],[66,67,"pl-pds"]],[],[],[[0,4,"pl-k"],[5,43,"pl-en"]],[[16,34,"pl-s"],[16,17,"pl-pds"],[33,34,"pl-pds"],[45,49,"pl-s"],[45,46,"pl-pds"],[46,48,"pl-cce"],[48,49,"pl-pds"]],[],[],[[0,4,"pl-k"],[5,39,"pl-en"],[54,59,"pl-k"]],[],[[0,4,"pl-k"],[5,36,"pl-en"],[52,57,"pl-k"]],[[20,25,"pl-k"],[52,67,"pl-smi"]],[],[[4,8,"pl-k"],[36,60,"pl-c1"],[74,78,"pl-c1"]],[],[[4,69,"pl-c"],[4,6,"pl-c"]],[[4,62,"pl-c"],[4,6,"pl-c"]],[[4,6,"pl-k"],[34,47,"pl-c1"],[82,95,"pl-c1"]],[[8,14,"pl-k"]],[],[[4,13,"pl-c1"]],[],[[28,35,"pl-smi"],[72,75,"pl-c1"]],[[12,17,"pl-c1"]],[[16,20,"pl-s"],[16,17,"pl-pds"],[17,19,"pl-cce"],[19,20,"pl-pds"]],[],[],[[0,4,"pl-k"],[5,37,"pl-en"],[50,55,"pl-k"]],[[20,25,"pl-c1"]],[[22,27,"pl-c1"]],[[4,42,"pl-c1"]],[],[[0,4,"pl-k"],[5,34,"pl-en"],[48,53,"pl-k"]],[[20,25,"pl-c1"]],[[4,6,"pl-k"],[22,39,"pl-smi"]],[[8,17,"pl-c1"]],[[8,12,"pl-k"]],[[22,33,"pl-c1"],[57,63,"pl-c1"]],[[8,10,"pl-k"],[27,31,"pl-c1"],[36,37,"pl-c1"]],[[24,52,"pl-s"],[24,25,"pl-pds"],[25,27,"pl-cce"],[51,52,"pl-pds"]],[[8,12,"pl-k"]],[[24,54,"pl-s"],[24,25,"pl-pds"],[25,27,"pl-cce"],[53,54,"pl-pds"]],[[20,24,"pl-s"],[20,21,"pl-pds"],[23,24,"pl-pds"],[42,53,"pl-smi"],[54,58,"pl-smi"],[62,69,"pl-s"],[62,63,"pl-pds"],[64,68,"pl-cce"],[68,69,"pl-pds"]],[],[[4,10,"pl-k"],[31,48,"pl-smi"]],[[4,6,"pl-k"],[8,26,"pl-c1"]],[[20,40,"pl-c1"],[49,55,"pl-s"],[49,50,"pl-pds"],[54,55,"pl-pds"],[73,84,"pl-smi"],[85,89,"pl-smi"],[93,97,"pl-s"],[93,94,"pl-pds"],[94,96,"pl-cce"],[96,97,"pl-pds"]],[],[[4,6,"pl-k"]],[[26,31,"pl-c1"]],[],[[4,39,"pl-c1"]],[],[],[[0,4,"pl-k"],[5,40,"pl-en"]],[[1,38,"pl-c1"]],[],[[1,5,"pl-k"],[16,32,"pl-c1"],[34,45,"pl-k"]],[[24,29,"pl-c1"],[47,58,"pl-c1"],[61,62,"pl-c1"],[64,69,"pl-smi"],[72,73,"pl-c1"]],[],[[1,5,"pl-k"],[18,22,"pl-c1"]],[[1,4,"pl-k"],[6,10,"pl-k"]],[[2,4,"pl-k"]],[[24,35,"pl-c1"],[41,52,"pl-c1"],[58,69,"pl-c1"]],[[2,6,"pl-k"]],[[15,20,"pl-c1"]],[],[[31,42,"pl-c1"]],[],[],[],[[0,4,"pl-k"],[5,39,"pl-en"],[54,59,"pl-k"]],[[30,37,"pl-smi"],[41,52,"pl-c1"]],[[16,26,"pl-smi"],[30,41,"pl-c1"]],[[4,6,"pl-k"],[20,39,"pl-c1"]],[],[[15,23,"pl-c1"],[30,47,"pl-smi"],[53,64,"pl-c1"]],[],[],[],[[0,4,"pl-k"],[5,36,"pl-en"],[54,59,"pl-k"]],[[4,6,"pl-k"],[18,37,"pl-c1"]],[],[[29,37,"pl-c1"],[44,48,"pl-smi"],[49,54,"pl-smi"],[55,60,"pl-c1"],[67,78,"pl-c1"]],[],[[4,8,"pl-k"]],[],[[29,40,"pl-c1"]],[[15,23,"pl-c1"],[30,34,"pl-smi"],[35,40,"pl-smi"],[41,46,"pl-c1"],[53,64,"pl-c1"]],[[15,23,"pl-c1"],[30,34,"pl-smi"],[35,46,"pl-smi"],[47,52,"pl-c1"],[59,70,"pl-c1"]],[[15,23,"pl-c1"],[30,34,"pl-smi"],[35,46,"pl-smi"],[47,52,"pl-c1"],[59,70,"pl-c1"],[76,87,"pl-c1"]],[[15,23,"pl-c1"],[30,47,"pl-smi"],[48,53,"pl-smi"],[54,59,"pl-c1"],[66,77,"pl-c1"]],[[15,23,"pl-c1"],[30,47,"pl-smi"],[48,59,"pl-smi"],[60,65,"pl-c1"],[72,83,"pl-c1"]],[[15,23,"pl-c1"],[30,47,"pl-smi"],[48,59,"pl-smi"],[60,65,"pl-c1"],[72,83,"pl-c1"],[89,100,"pl-c1"],[106,117,"pl-c1"],[123,134,"pl-c1"],[140,151,"pl-c1"]],[],[],[],[[0,4,"pl-k"],[5,37,"pl-en"]],[[4,8,"pl-k"],[27,38,"pl-c1"],[54,60,"pl-c1"]],[],[[11,31,"pl-s"],[11,12,"pl-pds"],[30,31,"pl-pds"],[44,47,"pl-s"],[44,45,"pl-pds"],[46,47,"pl-pds"]],[[11,22,"pl-c1"],[28,36,"pl-c1"]],[],[],[[0,4,"pl-k"],[5,35,"pl-en"],[50,55,"pl-k"]],[[20,25,"pl-c1"]],[[4,40,"pl-c1"]],[[22,27,"pl-c1"]],[],[[0,4,"pl-k"],[5,34,"pl-en"],[48,53,"pl-k"]],[[4,22,"pl-c1"],[37,43,"pl-smi"]],[[4,22,"pl-c1"],[59,65,"pl-smi"]],[[16,20,"pl-s"],[16,17,"pl-pds"],[17,19,"pl-cce"],[19,20,"pl-pds"]],[[4,39,"pl-c1"]],[],[[0,4,"pl-k"],[5,37,"pl-en"],[50,55,"pl-k"]],[[4,42,"pl-c1"]],[[4,6,"pl-k"],[19,27,"pl-c1"],[30,40,"pl-c1"]],[[30,41,"pl-c1"],[69,80,"pl-s"],[69,70,"pl-pds"],[79,80,"pl-pds"]],[[30,38,"pl-c1"],[44,48,"pl-s"],[44,45,"pl-pds"],[45,47,"pl-cce"],[47,48,"pl-pds"]],[],[[16,40,"pl-s"],[16,17,"pl-pds"],[39,40,"pl-pds"],[44,51,"pl-c1"],[57,61,"pl-s"],[57,58,"pl-pds"],[58,60,"pl-cce"],[60,61,"pl-pds"]],[],[],[[0,4,"pl-k"],[5,31,"pl-en"]],[],[[20,25,"pl-c1"]],[[4,41,"pl-c1"]],[],[],[[0,4,"pl-k"],[5,59,"pl-en"]],[],[[4,6,"pl-k"]],[[8,24,"pl-c1"]],[],[[4,6,"pl-k"]],[[8,37,"pl-c1"]],[[26,30,"pl-c1"]],[],[],[[0,4,"pl-k"],[5,38,"pl-en"]],[[16,20,"pl-s"],[16,17,"pl-pds"],[17,19,"pl-cce"],[19,20,"pl-pds"]],[[16,27,"pl-c1"],[29,32,"pl-s"],[29,30,"pl-pds"],[31,32,"pl-pds"],[38,42,"pl-s"],[38,39,"pl-pds"],[39,41,"pl-cce"],[41,42,"pl-pds"]],[[26,37,"pl-c1"]],[[35,39,"pl-smi"],[43,59,"pl-s"],[43,44,"pl-pds"],[58,59,"pl-pds"],[63,77,"pl-c1"]],[[16,38,"pl-s"],[16,17,"pl-pds"],[35,37,"pl-cce"],[37,38,"pl-pds"]],[[16,45,"pl-s"],[16,17,"pl-pds"],[40,44,"pl-cce"],[44,45,"pl-pds"]],[],[[27,31,"pl-c1"]],[],[[0,4,"pl-k"],[5,51,"pl-en"]],[[4,10,"pl-c1"],[27,32,"pl-c1"]],[[4,19,"pl-c1"],[41,45,"pl-smi"]],[],[[4,6,"pl-k"],[23,27,"pl-c1"],[32,33,"pl-c1"]],[[8,12,"pl-k"],[31,42,"pl-c1"],[62,68,"pl-c1"]],[],[[8,12,"pl-k"]],[[32,37,"pl-c1"],[42,43,"pl-c1"],[45,78,"pl-c"],[45,47,"pl-c"]],[[35,38,"pl-c1"]],[[8,11,"pl-k"]],[[12,29,"pl-c1"],[34,38,"pl-smi"],[40,41,"pl-c1"]],[],[],[[45,49,"pl-c1"],[52,60,"pl-smi"]],[],[],[[16,27,"pl-c1"],[29,32,"pl-s"],[29,30,"pl-pds"],[31,32,"pl-pds"],[38,42,"pl-s"],[38,39,"pl-pds"],[39,41,"pl-cce"],[41,42,"pl-pds"]],[[26,37,"pl-c1"],[73,77,"pl-s"],[73,74,"pl-pds"],[74,76,"pl-cce"],[76,77,"pl-pds"]],[[16,27,"pl-c1"],[29,32,"pl-s"],[29,30,"pl-pds"],[31,32,"pl-pds"],[38,44,"pl-s"],[38,39,"pl-pds"],[39,43,"pl-cce"],[43,44,"pl-pds"]],[],[],[],[[0,4,"pl-k"],[5,39,"pl-en"],[52,57,"pl-k"]],[[4,19,"pl-c1"]],[[16,27,"pl-c1"],[28,31,"pl-s"],[28,29,"pl-pds"],[30,31,"pl-pds"],[36,40,"pl-s"],[36,37,"pl-pds"],[37,39,"pl-cce"],[39,40,"pl-pds"]],[],[[0,4,"pl-k"],[5,37,"pl-en"],[50,55,"pl-k"]],[[16,27,"pl-c1"],[28,31,"pl-s"],[28,29,"pl-pds"],[30,31,"pl-pds"],[36,40,"pl-s"],[36,37,"pl-pds"],[37,39,"pl-cce"],[39,40,"pl-pds"]],[],[[8,12,"pl-k"],[31,42,"pl-c1"],[62,68,"pl-c1"]],[[8,25,"pl-c1"]],[],[],[],[[0,4,"pl-k"],[5,39,"pl-en"],[52,57,"pl-k"],[73,79,"pl-c1"]],[[4,77,"pl-c"],[4,6,"pl-c"]],[[4,52,"pl-c"],[4,6,"pl-c"]],[[4,10,"pl-c"],[4,6,"pl-c"]],[[4,23,"pl-c"],[4,6,"pl-c"]],[[4,30,"pl-c"],[4,6,"pl-c"]],[[4,10,"pl-c"],[4,6,"pl-c"]],[[4,78,"pl-c"],[4,6,"pl-c"]],[[4,47,"pl-c"],[4,6,"pl-c"]],[[4,10,"pl-c"],[4,6,"pl-c"]],[[4,19,"pl-c"],[4,6,"pl-c"]],[[4,19,"pl-c"],[4,6,"pl-c"]],[[4,19,"pl-c"],[4,6,"pl-c"]],[[4,19,"pl-c"],[4,6,"pl-c"]],[[4,19,"pl-c"],[4,6,"pl-c"]],[[4,19,"pl-c"],[4,6,"pl-c"]],[[4,19,"pl-c"],[4,6,"pl-c"]],[[4,19,"pl-c"],[4,6,"pl-c"]],[[4,10,"pl-c"],[4,6,"pl-c"]],[[4,80,"pl-c"],[4,6,"pl-c"]],[[4,12,"pl-c"],[4,6,"pl-c"]],[[9,15,"pl-c1"],[30,34,"pl-c1"],[36,40,"pl-s"],[36,37,"pl-pds"],[39,40,"pl-pds"]],[[4,6,"pl-k"],[72,73,"pl-c1"]],[[15,16,"pl-c1"]],[[6,10,"pl-k"]],[[14,15,"pl-c1"]],[],[[16,32,"pl-c1"]],[[19,25,"pl-c1"]],[[19,32,"pl-c1"]],[[14,18,"pl-s"],[14,15,"pl-pds"],[15,17,"pl-cce"],[17,18,"pl-pds"]],[],[],[[0,4,"pl-k"],[5,40,"pl-en"],[48,53,"pl-k"]],[[4,6,"pl-k"],[15,24,"pl-smi"],[25,30,"pl-c1"],[35,36,"pl-c1"]],[[13,19,"pl-c1"],[34,43,"pl-c1"],[51,60,"pl-smi"],[61,67,"pl-smi"],[76,85,"pl-smi"],[86,91,"pl-c1"]],[[13,19,"pl-c1"],[39,48,"pl-c1"],[56,65,"pl-smi"],[66,77,"pl-smi"],[86,95,"pl-smi"],[96,101,"pl-c1"]],[[13,19,"pl-c1"],[34,43,"pl-c1"],[51,60,"pl-smi"],[61,67,"pl-smi"],[76,85,"pl-smi"],[86,91,"pl-c1"]],[[13,19,"pl-c1"],[35,44,"pl-c1"],[52,61,"pl-smi"],[62,69,"pl-smi"],[78,87,"pl-smi"],[88,93,"pl-c1"]],[[8,13,"pl-k"],[106,107,"pl-c1"]],[[12,19,"pl-c1"]],[[8,13,"pl-k"],[91,92,"pl-c1"]],[[12,19,"pl-c1"]],[],[[30,41,"pl-c1"]],[[20,31,"pl-c1"],[46,49,"pl-s"],[46,47,"pl-pds"],[48,49,"pl-pds"]],[[30,41,"pl-c1"]],[[20,31,"pl-c1"],[51,54,"pl-s"],[51,52,"pl-pds"],[53,54,"pl-pds"]],[[8,10,"pl-k"],[20,29,"pl-smi"],[30,39,"pl-c1"]],[[34,45,"pl-c1"]],[[24,35,"pl-c1"],[50,53,"pl-s"],[50,51,"pl-pds"],[52,53,"pl-pds"]],[[10,14,"pl-k"]],[[34,45,"pl-c1"]],[[24,35,"pl-c1"],[50,53,"pl-s"],[50,51,"pl-pds"],[52,53,"pl-pds"]],[],[[30,41,"pl-c1"]],[[20,31,"pl-c1"],[47,50,"pl-s"],[47,48,"pl-pds"],[49,50,"pl-pds"]],[[6,10,"pl-k"]],[[30,41,"pl-c1"]],[[20,31,"pl-c1"],[62,63,"pl-c1"],[65,68,"pl-s"],[65,66,"pl-pds"],[67,68,"pl-pds"]],[],[[16,20,"pl-s"],[16,17,"pl-pds"],[17,19,"pl-cce"],[19,20,"pl-pds"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[[1,3,"pl-k"]],[[1,7,"pl-k"]],[[1,6,"pl-k"]],[],[[1,3,"pl-k"]],[[3,9,"pl-k"]],[[1,6,"pl-k"]],[],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"]],[[8,14,"pl-k"],[15,28,"pl-en"]],[[12,25,"pl-en"],[39,44,"pl-k"]],[[12,25,"pl-en"],[41,46,"pl-k"],[58,65,"pl-k"]],[[12,16,"pl-k"],[17,25,"pl-en"]],[[72,77,"pl-k"]],[[27,32,"pl-k"]],[[16,22,"pl-k"]],[[28,33,"pl-smi"],[34,45,"pl-smi"],[46,50,"pl-smi"],[62,66,"pl-smi"]],[[28,33,"pl-smi"],[34,45,"pl-smi"],[46,54,"pl-smi"],[66,74,"pl-smi"]],[],[[12,16,"pl-k"],[17,25,"pl-k"],[42,47,"pl-k"],[53,59,"pl-k"]],[],[[8,16,"pl-k"]],[[24,29,"pl-k"]],[],[],[[6,18,"pl-c"],[6,8,"pl-c"]],[],[[4,13,"pl-k"],[14,20,"pl-en"]],[[8,62,"pl-en"]],[[27,32,"pl-k"]],[[12,23,"pl-en"]],[],[[8,62,"pl-en"]],[[29,34,"pl-k"]],[[12,23,"pl-en"]],[],[[8,12,"pl-k"],[13,52,"pl-en"],[55,60,"pl-k"]],[[12,18,"pl-k"],[31,35,"pl-c1"]],[],[[8,12,"pl-k"],[13,52,"pl-en"],[55,60,"pl-k"]],[[12,18,"pl-k"],[31,35,"pl-c1"]],[],[],[[23,28,"pl-k"],[30,69,"pl-en"],[72,77,"pl-k"]],[[12,18,"pl-c1"],[31,35,"pl-c1"]],[],[[12,18,"pl-k"]],[],[[25,30,"pl-k"],[32,71,"pl-en"],[74,79,"pl-k"]],[[12,18,"pl-c1"],[31,35,"pl-c1"]],[],[[12,18,"pl-k"]],[],[],[],[],[[4,51,"pl-en"],[56,63,"pl-k"]],[],[[4,8,"pl-k"],[9,47,"pl-en"],[65,70,"pl-k"]],[[23,27,"pl-c1"],[31,54,"pl-smi"],[55,67,"pl-c1"]],[],[],[[4,8,"pl-k"]],[[4,43,"pl-en"],[57,62,"pl-k"]],[[8,72,"pl-c"],[8,10,"pl-c"]],[[21,36,"pl-smi"],[38,49,"pl-c1"],[64,70,"pl-c1"],[74,75,"pl-c1"],[77,82,"pl-c1"]],[],[[8,10,"pl-k"],[28,33,"pl-c1"]],[[12,14,"pl-k"]],[],[],[],[[33,36,"pl-c1"]],[[10,14,"pl-k"]],[[54,58,"pl-c1"]],[[12,16,"pl-k"],[22,34,"pl-c1"],[47,60,"pl-smi"],[61,66,"pl-c1"]],[[47,60,"pl-smi"],[61,64,"pl-c1"]],[[36,49,"pl-c1"]],[[12,14,"pl-k"],[34,47,"pl-smi"],[48,51,"pl-c1"]],[[16,20,"pl-k"]],[],[[31,34,"pl-c1"]],[[27,40,"pl-smi"],[41,50,"pl-c1"],[52,62,"pl-c1"]],[[14,18,"pl-k"]],[[27,30,"pl-c1"]],[],[],[],[],[[23,32,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,47,"pl-en"]],[[23,28,"pl-k"]],[[8,14,"pl-c1"],[32,37,"pl-c1"]],[[8,79,"pl-c"],[8,10,"pl-c"]],[[8,78,"pl-c"],[8,10,"pl-c"]],[[8,80,"pl-c"],[8,10,"pl-c"]],[[8,78,"pl-c"],[8,10,"pl-c"]],[[8,36,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"]],[[29,44,"pl-smi"],[45,49,"pl-c1"]],[[12,23,"pl-k"],[24,28,"pl-k"]],[[31,46,"pl-smi"],[47,68,"pl-c1"]],[],[[8,10,"pl-k"]],[[28,43,"pl-smi"],[44,48,"pl-c1"]],[[12,23,"pl-k"],[24,28,"pl-k"]],[[31,46,"pl-smi"],[47,68,"pl-c1"]],[],[[51,55,"pl-c1"]],[[20,43,"pl-smi"],[44,56,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,45,"pl-en"],[60,65,"pl-k"]],[[8,14,"pl-c1"],[32,37,"pl-c1"]],[[44,48,"pl-c1"]],[[13,18,"pl-smi"]],[[23,31,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,46,"pl-en"]],[[22,27,"pl-k"]],[[8,12,"pl-k"]],[[8,14,"pl-c1"],[31,35,"pl-c1"],[41,42,"pl-c1"]],[[14,22,"pl-smi"],[23,32,"pl-c1"],[34,44,"pl-c1"]],[[20,29,"pl-c1"],[31,41,"pl-c1"]],[],[[8,14,"pl-c1"]],[[26,32,"pl-smi"],[49,55,"pl-smi"]],[[26,32,"pl-smi"],[49,55,"pl-smi"]],[],[],[],[[4,8,"pl-k"],[9,45,"pl-en"],[60,65,"pl-k"]],[[8,14,"pl-c1"],[29,92,"pl-s"],[29,30,"pl-pds"],[91,92,"pl-pds"]],[],[[19,27,"pl-smi"],[28,32,"pl-c1"]],[[8,30,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,62,"pl-en"],[65,70,"pl-k"]],[[8,14,"pl-k"],[15,26,"pl-c1"]],[[36,41,"pl-c1"]],[[36,39,"pl-c1"]],[[51,56,"pl-k"]],[[16,22,"pl-k"],[27,38,"pl-c1"]],[],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,8,"pl-k"],[9,49,"pl-en"]],[],[[4,8,"pl-k"],[9,46,"pl-en"]],[[4,8,"pl-k"],[9,45,"pl-en"],[61,66,"pl-k"]],[[4,8,"pl-k"],[9,42,"pl-en"],[61,66,"pl-k"]],[[4,8,"pl-k"],[9,43,"pl-en"]],[],[[4,8,"pl-k"],[9,45,"pl-en"],[61,66,"pl-k"]],[],[[4,8,"pl-k"],[9,42,"pl-en"],[59,64,"pl-k"]],[[4,8,"pl-k"],[9,41,"pl-en"]],[[41,46,"pl-k"]],[[4,8,"pl-k"],[9,41,"pl-en"]],[[41,46,"pl-k"]],[[4,8,"pl-k"],[9,37,"pl-en"],[67,72,"pl-k"]],[[4,8,"pl-k"],[9,36,"pl-en"],[59,64,"pl-k"]],[[4,8,"pl-k"],[9,47,"pl-en"]],[[4,8,"pl-k"],[9,49,"pl-en"]],[[4,8,"pl-k"],[9,43,"pl-en"],[57,62,"pl-k"]],[[4,8,"pl-k"],[9,44,"pl-en"],[59,64,"pl-k"]],[[4,8,"pl-k"],[9,51,"pl-en"],[65,70,"pl-k"],[73,81,"pl-c1"]],[[4,8,"pl-k"],[9,43,"pl-en"],[57,62,"pl-k"]],[[4,8,"pl-k"],[9,40,"pl-en"],[55,60,"pl-k"]],[[4,8,"pl-k"],[9,48,"pl-en"],[63,68,"pl-k"],[71,79,"pl-c1"]],[[4,8,"pl-k"],[9,41,"pl-en"],[57,62,"pl-k"]],[[4,8,"pl-k"],[9,40,"pl-en"],[55,60,"pl-k"]],[[4,8,"pl-k"],[9,36,"pl-en"],[51,56,"pl-k"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[[1,8,"pl-k"],[9,17,"pl-s"],[9,10,"pl-pds"],[16,17,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,13,"pl-k"]],[[8,12,"pl-k"],[13,30,"pl-en"]],[[59,64,"pl-k"]],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"]],[[16,20,"pl-k"],[21,26,"pl-k"],[48,63,"pl-c1"]],[],[[16,18,"pl-k"],[20,30,"pl-c1"],[44,48,"pl-smi"],[50,53,"pl-s"],[50,51,"pl-pds"],[52,53,"pl-pds"]],[[27,30,"pl-s"],[27,28,"pl-pds"],[29,30,"pl-pds"],[47,51,"pl-smi"],[55,58,"pl-s"],[55,56,"pl-pds"],[57,58,"pl-pds"]],[[18,22,"pl-k"]],[[40,44,"pl-smi"]],[],[],[[23,27,"pl-s"],[23,24,"pl-pds"],[24,26,"pl-cce"],[26,27,"pl-pds"]],[],[],[],[[6,30,"pl-c"],[6,8,"pl-c"]],[],[],[[4,74,"pl-c"],[4,6,"pl-c"]],[[4,76,"pl-c"],[4,6,"pl-c"]],[[4,22,"pl-c"],[4,6,"pl-c"]],[[16,36,"pl-en"],[38,44,"pl-k"]],[[8,67,"pl-c"],[8,10,"pl-c"]],[[8,32,"pl-c"],[8,10,"pl-c"]],[[8,39,"pl-c"],[8,10,"pl-c"]],[[8,34,"pl-c"],[8,10,"pl-c"]],[[8,13,"pl-k"],[19,25,"pl-c1"],[59,60,"pl-c1"],[63,64,"pl-c1"],[67,68,"pl-c1"],[71,72,"pl-c1"]],[[8,12,"pl-k"]],[],[[8,70,"pl-c"],[8,10,"pl-c"]],[],[[1,6,"pl-k"]],[[8,14,"pl-c1"],[31,42,"pl-k"],[43,49,"pl-c1"]],[[12,21,"pl-c1"],[31,37,"pl-s"],[31,32,"pl-pds"],[36,37,"pl-pds"]],[[1,5,"pl-k"]],[[8,14,"pl-c1"],[31,42,"pl-k"],[43,49,"pl-c1"]],[[12,25,"pl-c1"],[50,56,"pl-s"],[50,51,"pl-pds"],[55,56,"pl-pds"]],[[1,6,"pl-k"]],[[8,14,"pl-k"],[15,26,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,27,"pl-en"],[37,42,"pl-k"],[52,58,"pl-k"]],[[8,10,"pl-k"],[20,33,"pl-c1"]],[[12,18,"pl-k"],[19,23,"pl-c1"]],[],[[8,10,"pl-k"],[20,33,"pl-c1"]],[[12,18,"pl-k"],[19,24,"pl-c1"]],[],[[8,13,"pl-k"],[14,20,"pl-k"],[34,45,"pl-c1"]],[[8,14,"pl-k"],[22,23,"pl-c1"]],[],[],[[16,32,"pl-en"],[59,64,"pl-k"]],[[8,53,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-c1"],[41,45,"pl-c1"],[50,51,"pl-c1"]],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[38,42,"pl-c1"]],[],[],[],[[19,26,"pl-c1"]],[[8,12,"pl-k"],[21,25,"pl-c1"]],[],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[12,14,"pl-k"]],[[27,36,"pl-c1"],[37,40,"pl-s"],[37,38,"pl-pds"],[39,40,"pl-pds"]],[],[[20,25,"pl-c1"]],[[23,29,"pl-c1"]],[],[],[[8,14,"pl-k"]],[],[],[[18,26,"pl-k"]],[[8,11,"pl-k"],[14,20,"pl-c1"],[27,28,"pl-c1"],[65,66,"pl-c1"]],[[16,19,"pl-c1"],[27,28,"pl-smi"]],[],[[8,14,"pl-k"]],[],[],[[4,8,"pl-k"]],[[4,24,"pl-en"]],[[59,64,"pl-k"]],[],[[15,39,"pl-s"],[15,16,"pl-pds"],[36,38,"pl-cce"],[38,39,"pl-pds"]],[[8,13,"pl-k"],[14,18,"pl-k"]],[[12,28,"pl-c1"],[43,48,"pl-c1"]],[[43,46,"pl-c1"]],[[54,59,"pl-k"]],[[54,59,"pl-k"]],[[34,40,"pl-k"],[45,49,"pl-smi"],[50,54,"pl-c1"],[63,67,"pl-smi"],[68,72,"pl-c1"]],[],[[18,22,"pl-smi"],[23,27,"pl-c1"]],[],[[8,11,"pl-k"],[14,18,"pl-k"],[19,24,"pl-k"]],[[12,14,"pl-k"]],[[23,39,"pl-c1"],[46,50,"pl-smi"]],[[28,34,"pl-c1"],[36,37,"pl-c1"]],[[28,33,"pl-c1"],[35,36,"pl-c1"]],[[23,27,"pl-s"],[23,24,"pl-pds"],[24,26,"pl-cce"],[26,27,"pl-pds"]],[[14,18,"pl-k"]],[[23,39,"pl-c1"],[46,50,"pl-smi"],[53,56,"pl-s"],[53,54,"pl-pds"],[55,56,"pl-pds"]],[[32,38,"pl-c1"],[40,41,"pl-c1"]],[[32,37,"pl-c1"],[39,40,"pl-c1"]],[[27,43,"pl-c1"],[50,61,"pl-smi"]],[[32,45,"pl-c1"],[47,48,"pl-c1"]],[[32,38,"pl-c1"],[40,41,"pl-c1"]],[[32,37,"pl-c1"],[81,82,"pl-c1"]],[[23,27,"pl-s"],[23,24,"pl-pds"],[24,26,"pl-cce"],[26,27,"pl-pds"]],[],[],[[15,19,"pl-s"],[15,16,"pl-pds"],[16,18,"pl-cce"],[18,19,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,29,"pl-en"]],[[64,69,"pl-k"]],[[15,40,"pl-s"],[15,16,"pl-pds"],[37,39,"pl-cce"],[39,40,"pl-pds"]],[],[[8,10,"pl-k"],[24,29,"pl-c1"]],[[12,18,"pl-k"]],[],[],[[8,13,"pl-k"],[14,18,"pl-k"]],[[12,28,"pl-c1"],[43,48,"pl-c1"]],[[43,46,"pl-c1"]],[[54,59,"pl-k"]],[[54,59,"pl-k"]],[[34,40,"pl-k"],[45,49,"pl-smi"],[50,54,"pl-c1"],[63,67,"pl-smi"],[68,72,"pl-c1"]],[],[[18,22,"pl-smi"],[23,27,"pl-c1"]],[],[[8,11,"pl-k"],[14,18,"pl-k"],[19,24,"pl-k"]],[[19,35,"pl-c1"],[37,48,"pl-k"],[68,72,"pl-smi"]],[[37,40,"pl-s"],[37,38,"pl-pds"],[39,40,"pl-pds"]],[[28,34,"pl-c1"],[36,37,"pl-c1"]],[[28,33,"pl-c1"],[48,49,"pl-c1"]],[[23,39,"pl-c1"],[46,57,"pl-smi"]],[[28,41,"pl-c1"],[43,44,"pl-c1"]],[[28,34,"pl-c1"],[36,37,"pl-c1"]],[[28,33,"pl-c1"],[77,78,"pl-c1"]],[[19,23,"pl-s"],[19,20,"pl-pds"],[20,22,"pl-cce"],[22,23,"pl-pds"]],[],[],[[15,19,"pl-s"],[15,16,"pl-pds"],[16,18,"pl-cce"],[18,19,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,24,"pl-en"]],[[47,52,"pl-k"]],[[26,30,"pl-k"]],[[8,10,"pl-k"]],[[19,52,"pl-s"],[19,20,"pl-pds"],[49,51,"pl-cce"],[51,52,"pl-pds"]],[[10,14,"pl-k"]],[[19,42,"pl-s"],[19,20,"pl-pds"],[39,41,"pl-cce"],[41,42,"pl-pds"]],[],[],[[8,11,"pl-k"],[14,18,"pl-k"],[19,24,"pl-k"]],[],[[19,23,"pl-s"],[19,20,"pl-pds"],[22,23,"pl-pds"],[27,36,"pl-c1"],[38,39,"pl-c1"],[54,59,"pl-smi"],[63,67,"pl-s"],[63,64,"pl-pds"],[66,67,"pl-pds"]],[[12,16,"pl-k"],[27,30,"pl-c1"]],[[12,16,"pl-k"],[27,43,"pl-c1"],[54,57,"pl-c1"]],[[32,45,"pl-c1"],[47,48,"pl-c1"]],[[32,38,"pl-c1"],[44,48,"pl-c1"]],[[32,37,"pl-c1"],[68,70,"pl-c1"]],[[37,41,"pl-s"],[37,38,"pl-pds"],[38,40,"pl-cce"],[40,41,"pl-pds"]],[],[[15,24,"pl-c1"],[30,34,"pl-c1"],[38,43,"pl-s"],[38,39,"pl-pds"],[42,43,"pl-pds"],[51,57,"pl-s"],[51,52,"pl-pds"],[52,56,"pl-cce"],[56,57,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,25,"pl-en"],[99,104,"pl-k"],[113,117,"pl-k"]],[[8,64,"pl-c"],[8,10,"pl-c"]],[[8,68,"pl-c"],[8,10,"pl-c"]],[[8,33,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"]],[[12,29,"pl-c1"]],[[12,18,"pl-k"]],[],[],[[8,10,"pl-k"]],[[19,43,"pl-s"],[19,20,"pl-pds"],[40,42,"pl-cce"],[42,43,"pl-pds"]],[[10,14,"pl-k"]],[[19,48,"pl-s"],[19,20,"pl-pds"],[45,47,"pl-cce"],[47,48,"pl-pds"]],[],[],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[12,16,"pl-k"],[17,22,"pl-k"],[44,59,"pl-c1"]],[[47,55,"pl-c1"]],[],[],[[12,16,"pl-k"],[45,56,"pl-c1"],[67,73,"pl-c1"]],[],[[19,35,"pl-c1"],[49,53,"pl-smi"],[55,61,"pl-c1"],[62,63,"pl-c1"],[68,72,"pl-s"],[68,69,"pl-pds"],[69,71,"pl-cce"],[71,72,"pl-pds"]],[[12,14,"pl-k"]],[[23,39,"pl-c1"],[40,64,"pl-c1"],[78,86,"pl-smi"],[89,95,"pl-c1"],[96,97,"pl-c1"],[102,106,"pl-s"],[102,103,"pl-pds"],[103,105,"pl-cce"],[105,106,"pl-pds"]],[],[[12,14,"pl-k"],[30,34,"pl-smi"],[35,40,"pl-c1"]],[],[[23,39,"pl-c1"],[53,65,"pl-c1"],[69,75,"pl-c1"],[76,77,"pl-c1"],[82,86,"pl-s"],[82,83,"pl-pds"],[83,85,"pl-cce"],[85,86,"pl-pds"]],[],[],[],[[8,10,"pl-k"]],[[19,28,"pl-c1"],[35,39,"pl-c1"],[43,63,"pl-s"],[43,44,"pl-pds"],[62,63,"pl-pds"]],[[10,14,"pl-k"]],[[19,28,"pl-c1"],[35,39,"pl-c1"],[43,54,"pl-s"],[43,44,"pl-pds"],[53,54,"pl-pds"]],[],[[15,21,"pl-s"],[15,16,"pl-pds"],[16,20,"pl-cce"],[20,21,"pl-pds"]],[],[],[[4,13,"pl-k"]],[[8,13,"pl-k"],[14,27,"pl-en"]],[[8,15,"pl-k"]],[[12,25,"pl-en"]],[[16,24,"pl-en"]],[],[[41,49,"pl-c1"]],[[34,48,"pl-c1"]],[[16,20,"pl-k"],[21,26,"pl-k"],[39,47,"pl-c1"],[62,66,"pl-c1"]],[[16,18,"pl-k"]],[[20,23,"pl-k"],[26,30,"pl-k"]],[[31,37,"pl-c1"],[39,40,"pl-c1"],[63,66,"pl-s"],[63,64,"pl-pds"],[65,66,"pl-pds"]],[],[[18,22,"pl-k"]],[[24,30,"pl-c1"],[32,33,"pl-c1"],[49,53,"pl-c1"],[57,60,"pl-s"],[57,58,"pl-pds"],[59,60,"pl-pds"]],[],[],[[23,32,"pl-c1"]],[[16,22,"pl-k"],[23,32,"pl-c1"],[35,39,"pl-c1"]],[],[],[[24,29,"pl-k"],[31,40,"pl-en"],[43,48,"pl-k"],[51,57,"pl-k"]],[[25,34,"pl-en"],[37,42,"pl-k"],[45,51,"pl-k"]],[[24,29,"pl-k"],[31,37,"pl-en"],[44,50,"pl-c1"],[59,64,"pl-k"]],[[16,22,"pl-k"]],[],[],[[8,16,"pl-k"]],[],[],[[17,23,"pl-c1"],[34,35,"pl-c1"]],[],[],[],[[8,12,"pl-k"],[13,28,"pl-en"]],[],[],[[57,62,"pl-k"]],[[35,41,"pl-c1"]],[[12,15,"pl-k"],[18,22,"pl-k"],[23,28,"pl-k"]],[[16,20,"pl-k"],[21,26,"pl-k"],[40,46,"pl-c1"]],[[16,20,"pl-k"],[21,26,"pl-k"],[41,50,"pl-c1"]],[[16,18,"pl-k"],[28,33,"pl-c1"]],[[39,43,"pl-s"],[39,40,"pl-pds"],[42,43,"pl-pds"]],[[20,22,"pl-k"],[34,37,"pl-s"],[34,35,"pl-pds"],[36,37,"pl-pds"]],[],[[22,26,"pl-k"]],[[41,52,"pl-c1"]],[[34,44,"pl-s"],[34,35,"pl-pds"],[43,44,"pl-pds"]],[],[[18,22,"pl-k"],[23,25,"pl-k"],[37,40,"pl-s"],[37,38,"pl-pds"],[39,40,"pl-pds"]],[[37,48,"pl-c1"],[73,78,"pl-s"],[73,74,"pl-pds"],[77,78,"pl-pds"]],[[37,48,"pl-c1"],[54,63,"pl-c1"]],[[30,33,"pl-s"],[30,31,"pl-pds"],[32,33,"pl-pds"]],[],[],[[22,26,"pl-s"],[22,23,"pl-pds"],[23,25,"pl-cce"],[25,26,"pl-pds"]],[],[[6,18,"pl-c"],[6,8,"pl-c"]],[],[[4,8,"pl-k"],[9,27,"pl-en"]],[],[[36,41,"pl-k"]],[[8,10,"pl-k"],[20,29,"pl-smi"],[30,35,"pl-c1"],[41,42,"pl-c1"]],[[35,46,"pl-c1"]],[[22,38,"pl-s"],[22,23,"pl-pds"],[35,37,"pl-cce"],[37,38,"pl-pds"]],[[12,18,"pl-k"]],[],[],[[8,10,"pl-k"],[20,30,"pl-smi"],[31,36,"pl-c1"],[41,42,"pl-c1"],[53,62,"pl-smi"],[63,72,"pl-c1"]],[[35,46,"pl-c1"]],[[22,40,"pl-s"],[22,23,"pl-pds"],[39,40,"pl-pds"]],[[22,26,"pl-s"],[22,23,"pl-pds"],[25,26,"pl-pds"]],[[22,31,"pl-c1"],[40,50,"pl-smi"],[51,57,"pl-smi"],[59,70,"pl-s"],[59,60,"pl-pds"],[69,70,"pl-pds"]],[[22,28,"pl-s"],[22,23,"pl-pds"],[27,28,"pl-pds"]],[[22,31,"pl-c1"],[40,49,"pl-smi"],[50,56,"pl-smi"],[58,69,"pl-s"],[58,59,"pl-pds"],[68,69,"pl-pds"]],[[22,25,"pl-s"],[22,23,"pl-pds"],[24,25,"pl-pds"],[29,33,"pl-s"],[29,30,"pl-pds"],[30,32,"pl-cce"],[32,33,"pl-pds"]],[[12,18,"pl-k"]],[],[],[],[[8,60,"pl-c"],[8,10,"pl-c"]],[[8,13,"pl-k"],[14,18,"pl-k"]],[[19,29,"pl-smi"],[30,35,"pl-c1"],[47,57,"pl-smi"],[58,65,"pl-smi"]],[[16,25,"pl-c1"],[27,40,"pl-c1"],[42,44,"pl-s"],[42,43,"pl-pds"],[43,44,"pl-pds"]],[[32,38,"pl-c1"],[47,56,"pl-smi"],[57,62,"pl-c1"]],[[32,38,"pl-c1"]],[[16,25,"pl-c1"],[27,40,"pl-c1"],[42,50,"pl-s"],[42,43,"pl-pds"],[49,50,"pl-pds"]],[[32,38,"pl-c1"],[47,56,"pl-smi"],[57,63,"pl-smi"]],[[32,38,"pl-c1"],[47,57,"pl-smi"],[58,64,"pl-smi"]],[[16,25,"pl-c1"],[27,40,"pl-c1"],[42,50,"pl-s"],[42,43,"pl-pds"],[49,50,"pl-pds"]],[[32,38,"pl-c1"],[47,56,"pl-smi"],[57,63,"pl-smi"]],[[32,38,"pl-c1"],[47,57,"pl-smi"],[58,64,"pl-smi"]],[[16,25,"pl-c1"],[27,40,"pl-c1"],[42,51,"pl-s"],[42,43,"pl-pds"],[50,51,"pl-pds"]],[[32,38,"pl-c1"],[47,56,"pl-smi"],[57,64,"pl-smi"]],[[31,66,"pl-c"],[31,33,"pl-c"]],[[32,38,"pl-c1"],[40,41,"pl-c1"]],[[16,25,"pl-c1"]],[[12,25,"pl-c1"],[27,47,"pl-s"],[27,28,"pl-pds"],[46,47,"pl-pds"]],[[17,23,"pl-c1"],[32,41,"pl-smi"],[42,53,"pl-smi"]],[[17,23,"pl-c1"],[32,42,"pl-smi"],[43,54,"pl-smi"]],[[8,23,"pl-c1"],[47,59,"pl-s"],[47,48,"pl-pds"],[58,59,"pl-pds"],[73,74,"pl-c1"]],[[8,23,"pl-c1"],[47,59,"pl-s"],[47,48,"pl-pds"],[58,59,"pl-pds"],[73,74,"pl-c1"]],[],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[[0,2,"pl-c"],[0,2,"pl-c"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"]],[[8,12,"pl-k"],[13,28,"pl-en"]],[[45,50,"pl-k"]],[[12,16,"pl-k"]],[[23,28,"pl-c1"],[30,47,"pl-s"],[30,31,"pl-pds"],[46,47,"pl-pds"],[53,64,"pl-c1"]],[[35,40,"pl-c1"],[42,52,"pl-s"],[42,43,"pl-pds"],[51,52,"pl-pds"]],[[17,22,"pl-c1"],[35,39,"pl-smi"]],[[35,40,"pl-c1"],[42,48,"pl-s"],[42,43,"pl-pds"],[47,48,"pl-pds"],[54,59,"pl-c1"],[72,76,"pl-smi"]],[],[],[[8,12,"pl-k"],[13,22,"pl-en"],[65,70,"pl-k"]],[[12,15,"pl-k"],[18,22,"pl-k"],[23,28,"pl-k"]],[[23,28,"pl-c1"],[34,42,"pl-smi"]],[],[],[],[[8,12,"pl-k"],[13,28,"pl-en"]],[[43,48,"pl-k"]],[[12,14,"pl-k"],[22,30,"pl-c1"],[44,49,"pl-c1"],[51,62,"pl-s"],[51,52,"pl-pds"],[61,62,"pl-pds"]],[[12,14,"pl-k"],[22,30,"pl-c1"],[44,49,"pl-c1"],[51,63,"pl-s"],[51,52,"pl-pds"],[62,63,"pl-pds"]],[[12,14,"pl-k"],[22,36,"pl-c1"]],[[23,28,"pl-c1"],[30,48,"pl-s"],[30,31,"pl-pds"],[47,48,"pl-pds"]],[],[[12,14,"pl-k"],[22,28,"pl-c1"],[42,47,"pl-c1"],[49,57,"pl-s"],[49,50,"pl-pds"],[56,57,"pl-pds"]],[],[],[[6,18,"pl-c"],[6,8,"pl-c"]],[],[[4,30,"pl-en"]],[[31,41,"pl-c1"]],[],[[22,42,"pl-smi"],[45,49,"pl-c1"]],[[8,70,"pl-c"],[8,10,"pl-c"]],[[8,75,"pl-c"],[8,10,"pl-c"]],[[8,30,"pl-c"],[8,10,"pl-c"]],[[22,47,"pl-smi"],[50,54,"pl-c1"]],[],[[24,31,"pl-c1"]],[[18,25,"pl-c1"]],[[8,12,"pl-k"],[39,42,"pl-c1"]],[],[[15,20,"pl-c1"],[22,31,"pl-s"],[22,23,"pl-pds"],[30,31,"pl-pds"],[37,42,"pl-c1"],[44,45,"pl-c1"]],[],[],[[12,16,"pl-k"],[42,47,"pl-c1"],[49,59,"pl-s"],[49,50,"pl-pds"],[58,59,"pl-pds"],[65,76,"pl-c1"]],[[28,33,"pl-c1"],[35,41,"pl-s"],[35,36,"pl-pds"],[40,41,"pl-pds"],[47,52,"pl-c1"],[64,68,"pl-c1"]],[[28,33,"pl-c1"],[35,45,"pl-s"],[35,36,"pl-pds"],[44,45,"pl-pds"],[51,56,"pl-c1"],[68,75,"pl-c1"]],[[28,33,"pl-c1"],[35,51,"pl-s"],[35,36,"pl-pds"],[50,51,"pl-pds"]],[[17,22,"pl-c1"],[24,38,"pl-c1"]],[[12,14,"pl-k"],[27,35,"pl-c1"],[38,48,"pl-c1"]],[[32,37,"pl-c1"],[39,48,"pl-s"],[39,40,"pl-pds"],[47,48,"pl-pds"]],[[21,26,"pl-c1"],[38,46,"pl-c1"]],[],[],[],[],[[4,31,"pl-en"]],[[8,18,"pl-c1"]],[[8,69,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-c1"],[26,30,"pl-c1"],[36,37,"pl-c1"],[41,83,"pl-s"],[41,42,"pl-pds"],[82,83,"pl-pds"]],[[8,14,"pl-c1"],[26,29,"pl-c1"]],[[8,17,"pl-c1"]],[[20,24,"pl-s"],[20,21,"pl-pds"],[21,23,"pl-cce"],[23,24,"pl-pds"]],[[8,14,"pl-c1"],[26,31,"pl-c1"]],[],[],[[21,45,"pl-en"]],[[23,30,"pl-c1"],[47,50,"pl-c1"],[53,63,"pl-c1"]],[[18,25,"pl-c1"]],[[8,14,"pl-k"],[30,33,"pl-c1"]],[],[[21,45,"pl-en"]],[[23,30,"pl-c1"]],[[28,31,"pl-c1"],[34,39,"pl-c1"],[47,57,"pl-c1"]],[[18,25,"pl-c1"]],[[8,14,"pl-k"],[30,33,"pl-c1"]],[],[],[[22,47,"pl-en"]],[[24,31,"pl-c1"],[48,51,"pl-c1"],[54,65,"pl-c1"]],[[18,25,"pl-c1"]],[[8,14,"pl-k"],[31,34,"pl-c1"]],[],[[22,47,"pl-en"]],[[24,31,"pl-c1"]],[[28,31,"pl-c1"],[34,39,"pl-c1"],[47,58,"pl-c1"]],[[18,25,"pl-c1"]],[[8,14,"pl-k"],[31,34,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,32,"pl-en"]],[[8,14,"pl-c1"],[16,24,"pl-c1"]],[[24,27,"pl-c1"]],[[18,21,"pl-c1"]],[],[[4,8,"pl-k"],[9,31,"pl-en"]],[[8,14,"pl-c1"],[16,24,"pl-c1"]],[[23,26,"pl-c1"]],[[18,21,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,31,"pl-en"]],[[8,14,"pl-k"],[26,31,"pl-c1"],[47,50,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,35,"pl-en"]],[[8,10,"pl-k"],[35,46,"pl-c1"],[48,58,"pl-s"],[48,49,"pl-pds"],[57,58,"pl-pds"]],[[27,31,"pl-c1"]],[],[[4,8,"pl-k"],[9,33,"pl-en"]],[[8,10,"pl-k"],[34,43,"pl-c1"]],[[27,32,"pl-c1"]],[],[],[[16,44,"pl-en"]],[[8,14,"pl-k"],[15,76,"pl-s"],[15,16,"pl-pds"],[75,76,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,38,"pl-en"],[52,57,"pl-k"]],[[8,46,"pl-c1"]],[[8,18,"pl-c1"]],[],[[8,14,"pl-c1"],[16,24,"pl-c1"]],[[8,19,"pl-c1"],[21,31,"pl-s"],[21,22,"pl-pds"],[30,31,"pl-pds"]],[[8,18,"pl-c1"],[20,32,"pl-s"],[20,21,"pl-pds"],[31,32,"pl-pds"]],[],[],[[5,11,"pl-k"],[12,16,"pl-k"],[17,28,"pl-en"],[64,69,"pl-k"]],[[15,20,"pl-c1"],[22,30,"pl-s"],[22,23,"pl-pds"],[29,30,"pl-pds"],[36,41,"pl-c1"],[50,56,"pl-smi"]],[[15,20,"pl-c1"],[22,30,"pl-s"],[22,23,"pl-pds"],[29,30,"pl-pds"],[36,41,"pl-c1"],[50,56,"pl-smi"]],[[15,20,"pl-c1"],[22,35,"pl-s"],[22,23,"pl-pds"],[34,35,"pl-pds"],[41,46,"pl-c1"],[55,66,"pl-smi"]],[[15,20,"pl-c1"],[22,31,"pl-s"],[22,23,"pl-pds"],[30,31,"pl-pds"],[37,42,"pl-c1"],[51,58,"pl-smi"]],[],[],[[4,8,"pl-k"],[9,35,"pl-en"],[49,54,"pl-k"]],[[8,14,"pl-c1"],[16,24,"pl-c1"]],[[8,27,"pl-c"],[8,10,"pl-c"]],[[8,16,"pl-c1"]],[],[],[[12,16,"pl-k"]],[[32,35,"pl-c1"],[38,43,"pl-c1"],[45,53,"pl-s"],[45,46,"pl-pds"],[52,53,"pl-pds"],[59,70,"pl-c1"]],[[12,23,"pl-c1"],[32,37,"pl-c1"],[39,51,"pl-s"],[39,40,"pl-pds"],[50,51,"pl-pds"],[57,68,"pl-c1"]],[[34,40,"pl-smi"],[41,51,"pl-smi"]],[[12,23,"pl-c1"],[32,37,"pl-c1"],[39,51,"pl-s"],[39,40,"pl-pds"],[50,51,"pl-pds"],[57,68,"pl-c1"]],[[34,40,"pl-smi"],[41,50,"pl-smi"]],[],[],[[8,36,"pl-c"],[8,10,"pl-c"]],[[8,17,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,39,"pl-en"],[54,59,"pl-k"]],[[8,47,"pl-c1"]],[],[[8,14,"pl-c1"],[16,24,"pl-c1"]],[[16,56,"pl-s"],[16,17,"pl-pds"],[55,56,"pl-pds"]],[[8,19,"pl-c1"]],[[8,30,"pl-c"],[8,10,"pl-c"]],[],[[12,16,"pl-k"]],[[32,35,"pl-c1"],[38,43,"pl-c1"],[45,56,"pl-s"],[45,46,"pl-pds"],[55,56,"pl-pds"],[62,73,"pl-c1"]],[[12,51,"pl-c"],[12,14,"pl-c"]],[[21,26,"pl-c1"],[28,34,"pl-s"],[28,29,"pl-pds"],[33,34,"pl-pds"],[40,45,"pl-c1"],[54,58,"pl-smi"]],[[12,27,"pl-c1"],[45,53,"pl-smi"]],[[12,21,"pl-c1"],[32,37,"pl-c1"],[39,45,"pl-s"],[39,40,"pl-pds"],[44,45,"pl-pds"],[51,61,"pl-c1"],[72,76,"pl-smi"]],[[12,27,"pl-c1"],[38,43,"pl-c1"],[45,57,"pl-s"],[45,46,"pl-pds"],[56,57,"pl-pds"],[63,73,"pl-c1"]],[],[],[],[],[[8,75,"pl-c"],[8,10,"pl-c"]],[[8,18,"pl-c1"],[20,26,"pl-s"],[20,21,"pl-pds"],[25,26,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,36,"pl-en"],[52,57,"pl-k"]],[[8,44,"pl-c1"]],[],[[8,75,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-c1"],[16,24,"pl-c1"]],[[8,16,"pl-c1"]],[],[],[[12,16,"pl-k"]],[[32,35,"pl-c1"],[38,43,"pl-c1"],[45,53,"pl-s"],[45,46,"pl-pds"],[52,53,"pl-pds"],[59,70,"pl-c1"]],[[12,23,"pl-c1"],[32,37,"pl-c1"],[39,51,"pl-s"],[39,40,"pl-pds"],[50,51,"pl-pds"],[57,68,"pl-c1"]],[[33,39,"pl-smi"],[40,50,"pl-smi"]],[[12,106,"pl-c"],[12,14,"pl-c"]],[[12,88,"pl-c"],[12,14,"pl-c"]],[],[[8,96,"pl-c"],[8,10,"pl-c"]],[],[[8,26,"pl-c"],[8,10,"pl-c"]],[],[[8,52,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-c1"],[16,24,"pl-c1"]],[[8,17,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,46,"pl-en"],[61,66,"pl-k"],[68,78,"pl-c"],[68,70,"pl-c"],[76,78,"pl-c"]],[[48,56,"pl-c1"]],[[8,19,"pl-c1"]],[[24,27,"pl-c1"],[30,35,"pl-c1"],[37,46,"pl-s"],[37,38,"pl-pds"],[45,46,"pl-pds"],[52,57,"pl-c1"]],[[8,18,"pl-c1"],[20,26,"pl-s"],[20,21,"pl-pds"],[25,26,"pl-pds"]],[[8,76,"pl-c"],[8,10,"pl-c"]],[[8,39,"pl-c"],[8,10,"pl-c"]],[],[],[[4,8,"pl-k"],[9,43,"pl-en"],[59,64,"pl-k"]],[[45,53,"pl-c1"],[54,63,"pl-c"],[54,56,"pl-c"],[61,63,"pl-c"]],[[8,53,"pl-c"],[8,10,"pl-c"]],[[8,24,"pl-c"],[8,10,"pl-c"]],[[8,16,"pl-c1"]],[[8,10,"pl-k"],[22,28,"pl-smi"],[29,34,"pl-c1"]],[[28,31,"pl-c1"]],[[17,22,"pl-c1"],[24,41,"pl-s"],[24,25,"pl-pds"],[40,41,"pl-pds"]],[[17,22,"pl-c1"],[32,38,"pl-smi"]],[],[[8,10,"pl-k"],[22,28,"pl-smi"],[29,34,"pl-c1"]],[[28,31,"pl-c1"]],[[17,22,"pl-c1"],[24,41,"pl-s"],[24,25,"pl-pds"],[40,41,"pl-pds"]],[[17,22,"pl-c1"],[32,38,"pl-smi"]],[],[],[[12,16,"pl-k"]],[[32,35,"pl-c1"],[38,43,"pl-c1"],[45,53,"pl-s"],[45,46,"pl-pds"],[52,53,"pl-pds"],[59,70,"pl-c1"]],[[12,23,"pl-c1"],[32,37,"pl-c1"],[39,51,"pl-s"],[39,40,"pl-pds"],[50,51,"pl-pds"],[57,68,"pl-c1"]],[[33,39,"pl-smi"],[40,50,"pl-smi"]],[[12,71,"pl-c"],[12,14,"pl-c"]],[[12,49,"pl-c"],[12,14,"pl-c"]],[[12,72,"pl-c"],[12,14,"pl-c"]],[[12,30,"pl-c"],[12,14,"pl-c"]],[],[[8,26,"pl-c"],[8,10,"pl-c"]],[[8,21,"pl-c"],[8,10,"pl-c"]],[[8,17,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,38,"pl-en"],[52,57,"pl-k"]],[[8,14,"pl-c1"],[16,24,"pl-c1"]],[[16,62,"pl-s"],[16,17,"pl-pds"],[61,62,"pl-pds"]],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,44,"pl-c"],[8,10,"pl-c"]],[[8,12,"pl-k"],[30,41,"pl-c1"]],[[22,27,"pl-c1"],[29,35,"pl-s"],[29,30,"pl-pds"],[34,35,"pl-pds"],[41,46,"pl-c1"],[48,57,"pl-s"],[48,49,"pl-pds"],[56,57,"pl-pds"]],[[22,27,"pl-c1"],[29,35,"pl-s"],[29,30,"pl-pds"],[34,35,"pl-pds"],[41,46,"pl-c1"],[60,64,"pl-smi"]],[[8,23,"pl-c1"],[41,44,"pl-c1"],[60,68,"pl-smi"]],[],[],[[8,71,"pl-c"],[8,10,"pl-c"]],[[8,69,"pl-c"],[8,10,"pl-c"]],[[8,70,"pl-c"],[8,10,"pl-c"]],[[8,24,"pl-c"],[8,10,"pl-c"]],[[8,18,"pl-c1"],[20,26,"pl-s"],[20,21,"pl-pds"],[25,26,"pl-pds"]],[],[[4,8,"pl-k"],[9,35,"pl-en"],[50,55,"pl-k"],[57,74,"pl-c"],[57,59,"pl-c"],[72,74,"pl-c"]],[[8,32,"pl-c"],[8,10,"pl-c"]],[[8,16,"pl-c1"]],[[8,25,"pl-c"],[8,10,"pl-c"]],[[8,43,"pl-c"],[8,10,"pl-c"]],[],[[8,33,"pl-c"],[8,10,"pl-c"]],[[8,17,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,40,"pl-en"],[56,61,"pl-k"],[63,80,"pl-c"],[63,65,"pl-c"],[78,80,"pl-c"]],[[4,8,"pl-k"],[9,37,"pl-en"],[54,59,"pl-k"]],[[8,69,"pl-c"],[8,10,"pl-c"]],[[8,70,"pl-c"],[8,10,"pl-c"]],[[8,71,"pl-c"],[8,10,"pl-c"]],[[8,52,"pl-c"],[8,10,"pl-c"]],[[8,58,"pl-c"],[8,10,"pl-c"]],[[8,21,"pl-c"],[8,10,"pl-c"]],[[8,11,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-c1"],[16,24,"pl-c1"]],[[8,12,"pl-k"],[46,49,"pl-c1"],[52,63,"pl-c1"]],[],[[24,29,"pl-c1"],[31,37,"pl-s"],[31,32,"pl-pds"],[36,37,"pl-pds"],[43,48,"pl-c1"],[50,61,"pl-s"],[50,51,"pl-pds"],[60,61,"pl-pds"]],[[8,23,"pl-c1"]],[[40,55,"pl-smi"],[56,69,"pl-c1"]],[[24,29,"pl-c1"],[31,39,"pl-s"],[31,32,"pl-pds"],[38,39,"pl-pds"]],[[13,18,"pl-c1"],[35,50,"pl-smi"],[51,55,"pl-c1"]],[[8,36,"pl-c"],[8,10,"pl-c"]],[[8,25,"pl-c"],[8,10,"pl-c"]],[[8,24,"pl-c"],[8,10,"pl-c"]],[],[],[],[[4,8,"pl-k"],[9,41,"pl-en"],[63,67,"pl-k"]],[[4,8,"pl-k"],[9,40,"pl-en"],[56,61,"pl-k"]],[[4,8,"pl-k"],[9,37,"pl-en"],[56,61,"pl-k"]],[[4,8,"pl-k"],[9,38,"pl-en"],[61,65,"pl-k"]],[],[[4,8,"pl-k"],[9,36,"pl-en"]],[[41,46,"pl-k"]],[[8,20,"pl-c1"]],[],[[8,12,"pl-k"]],[[28,31,"pl-c1"],[34,39,"pl-c1"],[41,52,"pl-s"],[41,42,"pl-pds"],[51,52,"pl-pds"],[58,68,"pl-c1"]],[[8,11,"pl-k"],[14,18,"pl-k"],[19,24,"pl-k"]],[[12,16,"pl-k"],[38,49,"pl-c1"]],[[24,29,"pl-c1"],[31,37,"pl-s"],[31,32,"pl-pds"],[36,37,"pl-pds"],[43,48,"pl-c1"],[55,59,"pl-smi"]],[[24,29,"pl-c1"],[31,44,"pl-s"],[31,32,"pl-pds"],[43,44,"pl-pds"],[50,55,"pl-c1"],[62,73,"pl-smi"]],[],[],[[4,8,"pl-k"],[9,36,"pl-en"]],[[41,46,"pl-k"]],[[8,20,"pl-c1"]],[],[[8,12,"pl-k"]],[[28,31,"pl-c1"],[34,39,"pl-c1"],[41,52,"pl-s"],[41,42,"pl-pds"],[51,52,"pl-pds"],[58,68,"pl-c1"]],[],[[8,11,"pl-k"],[14,18,"pl-k"],[19,24,"pl-k"]],[[12,16,"pl-k"],[38,49,"pl-c1"]],[[24,29,"pl-c1"],[31,37,"pl-s"],[31,32,"pl-pds"],[36,37,"pl-pds"],[43,48,"pl-c1"],[55,59,"pl-smi"]],[[24,29,"pl-c1"],[31,44,"pl-s"],[31,32,"pl-pds"],[43,44,"pl-pds"],[50,55,"pl-c1"],[62,73,"pl-smi"]],[],[],[[4,8,"pl-k"],[9,32,"pl-en"],[62,67,"pl-k"]],[[8,20,"pl-c1"]],[],[[8,12,"pl-k"],[38,41,"pl-c1"],[44,49,"pl-c1"],[51,58,"pl-s"],[51,52,"pl-pds"],[57,58,"pl-pds"],[64,74,"pl-c1"]],[],[[8,11,"pl-k"],[14,18,"pl-k"],[19,24,"pl-k"]],[[12,16,"pl-k"],[38,49,"pl-c1"]],[[12,16,"pl-k"],[17,22,"pl-k"],[36,51,"pl-c1"]],[],[[24,29,"pl-c1"],[31,37,"pl-s"],[31,32,"pl-pds"],[36,37,"pl-pds"],[43,48,"pl-c1"],[55,59,"pl-smi"]],[[24,29,"pl-c1"],[31,43,"pl-s"],[31,32,"pl-pds"],[42,43,"pl-pds"],[49,54,"pl-c1"],[61,70,"pl-smi"]],[],[[16,20,"pl-k"],[46,51,"pl-c1"],[53,59,"pl-s"],[53,54,"pl-pds"],[58,59,"pl-pds"],[65,75,"pl-c1"]],[[16,19,"pl-k"],[22,26,"pl-k"],[27,32,"pl-k"],[45,49,"pl-smi"]],[[31,36,"pl-c1"],[42,50,"pl-smi"]],[],[],[[12,27,"pl-c1"],[47,55,"pl-smi"]],[],[],[[4,8,"pl-k"],[9,31,"pl-en"],[54,59,"pl-k"]],[[8,20,"pl-c1"]],[],[[8,12,"pl-k"],[38,41,"pl-c1"],[44,49,"pl-c1"],[51,57,"pl-s"],[51,52,"pl-pds"],[56,57,"pl-pds"],[63,73,"pl-c1"]],[[8,11,"pl-k"],[14,18,"pl-k"],[19,24,"pl-k"]],[[12,16,"pl-k"],[37,48,"pl-c1"]],[],[[16,20,"pl-k"]],[[31,36,"pl-c1"],[38,47,"pl-s"],[38,39,"pl-pds"],[46,47,"pl-pds"],[53,63,"pl-c1"]],[[16,19,"pl-k"],[22,26,"pl-k"],[39,48,"pl-smi"]],[[35,40,"pl-c1"]],[],[],[[23,28,"pl-c1"],[30,37,"pl-s"],[30,31,"pl-pds"],[36,37,"pl-pds"],[43,48,"pl-c1"],[54,59,"pl-smi"]],[],[],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,16,"pl-s"],[9,10,"pl-pds"],[15,16,"pl-pds"]],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,13,"pl-k"]],[[20,39,"pl-en"]],[[12,18,"pl-c1"]],[[12,21,"pl-c1"]],[],[],[[1,3,"pl-k"]],[[12,20,"pl-c1"]],[[1,5,"pl-k"]],[[12,20,"pl-c1"]],[[1,5,"pl-k"]],[[24,35,"pl-c1"]],[[1,5,"pl-k"]],[[12,20,"pl-c1"]],[[1,6,"pl-k"]],[],[[12,16,"pl-k"],[17,22,"pl-k"],[39,45,"pl-k"],[46,68,"pl-s"],[46,47,"pl-pds"],[67,68,"pl-pds"]],[[12,16,"pl-k"]],[[12,17,"pl-k"],[18,22,"pl-k"],[25,30,"pl-k"],[37,57,"pl-s"],[37,38,"pl-pds"],[56,57,"pl-pds"]],[],[[12,25,"pl-c1"]],[],[[12,18,"pl-k"],[19,30,"pl-c1"],[58,59,"pl-c1"]],[],[],[[20,31,"pl-en"],[49,54,"pl-k"]],[[12,16,"pl-k"],[22,34,"pl-c1"],[35,40,"pl-c1"]],[[35,38,"pl-c1"]],[[43,48,"pl-k"]],[[39,45,"pl-k"],[50,58,"pl-smi"],[59,63,"pl-c1"],[68,69,"pl-c1"]],[[50,58,"pl-smi"],[59,60,"pl-c1"],[65,68,"pl-s"],[65,66,"pl-pds"],[67,68,"pl-pds"]],[[12,14,"pl-k"],[27,30,"pl-c1"]],[[16,22,"pl-k"],[23,34,"pl-k"]],[[24,32,"pl-smi"],[33,39,"pl-c1"],[40,41,"pl-c1"],[47,55,"pl-smi"],[56,60,"pl-c1"],[65,66,"pl-c1"]],[],[],[[12,18,"pl-k"],[19,30,"pl-c1"]],[],[],[[8,63,"pl-c"],[8,10,"pl-c"]],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,70,"pl-c"],[8,10,"pl-c"]],[[8,72,"pl-c"],[8,10,"pl-c"]],[[20,34,"pl-en"],[36,42,"pl-k"]],[],[[33,50,"pl-c1"],[52,53,"pl-c1"]],[[12,18,"pl-k"],[23,26,"pl-c1"]],[],[],[[8,14,"pl-k"],[15,19,"pl-k"],[20,45,"pl-en"]],[[17,23,"pl-c1"],[34,38,"pl-c1"],[40,44,"pl-s"],[40,41,"pl-pds"],[43,44,"pl-pds"]],[[12,17,"pl-k"]],[[20,27,"pl-c1"],[34,35,"pl-c1"],[37,40,"pl-s"],[37,38,"pl-pds"],[39,40,"pl-pds"]],[[23,24,"pl-c1"]],[[26,30,"pl-c1"],[32,36,"pl-s"],[32,33,"pl-pds"],[35,36,"pl-pds"]],[],[],[],[[6,28,"pl-c"],[6,8,"pl-c"]],[],[[4,32,"pl-en"]],[],[[12,15,"pl-en"]],[],[[26,46,"pl-smi"],[49,53,"pl-c1"]],[[26,51,"pl-smi"],[54,59,"pl-c1"]],[[47,52,"pl-c1"]],[],[],[[16,45,"pl-en"]],[[8,14,"pl-k"],[15,95,"pl-s"],[15,16,"pl-pds"],[94,95,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,39,"pl-en"],[53,58,"pl-k"]],[[8,47,"pl-c1"]],[[12,24,"pl-c1"],[26,38,"pl-s"],[26,27,"pl-pds"],[37,38,"pl-pds"]],[[19,24,"pl-c1"]],[[23,28,"pl-c1"]],[[23,28,"pl-c1"]],[[31,32,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,40,"pl-en"],[55,60,"pl-k"]],[[34,42,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,38,"pl-en"],[55,60,"pl-k"]],[[8,10,"pl-k"],[27,42,"pl-smi"],[43,56,"pl-c1"]],[],[[8,46,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,37,"pl-en"],[53,58,"pl-k"]],[[40,46,"pl-smi"]],[[40,46,"pl-smi"]],[[8,45,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,46,"pl-en"]],[[8,13,"pl-k"],[14,18,"pl-k"],[42,59,"pl-c1"]],[[8,16,"pl-c1"]],[[12,22,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,32,"pl-en"],[46,51,"pl-k"],[66,72,"pl-k"]],[[41,54,"pl-c1"],[56,67,"pl-s"],[56,57,"pl-pds"],[66,67,"pl-pds"]],[],[[21,26,"pl-k"],[48,53,"pl-smi"]],[[12,26,"pl-c1"],[28,34,"pl-s"],[28,29,"pl-pds"],[33,34,"pl-pds"],[45,52,"pl-smi"],[53,57,"pl-smi"]],[[12,26,"pl-c1"],[28,36,"pl-s"],[28,29,"pl-pds"],[35,36,"pl-pds"]],[[12,26,"pl-c1"],[28,38,"pl-s"],[28,29,"pl-pds"],[37,38,"pl-pds"],[49,55,"pl-smi"],[56,66,"pl-smi"],[67,73,"pl-smi"]],[[12,26,"pl-c1"],[28,37,"pl-s"],[28,29,"pl-pds"],[36,37,"pl-pds"],[48,54,"pl-smi"],[55,65,"pl-smi"],[66,73,"pl-smi"]],[[12,26,"pl-c1"],[28,35,"pl-s"],[28,29,"pl-pds"],[34,35,"pl-pds"],[46,52,"pl-smi"],[53,63,"pl-smi"],[64,69,"pl-c1"]],[[12,26,"pl-c1"],[28,38,"pl-s"],[28,29,"pl-pds"],[37,38,"pl-pds"],[43,48,"pl-s"],[43,44,"pl-pds"],[47,48,"pl-pds"],[55,62,"pl-c"],[55,57,"pl-c"]],[[8,10,"pl-k"],[22,35,"pl-c1"]],[[16,30,"pl-c1"],[32,38,"pl-s"],[32,33,"pl-pds"],[37,38,"pl-pds"],[43,45,"pl-s"],[43,44,"pl-pds"],[44,45,"pl-pds"]],[[8,12,"pl-k"]],[[16,30,"pl-c1"],[32,38,"pl-s"],[32,33,"pl-pds"],[37,38,"pl-pds"],[43,57,"pl-c1"]],[[12,26,"pl-c1"],[28,39,"pl-s"],[28,29,"pl-pds"],[38,39,"pl-pds"],[44,63,"pl-c1"]],[],[[8,27,"pl-c"],[8,10,"pl-c"]],[],[[12,16,"pl-k"],[34,47,"pl-c1"],[48,60,"pl-s"],[48,49,"pl-pds"],[59,60,"pl-pds"]],[[16,29,"pl-c1"],[30,40,"pl-s"],[30,31,"pl-pds"],[39,40,"pl-pds"]],[[17,31,"pl-c1"],[32,38,"pl-s"],[32,33,"pl-pds"],[37,38,"pl-pds"],[43,56,"pl-s"],[43,44,"pl-pds"],[55,56,"pl-pds"]],[[17,31,"pl-c1"],[32,39,"pl-s"],[32,33,"pl-pds"],[38,39,"pl-pds"],[54,61,"pl-c1"]],[[12,14,"pl-k"],[26,34,"pl-c1"],[37,47,"pl-c1"]],[[20,33,"pl-c1"],[34,44,"pl-s"],[34,35,"pl-pds"],[43,44,"pl-pds"]],[[21,35,"pl-c1"],[36,42,"pl-s"],[36,37,"pl-pds"],[41,42,"pl-pds"],[47,56,"pl-s"],[47,48,"pl-pds"],[55,56,"pl-pds"]],[[21,35,"pl-c1"],[36,43,"pl-s"],[36,37,"pl-pds"],[42,43,"pl-pds"],[58,66,"pl-c1"]],[],[],[],[[8,27,"pl-c"],[8,10,"pl-c"]],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"],[45,53,"pl-smi"]],[[12,25,"pl-c1"]],[],[[12,25,"pl-c1"],[27,39,"pl-s"],[27,28,"pl-pds"],[38,39,"pl-pds"],[42,51,"pl-c1"],[53,57,"pl-c1"]],[[12,25,"pl-c1"],[27,39,"pl-s"],[27,28,"pl-pds"],[38,39,"pl-pds"],[42,51,"pl-c1"],[53,57,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,37,"pl-en"],[52,57,"pl-k"]],[[22,27,"pl-k"],[50,55,"pl-smi"]],[],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,70,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-c1"],[29,37,"pl-smi"],[38,42,"pl-c1"],[48,49,"pl-c1"]],[[20,25,"pl-k"],[55,63,"pl-smi"],[64,69,"pl-c1"]],[],[],[[12,23,"pl-k"],[44,52,"pl-smi"],[54,63,"pl-smi"]],[],[[8,10,"pl-k"],[22,27,"pl-c1"]],[[24,35,"pl-c1"],[42,50,"pl-smi"],[52,56,"pl-smi"]],[[12,14,"pl-k"],[27,32,"pl-c1"]],[[28,36,"pl-s"],[28,29,"pl-pds"],[35,36,"pl-pds"]],[],[],[],[[8,10,"pl-k"],[24,28,"pl-c1"],[31,36,"pl-c1"]],[[24,35,"pl-k"],[59,63,"pl-c1"],[69,72,"pl-s"],[69,70,"pl-pds"],[71,72,"pl-pds"]],[],[[8,33,"pl-c1"]],[],[[8,20,"pl-c1"],[33,35,"pl-s"],[33,34,"pl-pds"],[34,35,"pl-pds"],[56,64,"pl-smi"],[66,74,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,36,"pl-en"],[50,55,"pl-k"]],[[50,55,"pl-k"]],[[50,55,"pl-k"]],[[38,42,"pl-k"]],[[27,31,"pl-c1"],[45,50,"pl-smi"],[51,62,"pl-smi"],[63,67,"pl-smi"]],[[8,10,"pl-k"],[22,27,"pl-c1"]],[[30,33,"pl-s"],[30,31,"pl-pds"],[32,33,"pl-pds"]],[],[[8,10,"pl-k"],[25,30,"pl-smi"],[31,41,"pl-smi"],[42,47,"pl-c1"],[52,53,"pl-c1"]],[[27,33,"pl-smi"],[34,39,"pl-c1"]],[[27,33,"pl-smi"],[34,39,"pl-c1"]],[[45,58,"pl-c1"],[60,70,"pl-s"],[60,61,"pl-pds"],[69,70,"pl-pds"]],[[12,14,"pl-k"],[26,31,"pl-c1"]],[[20,34,"pl-c1"],[36,47,"pl-s"],[36,37,"pl-pds"],[46,47,"pl-pds"]],[[20,34,"pl-c1"],[36,42,"pl-s"],[36,37,"pl-pds"],[41,42,"pl-pds"],[47,53,"pl-s"],[47,48,"pl-pds"],[52,53,"pl-pds"]],[],[[12,16,"pl-k"]],[[20,34,"pl-c1"],[36,47,"pl-s"],[36,37,"pl-pds"],[46,47,"pl-pds"]],[[20,34,"pl-c1"],[36,42,"pl-s"],[36,37,"pl-pds"],[41,42,"pl-pds"]],[],[[16,30,"pl-c1"],[32,38,"pl-s"],[32,33,"pl-pds"],[37,38,"pl-pds"],[43,57,"pl-c1"],[71,76,"pl-smi"],[77,94,"pl-smi"]],[[12,74,"pl-c"],[12,14,"pl-c"]],[[12,28,"pl-c"],[12,14,"pl-c"]],[[12,70,"pl-c"],[12,14,"pl-c"]],[[12,56,"pl-c"],[12,14,"pl-c"]],[[16,30,"pl-c1"],[32,40,"pl-s"],[32,33,"pl-pds"],[39,40,"pl-pds"],[45,50,"pl-s"],[45,46,"pl-pds"],[49,50,"pl-pds"]],[],[[12,14,"pl-k"],[28,33,"pl-smi"],[34,44,"pl-smi"],[45,56,"pl-smi"]],[[20,33,"pl-c1"],[34,43,"pl-s"],[34,35,"pl-pds"],[42,43,"pl-pds"]],[[21,35,"pl-c1"],[36,45,"pl-s"],[36,37,"pl-pds"],[44,45,"pl-pds"],[47,79,"pl-s"],[47,48,"pl-pds"],[78,79,"pl-pds"]],[],[],[[12,27,"pl-c1"]],[],[],[[12,14,"pl-k"],[29,35,"pl-smi"],[36,41,"pl-c1"]],[[20,33,"pl-c1"],[35,47,"pl-s"],[35,36,"pl-pds"],[46,47,"pl-pds"],[50,59,"pl-c1"],[61,65,"pl-c1"],[79,85,"pl-smi"]],[[12,14,"pl-k"],[29,35,"pl-smi"],[36,41,"pl-c1"]],[[20,33,"pl-c1"],[35,47,"pl-s"],[35,36,"pl-pds"],[46,47,"pl-pds"],[50,59,"pl-c1"],[61,65,"pl-c1"],[79,85,"pl-smi"]],[],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"],[49,62,"pl-smi"]],[[12,14,"pl-k"],[26,31,"pl-c1"]],[[16,28,"pl-c1"],[36,38,"pl-s"],[36,37,"pl-pds"],[37,38,"pl-pds"]],[[12,16,"pl-k"]],[[16,28,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,39,"pl-en"],[53,58,"pl-k"]],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"],[60,83,"pl-smi"]],[[12,14,"pl-k"],[37,48,"pl-c1"]],[[16,30,"pl-c1"],[52,63,"pl-c1"]],[],[],[],[],[[4,8,"pl-k"],[9,38,"pl-en"],[55,60,"pl-k"]],[[24,29,"pl-k"],[46,61,"pl-smi"]],[[8,10,"pl-k"],[21,25,"pl-c1"]],[[20,33,"pl-c1"]],[],[[12,18,"pl-k"],[27,40,"pl-c1"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[34,41,"pl-s"],[34,35,"pl-pds"],[40,41,"pl-pds"]],[[20,25,"pl-k"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[34,43,"pl-s"],[34,35,"pl-pds"],[42,43,"pl-pds"]],[[20,25,"pl-k"]],[[16,20,"pl-k"]],[[34,43,"pl-s"],[34,35,"pl-pds"],[42,43,"pl-pds"]],[[20,25,"pl-k"]],[[16,50,"pl-c"],[16,18,"pl-c"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[34,49,"pl-s"],[34,35,"pl-pds"],[48,49,"pl-pds"]],[[20,25,"pl-k"]],[],[],[[45,58,"pl-c1"]],[],[[16,30,"pl-c1"],[32,41,"pl-s"],[32,33,"pl-pds"],[40,41,"pl-pds"],[53,66,"pl-c1"]],[[16,30,"pl-c1"],[32,38,"pl-s"],[32,33,"pl-pds"],[37,38,"pl-pds"],[50,66,"pl-c1"]],[],[],[[12,14,"pl-k"],[24,37,"pl-c1"]],[[23,34,"pl-s"],[23,24,"pl-pds"],[31,33,"pl-cce"],[33,34,"pl-pds"]],[[14,18,"pl-k"]],[[23,31,"pl-s"],[23,24,"pl-pds"],[30,31,"pl-pds"],[35,40,"pl-s"],[35,36,"pl-pds"],[37,39,"pl-cce"],[39,40,"pl-pds"]],[[16,18,"pl-k"],[27,40,"pl-c1"]],[[27,31,"pl-s"],[27,28,"pl-pds"],[30,31,"pl-pds"]],[[34,54,"pl-c1"]],[[27,31,"pl-s"],[27,28,"pl-pds"],[28,30,"pl-cce"],[30,31,"pl-pds"]],[],[[16,18,"pl-k"],[27,48,"pl-c1"]],[[27,46,"pl-s"],[27,28,"pl-pds"],[43,45,"pl-cce"],[45,46,"pl-pds"]],[[27,43,"pl-c1"],[51,72,"pl-c1"],[76,82,"pl-c1"],[83,84,"pl-c1"],[89,93,"pl-s"],[89,90,"pl-pds"],[90,92,"pl-cce"],[92,93,"pl-pds"]],[],[],[],[[12,14,"pl-k"],[23,33,"pl-c1"]],[[30,40,"pl-c1"],[46,50,"pl-s"],[46,47,"pl-pds"],[47,49,"pl-cce"],[49,50,"pl-pds"]],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"],[41,53,"pl-smi"]],[[16,18,"pl-k"],[24,28,"pl-smi"]],[[31,38,"pl-smi"],[42,46,"pl-s"],[42,43,"pl-pds"],[43,45,"pl-cce"],[45,46,"pl-pds"]],[],[[19,24,"pl-s"],[19,20,"pl-pds"],[23,24,"pl-pds"],[35,48,"pl-c1"]],[[16,25,"pl-c1"],[31,34,"pl-c1"]],[],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,8,"pl-k"],[9,41,"pl-en"],[57,62,"pl-k"]],[[22,42,"pl-smi"]],[[24,38,"pl-c1"],[41,61,"pl-smi"]],[[22,47,"pl-smi"]],[[24,38,"pl-c1"],[41,66,"pl-smi"]],[],[],[[4,8,"pl-k"],[9,35,"pl-en"]],[[8,25,"pl-c1"]],[[24,30,"pl-c1"],[47,52,"pl-c1"],[78,88,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,35,"pl-en"]],[[8,25,"pl-c1"]],[],[[8,76,"pl-c"],[8,10,"pl-c"]],[[8,40,"pl-c"],[8,10,"pl-c"]],[[8,77,"pl-c"],[8,10,"pl-c"]],[[8,80,"pl-c"],[8,10,"pl-c"]],[[8,43,"pl-c"],[8,10,"pl-c"]],[[50,64,"pl-c1"],[67,87,"pl-smi"]],[],[[8,74,"pl-c"],[8,10,"pl-c"]],[[8,26,"pl-c"],[8,10,"pl-c"]],[[24,33,"pl-c1"],[35,45,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,43,"pl-en"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,44,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,45,"pl-en"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,46,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,45,"pl-en"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,46,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,42,"pl-en"]],[[8,11,"pl-k"],[13,17,"pl-k"]],[[25,43,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,41,"pl-en"],[57,62,"pl-k"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,42,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,38,"pl-en"],[57,62,"pl-k"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,39,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,39,"pl-en"]],[[8,11,"pl-k"],[13,17,"pl-k"]],[[25,40,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,39,"pl-en"],[53,58,"pl-k"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,40,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,40,"pl-en"],[55,60,"pl-k"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,41,"pl-c1"]],[],[],[],[[4,8,"pl-k"]],[[4,42,"pl-en"],[57,62,"pl-k"]],[[48,56,"pl-c1"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,48,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,39,"pl-en"],[53,58,"pl-k"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,40,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,41,"pl-en"],[57,62,"pl-k"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,42,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,38,"pl-en"],[55,60,"pl-k"]],[[8,13,"pl-k"],[14,18,"pl-k"]],[[27,42,"pl-smi"],[43,56,"pl-c1"]],[[22,46,"pl-c1"]],[],[[8,11,"pl-k"],[14,18,"pl-k"]],[[12,14,"pl-k"]],[[30,44,"pl-c1"],[47,72,"pl-smi"]],[[33,47,"pl-c1"]],[],[],[],[],[[4,8,"pl-k"],[9,36,"pl-en"],[51,56,"pl-k"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,37,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,44,"pl-en"],[60,65,"pl-k"]],[[50,58,"pl-c1"]],[[8,10,"pl-k"],[27,47,"pl-smi"]],[],[[12,14,"pl-k"],[28,34,"pl-smi"],[35,40,"pl-c1"]],[[16,27,"pl-c1"],[43,49,"pl-smi"]],[],[[12,14,"pl-k"],[28,34,"pl-smi"],[35,40,"pl-c1"]],[[16,27,"pl-c1"],[43,49,"pl-smi"]],[],[],[],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,45,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,37,"pl-en"],[53,58,"pl-k"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,38,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,36,"pl-en"],[51,56,"pl-k"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,37,"pl-c1"]],[],[],[],[],[[4,8,"pl-k"],[9,32,"pl-en"],[47,52,"pl-k"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,33,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,37,"pl-en"],[71,76,"pl-k"]],[[8,11,"pl-k"],[13,17,"pl-k"]],[[25,38,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,37,"pl-en"]],[[41,46,"pl-k"]],[[8,11,"pl-k"],[14,18,"pl-k"]],[[25,38,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,33,"pl-en"],[62,67,"pl-k"]],[[8,11,"pl-k"],[13,17,"pl-k"]],[[25,34,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,32,"pl-en"],[54,59,"pl-k"]],[[8,11,"pl-k"],[13,17,"pl-k"]],[[25,33,"pl-c1"]],[],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,13,"pl-k"],[14,20,"pl-en"]],[],[[8,12,"pl-k"],[13,33,"pl-en"],[47,52,"pl-k"]],[],[],[[16,37,"pl-c1"],[40,56,"pl-c1"]],[[26,36,"pl-c1"]],[],[],[[16,73,"pl-c"],[16,18,"pl-c"]],[[16,63,"pl-c"],[16,18,"pl-c"]],[[16,37,"pl-c1"],[40,64,"pl-c1"]],[],[],[],[[8,12,"pl-k"],[13,33,"pl-en"]],[[12,33,"pl-c1"],[36,52,"pl-c1"],[54,64,"pl-c1"]],[],[],[],[[6,25,"pl-c"],[6,8,"pl-c"]],[[2,20,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,14,"pl-s"],[9,10,"pl-pds"],[13,14,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,13,"pl-k"]],[[20,40,"pl-en"],[49,54,"pl-k"]],[],[[12,14,"pl-k"],[24,32,"pl-c1"],[35,45,"pl-c1"]],[[24,35,"pl-s"],[24,25,"pl-pds"],[34,35,"pl-pds"]],[[35,43,"pl-c1"]],[[28,32,"pl-s"],[28,29,"pl-pds"],[31,32,"pl-pds"]],[],[[20,31,"pl-s"],[20,21,"pl-pds"],[30,31,"pl-pds"],[42,49,"pl-c1"]],[[12,18,"pl-k"],[24,27,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,43,"pl-en"],[56,61,"pl-k"]],[[8,47,"pl-c1"]],[],[[12,24,"pl-c1"],[26,46,"pl-c1"]],[[12,24,"pl-c1"],[25,41,"pl-s"],[25,26,"pl-pds"],[40,41,"pl-pds"]],[[12,26,"pl-c1"],[27,36,"pl-s"],[27,28,"pl-pds"],[35,36,"pl-pds"],[41,44,"pl-s"],[41,42,"pl-pds"],[43,44,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,36,"pl-en"],[50,55,"pl-k"]],[[53,58,"pl-k"]],[],[[8,11,"pl-k"],[14,18,"pl-k"],[19,24,"pl-k"],[42,50,"pl-smi"]],[[32,37,"pl-smi"],[38,46,"pl-smi"],[48,56,"pl-smi"],[57,61,"pl-smi"],[63,72,"pl-c1"]],[[22,25,"pl-c1"]],[],[],[[8,11,"pl-k"],[14,18,"pl-k"],[19,24,"pl-k"]],[[12,25,"pl-c1"],[30,35,"pl-smi"],[40,46,"pl-smi"]],[],[],[],[[4,8,"pl-k"],[9,41,"pl-en"],[87,92,"pl-k"],[95,100,"pl-k"]],[[41,54,"pl-c1"],[55,61,"pl-s"],[55,56,"pl-pds"],[60,61,"pl-pds"]],[[12,26,"pl-c1"],[27,33,"pl-s"],[27,28,"pl-pds"],[32,33,"pl-pds"]],[],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[12,25,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,41,"pl-en"],[55,60,"pl-k"]],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,70,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-c1"],[28,36,"pl-smi"],[37,41,"pl-c1"],[47,48,"pl-c1"]],[[20,25,"pl-k"],[55,63,"pl-smi"],[64,69,"pl-c1"]],[[8,20,"pl-c1"],[21,23,"pl-s"],[21,22,"pl-pds"],[22,23,"pl-pds"],[51,56,"pl-smi"],[57,65,"pl-smi"],[67,75,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,40,"pl-en"],[53,58,"pl-k"],[82,87,"pl-k"],[102,106,"pl-k"]],[[27,31,"pl-c1"],[44,49,"pl-smi"],[50,61,"pl-smi"],[62,66,"pl-smi"]],[[8,10,"pl-k"],[22,27,"pl-c1"]],[[30,33,"pl-s"],[30,31,"pl-pds"],[32,33,"pl-pds"]],[],[[8,10,"pl-k"],[25,30,"pl-smi"],[31,41,"pl-smi"],[42,47,"pl-c1"],[52,53,"pl-c1"]],[[28,34,"pl-smi"],[35,40,"pl-c1"]],[[28,34,"pl-smi"],[35,40,"pl-c1"]],[[45,58,"pl-c1"],[59,69,"pl-s"],[59,60,"pl-pds"],[68,69,"pl-pds"]],[[16,30,"pl-c1"],[31,37,"pl-s"],[31,32,"pl-pds"],[36,37,"pl-pds"]],[[16,30,"pl-c1"],[31,41,"pl-s"],[31,32,"pl-pds"],[40,41,"pl-pds"],[46,57,"pl-k"],[58,62,"pl-k"],[76,81,"pl-smi"],[82,99,"pl-smi"],[102,106,"pl-c1"]],[],[[12,27,"pl-c1"]],[],[],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"],[49,62,"pl-smi"]],[[12,24,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,43,"pl-en"],[56,61,"pl-k"],[76,80,"pl-k"]],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"],[60,83,"pl-smi"]],[[12,14,"pl-k"],[37,48,"pl-c1"]],[[16,30,"pl-c1"],[52,63,"pl-c1"]],[],[],[],[],[[4,8,"pl-k"],[9,42,"pl-en"],[58,63,"pl-k"],[72,76,"pl-k"]],[[24,29,"pl-k"],[46,61,"pl-smi"]],[[8,10,"pl-k"],[21,25,"pl-c1"]],[[20,33,"pl-c1"]],[],[[12,14,"pl-k"]],[[30,39,"pl-s"],[30,31,"pl-pds"],[38,39,"pl-pds"]],[[14,18,"pl-k"]],[[16,22,"pl-k"],[31,44,"pl-c1"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[34,41,"pl-s"],[34,35,"pl-pds"],[40,41,"pl-pds"]],[[20,25,"pl-k"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[34,43,"pl-s"],[34,35,"pl-pds"],[42,43,"pl-pds"]],[[20,25,"pl-k"]],[[16,20,"pl-k"]],[[34,43,"pl-s"],[34,35,"pl-pds"],[42,43,"pl-pds"]],[[20,25,"pl-k"]],[[20,54,"pl-c"],[20,22,"pl-c"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[34,49,"pl-s"],[34,35,"pl-pds"],[48,49,"pl-pds"]],[[20,25,"pl-k"]],[],[],[],[[45,58,"pl-c1"]],[],[],[[33,49,"pl-c1"],[55,58,"pl-s"],[55,56,"pl-pds"],[57,58,"pl-pds"],[69,82,"pl-c1"],[88,91,"pl-s"],[88,89,"pl-pds"],[90,91,"pl-pds"]],[[16,30,"pl-c1"],[31,40,"pl-s"],[31,32,"pl-pds"],[39,40,"pl-pds"],[56,59,"pl-c1"]],[],[],[[12,14,"pl-k"],[24,37,"pl-c1"]],[[27,38,"pl-s"],[27,28,"pl-pds"],[35,37,"pl-cce"],[37,38,"pl-pds"]],[[14,18,"pl-k"]],[[27,38,"pl-s"],[27,28,"pl-pds"],[35,37,"pl-cce"],[37,38,"pl-pds"]],[[16,18,"pl-k"],[27,40,"pl-c1"]],[[31,35,"pl-s"],[31,32,"pl-pds"],[32,34,"pl-cce"],[34,35,"pl-pds"],[46,66,"pl-c1"],[72,76,"pl-s"],[72,73,"pl-pds"],[73,75,"pl-cce"],[75,76,"pl-pds"]],[],[[16,18,"pl-k"],[27,48,"pl-c1"]],[[31,52,"pl-s"],[31,32,"pl-pds"],[47,51,"pl-cce"],[51,52,"pl-pds"],[63,84,"pl-c1"],[90,94,"pl-s"],[90,91,"pl-pds"],[91,93,"pl-cce"],[93,94,"pl-pds"]],[],[],[],[[12,14,"pl-k"],[23,33,"pl-c1"]],[[34,44,"pl-c1"],[50,54,"pl-s"],[50,51,"pl-pds"],[51,53,"pl-cce"],[53,54,"pl-pds"]],[],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"],[41,53,"pl-smi"]],[[16,18,"pl-k"],[24,28,"pl-smi"]],[[35,42,"pl-smi"],[46,50,"pl-s"],[46,47,"pl-pds"],[47,49,"pl-cce"],[49,50,"pl-pds"]],[],[[23,28,"pl-s"],[23,24,"pl-pds"],[27,28,"pl-pds"],[39,52,"pl-c1"]],[[16,25,"pl-c1"],[34,37,"pl-c1"]],[],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,49,"pl-en"],[54,61,"pl-k"]],[],[[4,8,"pl-k"]],[[4,42,"pl-en"],[56,61,"pl-k"]],[],[],[],[[4,8,"pl-k"],[9,44,"pl-en"],[59,64,"pl-k"]],[[30,37,"pl-c1"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[[1,8,"pl-k"],[9,20,"pl-s"],[9,10,"pl-pds"],[19,20,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,13,"pl-k"]],[[8,74,"pl-c"],[8,10,"pl-c"]],[[8,47,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-k"],[15,24,"pl-k"],[53,61,"pl-s"],[53,54,"pl-pds"],[60,61,"pl-pds"]],[[8,14,"pl-k"],[15,24,"pl-k"],[53,57,"pl-s"],[53,54,"pl-pds"],[56,57,"pl-pds"]],[[8,14,"pl-k"],[15,24,"pl-k"]],[],[[8,13,"pl-k"],[14,33,"pl-en"]],[[8,15,"pl-k"]],[[33,41,"pl-k"],[64,69,"pl-k"],[74,80,"pl-k"]],[[12,31,"pl-en"],[52,57,"pl-k"],[62,68,"pl-k"]],[[12,31,"pl-en"],[70,75,"pl-k"],[90,96,"pl-c1"]],[],[],[],[],[[36,40,"pl-c1"]],[],[],[],[[12,16,"pl-k"],[17,22,"pl-en"]],[[37,42,"pl-c1"]],[],[[16,22,"pl-k"],[31,44,"pl-c1"]],[[16,20,"pl-k"]],[[20,35,"pl-c1"]],[[20,43,"pl-c1"]],[[20,48,"pl-c1"]],[[20,22,"pl-k"],[32,45,"pl-c1"]],[[24,46,"pl-c1"]],[[20,24,"pl-k"]],[[24,46,"pl-c1"]],[[20,25,"pl-k"]],[[16,20,"pl-k"]],[[20,22,"pl-k"],[31,35,"pl-c1"]],[[24,39,"pl-c1"]],[[22,26,"pl-k"]],[[24,39,"pl-c1"]],[],[[20,43,"pl-c1"]],[[20,48,"pl-c1"]],[[20,22,"pl-k"],[31,35,"pl-c1"]],[[24,34,"pl-c1"],[35,44,"pl-s"],[35,36,"pl-pds"],[43,44,"pl-pds"]],[],[[20,42,"pl-c1"]],[[20,25,"pl-k"]],[[16,20,"pl-k"]],[[20,35,"pl-c1"]],[[20,30,"pl-c1"],[31,67,"pl-s"],[31,32,"pl-pds"],[66,67,"pl-pds"]],[[20,32,"pl-c1"]],[[20,38,"pl-c1"]],[[20,42,"pl-c1"]],[[20,25,"pl-k"]],[[16,20,"pl-k"]],[[20,35,"pl-c1"]],[[20,30,"pl-c1"],[31,68,"pl-s"],[31,32,"pl-pds"],[67,68,"pl-pds"]],[[20,32,"pl-c1"]],[[20,38,"pl-c1"]],[[20,42,"pl-c1"]],[[20,25,"pl-k"]],[[16,20,"pl-k"]],[[20,35,"pl-c1"]],[[20,30,"pl-c1"],[31,61,"pl-s"],[31,32,"pl-pds"],[60,61,"pl-pds"]],[[20,38,"pl-c1"]],[[20,42,"pl-c1"]],[[20,25,"pl-k"]],[[16,20,"pl-k"]],[[20,35,"pl-c1"],[36,42,"pl-s"],[36,37,"pl-pds"],[41,42,"pl-pds"]],[[20,32,"pl-c1"]],[[20,42,"pl-c1"]],[[20,25,"pl-k"]],[[16,20,"pl-k"]],[[20,35,"pl-c1"],[36,45,"pl-s"],[36,37,"pl-pds"],[44,45,"pl-pds"]],[[20,32,"pl-c1"]],[[20,42,"pl-c1"]],[[20,25,"pl-k"]],[[16,20,"pl-k"]],[[20,35,"pl-c1"]],[[20,30,"pl-c1"],[31,43,"pl-s"],[31,32,"pl-pds"],[42,43,"pl-pds"]],[[20,42,"pl-c1"]],[[20,25,"pl-k"]],[[16,20,"pl-k"]],[[20,35,"pl-c1"]],[[20,30,"pl-c1"],[31,40,"pl-s"],[31,32,"pl-pds"],[39,40,"pl-pds"]],[[20,32,"pl-c1"]],[[20,42,"pl-c1"]],[[20,25,"pl-k"]],[[20,72,"pl-c"],[20,22,"pl-c"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[16,20,"pl-k"]],[[20,35,"pl-c1"],[36,58,"pl-s"],[36,37,"pl-pds"],[57,58,"pl-pds"]],[[20,25,"pl-k"]],[],[],[],[[8,16,"pl-k"]],[[12,16,"pl-k"],[17,32,"pl-en"],[55,60,"pl-k"]],[[16,18,"pl-k"],[32,37,"pl-c1"]],[[44,47,"pl-s"],[44,45,"pl-pds"],[46,47,"pl-pds"],[62,66,"pl-s"],[62,63,"pl-pds"],[65,66,"pl-pds"]],[],[],[],[[12,16,"pl-k"],[17,27,"pl-en"],[45,50,"pl-k"]],[[26,29,"pl-s"],[26,27,"pl-pds"],[28,29,"pl-pds"]],[],[],[[12,16,"pl-k"],[17,35,"pl-en"]],[[16,18,"pl-k"],[27,40,"pl-c1"]],[[30,33,"pl-s"],[30,31,"pl-pds"],[32,33,"pl-pds"]],[[42,53,"pl-c1"]],[[30,48,"pl-s"],[30,31,"pl-pds"],[47,48,"pl-pds"]],[[20,43,"pl-c1"]],[],[],[],[[12,16,"pl-k"],[17,40,"pl-en"],[43,48,"pl-k"]],[[16,18,"pl-k"],[27,40,"pl-c1"]],[[30,33,"pl-s"],[30,31,"pl-pds"],[32,33,"pl-pds"],[44,57,"pl-c1"]],[],[],[],[[12,16,"pl-k"],[17,45,"pl-en"],[48,53,"pl-k"]],[[16,18,"pl-k"],[27,48,"pl-c1"]],[[42,53,"pl-c1"],[73,81,"pl-s"],[73,74,"pl-pds"],[80,81,"pl-pds"]],[],[[46,67,"pl-c1"]],[[20,32,"pl-c1"],[38,43,"pl-c1"],[52,55,"pl-c1"],[59,63,"pl-s"],[59,60,"pl-pds"],[60,62,"pl-cce"],[62,63,"pl-pds"],[65,68,"pl-s"],[65,66,"pl-pds"],[67,68,"pl-pds"]],[],[],[],[],[[12,16,"pl-k"],[17,29,"pl-en"]],[[16,18,"pl-k"],[42,45,"pl-c1"]],[[30,34,"pl-s"],[30,31,"pl-pds"],[33,34,"pl-pds"],[49,56,"pl-smi"],[60,64,"pl-s"],[60,61,"pl-pds"],[61,63,"pl-cce"],[63,64,"pl-pds"]],[],[],[],[],[[12,16,"pl-k"],[17,39,"pl-en"]],[[16,18,"pl-k"],[42,45,"pl-c1"]],[[20,26,"pl-k"]],[],[],[[16,84,"pl-c"],[16,18,"pl-c"]],[[74,77,"pl-c1"]],[[16,21,"pl-k"],[27,33,"pl-c1"],[38,49,"pl-k"],[55,61,"pl-c1"]],[],[[38,49,"pl-c1"],[63,71,"pl-s"],[63,64,"pl-pds"],[70,71,"pl-pds"]],[[26,35,"pl-c1"],[40,49,"pl-s"],[40,41,"pl-pds"],[48,49,"pl-pds"],[58,61,"pl-s"],[58,59,"pl-pds"],[60,61,"pl-pds"]],[],[[16,19,"pl-k"]],[[20,78,"pl-c"],[20,22,"pl-c"]],[[20,22,"pl-k"],[56,60,"pl-smi"]],[[34,38,"pl-s"],[34,35,"pl-pds"],[37,38,"pl-pds"],[53,60,"pl-smi"],[64,68,"pl-s"],[64,65,"pl-pds"],[65,67,"pl-cce"],[67,68,"pl-pds"]],[[24,26,"pl-k"]],[[50,61,"pl-c1"],[79,85,"pl-s"],[79,80,"pl-pds"],[84,85,"pl-pds"]],[],[],[],[],[],[[8,16,"pl-k"]],[],[[28,33,"pl-k"]],[[37,42,"pl-k"]],[],[[12,16,"pl-k"]],[[17,23,"pl-c1"]],[],[],[],[[6,32,"pl-c"],[6,8,"pl-c"]],[],[[4,8,"pl-k"],[9,37,"pl-en"],[51,56,"pl-k"]],[[8,10,"pl-k"],[23,31,"pl-c1"],[34,44,"pl-c1"]],[[24,37,"pl-s"],[24,25,"pl-pds"],[36,37,"pl-pds"],[51,59,"pl-c1"],[65,69,"pl-s"],[65,66,"pl-pds"],[66,68,"pl-cce"],[68,69,"pl-pds"]],[],[[20,34,"pl-s"],[20,21,"pl-pds"],[33,34,"pl-pds"],[48,55,"pl-c1"],[61,65,"pl-s"],[61,62,"pl-pds"],[62,64,"pl-cce"],[64,65,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,41,"pl-en"]],[[20,47,"pl-s"],[20,21,"pl-pds"],[46,47,"pl-pds"],[68,73,"pl-s"],[68,69,"pl-pds"],[70,72,"pl-cce"],[72,73,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,36,"pl-en"],[52,57,"pl-k"]],[],[],[[20,24,"pl-s"],[20,21,"pl-pds"],[23,24,"pl-pds"],[49,53,"pl-smi"],[57,61,"pl-s"],[57,58,"pl-pds"],[58,60,"pl-cce"],[60,61,"pl-pds"]],[[28,35,"pl-smi"],[81,84,"pl-c1"]],[[16,21,"pl-c1"]],[],[[20,24,"pl-s"],[20,21,"pl-pds"],[21,23,"pl-cce"],[23,24,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,34,"pl-en"],[48,53,"pl-k"]],[[20,25,"pl-s"],[20,21,"pl-pds"],[24,25,"pl-pds"],[43,49,"pl-smi"],[50,60,"pl-smi"],[61,66,"pl-c1"]],[[8,10,"pl-k"],[26,32,"pl-smi"],[33,42,"pl-smi"],[43,48,"pl-c1"],[54,55,"pl-c1"]],[[24,51,"pl-s"],[24,25,"pl-pds"],[50,51,"pl-pds"]],[],[[20,26,"pl-s"],[20,21,"pl-pds"],[21,25,"pl-cce"],[25,26,"pl-pds"]],[[8,43,"pl-c1"]],[],[],[],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[[1,8,"pl-k"],[9,18,"pl-s"],[9,10,"pl-pds"],[17,18,"pl-pds"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[],[[4,13,"pl-k"]],[[8,74,"pl-c"],[8,10,"pl-c"]],[[8,27,"pl-c"],[8,10,"pl-c"]],[[8,12,"pl-k"],[13,30,"pl-en"],[61,66,"pl-k"],[82,88,"pl-c1"],[98,99,"pl-c1"]],[[17,23,"pl-c1"],[36,40,"pl-c1"],[41,45,"pl-s"],[41,42,"pl-pds"],[44,45,"pl-pds"]],[[12,14,"pl-k"]],[[21,22,"pl-c1"]],[[12,16,"pl-k"]],[[20,21,"pl-c1"]],[[18,34,"pl-c1"]],[[19,25,"pl-c1"]],[[19,32,"pl-c1"],[44,48,"pl-s"],[44,45,"pl-pds"],[45,47,"pl-cce"],[47,48,"pl-pds"]],[],[],[[20,26,"pl-en"]],[[34,45,"pl-k"]],[[12,26,"pl-c1"],[36,39,"pl-s"],[36,37,"pl-pds"],[38,39,"pl-pds"],[41,45,"pl-s"],[41,42,"pl-pds"],[44,45,"pl-pds"]],[[12,26,"pl-c1"],[36,39,"pl-s"],[36,37,"pl-pds"],[38,39,"pl-pds"],[41,45,"pl-s"],[41,42,"pl-pds"],[44,45,"pl-pds"]],[[12,26,"pl-c1"],[36,40,"pl-s"],[36,37,"pl-pds"],[37,39,"pl-cce"],[39,40,"pl-pds"],[42,46,"pl-s"],[42,43,"pl-pds"],[45,46,"pl-pds"]],[[12,26,"pl-c1"],[36,40,"pl-s"],[36,37,"pl-pds"],[37,39,"pl-cce"],[39,40,"pl-pds"],[42,46,"pl-s"],[42,43,"pl-pds"],[45,46,"pl-pds"]],[[12,26,"pl-c1"],[36,39,"pl-s"],[36,37,"pl-pds"],[38,39,"pl-pds"],[41,45,"pl-s"],[41,42,"pl-pds"],[44,45,"pl-pds"]],[[12,26,"pl-c1"],[36,39,"pl-s"],[36,37,"pl-pds"],[38,39,"pl-pds"],[41,45,"pl-s"],[41,42,"pl-pds"],[44,45,"pl-pds"]],[[12,18,"pl-k"]],[],[[6,32,"pl-c"],[6,8,"pl-c"]],[],[],[[4,39,"pl-en"],[44,51,"pl-k"]],[],[[4,8,"pl-k"],[9,42,"pl-en"],[56,61,"pl-k"]],[[20,56,"pl-s"],[20,21,"pl-pds"],[55,56,"pl-pds"],[60,66,"pl-c1"],[76,80,"pl-smi"]],[[18,24,"pl-s"],[18,19,"pl-pds"],[21,23,"pl-cce"],[23,24,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,39,"pl-en"],[54,59,"pl-k"]],[[20,57,"pl-s"],[20,21,"pl-pds"],[56,57,"pl-pds"]],[[18,24,"pl-c1"],[35,42,"pl-smi"],[43,47,"pl-smi"],[53,59,"pl-s"],[53,54,"pl-pds"],[56,58,"pl-cce"],[58,59,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,41,"pl-en"],[57,62,"pl-k"]],[[24,29,"pl-k"],[55,70,"pl-smi"]],[[8,10,"pl-k"],[21,25,"pl-c1"]],[[20,33,"pl-c1"]],[],[],[[12,14,"pl-k"]],[[16,34,"pl-c1"],[39,42,"pl-c1"]],[[44,48,"pl-c1"]],[],[[26,39,"pl-c1"],[45,49,"pl-s"],[45,46,"pl-pds"],[46,48,"pl-cce"],[48,49,"pl-pds"]],[],[[12,18,"pl-k"],[27,40,"pl-c1"]],[[12,16,"pl-k"]],[[23,42,"pl-s"],[23,24,"pl-pds"],[41,42,"pl-pds"]],[[16,21,"pl-k"]],[[12,16,"pl-k"]],[[23,45,"pl-s"],[23,24,"pl-pds"],[44,45,"pl-pds"]],[[16,21,"pl-k"]],[[12,16,"pl-k"]],[[23,46,"pl-s"],[23,24,"pl-pds"],[45,46,"pl-pds"]],[[16,21,"pl-k"]],[[12,16,"pl-k"]],[[23,71,"pl-s"],[23,24,"pl-pds"],[70,71,"pl-pds"]],[[16,21,"pl-k"]],[[12,16,"pl-k"]],[[23,41,"pl-s"],[23,24,"pl-pds"],[40,41,"pl-pds"]],[[16,21,"pl-k"]],[[12,16,"pl-k"]],[[23,38,"pl-s"],[23,24,"pl-pds"],[37,38,"pl-pds"]],[[16,21,"pl-k"]],[],[[16,67,"pl-c"],[16,18,"pl-c"]],[[12,16,"pl-k"]],[[12,16,"pl-k"]],[[12,16,"pl-k"]],[[16,27,"pl-c1"],[28,65,"pl-s"],[28,29,"pl-pds"],[64,65,"pl-pds"]],[[16,68,"pl-c"],[16,18,"pl-c"]],[[12,16,"pl-k"]],[[12,16,"pl-k"]],[[12,16,"pl-k"]],[[16,27,"pl-c1"],[28,45,"pl-s"],[28,29,"pl-pds"],[44,45,"pl-pds"]],[],[[12,14,"pl-k"],[31,43,"pl-smi"],[44,48,"pl-c1"],[54,55,"pl-c1"]],[[23,39,"pl-s"],[23,24,"pl-pds"],[38,39,"pl-pds"]],[[12,14,"pl-k"],[31,43,"pl-smi"],[44,48,"pl-c1"],[53,54,"pl-c1"]],[[23,40,"pl-s"],[23,24,"pl-pds"],[39,40,"pl-pds"]],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"],[58,70,"pl-smi"]],[[23,31,"pl-s"],[23,24,"pl-pds"],[24,26,"pl-cce"],[28,30,"pl-cce"],[30,31,"pl-pds"],[47,54,"pl-smi"],[58,61,"pl-s"],[58,59,"pl-pds"],[60,61,"pl-pds"]],[],[],[[12,14,"pl-k"],[23,36,"pl-c1"]],[],[[20,26,"pl-s"],[20,21,"pl-pds"],[21,23,"pl-cce"],[25,26,"pl-pds"],[37,57,"pl-c1"],[63,67,"pl-s"],[63,64,"pl-pds"],[64,66,"pl-cce"],[66,67,"pl-pds"]],[[20,39,"pl-s"],[20,21,"pl-pds"],[36,38,"pl-cce"],[38,39,"pl-pds"]],[[20,24,"pl-s"],[20,21,"pl-pds"],[23,24,"pl-pds"],[35,56,"pl-c1"],[62,66,"pl-s"],[62,63,"pl-pds"],[63,65,"pl-cce"],[65,66,"pl-pds"]],[],[],[[12,14,"pl-k"],[24,37,"pl-c1"]],[[28,52,"pl-s"],[28,29,"pl-pds"],[51,52,"pl-pds"]],[[14,18,"pl-k"],[19,21,"pl-k"],[45,53,"pl-c1"]],[[23,74,"pl-s"],[23,24,"pl-pds"],[71,73,"pl-cce"],[73,74,"pl-pds"]],[[28,52,"pl-s"],[28,29,"pl-pds"],[51,52,"pl-pds"]],[[14,18,"pl-k"]],[[28,51,"pl-s"],[28,29,"pl-pds"],[50,51,"pl-pds"]],[],[[24,33,"pl-s"],[24,25,"pl-pds"],[32,33,"pl-pds"],[37,43,"pl-c1"],[66,70,"pl-smi"],[76,80,"pl-s"],[76,77,"pl-pds"],[77,79,"pl-cce"],[79,80,"pl-pds"]],[[24,36,"pl-s"],[24,25,"pl-pds"],[35,36,"pl-pds"],[40,46,"pl-c1"],[52,55,"pl-c1"],[63,67,"pl-s"],[63,64,"pl-pds"],[64,66,"pl-cce"],[66,67,"pl-pds"],[71,76,"pl-s"],[71,72,"pl-pds"],[73,75,"pl-cce"],[75,76,"pl-pds"]],[],[[17,22,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,43,"pl-en"],[57,62,"pl-k"]],[[20,25,"pl-c1"]],[[8,47,"pl-c1"]],[[20,51,"pl-s"],[20,21,"pl-pds"],[50,51,"pl-pds"]],[[15,21,"pl-c1"],[31,35,"pl-smi"],[40,46,"pl-s"],[40,41,"pl-pds"],[43,45,"pl-cce"],[45,46,"pl-pds"]],[[17,22,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,40,"pl-en"],[55,60,"pl-k"]],[[8,44,"pl-c1"]],[[8,12,"pl-k"],[13,18,"pl-k"],[50,58,"pl-smi"]],[[8,10,"pl-k"],[27,33,"pl-smi"],[34,39,"pl-c1"]],[[24,54,"pl-s"],[24,25,"pl-pds"],[53,54,"pl-pds"]],[[15,21,"pl-c1"],[35,39,"pl-smi"]],[[15,24,"pl-s"],[15,16,"pl-pds"],[23,24,"pl-pds"],[28,34,"pl-c1"],[49,55,"pl-smi"],[60,66,"pl-s"],[60,61,"pl-pds"],[63,65,"pl-cce"],[65,66,"pl-pds"]],[[8,10,"pl-k"],[27,33,"pl-smi"],[34,39,"pl-c1"]],[[24,54,"pl-s"],[24,25,"pl-pds"],[53,54,"pl-pds"]],[[15,21,"pl-c1"],[35,39,"pl-smi"]],[[15,24,"pl-s"],[15,16,"pl-pds"],[23,24,"pl-pds"],[28,34,"pl-c1"],[49,55,"pl-smi"],[60,66,"pl-s"],[60,61,"pl-pds"],[63,65,"pl-cce"],[65,66,"pl-pds"]],[[20,52,"pl-s"],[20,21,"pl-pds"],[51,52,"pl-pds"]],[[15,21,"pl-c1"],[35,39,"pl-smi"],[44,58,"pl-s"],[44,45,"pl-pds"],[57,58,"pl-pds"]],[[27,49,"pl-c1"],[55,61,"pl-s"],[55,56,"pl-pds"],[58,60,"pl-cce"],[60,61,"pl-pds"]],[[17,22,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,45,"pl-en"]],[[8,14,"pl-c1"],[31,36,"pl-c1"]],[],[[8,10,"pl-k"],[27,31,"pl-c1"],[36,37,"pl-c1"]],[[18,29,"pl-c1"],[30,33,"pl-s"],[30,31,"pl-pds"],[32,33,"pl-pds"],[38,42,"pl-s"],[38,39,"pl-pds"],[39,41,"pl-cce"],[41,42,"pl-pds"]],[],[],[[36,41,"pl-c1"],[46,47,"pl-c1"],[49,82,"pl-c"],[49,51,"pl-c"]],[[39,42,"pl-c1"]],[[12,15,"pl-k"]],[[16,33,"pl-c1"],[42,46,"pl-smi"]],[[18,29,"pl-c1"],[30,33,"pl-s"],[30,31,"pl-pds"],[32,33,"pl-pds"],[38,42,"pl-s"],[38,39,"pl-pds"],[39,41,"pl-cce"],[41,42,"pl-pds"]],[],[],[[49,54,"pl-c1"],[57,65,"pl-smi"]],[],[[26,30,"pl-s"],[26,27,"pl-pds"],[27,29,"pl-cce"],[29,30,"pl-pds"]],[[14,25,"pl-c1"],[26,29,"pl-s"],[26,27,"pl-pds"],[28,29,"pl-pds"],[34,40,"pl-s"],[34,35,"pl-pds"],[35,39,"pl-cce"],[39,40,"pl-pds"]],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[],[],[],[[1,3,"pl-k"]],[[1,7,"pl-k"]],[[1,7,"pl-k"],[30,80,"pl-c"],[30,32,"pl-c"]],[[30,75,"pl-c"],[30,32,"pl-c"]],[[30,67,"pl-c"],[30,32,"pl-c"]],[[1,6,"pl-k"]],[],[[0,9,"pl-k"],[10,15,"pl-en"]],[[4,28,"pl-en"]],[],[[8,13,"pl-en"]],[],[[22,42,"pl-smi"],[45,49,"pl-c1"]],[[22,47,"pl-smi"],[50,54,"pl-c1"]],[],[],[[4,29,"pl-en"],[34,41,"pl-k"]],[],[[16,43,"pl-en"]],[[8,14,"pl-k"],[15,56,"pl-s"],[15,16,"pl-pds"],[55,56,"pl-pds"]],[],[],[[16,45,"pl-en"],[48,53,"pl-k"]],[[8,14,"pl-k"],[15,26,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,37,"pl-en"],[54,59,"pl-k"]],[],[[13,27,"pl-c1"],[29,39,"pl-s"],[29,30,"pl-pds"],[38,39,"pl-pds"],[55,59,"pl-smi"]],[[13,27,"pl-c1"],[29,35,"pl-s"],[29,30,"pl-pds"],[34,35,"pl-pds"],[51,55,"pl-smi"]],[],[],[[4,8,"pl-k"],[9,37,"pl-en"],[51,56,"pl-k"]],[[8,46,"pl-c1"]],[[36,52,"pl-c1"]],[[8,10,"pl-k"],[27,32,"pl-c1"]],[[18,36,"pl-c1"]],[[14,26,"pl-c1"],[27,42,"pl-s"],[27,28,"pl-pds"],[41,42,"pl-pds"]],[[14,28,"pl-c1"],[29,35,"pl-s"],[29,30,"pl-pds"],[34,35,"pl-pds"],[50,54,"pl-c1"]],[[14,28,"pl-c1"],[29,39,"pl-s"],[29,30,"pl-pds"],[38,39,"pl-pds"],[54,61,"pl-c1"]],[[14,28,"pl-c1"],[29,49,"pl-s"],[29,30,"pl-pds"],[48,49,"pl-pds"],[54,55,"pl-c1"]],[[14,28,"pl-c1"],[29,45,"pl-s"],[29,30,"pl-pds"],[44,45,"pl-pds"],[50,64,"pl-c1"]],[[8,10,"pl-k"],[23,31,"pl-c1"],[34,44,"pl-c1"]],[[18,32,"pl-c1"],[34,43,"pl-s"],[34,35,"pl-pds"],[42,43,"pl-pds"],[58,66,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,38,"pl-en"],[53,58,"pl-k"]],[[8,47,"pl-c1"]],[[14,26,"pl-c1"],[28,38,"pl-s"],[28,29,"pl-pds"],[37,38,"pl-pds"]],[[13,27,"pl-c1"],[29,35,"pl-s"],[29,30,"pl-pds"],[34,35,"pl-pds"],[40,44,"pl-c1"],[46,55,"pl-c1"],[65,69,"pl-smi"]],[[13,27,"pl-c1"],[29,35,"pl-s"],[29,30,"pl-pds"],[34,35,"pl-pds"],[49,61,"pl-c1"]],[],[[8,23,"pl-c1"],[34,42,"pl-smi"]],[],[[8,10,"pl-k"],[23,36,"pl-c1"]],[[28,33,"pl-c1"]],[[14,29,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,37,"pl-en"],[51,56,"pl-k"]],[[8,46,"pl-c1"]],[[8,10,"pl-k"],[31,32,"pl-c1"]],[[18,30,"pl-c1"],[32,41,"pl-s"],[32,33,"pl-pds"],[40,41,"pl-pds"]],[[17,31,"pl-c1"],[33,39,"pl-s"],[33,34,"pl-pds"],[38,39,"pl-pds"],[44,48,"pl-c1"],[50,59,"pl-c1"],[72,76,"pl-smi"]],[[12,27,"pl-c1"],[41,49,"pl-smi"]],[[18,33,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,39,"pl-en"],[55,60,"pl-k"]],[],[[4,8,"pl-k"],[9,36,"pl-en"],[53,58,"pl-k"]],[],[[24,29,"pl-k"],[55,70,"pl-smi"]],[],[[8,12,"pl-k"],[40,64,"pl-c1"],[78,82,"pl-c1"]],[],[[8,10,"pl-k"],[37,50,"pl-c1"]],[[12,54,"pl-c"],[12,14,"pl-c"]],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"],[50,62,"pl-smi"]],[[16,18,"pl-k"],[24,28,"pl-smi"]],[[20,24,"pl-k"],[35,48,"pl-c1"],[50,56,"pl-s"],[50,51,"pl-pds"],[55,56,"pl-pds"]],[[20,35,"pl-c1"],[41,49,"pl-smi"]],[[22,31,"pl-c1"],[37,44,"pl-smi"]],[[18,22,"pl-k"],[23,25,"pl-k"],[32,36,"pl-smi"]],[[20,24,"pl-k"],[35,48,"pl-c1"],[50,59,"pl-s"],[50,51,"pl-pds"],[58,59,"pl-pds"]],[[20,35,"pl-c1"],[41,49,"pl-smi"]],[[22,31,"pl-c1"],[37,44,"pl-smi"]],[],[],[],[],[[8,73,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"],[39,52,"pl-c1"]],[[20,33,"pl-c1"]],[[12,18,"pl-k"]],[],[],[[8,48,"pl-c"],[8,10,"pl-c"]],[[8,10,"pl-k"],[19,32,"pl-c1"]],[[18,30,"pl-c1"],[32,44,"pl-s"],[32,33,"pl-pds"],[43,44,"pl-pds"]],[[17,31,"pl-c1"],[33,42,"pl-s"],[33,34,"pl-pds"],[41,42,"pl-pds"],[54,63,"pl-c1"]],[[17,31,"pl-c1"],[33,39,"pl-s"],[33,34,"pl-pds"],[38,39,"pl-pds"],[51,67,"pl-c1"]],[],[[12,27,"pl-c1"],[36,49,"pl-c1"]],[],[[18,31,"pl-c1"],[33,43,"pl-s"],[33,34,"pl-pds"],[42,43,"pl-pds"]],[[17,26,"pl-c1"],[35,48,"pl-c1"]],[[18,31,"pl-c1"],[33,43,"pl-s"],[33,34,"pl-pds"],[42,43,"pl-pds"]],[[17,26,"pl-c1"],[35,56,"pl-c1"]],[],[],[[8,64,"pl-c"],[8,10,"pl-c"]],[[8,14,"pl-k"],[23,36,"pl-c1"]],[[12,16,"pl-k"]],[[22,34,"pl-c1"],[36,47,"pl-s"],[36,37,"pl-pds"],[46,47,"pl-pds"]],[[16,31,"pl-c1"],[40,53,"pl-c1"]],[[22,31,"pl-c1"],[40,50,"pl-c1"]],[[22,32,"pl-c1"]],[[16,21,"pl-k"]],[[12,16,"pl-k"]],[[22,34,"pl-c1"],[36,57,"pl-s"],[36,37,"pl-pds"],[56,57,"pl-pds"]],[[16,31,"pl-c1"],[40,53,"pl-c1"]],[[22,31,"pl-c1"],[40,50,"pl-c1"]],[[22,32,"pl-c1"]],[[16,21,"pl-k"]],[[12,16,"pl-k"]],[[22,35,"pl-c1"],[37,43,"pl-s"],[37,38,"pl-pds"],[42,43,"pl-pds"]],[[22,31,"pl-c1"],[40,50,"pl-c1"]],[[16,21,"pl-k"]],[[12,16,"pl-k"]],[[16,57,"pl-c"],[16,18,"pl-c"]],[[16,21,"pl-k"]],[[12,16,"pl-k"]],[[22,34,"pl-c1"],[36,45,"pl-s"],[36,37,"pl-pds"],[44,45,"pl-pds"]],[[16,31,"pl-c1"],[40,53,"pl-c1"]],[[22,31,"pl-c1"],[40,50,"pl-c1"]],[[22,32,"pl-c1"]],[[16,21,"pl-k"]],[[12,16,"pl-k"]],[[22,34,"pl-c1"],[36,42,"pl-s"],[36,37,"pl-pds"],[41,42,"pl-pds"]],[[16,31,"pl-c1"],[40,53,"pl-c1"]],[[22,31,"pl-c1"],[40,50,"pl-c1"]],[[22,32,"pl-c1"]],[[16,21,"pl-k"]],[[12,19,"pl-k"]],[[16,21,"pl-k"]],[],[],[[8,10,"pl-k"],[19,32,"pl-c1"]],[[18,28,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,34,"pl-en"],[49,54,"pl-k"]],[[8,43,"pl-c1"]],[[8,10,"pl-k"],[32,33,"pl-c1"]],[],[[51,64,"pl-c1"],[66,82,"pl-s"],[66,67,"pl-pds"],[81,82,"pl-pds"]],[[18,32,"pl-c1"],[34,45,"pl-s"],[34,35,"pl-pds"],[44,45,"pl-pds"],[63,73,"pl-smi"],[74,80,"pl-smi"]],[[18,32,"pl-c1"],[34,44,"pl-s"],[34,35,"pl-pds"],[43,44,"pl-pds"],[62,72,"pl-smi"],[73,79,"pl-smi"]],[[18,32,"pl-c1"],[34,52,"pl-s"],[34,35,"pl-pds"],[51,52,"pl-pds"],[70,80,"pl-smi"],[81,92,"pl-smi"]],[[18,32,"pl-c1"],[34,43,"pl-s"],[34,35,"pl-pds"],[42,43,"pl-pds"],[61,71,"pl-smi"],[72,79,"pl-smi"],[82,83,"pl-c1"]],[],[[16,18,"pl-k"],[31,44,"pl-c1"]],[[22,36,"pl-c1"],[38,57,"pl-s"],[38,39,"pl-pds"],[56,57,"pl-pds"],[75,92,"pl-smi"]],[],[[12,33,"pl-c"],[12,14,"pl-c"]],[[18,28,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,35,"pl-en"],[51,56,"pl-k"]],[[8,44,"pl-c1"]],[[43,56,"pl-c1"],[58,73,"pl-s"],[58,59,"pl-pds"],[72,73,"pl-pds"]],[[10,24,"pl-c1"],[26,35,"pl-s"],[26,27,"pl-pds"],[34,35,"pl-pds"],[54,60,"pl-smi"],[61,71,"pl-smi"],[72,77,"pl-c1"]],[[10,24,"pl-c1"],[26,33,"pl-s"],[26,27,"pl-pds"],[32,33,"pl-pds"],[52,58,"pl-smi"],[59,69,"pl-smi"],[70,77,"pl-smi"]],[],[[8,10,"pl-k"],[23,36,"pl-c1"]],[[14,28,"pl-c1"],[30,49,"pl-s"],[30,31,"pl-pds"],[48,49,"pl-pds"],[70,87,"pl-c1"]],[[8,10,"pl-k"],[27,33,"pl-smi"],[34,39,"pl-c1"]],[[18,31,"pl-c1"],[33,41,"pl-s"],[33,34,"pl-pds"],[40,41,"pl-pds"],[44,53,"pl-c1"],[55,59,"pl-c1"],[61,70,"pl-c1"],[85,91,"pl-smi"]],[[8,10,"pl-k"],[27,33,"pl-smi"],[34,39,"pl-c1"]],[[18,31,"pl-c1"],[33,41,"pl-s"],[33,34,"pl-pds"],[40,41,"pl-pds"],[44,53,"pl-c1"],[55,59,"pl-c1"],[61,70,"pl-c1"],[85,91,"pl-smi"]],[],[[14,24,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,34,"pl-en"],[49,54,"pl-k"]],[[8,43,"pl-c1"]],[[14,27,"pl-c1"],[29,45,"pl-s"],[29,30,"pl-pds"],[44,45,"pl-pds"]],[[13,27,"pl-c1"],[29,40,"pl-s"],[29,30,"pl-pds"],[39,40,"pl-pds"],[58,64,"pl-smi"],[65,75,"pl-smi"],[76,82,"pl-smi"]],[[13,27,"pl-c1"],[29,39,"pl-s"],[29,30,"pl-pds"],[38,39,"pl-pds"],[57,63,"pl-smi"],[64,74,"pl-smi"],[75,81,"pl-smi"]],[[13,27,"pl-c1"],[29,47,"pl-s"],[29,30,"pl-pds"],[46,47,"pl-pds"],[65,71,"pl-smi"],[72,82,"pl-smi"],[83,94,"pl-smi"]],[[13,27,"pl-c1"],[29,36,"pl-s"],[29,30,"pl-pds"],[35,36,"pl-pds"],[54,60,"pl-smi"],[61,71,"pl-smi"],[72,79,"pl-smi"]],[[14,27,"pl-c1"],[29,50,"pl-s"],[29,30,"pl-pds"],[49,50,"pl-pds"]],[[13,27,"pl-c1"],[29,40,"pl-s"],[29,30,"pl-pds"],[39,40,"pl-pds"],[58,64,"pl-smi"],[65,74,"pl-smi"],[75,81,"pl-smi"]],[[13,27,"pl-c1"],[29,39,"pl-s"],[29,30,"pl-pds"],[38,39,"pl-pds"],[57,63,"pl-smi"],[64,73,"pl-smi"],[74,80,"pl-smi"]],[[13,27,"pl-c1"],[29,47,"pl-s"],[29,30,"pl-pds"],[46,47,"pl-pds"],[65,71,"pl-smi"],[72,81,"pl-smi"],[82,93,"pl-smi"]],[[13,27,"pl-c1"],[29,36,"pl-s"],[29,30,"pl-pds"],[35,36,"pl-pds"],[54,60,"pl-smi"],[61,70,"pl-smi"],[71,78,"pl-smi"]],[[14,24,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,40,"pl-en"]],[[14,26,"pl-c1"],[27,45,"pl-s"],[27,28,"pl-pds"],[44,45,"pl-pds"]],[[14,28,"pl-c1"],[29,35,"pl-s"],[29,30,"pl-pds"],[34,35,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,39,"pl-en"],[54,59,"pl-k"]],[[14,28,"pl-c1"],[29,38,"pl-s"],[29,30,"pl-pds"],[37,38,"pl-pds"],[48,55,"pl-smi"]],[[13,27,"pl-c1"],[28,39,"pl-s"],[28,29,"pl-pds"],[38,39,"pl-pds"],[49,58,"pl-smi"]],[[13,27,"pl-c1"],[28,40,"pl-s"],[28,29,"pl-pds"],[39,40,"pl-pds"],[50,60,"pl-smi"]],[[13,27,"pl-c1"],[28,45,"pl-s"],[28,29,"pl-pds"],[44,45,"pl-pds"],[55,70,"pl-smi"]],[[13,27,"pl-c1"],[28,47,"pl-s"],[28,29,"pl-pds"],[46,47,"pl-pds"],[57,74,"pl-smi"]],[[13,25,"pl-c1"],[26,54,"pl-s"],[26,27,"pl-pds"],[53,54,"pl-pds"]],[],[],[[4,8,"pl-k"],[9,36,"pl-en"],[54,59,"pl-k"]],[[14,27,"pl-c1"],[28,34,"pl-s"],[28,29,"pl-pds"],[33,34,"pl-pds"]],[[13,27,"pl-c1"],[28,35,"pl-s"],[28,29,"pl-pds"],[34,35,"pl-pds"],[55,59,"pl-smi"],[60,65,"pl-smi"],[66,71,"pl-c1"]],[[13,27,"pl-c1"],[28,40,"pl-s"],[28,29,"pl-pds"],[39,40,"pl-pds"],[60,64,"pl-smi"],[65,76,"pl-smi"],[77,82,"pl-c1"]],[[13,27,"pl-c1"],[28,40,"pl-s"],[28,29,"pl-pds"],[39,40,"pl-pds"],[60,64,"pl-smi"],[65,76,"pl-smi"],[77,82,"pl-c1"]],[[13,27,"pl-c1"],[28,32,"pl-s"],[28,29,"pl-pds"],[31,32,"pl-pds"],[52,56,"pl-smi"],[57,76,"pl-smi"]],[[14,27,"pl-c1"],[28,47,"pl-s"],[28,29,"pl-pds"],[46,47,"pl-pds"]],[[13,27,"pl-c1"],[28,35,"pl-s"],[28,29,"pl-pds"],[34,35,"pl-pds"],[55,72,"pl-smi"],[73,78,"pl-smi"],[79,84,"pl-c1"]],[[13,27,"pl-c1"],[28,40,"pl-s"],[28,29,"pl-pds"],[39,40,"pl-pds"],[60,77,"pl-smi"],[78,89,"pl-smi"],[90,95,"pl-c1"]],[[13,27,"pl-c1"],[28,40,"pl-s"],[28,29,"pl-pds"],[39,40,"pl-pds"],[60,77,"pl-smi"],[78,89,"pl-smi"],[90,95,"pl-c1"]],[[13,27,"pl-c1"],[28,32,"pl-s"],[28,29,"pl-pds"],[31,32,"pl-pds"],[52,69,"pl-smi"],[70,89,"pl-smi"]],[[14,27,"pl-c1"],[28,38,"pl-s"],[28,29,"pl-pds"],[37,38,"pl-pds"]],[[13,27,"pl-c1"],[28,38,"pl-s"],[28,29,"pl-pds"],[37,38,"pl-pds"],[58,73,"pl-smi"]],[[13,27,"pl-c1"],[28,37,"pl-s"],[28,29,"pl-pds"],[36,37,"pl-pds"],[57,65,"pl-smi"],[66,74,"pl-smi"]],[[13,27,"pl-c1"],[28,39,"pl-s"],[28,29,"pl-pds"],[38,39,"pl-pds"],[59,67,"pl-smi"],[68,78,"pl-smi"]],[[13,27,"pl-c1"],[28,38,"pl-s"],[28,29,"pl-pds"],[37,38,"pl-pds"],[58,66,"pl-smi"],[67,76,"pl-smi"]],[[13,27,"pl-c1"],[28,40,"pl-s"],[28,29,"pl-pds"],[39,40,"pl-pds"],[60,68,"pl-smi"],[69,80,"pl-smi"]],[[14,24,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,37,"pl-en"]],[[14,27,"pl-c1"],[28,36,"pl-s"],[28,29,"pl-pds"],[35,36,"pl-pds"]],[[12,26,"pl-c1"],[27,36,"pl-s"],[27,28,"pl-pds"],[35,36,"pl-pds"]],[[14,24,"pl-c1"]],[],[],[[4,8,"pl-k"],[9,35,"pl-en"],[69,74,"pl-k"]],[[8,12,"pl-k"],[30,43,"pl-c1"],[44,64,"pl-s"],[44,45,"pl-pds"],[63,64,"pl-pds"]],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[12,16,"pl-k"],[31,44,"pl-c1"],[45,55,"pl-s"],[45,46,"pl-pds"],[54,55,"pl-pds"]],[[18,30,"pl-c1"],[31,37,"pl-s"],[31,32,"pl-pds"],[36,37,"pl-pds"]],[[18,27,"pl-c1"],[37,41,"pl-smi"]],[[18,28,"pl-c1"]],[[18,30,"pl-c1"],[31,44,"pl-s"],[31,32,"pl-pds"],[43,44,"pl-pds"]],[[18,27,"pl-c1"],[37,48,"pl-smi"]],[[18,28,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,35,"pl-en"],[69,74,"pl-k"]],[[8,12,"pl-k"],[30,43,"pl-c1"],[45,66,"pl-s"],[45,46,"pl-pds"],[65,66,"pl-pds"]],[[8,11,"pl-k"],[14,18,"pl-k"],[19,24,"pl-k"]],[[12,16,"pl-k"],[31,44,"pl-c1"],[46,56,"pl-s"],[46,47,"pl-pds"],[55,56,"pl-pds"]],[[18,30,"pl-c1"],[32,38,"pl-s"],[32,33,"pl-pds"],[37,38,"pl-pds"]],[[17,26,"pl-c1"],[37,41,"pl-smi"]],[[17,27,"pl-c1"]],[[18,30,"pl-c1"],[32,45,"pl-s"],[32,33,"pl-pds"],[44,45,"pl-pds"]],[[17,26,"pl-c1"],[37,48,"pl-smi"]],[[17,27,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,31,"pl-en"],[60,65,"pl-k"]],[[8,12,"pl-k"],[30,43,"pl-c1"],[44,59,"pl-s"],[44,45,"pl-pds"],[58,59,"pl-pds"]],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[12,16,"pl-k"],[34,47,"pl-c1"],[48,58,"pl-s"],[48,49,"pl-pds"],[57,58,"pl-pds"]],[[12,16,"pl-k"],[17,22,"pl-k"],[40,55,"pl-c1"]],[[18,30,"pl-c1"],[31,37,"pl-s"],[31,32,"pl-pds"],[36,37,"pl-pds"]],[[18,27,"pl-c1"],[37,41,"pl-smi"]],[[18,28,"pl-c1"]],[[18,30,"pl-c1"],[31,42,"pl-s"],[31,32,"pl-pds"],[41,42,"pl-pds"]],[[18,27,"pl-c1"],[37,46,"pl-smi"]],[[18,28,"pl-c1"]],[[18,30,"pl-c1"],[31,37,"pl-s"],[31,32,"pl-pds"],[36,37,"pl-pds"]],[[18,27,"pl-c1"],[37,49,"pl-c1"]],[[18,28,"pl-c1"]],[],[[12,16,"pl-k"],[35,48,"pl-c1"],[49,61,"pl-s"],[49,50,"pl-pds"],[60,61,"pl-pds"]],[[18,30,"pl-c1"],[31,37,"pl-s"],[31,32,"pl-pds"],[36,37,"pl-pds"]],[[18,27,"pl-c1"],[37,45,"pl-smi"],[46,50,"pl-smi"]],[[18,28,"pl-c1"]],[[18,30,"pl-c1"],[31,37,"pl-s"],[31,32,"pl-pds"],[36,37,"pl-pds"]],[[18,27,"pl-c1"],[28,42,"pl-c1"],[52,60,"pl-smi"],[61,65,"pl-smi"]],[[18,28,"pl-c1"]],[],[],[],[[4,8,"pl-k"],[9,30,"pl-en"],[52,57,"pl-k"]],[[8,12,"pl-k"],[30,43,"pl-c1"],[44,67,"pl-s"],[44,45,"pl-pds"],[66,67,"pl-pds"]],[[8,11,"pl-k"],[13,17,"pl-k"],[18,23,"pl-k"]],[[12,16,"pl-k"],[34,47,"pl-c1"],[48,53,"pl-s"],[48,49,"pl-pds"],[52,53,"pl-pds"]],[[18,30,"pl-c1"],[31,38,"pl-s"],[31,32,"pl-pds"],[37,38,"pl-pds"]],[[18,27,"pl-c1"],[28,42,"pl-c1"],[47,52,"pl-smi"]],[[18,28,"pl-c1"]],[[12,16,"pl-k"],[34,47,"pl-c1"],[48,57,"pl-s"],[48,49,"pl-pds"],[56,57,"pl-pds"]],[[12,15,"pl-k"],[17,21,"pl-k"],[22,27,"pl-k"],[41,50,"pl-smi"]],[[22,34,"pl-c1"],[35,42,"pl-s"],[35,36,"pl-pds"],[41,42,"pl-pds"]],[[22,31,"pl-c1"]],[[22,32,"pl-c1"]],[],[],[],[],[[2,24,"pl-c"],[2,4,"pl-c"]],[],[[1,3,"pl-k"]],[[1,7,"pl-k"]],[[1,6,"pl-k"]]],"colorizedLines":null,"csv":null,"csvError":null,"dependabotInfo":{"showConfigurationBanner":false,"configFilePath":null,"networkDependabotPath":"/catchorg/Catch2/network/updates","dismissConfigurationNoticePath":"/settings/dismiss-notice/dependabot_configuration_notice","configurationNoticeDismissed":null},"displayName":"catch_amalgamated.cpp","displayUrl":"https://github.com/catchorg/Catch2/blob/devel/extras/catch_amalgamated.cpp?raw=true","headerInfo":{"blobSize":"413 KB","deleteTooltip":"You must be signed in to make or propose changes","editTooltip":"You must be signed in to make or propose changes","ghDesktopPath":"https://desktop.github.com","isGitLfs":false,"onBranch":true,"shortPath":"b979eb2","siteNavLoginPath":"/login?return_to=https%3A%2F%2Fgithub.com%2Fcatchorg%2FCatch2%2Fblob%2Fdevel%2Fextras%2Fcatch_amalgamated.cpp","isCSV":false,"isRichtext":false,"toc":null,"lineInfo":{"truncatedLoc":"11817","truncatedSloc":"9792"},"mode":"file"},"image":false,"isCodeownersFile":null,"isPlain":false,"isValidLegacyIssueTemplate":false,"issueTemplate":null,"discussionTemplate":null,"language":"C++","languageID":43,"large":false,"planSupportInfo":{"repoIsFork":null,"repoOwnedByCurrentUser":null,"requestFullPath":"/catchorg/Catch2/blob/devel/extras/catch_amalgamated.cpp","showFreeOrgGatedFeatureMessage":null,"showPlanSupportBanner":null,"upgradeDataAttributes":null,"upgradePath":null},"publishBannersInfo":{"dismissActionNoticePath":"/settings/dismiss-notice/publish_action_from_dockerfile","releasePath":"/catchorg/Catch2/releases/new?marketplace=true","showPublishActionBanner":false},"rawBlobUrl":"https://github.com/catchorg/Catch2/raw/refs/heads/devel/extras/catch_amalgamated.cpp","renderImageOrRaw":false,"richText":null,"renderedFileInfo":null,"shortPath":null,"symbolsEnabled":true,"tabSize":8,"topBannersInfo":{"overridingGlobalFundingFile":false,"globalPreferredFundingPath":null,"showInvalidCitationWarning":false,"citationHelpUrl":"https://docs.github.com/github/creating-cloning-and-archiving-repositories/creating-a-repository-on-github/about-citation-files","actionsOnboardingTip":null},"truncated":false,"viewable":true,"workflowRedirectUrl":null,"symbols":{"timed_out":true,"not_analyzed":false,"symbols":[{"name":"analyse","kind":"function","ident_start":1425,"ident_end":1432,"extent_start":1410,"extent_end":4159,"fully_qualified_name":"analyse","ident_utf16":{"start":{"line_number":59,"utf16_col":27},"end":{"line_number":59,"utf16_col":34}},"extent_utf16":{"start":{"line_number":59,"utf16_col":12},"end":{"line_number":119,"utf16_col":13}}},{"name":"do_nothing","kind":"class","ident_start":4334,"ident_end":4344,"extent_start":4327,"extent_end":4403,"fully_qualified_name":"do_nothing","ident_utf16":{"start":{"line_number":130,"utf16_col":19},"end":{"line_number":130,"utf16_col":29}},"extent_utf16":{"start":{"line_number":130,"utf16_col":12},"end":{"line_number":132,"utf16_col":13}}},{"name":"BenchmarkFunction","kind":"method","ident_start":4501,"ident_end":4518,"extent_start":4482,"extent_end":4572,"fully_qualified_name":"BenchmarkFunction::BenchmarkFunction","ident_utf16":{"start":{"line_number":135,"utf16_col":31},"end":{"line_number":135,"utf16_col":48}},"extent_utf16":{"start":{"line_number":135,"utf16_col":12},"end":{"line_number":136,"utf16_col":50}}},{"name":"optimized_away_error","kind":"class","ident_start":4769,"ident_end":4789,"extent_start":4762,"extent_end":4882,"fully_qualified_name":"optimized_away_error","ident_utf16":{"start":{"line_number":149,"utf16_col":19},"end":{"line_number":149,"utf16_col":39}},"extent_utf16":{"start":{"line_number":149,"utf16_col":12},"end":{"line_number":151,"utf16_col":13}}},{"name":"throw_optimized_away_error","kind":"function","ident_start":5070,"ident_end":5096,"extent_start":5065,"extent_end":5178,"fully_qualified_name":"throw_optimized_away_error","ident_utf16":{"start":{"line_number":157,"utf16_col":17},"end":{"line_number":157,"utf16_col":43}},"extent_utf16":{"start":{"line_number":157,"utf16_col":12},"end":{"line_number":159,"utf16_col":13}}},{"name":"resample","kind":"function","ident_start":5682,"ident_end":5690,"extent_start":5652,"extent_end":6802,"fully_qualified_name":"resample","ident_utf16":{"start":{"line_number":189,"utf16_col":16},"end":{"line_number":189,"utf16_col":24}},"extent_utf16":{"start":{"line_number":188,"utf16_col":16},"end":{"line_number":212,"utf16_col":17}}},{"name":"outlier_variance","kind":"function","ident_start":6834,"ident_end":6850,"extent_start":6820,"extent_end":8328,"fully_qualified_name":"outlier_variance","ident_utf16":{"start":{"line_number":214,"utf16_col":30},"end":{"line_number":214,"utf16_col":46}},"extent_utf16":{"start":{"line_number":214,"utf16_col":16},"end":{"line_number":245,"utf16_col":17}}},{"name":"erf_inv","kind":"function","ident_start":8360,"ident_end":8367,"extent_start":8346,"extent_end":12641,"fully_qualified_name":"erf_inv","ident_utf16":{"start":{"line_number":247,"utf16_col":30},"end":{"line_number":247,"utf16_col":37}},"extent_utf16":{"start":{"line_number":247,"utf16_col":16},"end":{"line_number":321,"utf16_col":17}}},{"name":"standard_deviation","kind":"function","ident_start":12689,"ident_end":12707,"extent_start":12659,"extent_end":13386,"fully_qualified_name":"standard_deviation","ident_utf16":{"start":{"line_number":324,"utf16_col":16},"end":{"line_number":324,"utf16_col":34}},"extent_utf16":{"start":{"line_number":323,"utf16_col":16},"end":{"line_number":336,"utf16_col":17}}},{"name":"jackknife","kind":"function","ident_start":13418,"ident_end":13427,"extent_start":13404,"extent_end":14091,"fully_qualified_name":"jackknife","ident_utf16":{"start":{"line_number":338,"utf16_col":30},"end":{"line_number":338,"utf16_col":39}},"extent_utf16":{"start":{"line_number":338,"utf16_col":16},"end":{"line_number":352,"utf16_col":17}}},{"name":"weighted_average_quantile","kind":"function","ident_start":14305,"ident_end":14330,"extent_start":14298,"extent_end":15066,"fully_qualified_name":"weighted_average_quantile","ident_utf16":{"start":{"line_number":364,"utf16_col":19},"end":{"line_number":364,"utf16_col":44}},"extent_utf16":{"start":{"line_number":364,"utf16_col":12},"end":{"line_number":380,"utf16_col":13}}},{"name":"classify_outliers","kind":"function","ident_start":15114,"ident_end":15131,"extent_start":15080,"extent_end":16241,"fully_qualified_name":"classify_outliers","ident_utf16":{"start":{"line_number":383,"utf16_col":12},"end":{"line_number":383,"utf16_col":29}},"extent_utf16":{"start":{"line_number":382,"utf16_col":12},"end":{"line_number":409,"utf16_col":13}}},{"name":"mean","kind":"function","ident_start":16262,"ident_end":16266,"extent_start":16255,"extent_end":16580,"fully_qualified_name":"mean","ident_utf16":{"start":{"line_number":411,"utf16_col":19},"end":{"line_number":411,"utf16_col":23}},"extent_utf16":{"start":{"line_number":411,"utf16_col":12},"end":{"line_number":419,"utf16_col":13}}},{"name":"normal_cdf","kind":"function","ident_start":16601,"ident_end":16611,"extent_start":16594,"extent_end":16704,"fully_qualified_name":"normal_cdf","ident_utf16":{"start":{"line_number":421,"utf16_col":19},"end":{"line_number":421,"utf16_col":29}},"extent_utf16":{"start":{"line_number":421,"utf16_col":12},"end":{"line_number":423,"utf16_col":13}}},{"name":"erfc_inv","kind":"function","ident_start":16725,"ident_end":16733,"extent_start":16718,"extent_end":16800,"fully_qualified_name":"erfc_inv","ident_utf16":{"start":{"line_number":425,"utf16_col":19},"end":{"line_number":425,"utf16_col":27}},"extent_utf16":{"start":{"line_number":425,"utf16_col":12},"end":{"line_number":427,"utf16_col":13}}},{"name":"normal_quantile","kind":"function","ident_start":16821,"ident_end":16836,"extent_start":16814,"extent_end":17362,"fully_qualified_name":"normal_quantile","ident_utf16":{"start":{"line_number":429,"utf16_col":19},"end":{"line_number":429,"utf16_col":34}},"extent_utf16":{"start":{"line_number":429,"utf16_col":12},"end":{"line_number":443,"utf16_col":13}}},{"name":"bootstrap","kind":"function","ident_start":17405,"ident_end":17414,"extent_start":17376,"extent_end":19982,"fully_qualified_name":"bootstrap","ident_utf16":{"start":{"line_number":446,"utf16_col":12},"end":{"line_number":446,"utf16_col":21}},"extent_utf16":{"start":{"line_number":445,"utf16_col":12},"end":{"line_number":501,"utf16_col":13}}},{"name":"analyse_samples","kind":"function","ident_start":20015,"ident_end":20030,"extent_start":19996,"extent_end":21946,"fully_qualified_name":"analyse_samples","ident_utf16":{"start":{"line_number":503,"utf16_col":31},"end":{"line_number":503,"utf16_col":46}},"extent_utf16":{"start":{"line_number":503,"utf16_col":12},"end":{"line_number":543,"utf16_col":13}}},{"name":"marginComparison","kind":"function","ident_start":22214,"ident_end":22230,"extent_start":22209,"extent_end":22332,"fully_qualified_name":"marginComparison","ident_utf16":{"start":{"line_number":557,"utf16_col":5},"end":{"line_number":557,"utf16_col":21}},"extent_utf16":{"start":{"line_number":557,"utf16_col":0},"end":{"line_number":559,"utf16_col":1}}},{"name":"Approx","kind":"method","ident_start":22368,"ident_end":22374,"extent_start":22360,"extent_end":22558,"fully_qualified_name":"Approx::Approx","ident_utf16":{"start":{"line_number":565,"utf16_col":12},"end":{"line_number":565,"utf16_col":18}},"extent_utf16":{"start":{"line_number":565,"utf16_col":4},"end":{"line_number":570,"utf16_col":6}}},{"name":"custom","kind":"method","ident_start":22579,"ident_end":22585,"extent_start":22564,"extent_end":22623,"fully_qualified_name":"Approx::custom","ident_utf16":{"start":{"line_number":572,"utf16_col":19},"end":{"line_number":572,"utf16_col":25}},"extent_utf16":{"start":{"line_number":572,"utf16_col":4},"end":{"line_number":574,"utf16_col":5}}},{"name":"toString","kind":"method","ident_start":22781,"ident_end":22789,"extent_start":22761,"extent_end":22941,"fully_qualified_name":"Approx::toString","ident_utf16":{"start":{"line_number":583,"utf16_col":24},"end":{"line_number":583,"utf16_col":32}},"extent_utf16":{"start":{"line_number":583,"utf16_col":4},"end":{"line_number":587,"utf16_col":5}}},{"name":"equalityComparisonImpl","kind":"method","ident_start":22960,"ident_end":22982,"extent_start":22947,"extent_end":23377,"fully_qualified_name":"Approx::equalityComparisonImpl","ident_utf16":{"start":{"line_number":589,"utf16_col":17},"end":{"line_number":589,"utf16_col":39}},"extent_utf16":{"start":{"line_number":589,"utf16_col":4},"end":{"line_number":594,"utf16_col":5}}},{"name":"setMargin","kind":"method","ident_start":23396,"ident_end":23405,"extent_start":23383,"extent_end":23617,"fully_qualified_name":"Approx::setMargin","ident_utf16":{"start":{"line_number":596,"utf16_col":17},"end":{"line_number":596,"utf16_col":26}},"extent_utf16":{"start":{"line_number":596,"utf16_col":4},"end":{"line_number":601,"utf16_col":5}}},{"name":"setEpsilon","kind":"method","ident_start":23636,"ident_end":23646,"extent_start":23623,"extent_end":23882,"fully_qualified_name":"Approx::setEpsilon","ident_utf16":{"start":{"line_number":603,"utf16_col":17},"end":{"line_number":603,"utf16_col":27}},"extent_utf16":{"start":{"line_number":603,"utf16_col":4},"end":{"line_number":608,"utf16_col":5}}},{"name":"AssertionResultData","kind":"method","ident_start":24279,"ident_end":24298,"extent_start":24258,"extent_end":24445,"fully_qualified_name":"AssertionResultData::AssertionResultData","ident_utf16":{"start":{"line_number":629,"utf16_col":25},"end":{"line_number":629,"utf16_col":44}},"extent_utf16":{"start":{"line_number":629,"utf16_col":4},"end":{"line_number":631,"utf16_col":34}}},{"name":"reconstructExpression","kind":"method","ident_start":24484,"ident_end":24505,"extent_start":24451,"extent_end":24803,"fully_qualified_name":"AssertionResultData::reconstructExpression","ident_utf16":{"start":{"line_number":633,"utf16_col":37},"end":{"line_number":633,"utf16_col":58}},"extent_utf16":{"start":{"line_number":633,"utf16_col":4},"end":{"line_number":643,"utf16_col":5}}},{"name":"AssertionResult","kind":"method","ident_start":24826,"ident_end":24841,"extent_start":24809,"extent_end":24970,"fully_qualified_name":"AssertionResult::AssertionResult","ident_utf16":{"start":{"line_number":645,"utf16_col":21},"end":{"line_number":645,"utf16_col":36}},"extent_utf16":{"start":{"line_number":645,"utf16_col":4},"end":{"line_number":648,"utf16_col":6}}},{"name":"succeeded","kind":"method","ident_start":25026,"ident_end":25035,"extent_start":25004,"extent_end":25106,"fully_qualified_name":"AssertionResult::succeeded","ident_utf16":{"start":{"line_number":651,"utf16_col":26},"end":{"line_number":651,"utf16_col":35}},"extent_utf16":{"start":{"line_number":651,"utf16_col":4},"end":{"line_number":653,"utf16_col":5}}},{"name":"isOk","kind":"method","ident_start":25188,"ident_end":25192,"extent_start":25166,"extent_end":25316,"fully_qualified_name":"AssertionResult::isOk","ident_utf16":{"start":{"line_number":656,"utf16_col":26},"end":{"line_number":656,"utf16_col":30}},"extent_utf16":{"start":{"line_number":656,"utf16_col":4},"end":{"line_number":658,"utf16_col":5}}},{"name":"getResultType","kind":"method","ident_start":25357,"ident_end":25370,"extent_start":25322,"extent_end":25426,"fully_qualified_name":"AssertionResult::getResultType","ident_utf16":{"start":{"line_number":660,"utf16_col":39},"end":{"line_number":660,"utf16_col":52}},"extent_utf16":{"start":{"line_number":660,"utf16_col":4},"end":{"line_number":662,"utf16_col":5}}},{"name":"hasExpression","kind":"method","ident_start":25454,"ident_end":25467,"extent_start":25432,"extent_end":25534,"fully_qualified_name":"AssertionResult::hasExpression","ident_utf16":{"start":{"line_number":664,"utf16_col":26},"end":{"line_number":664,"utf16_col":39}},"extent_utf16":{"start":{"line_number":664,"utf16_col":4},"end":{"line_number":666,"utf16_col":5}}},{"name":"hasMessage","kind":"method","ident_start":25562,"ident_end":25572,"extent_start":25540,"extent_end":25634,"fully_qualified_name":"AssertionResult::hasMessage","ident_utf16":{"start":{"line_number":668,"utf16_col":26},"end":{"line_number":668,"utf16_col":36}},"extent_utf16":{"start":{"line_number":668,"utf16_col":4},"end":{"line_number":670,"utf16_col":5}}},{"name":"getExpression","kind":"method","ident_start":25669,"ident_end":25682,"extent_start":25640,"extent_end":26093,"fully_qualified_name":"AssertionResult::getExpression","ident_utf16":{"start":{"line_number":672,"utf16_col":33},"end":{"line_number":672,"utf16_col":46}},"extent_utf16":{"start":{"line_number":672,"utf16_col":4},"end":{"line_number":683,"utf16_col":5}}},{"name":"getExpressionInMacro","kind":"method","ident_start":26128,"ident_end":26148,"extent_start":26099,"extent_end":26546,"fully_qualified_name":"AssertionResult::getExpressionInMacro","ident_utf16":{"start":{"line_number":685,"utf16_col":33},"end":{"line_number":685,"utf16_col":53}},"extent_utf16":{"start":{"line_number":685,"utf16_col":4},"end":{"line_number":696,"utf16_col":5}}},{"name":"hasExpandedExpression","kind":"method","ident_start":26574,"ident_end":26595,"extent_start":26552,"extent_end":26689,"fully_qualified_name":"AssertionResult::hasExpandedExpression","ident_utf16":{"start":{"line_number":698,"utf16_col":26},"end":{"line_number":698,"utf16_col":47}},"extent_utf16":{"start":{"line_number":698,"utf16_col":4},"end":{"line_number":700,"utf16_col":5}}},{"name":"getExpandedExpression","kind":"method","ident_start":26724,"ident_end":26745,"extent_start":26695,"extent_end":26912,"fully_qualified_name":"AssertionResult::getExpandedExpression","ident_utf16":{"start":{"line_number":702,"utf16_col":33},"end":{"line_number":702,"utf16_col":54}},"extent_utf16":{"start":{"line_number":702,"utf16_col":4},"end":{"line_number":707,"utf16_col":5}}},{"name":"getMessage","kind":"method","ident_start":26945,"ident_end":26955,"extent_start":26918,"extent_end":27008,"fully_qualified_name":"AssertionResult::getMessage","ident_utf16":{"start":{"line_number":709,"utf16_col":31},"end":{"line_number":709,"utf16_col":41}},"extent_utf16":{"start":{"line_number":709,"utf16_col":4},"end":{"line_number":711,"utf16_col":5}}},{"name":"getSourceInfo","kind":"method","ident_start":27045,"ident_end":27058,"extent_start":27013,"extent_end":27106,"fully_qualified_name":"AssertionResult::getSourceInfo","ident_utf16":{"start":{"line_number":712,"utf16_col":36},"end":{"line_number":712,"utf16_col":49}},"extent_utf16":{"start":{"line_number":712,"utf16_col":4},"end":{"line_number":714,"utf16_col":5}}},{"name":"getTestMacroName","kind":"method","ident_start":27139,"ident_end":27155,"extent_start":27112,"extent_end":27204,"fully_qualified_name":"AssertionResult::getTestMacroName","ident_utf16":{"start":{"line_number":716,"utf16_col":31},"end":{"line_number":716,"utf16_col":47}},"extent_utf16":{"start":{"line_number":716,"utf16_col":4},"end":{"line_number":718,"utf16_col":5}}},{"name":"enableBazelEnvSupport","kind":"function","ident_start":27309,"ident_end":27330,"extent_start":27297,"extent_end":27486,"fully_qualified_name":"enableBazelEnvSupport","ident_utf16":{"start":{"line_number":729,"utf16_col":20},"end":{"line_number":729,"utf16_col":41}},"extent_utf16":{"start":{"line_number":729,"utf16_col":8},"end":{"line_number":735,"utf16_col":9}}},{"name":"bazelShardingOptions","kind":"class","ident_start":27503,"ident_end":27523,"extent_start":27496,"extent_end":27623,"fully_qualified_name":"bazelShardingOptions","ident_utf16":{"start":{"line_number":737,"utf16_col":15},"end":{"line_number":737,"utf16_col":35}},"extent_utf16":{"start":{"line_number":737,"utf16_col":8},"end":{"line_number":740,"utf16_col":9}}},{"name":"readBazelShardingOptions","kind":"function","ident_start":27672,"ident_end":27696,"extent_start":27634,"extent_end":29550,"fully_qualified_name":"readBazelShardingOptions","ident_utf16":{"start":{"line_number":742,"utf16_col":46},"end":{"line_number":742,"utf16_col":70}},"extent_utf16":{"start":{"line_number":742,"utf16_col":8},"end":{"line_number":788,"utf16_col":9}}},{"name":"Config","kind":"method","ident_start":29912,"ident_end":29918,"extent_start":29904,"extent_end":32591,"fully_qualified_name":"Config::Config","ident_utf16":{"start":{"line_number":800,"utf16_col":12},"end":{"line_number":800,"utf16_col":18}},"extent_utf16":{"start":{"line_number":800,"utf16_col":4},"end":{"line_number":864,"utf16_col":5}}},{"name":"listTests","kind":"method","ident_start":32645,"ident_end":32654,"extent_start":32632,"extent_end":32700,"fully_qualified_name":"Config::listTests","ident_utf16":{"start":{"line_number":869,"utf16_col":17},"end":{"line_number":869,"utf16_col":26}},"extent_utf16":{"start":{"line_number":869,"utf16_col":4},"end":{"line_number":869,"utf16_col":72}}},{"name":"listTags","kind":"method","ident_start":32718,"ident_end":32726,"extent_start":32705,"extent_end":32772,"fully_qualified_name":"Config::listTags","ident_utf16":{"start":{"line_number":870,"utf16_col":17},"end":{"line_number":870,"utf16_col":25}},"extent_utf16":{"start":{"line_number":870,"utf16_col":4},"end":{"line_number":870,"utf16_col":71}}},{"name":"listReporters","kind":"method","ident_start":32790,"ident_end":32803,"extent_start":32777,"extent_end":32849,"fully_qualified_name":"Config::listReporters","ident_utf16":{"start":{"line_number":871,"utf16_col":17},"end":{"line_number":871,"utf16_col":30}},"extent_utf16":{"start":{"line_number":871,"utf16_col":4},"end":{"line_number":871,"utf16_col":76}}},{"name":"listListeners","kind":"method","ident_start":32867,"ident_end":32880,"extent_start":32854,"extent_end":32926,"fully_qualified_name":"Config::listListeners","ident_utf16":{"start":{"line_number":872,"utf16_col":17},"end":{"line_number":872,"utf16_col":30}},"extent_utf16":{"start":{"line_number":872,"utf16_col":4},"end":{"line_number":872,"utf16_col":76}}},{"name":"hasTestFilters","kind":"method","ident_start":33481,"ident_end":33495,"extent_start":33468,"extent_end":33532,"fully_qualified_name":"Config::hasTestFilters","ident_utf16":{"start":{"line_number":887,"utf16_col":17},"end":{"line_number":887,"utf16_col":31}},"extent_utf16":{"start":{"line_number":887,"utf16_col":4},"end":{"line_number":887,"utf16_col":68}}},{"name":"showHelp","kind":"method","ident_start":33551,"ident_end":33559,"extent_start":33538,"extent_end":33595,"fully_qualified_name":"Config::showHelp","ident_utf16":{"start":{"line_number":889,"utf16_col":17},"end":{"line_number":889,"utf16_col":25}},"extent_utf16":{"start":{"line_number":889,"utf16_col":4},"end":{"line_number":889,"utf16_col":61}}},{"name":"allowThrows","kind":"method","ident_start":33639,"ident_end":33650,"extent_start":33626,"extent_end":33704,"fully_qualified_name":"Config::allowThrows","ident_utf16":{"start":{"line_number":892,"utf16_col":17},"end":{"line_number":892,"utf16_col":28}},"extent_utf16":{"start":{"line_number":892,"utf16_col":4},"end":{"line_number":892,"utf16_col":82}}},{"name":"name","kind":"method","ident_start":33727,"ident_end":33731,"extent_start":33709,"extent_end":33806,"fully_qualified_name":"Config::name","ident_utf16":{"start":{"line_number":893,"utf16_col":22},"end":{"line_number":893,"utf16_col":26}},"extent_utf16":{"start":{"line_number":893,"utf16_col":4},"end":{"line_number":893,"utf16_col":101}}},{"name":"includeSuccessfulResults","kind":"method","ident_start":33824,"ident_end":33848,"extent_start":33811,"extent_end":33900,"fully_qualified_name":"Config::includeSuccessfulResults","ident_utf16":{"start":{"line_number":894,"utf16_col":17},"end":{"line_number":894,"utf16_col":41}},"extent_utf16":{"start":{"line_number":894,"utf16_col":4},"end":{"line_number":894,"utf16_col":93}}},{"name":"warnAboutMissingAssertions","kind":"method","ident_start":33918,"ident_end":33944,"extent_start":33905,"extent_end":34024,"fully_qualified_name":"Config::warnAboutMissingAssertions","ident_utf16":{"start":{"line_number":895,"utf16_col":17},"end":{"line_number":895,"utf16_col":43}},"extent_utf16":{"start":{"line_number":895,"utf16_col":4},"end":{"line_number":897,"utf16_col":5}}},{"name":"warnAboutUnmatchedTestSpecs","kind":"method","ident_start":34042,"ident_end":34069,"extent_start":34029,"extent_end":34154,"fully_qualified_name":"Config::warnAboutUnmatchedTestSpecs","ident_utf16":{"start":{"line_number":898,"utf16_col":17},"end":{"line_number":898,"utf16_col":44}},"extent_utf16":{"start":{"line_number":898,"utf16_col":4},"end":{"line_number":900,"utf16_col":5}}},{"name":"zeroTestsCountAsSuccess","kind":"method","ident_start":34172,"ident_end":34195,"extent_start":34159,"extent_end":34243,"fully_qualified_name":"Config::zeroTestsCountAsSuccess","ident_utf16":{"start":{"line_number":901,"utf16_col":17},"end":{"line_number":901,"utf16_col":40}},"extent_utf16":{"start":{"line_number":901,"utf16_col":4},"end":{"line_number":901,"utf16_col":88}}},{"name":"showDurations","kind":"method","ident_start":34270,"ident_end":34283,"extent_start":34248,"extent_end":34331,"fully_qualified_name":"Config::showDurations","ident_utf16":{"start":{"line_number":902,"utf16_col":26},"end":{"line_number":902,"utf16_col":39}},"extent_utf16":{"start":{"line_number":902,"utf16_col":4},"end":{"line_number":902,"utf16_col":87}}},{"name":"minDuration","kind":"method","ident_start":34351,"ident_end":34362,"extent_start":34336,"extent_end":34417,"fully_qualified_name":"Config::minDuration","ident_utf16":{"start":{"line_number":903,"utf16_col":19},"end":{"line_number":903,"utf16_col":30}},"extent_utf16":{"start":{"line_number":903,"utf16_col":4},"end":{"line_number":903,"utf16_col":85}}},{"name":"runOrder","kind":"method","ident_start":34443,"ident_end":34451,"extent_start":34422,"extent_end":34500,"fully_qualified_name":"Config::runOrder","ident_utf16":{"start":{"line_number":904,"utf16_col":25},"end":{"line_number":904,"utf16_col":33}},"extent_utf16":{"start":{"line_number":904,"utf16_col":4},"end":{"line_number":904,"utf16_col":82}}},{"name":"rngSeed","kind":"method","ident_start":34522,"ident_end":34529,"extent_start":34505,"extent_end":34582,"fully_qualified_name":"Config::rngSeed","ident_utf16":{"start":{"line_number":905,"utf16_col":21},"end":{"line_number":905,"utf16_col":28}},"extent_utf16":{"start":{"line_number":905,"utf16_col":4},"end":{"line_number":905,"utf16_col":81}}},{"name":"shardCount","kind":"method","ident_start":34608,"ident_end":34618,"extent_start":34587,"extent_end":34667,"fully_qualified_name":"Config::shardCount","ident_utf16":{"start":{"line_number":906,"utf16_col":25},"end":{"line_number":906,"utf16_col":35}},"extent_utf16":{"start":{"line_number":906,"utf16_col":4},"end":{"line_number":906,"utf16_col":84}}},{"name":"shardIndex","kind":"method","ident_start":34693,"ident_end":34703,"extent_start":34672,"extent_end":34752,"fully_qualified_name":"Config::shardIndex","ident_utf16":{"start":{"line_number":907,"utf16_col":25},"end":{"line_number":907,"utf16_col":35}},"extent_utf16":{"start":{"line_number":907,"utf16_col":4},"end":{"line_number":907,"utf16_col":84}}},{"name":"defaultColourMode","kind":"method","ident_start":34776,"ident_end":34793,"extent_start":34757,"extent_end":34844,"fully_qualified_name":"Config::defaultColourMode","ident_utf16":{"start":{"line_number":908,"utf16_col":23},"end":{"line_number":908,"utf16_col":40}},"extent_utf16":{"start":{"line_number":908,"utf16_col":4},"end":{"line_number":908,"utf16_col":91}}},{"name":"shouldDebugBreak","kind":"method","ident_start":34862,"ident_end":34878,"extent_start":34849,"extent_end":34935,"fully_qualified_name":"Config::shouldDebugBreak","ident_utf16":{"start":{"line_number":909,"utf16_col":17},"end":{"line_number":909,"utf16_col":33}},"extent_utf16":{"start":{"line_number":909,"utf16_col":4},"end":{"line_number":909,"utf16_col":90}}},{"name":"abortAfter","kind":"method","ident_start":34952,"ident_end":34962,"extent_start":34940,"extent_end":35020,"fully_qualified_name":"Config::abortAfter","ident_utf16":{"start":{"line_number":910,"utf16_col":16},"end":{"line_number":910,"utf16_col":26}},"extent_utf16":{"start":{"line_number":910,"utf16_col":4},"end":{"line_number":910,"utf16_col":84}}},{"name":"showInvisibles","kind":"method","ident_start":35038,"ident_end":35052,"extent_start":35025,"extent_end":35109,"fully_qualified_name":"Config::showInvisibles","ident_utf16":{"start":{"line_number":911,"utf16_col":17},"end":{"line_number":911,"utf16_col":31}},"extent_utf16":{"start":{"line_number":911,"utf16_col":4},"end":{"line_number":911,"utf16_col":88}}},{"name":"verbosity","kind":"method","ident_start":35132,"ident_end":35141,"extent_start":35114,"extent_end":35193,"fully_qualified_name":"Config::verbosity","ident_utf16":{"start":{"line_number":912,"utf16_col":22},"end":{"line_number":912,"utf16_col":31}},"extent_utf16":{"start":{"line_number":912,"utf16_col":4},"end":{"line_number":912,"utf16_col":83}}},{"name":"skipBenchmarks","kind":"method","ident_start":35212,"ident_end":35226,"extent_start":35199,"extent_end":35294,"fully_qualified_name":"Config::skipBenchmarks","ident_utf16":{"start":{"line_number":914,"utf16_col":17},"end":{"line_number":914,"utf16_col":31}},"extent_utf16":{"start":{"line_number":914,"utf16_col":4},"end":{"line_number":914,"utf16_col":99}}},{"name":"benchmarkNoAnalysis","kind":"method","ident_start":35312,"ident_end":35331,"extent_start":35299,"extent_end":35399,"fully_qualified_name":"Config::benchmarkNoAnalysis","ident_utf16":{"start":{"line_number":915,"utf16_col":17},"end":{"line_number":915,"utf16_col":36}},"extent_utf16":{"start":{"line_number":915,"utf16_col":4},"end":{"line_number":915,"utf16_col":104}}},{"name":"benchmarkSamples","kind":"method","ident_start":35425,"ident_end":35441,"extent_start":35404,"extent_end":35501,"fully_qualified_name":"Config::benchmarkSamples","ident_utf16":{"start":{"line_number":916,"utf16_col":25},"end":{"line_number":916,"utf16_col":41}},"extent_utf16":{"start":{"line_number":916,"utf16_col":4},"end":{"line_number":916,"utf16_col":101}}},{"name":"benchmarkConfidenceInterval","kind":"method","ident_start":35521,"ident_end":35548,"extent_start":35506,"extent_end":35614,"fully_qualified_name":"Config::benchmarkConfidenceInterval","ident_utf16":{"start":{"line_number":917,"utf16_col":19},"end":{"line_number":917,"utf16_col":46}},"extent_utf16":{"start":{"line_number":917,"utf16_col":4},"end":{"line_number":917,"utf16_col":112}}},{"name":"benchmarkResamples","kind":"method","ident_start":35640,"ident_end":35658,"extent_start":35619,"extent_end":35718,"fully_qualified_name":"Config::benchmarkResamples","ident_utf16":{"start":{"line_number":918,"utf16_col":25},"end":{"line_number":918,"utf16_col":43}},"extent_utf16":{"start":{"line_number":918,"utf16_col":4},"end":{"line_number":918,"utf16_col":103}}},{"name":"benchmarkWarmupTime","kind":"method","ident_start":35757,"ident_end":35776,"extent_start":35723,"extent_end":35850,"fully_qualified_name":"Config::benchmarkWarmupTime","ident_utf16":{"start":{"line_number":919,"utf16_col":38},"end":{"line_number":919,"utf16_col":57}},"extent_utf16":{"start":{"line_number":919,"utf16_col":4},"end":{"line_number":919,"utf16_col":131}}},{"name":"readBazelEnvVars","kind":"method","ident_start":35869,"ident_end":35885,"extent_start":35856,"extent_end":37281,"fully_qualified_name":"Config::readBazelEnvVars","ident_utf16":{"start":{"line_number":921,"utf16_col":17},"end":{"line_number":921,"utf16_col":33}},"extent_utf16":{"start":{"line_number":921,"utf16_col":4},"end":{"line_number":952,"utf16_col":5}}},{"name":"getSeed","kind":"function","ident_start":37349,"ident_end":37356,"extent_start":37335,"extent_end":37425,"fully_qualified_name":"getSeed","ident_utf16":{"start":{"line_number":961,"utf16_col":18},"end":{"line_number":961,"utf16_col":25}},"extent_utf16":{"start":{"line_number":961,"utf16_col":4},"end":{"line_number":963,"utf16_col":5}}},{"name":"ScopedMessage","kind":"method","ident_start":37589,"ident_end":37602,"extent_start":37574,"extent_end":37789,"fully_qualified_name":"ScopedMessage::ScopedMessage","ident_utf16":{"start":{"line_number":976,"utf16_col":19},"end":{"line_number":976,"utf16_col":32}},"extent_utf16":{"start":{"line_number":976,"utf16_col":4},"end":{"line_number":980,"utf16_col":5}}},{"name":"ScopedMessage","kind":"method","ident_start":37810,"ident_end":37823,"extent_start":37795,"extent_end":37935,"fully_qualified_name":"ScopedMessage::ScopedMessage","ident_utf16":{"start":{"line_number":982,"utf16_col":19},"end":{"line_number":982,"utf16_col":32}},"extent_utf16":{"start":{"line_number":982,"utf16_col":4},"end":{"line_number":985,"utf16_col":5}}},{"name":"Capturer","kind":"method","ident_start":38115,"ident_end":38123,"extent_start":38105,"extent_end":40504,"fully_qualified_name":"Capturer::Capturer","ident_utf16":{"start":{"line_number":994,"utf16_col":14},"end":{"line_number":994,"utf16_col":22}},"extent_utf16":{"start":{"line_number":994,"utf16_col":4},"end":{"line_number":1056,"utf16_col":5}}},{"name":"captureValue","kind":"method","ident_start":40784,"ident_end":40796,"extent_start":40769,"extent_end":41021,"fully_qualified_name":"Capturer::captureValue","ident_utf16":{"start":{"line_number":1065,"utf16_col":19},"end":{"line_number":1065,"utf16_col":31}},"extent_utf16":{"start":{"line_number":1065,"utf16_col":4},"end":{"line_number":1070,"utf16_col":5}}},{"name":"RegistryHub","kind":"class","ident_start":41124,"ident_end":41135,"extent_start":41118,"extent_end":43961,"fully_qualified_name":"RegistryHub","ident_utf16":{"start":{"line_number":1083,"utf16_col":14},"end":{"line_number":1083,"utf16_col":25}},"extent_utf16":{"start":{"line_number":1083,"utf16_col":8},"end":{"line_number":1139,"utf16_col":9}}},{"name":"RegistryHub","kind":"function","ident_start":41318,"ident_end":41329,"extent_start":41318,"extent_end":41342,"fully_qualified_name":"RegistryHub::RegistryHub","ident_utf16":{"start":{"line_number":1088,"utf16_col":12},"end":{"line_number":1088,"utf16_col":23}},"extent_utf16":{"start":{"line_number":1088,"utf16_col":12},"end":{"line_number":1088,"utf16_col":36}}},{"name":"registerReporter","kind":"function","ident_start":42113,"ident_end":42129,"extent_start":42108,"extent_end":42292,"fully_qualified_name":"RegistryHub::registerReporter","ident_utf16":{"start":{"line_number":1106,"utf16_col":17},"end":{"line_number":1106,"utf16_col":33}},"extent_utf16":{"start":{"line_number":1106,"utf16_col":12},"end":{"line_number":1108,"utf16_col":13}}},{"name":"registerListener","kind":"function","ident_start":42310,"ident_end":42326,"extent_start":42305,"extent_end":42479,"fully_qualified_name":"RegistryHub::registerListener","ident_utf16":{"start":{"line_number":1109,"utf16_col":17},"end":{"line_number":1109,"utf16_col":33}},"extent_utf16":{"start":{"line_number":1109,"utf16_col":12},"end":{"line_number":1111,"utf16_col":13}}},{"name":"registerTest","kind":"function","ident_start":42497,"ident_end":42509,"extent_start":42492,"extent_end":42719,"fully_qualified_name":"RegistryHub::registerTest","ident_utf16":{"start":{"line_number":1112,"utf16_col":17},"end":{"line_number":1112,"utf16_col":29}},"extent_utf16":{"start":{"line_number":1112,"utf16_col":12},"end":{"line_number":1114,"utf16_col":13}}},{"name":"registerTranslator","kind":"function","ident_start":42737,"ident_end":42755,"extent_start":42732,"extent_end":42929,"fully_qualified_name":"RegistryHub::registerTranslator","ident_utf16":{"start":{"line_number":1115,"utf16_col":17},"end":{"line_number":1115,"utf16_col":35}},"extent_utf16":{"start":{"line_number":1115,"utf16_col":12},"end":{"line_number":1117,"utf16_col":13}}},{"name":"registerTagAlias","kind":"function","ident_start":42947,"ident_end":42963,"extent_start":42942,"extent_end":43136,"fully_qualified_name":"RegistryHub::registerTagAlias","ident_utf16":{"start":{"line_number":1118,"utf16_col":17},"end":{"line_number":1118,"utf16_col":33}},"extent_utf16":{"start":{"line_number":1118,"utf16_col":12},"end":{"line_number":1120,"utf16_col":13}}},{"name":"registerStartupException","kind":"function","ident_start":43154,"ident_end":43178,"extent_start":43149,"extent_end":43459,"fully_qualified_name":"RegistryHub::registerStartupException","ident_utf16":{"start":{"line_number":1121,"utf16_col":17},"end":{"line_number":1121,"utf16_col":41}},"extent_utf16":{"start":{"line_number":1121,"utf16_col":12},"end":{"line_number":1127,"utf16_col":13}}},{"name":"cleanUp","kind":"function","ident_start":44273,"ident_end":44280,"extent_start":44268,"extent_end":44345,"fully_qualified_name":"cleanUp","ident_utf16":{"start":{"line_number":1150,"utf16_col":9},"end":{"line_number":1150,"utf16_col":16}},"extent_utf16":{"start":{"line_number":1150,"utf16_col":4},"end":{"line_number":1153,"utf16_col":5}}},{"name":"translateActiveException","kind":"function","ident_start":44362,"ident_end":44386,"extent_start":44350,"extent_end":44489,"fully_qualified_name":"translateActiveException","ident_utf16":{"start":{"line_number":1154,"utf16_col":16},"end":{"line_number":1154,"utf16_col":40}},"extent_utf16":{"start":{"line_number":1154,"utf16_col":4},"end":{"line_number":1156,"utf16_col":5}}},{"name":"createReporter","kind":"function","ident_start":45022,"ident_end":45036,"extent_start":45004,"extent_end":45352,"fully_qualified_name":"createReporter","ident_utf16":{"start":{"line_number":1180,"utf16_col":26},"end":{"line_number":1180,"utf16_col":40}},"extent_utf16":{"start":{"line_number":1180,"utf16_col":8},"end":{"line_number":1185,"utf16_col":9}}},{"name":"prepareReporters","kind":"function","ident_start":45380,"ident_end":45396,"extent_start":45362,"extent_end":46746,"fully_qualified_name":"prepareReporters","ident_utf16":{"start":{"line_number":1187,"utf16_col":26},"end":{"line_number":1187,"utf16_col":42}},"extent_utf16":{"start":{"line_number":1187,"utf16_col":8},"end":{"line_number":1216,"utf16_col":9}}},{"name":"TestGroup","kind":"class","ident_start":46762,"ident_end":46771,"extent_start":46756,"extent_end":49105,"fully_qualified_name":"TestGroup","ident_utf16":{"start":{"line_number":1218,"utf16_col":14},"end":{"line_number":1218,"utf16_col":23}},"extent_utf16":{"start":{"line_number":1218,"utf16_col":8},"end":{"line_number":1279,"utf16_col":9}}},{"name":"TestGroup","kind":"function","ident_start":46811,"ident_end":46820,"extent_start":46802,"extent_end":48057,"fully_qualified_name":"TestGroup::TestGroup","ident_utf16":{"start":{"line_number":1220,"utf16_col":21},"end":{"line_number":1220,"utf16_col":30}},"extent_utf16":{"start":{"line_number":1220,"utf16_col":12},"end":{"line_number":1246,"utf16_col":13}}},{"name":"execute","kind":"function","ident_start":48078,"ident_end":48085,"extent_start":48071,"extent_end":48716,"fully_qualified_name":"TestGroup::execute","ident_utf16":{"start":{"line_number":1248,"utf16_col":19},"end":{"line_number":1248,"utf16_col":26}},"extent_utf16":{"start":{"line_number":1248,"utf16_col":12},"end":{"line_number":1265,"utf16_col":13}}},{"name":"hadUnmatchedTestSpecs","kind":"function","ident_start":48735,"ident_end":48756,"extent_start":48730,"extent_end":48825,"fully_qualified_name":"TestGroup::hadUnmatchedTestSpecs","ident_utf16":{"start":{"line_number":1267,"utf16_col":17},"end":{"line_number":1267,"utf16_col":38}},"extent_utf16":{"start":{"line_number":1267,"utf16_col":12},"end":{"line_number":1269,"utf16_col":13}}},{"name":"applyFilenamesAsTags","kind":"function","ident_start":49121,"ident_end":49141,"extent_start":49116,"extent_end":49309,"fully_qualified_name":"applyFilenamesAsTags","ident_utf16":{"start":{"line_number":1281,"utf16_col":13},"end":{"line_number":1281,"utf16_col":33}},"extent_utf16":{"start":{"line_number":1281,"utf16_col":8},"end":{"line_number":1285,"utf16_col":9}}},{"name":"Session","kind":"method","ident_start":49349,"ident_end":49356,"extent_start":49340,"extent_end":49635,"fully_qualified_name":"Session::Session","ident_utf16":{"start":{"line_number":1289,"utf16_col":13},"end":{"line_number":1289,"utf16_col":20}},"extent_utf16":{"start":{"line_number":1289,"utf16_col":4},"end":{"line_number":1293,"utf16_col":83}}},{"name":"showHelp","kind":"method","ident_start":50892,"ident_end":50900,"extent_start":50878,"extent_end":51123,"fully_qualified_name":"Session::showHelp","ident_utf16":{"start":{"line_number":1327,"utf16_col":18},"end":{"line_number":1327,"utf16_col":26}},"extent_utf16":{"start":{"line_number":1327,"utf16_col":4},"end":{"line_number":1332,"utf16_col":5}}},{"name":"libIdentify","kind":"method","ident_start":51142,"ident_end":51153,"extent_start":51128,"extent_end":51546,"fully_qualified_name":"Session::libIdentify","ident_utf16":{"start":{"line_number":1333,"utf16_col":18},"end":{"line_number":1333,"utf16_col":29}},"extent_utf16":{"start":{"line_number":1333,"utf16_col":4},"end":{"line_number":1339,"utf16_col":5}}},{"name":"applyCommandLine","kind":"method","ident_start":51565,"ident_end":51581,"extent_start":51552,"extent_end":52558,"fully_qualified_name":"Session::applyCommandLine","ident_utf16":{"start":{"line_number":1341,"utf16_col":17},"end":{"line_number":1341,"utf16_col":33}},"extent_utf16":{"start":{"line_number":1341,"utf16_col":4},"end":{"line_number":1368,"utf16_col":5}}},{"name":"applyCommandLine","kind":"method","ident_start":52648,"ident_end":52664,"extent_start":52635,"extent_end":53268,"fully_qualified_name":"Session::applyCommandLine","ident_utf16":{"start":{"line_number":1371,"utf16_col":17},"end":{"line_number":1371,"utf16_col":33}},"extent_utf16":{"start":{"line_number":1371,"utf16_col":4},"end":{"line_number":1391,"utf16_col":5}}},{"name":"useConfigData","kind":"method","ident_start":53295,"ident_end":53308,"extent_start":53281,"extent_end":53409,"fully_qualified_name":"Session::useConfigData","ident_utf16":{"start":{"line_number":1394,"utf16_col":18},"end":{"line_number":1394,"utf16_col":31}},"extent_utf16":{"start":{"line_number":1394,"utf16_col":4},"end":{"line_number":1397,"utf16_col":5}}},{"name":"run","kind":"method","ident_start":53428,"ident_end":53431,"extent_start":53415,"extent_end":54003,"fully_qualified_name":"Session::run","ident_utf16":{"start":{"line_number":1399,"utf16_col":17},"end":{"line_number":1399,"utf16_col":20}},"extent_utf16":{"start":{"line_number":1399,"utf16_col":4},"end":{"line_number":1410,"utf16_col":5}}},{"name":"cli","kind":"method","ident_start":54099,"ident_end":54102,"extent_start":54085,"extent_end":54171,"fully_qualified_name":"Session::cli","ident_utf16":{"start":{"line_number":1415,"utf16_col":18},"end":{"line_number":1415,"utf16_col":21}},"extent_utf16":{"start":{"line_number":1415,"utf16_col":4},"end":{"line_number":1417,"utf16_col":5}}},{"name":"runInternal","kind":"method","ident_start":54421,"ident_end":54432,"extent_start":54408,"extent_end":56790,"fully_qualified_name":"Session::runInternal","ident_utf16":{"start":{"line_number":1427,"utf16_col":17},"end":{"line_number":1427,"utf16_col":28}},"extent_utf16":{"start":{"line_number":1427,"utf16_col":4},"end":{"line_number":1494,"utf16_col":9}}},{"name":"catch","kind":"function","ident_start":56845,"ident_end":56850,"extent_start":56845,"extent_end":56991,"fully_qualified_name":"catch","ident_utf16":{"start":{"line_number":1496,"utf16_col":8},"end":{"line_number":1496,"utf16_col":13}},"extent_utf16":{"start":{"line_number":1496,"utf16_col":8},"end":{"line_number":1499,"utf16_col":9}}},{"name":"RegistrarForTagAliases","kind":"method","ident_start":57082,"ident_end":57104,"extent_start":57058,"extent_end":57280,"fully_qualified_name":"RegistrarForTagAliases::RegistrarForTagAliases","ident_utf16":{"start":{"line_number":1510,"utf16_col":28},"end":{"line_number":1510,"utf16_col":50}},"extent_utf16":{"start":{"line_number":1510,"utf16_col":4},"end":{"line_number":1513,"utf16_col":9}}},{"name":"applies","kind":"function","ident_start":58673,"ident_end":58680,"extent_start":58658,"extent_end":58933,"fully_qualified_name":"applies","ident_utf16":{"start":{"line_number":1553,"utf16_col":23},"end":{"line_number":1553,"utf16_col":30}},"extent_utf16":{"start":{"line_number":1553,"utf16_col":8},"end":{"line_number":1557,"utf16_col":9}}},{"name":"parseSpecialTag","kind":"function","ident_start":58962,"ident_end":58977,"extent_start":58943,"extent_end":59700,"fully_qualified_name":"parseSpecialTag","ident_utf16":{"start":{"line_number":1559,"utf16_col":27},"end":{"line_number":1559,"utf16_col":42}},"extent_utf16":{"start":{"line_number":1559,"utf16_col":8},"end":{"line_number":1574,"utf16_col":9}}},{"name":"isReservedTag","kind":"function","ident_start":59714,"ident_end":59727,"extent_start":59709,"extent_end":59932,"fully_qualified_name":"isReservedTag","ident_utf16":{"start":{"line_number":1575,"utf16_col":13},"end":{"line_number":1575,"utf16_col":26}},"extent_utf16":{"start":{"line_number":1575,"utf16_col":8},"end":{"line_number":1579,"utf16_col":9}}},{"name":"enforceNotReservedTag","kind":"function","ident_start":59946,"ident_end":59967,"extent_start":59941,"extent_end":60289,"fully_qualified_name":"enforceNotReservedTag","ident_utf16":{"start":{"line_number":1580,"utf16_col":13},"end":{"line_number":1580,"utf16_col":34}},"extent_utf16":{"start":{"line_number":1580,"utf16_col":8},"end":{"line_number":1585,"utf16_col":9}}},{"name":"makeDefaultName","kind":"function","ident_start":60311,"ident_end":60326,"extent_start":60299,"extent_end":60450,"fully_qualified_name":"makeDefaultName","ident_utf16":{"start":{"line_number":1587,"utf16_col":20},"end":{"line_number":1587,"utf16_col":35}},"extent_utf16":{"start":{"line_number":1587,"utf16_col":8},"end":{"line_number":1590,"utf16_col":9}}},{"name":"extractFilenamePart","kind":"function","ident_start":60480,"ident_end":60499,"extent_start":60460,"extent_end":61097,"fully_qualified_name":"extractFilenamePart","ident_utf16":{"start":{"line_number":1592,"utf16_col":28},"end":{"line_number":1592,"utf16_col":47}},"extent_utf16":{"start":{"line_number":1592,"utf16_col":8},"end":{"line_number":1607,"utf16_col":9}}},{"name":"sizeOfExtraTags","kind":"function","ident_start":61195,"ident_end":61210,"extent_start":61178,"extent_end":61391,"fully_qualified_name":"sizeOfExtraTags","ident_utf16":{"start":{"line_number":1610,"utf16_col":25},"end":{"line_number":1610,"utf16_col":40}},"extent_utf16":{"start":{"line_number":1610,"utf16_col":8},"end":{"line_number":1614,"utf16_col":9}}},{"name":"makeTestCaseInfo","kind":"function","ident_start":61779,"ident_end":61795,"extent_start":61738,"extent_end":62027,"fully_qualified_name":"makeTestCaseInfo","ident_utf16":{"start":{"line_number":1627,"utf16_col":8},"end":{"line_number":1627,"utf16_col":24}},"extent_utf16":{"start":{"line_number":1626,"utf16_col":4},"end":{"line_number":1631,"utf16_col":5}}},{"name":"TestCaseInfo","kind":"method","ident_start":62047,"ident_end":62059,"extent_start":62033,"extent_end":65347,"fully_qualified_name":"TestCaseInfo::TestCaseInfo","ident_utf16":{"start":{"line_number":1633,"utf16_col":18},"end":{"line_number":1633,"utf16_col":30}},"extent_utf16":{"start":{"line_number":1633,"utf16_col":4},"end":{"line_number":1709,"utf16_col":5}}},{"name":"isHidden","kind":"method","ident_start":65372,"ident_end":65380,"extent_start":65353,"extent_end":65465,"fully_qualified_name":"TestCaseInfo::isHidden","ident_utf16":{"start":{"line_number":1711,"utf16_col":23},"end":{"line_number":1711,"utf16_col":31}},"extent_utf16":{"start":{"line_number":1711,"utf16_col":4},"end":{"line_number":1713,"utf16_col":5}}},{"name":"throws","kind":"method","ident_start":65489,"ident_end":65495,"extent_start":65470,"extent_end":65578,"fully_qualified_name":"TestCaseInfo::throws","ident_utf16":{"start":{"line_number":1714,"utf16_col":23},"end":{"line_number":1714,"utf16_col":29}},"extent_utf16":{"start":{"line_number":1714,"utf16_col":4},"end":{"line_number":1716,"utf16_col":5}}},{"name":"okToFail","kind":"method","ident_start":65602,"ident_end":65610,"extent_start":65583,"extent_end":65730,"fully_qualified_name":"TestCaseInfo::okToFail","ident_utf16":{"start":{"line_number":1717,"utf16_col":23},"end":{"line_number":1717,"utf16_col":31}},"extent_utf16":{"start":{"line_number":1717,"utf16_col":4},"end":{"line_number":1719,"utf16_col":5}}},{"name":"expectedToFail","kind":"method","ident_start":65754,"ident_end":65768,"extent_start":65735,"extent_end":65857,"fully_qualified_name":"TestCaseInfo::expectedToFail","ident_utf16":{"start":{"line_number":1720,"utf16_col":23},"end":{"line_number":1720,"utf16_col":37}},"extent_utf16":{"start":{"line_number":1720,"utf16_col":4},"end":{"line_number":1722,"utf16_col":5}}},{"name":"addFilenameTag","kind":"method","ident_start":65882,"ident_end":65896,"extent_start":65863,"extent_end":66034,"fully_qualified_name":"TestCaseInfo::addFilenameTag","ident_utf16":{"start":{"line_number":1724,"utf16_col":23},"end":{"line_number":1724,"utf16_col":37}},"extent_utf16":{"start":{"line_number":1724,"utf16_col":4},"end":{"line_number":1728,"utf16_col":5}}},{"name":"tagsAsString","kind":"method","ident_start":66066,"ident_end":66078,"extent_start":66040,"extent_end":66493,"fully_qualified_name":"TestCaseInfo::tagsAsString","ident_utf16":{"start":{"line_number":1730,"utf16_col":30},"end":{"line_number":1730,"utf16_col":42}},"extent_utf16":{"start":{"line_number":1730,"utf16_col":4},"end":{"line_number":1745,"utf16_col":5}}},{"name":"internalAppendTag","kind":"method","ident_start":66518,"ident_end":66535,"extent_start":66499,"extent_end":66855,"fully_qualified_name":"TestCaseInfo::internalAppendTag","ident_utf16":{"start":{"line_number":1747,"utf16_col":23},"end":{"line_number":1747,"utf16_col":40}},"extent_utf16":{"start":{"line_number":1747,"utf16_col":4},"end":{"line_number":1754,"utf16_col":5}}},{"name":"extractFilterName","kind":"method","ident_start":69759,"ident_end":69776,"extent_start":69737,"extent_end":69901,"fully_qualified_name":"TestSpec::extractFilterName","ident_utf16":{"start":{"line_number":1857,"utf16_col":26},"end":{"line_number":1857,"utf16_col":43}},"extent_utf16":{"start":{"line_number":1857,"utf16_col":4},"end":{"line_number":1861,"utf16_col":5}}},{"name":"hasFilters","kind":"method","ident_start":69922,"ident_end":69932,"extent_start":69907,"extent_end":69983,"fully_qualified_name":"TestSpec::hasFilters","ident_utf16":{"start":{"line_number":1863,"utf16_col":19},"end":{"line_number":1863,"utf16_col":29}},"extent_utf16":{"start":{"line_number":1863,"utf16_col":4},"end":{"line_number":1865,"utf16_col":5}}},{"name":"matches","kind":"method","ident_start":70004,"ident_end":70011,"extent_start":69989,"extent_end":70180,"fully_qualified_name":"TestSpec::matches","ident_utf16":{"start":{"line_number":1867,"utf16_col":19},"end":{"line_number":1867,"utf16_col":26}},"extent_utf16":{"start":{"line_number":1867,"utf16_col":4},"end":{"line_number":1869,"utf16_col":5}}},{"name":"matchesByFilter","kind":"method","ident_start":70214,"ident_end":70229,"extent_start":70186,"extent_end":70862,"fully_qualified_name":"TestSpec::matchesByFilter","ident_utf16":{"start":{"line_number":1871,"utf16_col":32},"end":{"line_number":1871,"utf16_col":47}},"extent_utf16":{"start":{"line_number":1871,"utf16_col":4},"end":{"line_number":1884,"utf16_col":5}}},{"name":"serializeTo","kind":"method","ident_start":70992,"ident_end":71003,"extent_start":70977,"extent_end":71248,"fully_qualified_name":"TestSpec::serializeTo","ident_utf16":{"start":{"line_number":1890,"utf16_col":19},"end":{"line_number":1890,"utf16_col":30}},"extent_utf16":{"start":{"line_number":1890,"utf16_col":4},"end":{"line_number":1899,"utf16_col":5}}},{"name":"getCurrentNanosecondsSinceEpoch","kind":"function","ident_start":71329,"ident_end":71360,"extent_start":71317,"extent_end":71520,"fully_qualified_name":"getCurrentNanosecondsSinceEpoch","ident_utf16":{"start":{"line_number":1910,"utf16_col":20},"end":{"line_number":1910,"utf16_col":51}},"extent_utf16":{"start":{"line_number":1910,"utf16_col":8},"end":{"line_number":1912,"utf16_col":9}}},{"name":"start","kind":"method","ident_start":71569,"ident_end":71574,"extent_start":71557,"extent_end":71642,"fully_qualified_name":"Timer::start","ident_utf16":{"start":{"line_number":1915,"utf16_col":16},"end":{"line_number":1915,"utf16_col":21}},"extent_utf16":{"start":{"line_number":1915,"utf16_col":4},"end":{"line_number":1917,"utf16_col":5}}},{"name":"getElapsedNanoseconds","kind":"method","ident_start":71659,"ident_end":71680,"extent_start":71647,"extent_end":71774,"fully_qualified_name":"Timer::getElapsedNanoseconds","ident_utf16":{"start":{"line_number":1918,"utf16_col":16},"end":{"line_number":1918,"utf16_col":37}},"extent_utf16":{"start":{"line_number":1918,"utf16_col":4},"end":{"line_number":1920,"utf16_col":5}}},{"name":"getElapsedMicroseconds","kind":"method","ident_start":71791,"ident_end":71813,"extent_start":71779,"extent_end":71886,"fully_qualified_name":"Timer::getElapsedMicroseconds","ident_utf16":{"start":{"line_number":1921,"utf16_col":16},"end":{"line_number":1921,"utf16_col":38}},"extent_utf16":{"start":{"line_number":1921,"utf16_col":4},"end":{"line_number":1923,"utf16_col":5}}},{"name":"getElapsedMilliseconds","kind":"method","ident_start":71903,"ident_end":71925,"extent_start":71891,"extent_end":72030,"fully_qualified_name":"Timer::getElapsedMilliseconds","ident_utf16":{"start":{"line_number":1924,"utf16_col":16},"end":{"line_number":1924,"utf16_col":38}},"extent_utf16":{"start":{"line_number":1924,"utf16_col":4},"end":{"line_number":1926,"utf16_col":5}}},{"name":"getElapsedSeconds","kind":"method","ident_start":72047,"ident_end":72064,"extent_start":72035,"extent_end":72162,"fully_qualified_name":"Timer::getElapsedSeconds","ident_utf16":{"start":{"line_number":1927,"utf16_col":16},"end":{"line_number":1927,"utf16_col":33}},"extent_utf16":{"start":{"line_number":1927,"utf16_col":4},"end":{"line_number":1929,"utf16_col":5}}},{"name":"Endianness","kind":"class","ident_start":72336,"ident_end":72346,"extent_start":72329,"extent_end":72762,"fully_qualified_name":"Endianness","ident_utf16":{"start":{"line_number":1947,"utf16_col":15},"end":{"line_number":1947,"utf16_col":25}},"extent_utf16":{"start":{"line_number":1947,"utf16_col":8},"end":{"line_number":1960,"utf16_col":9}}},{"name":"Arch","kind":"type","ident_start":72366,"ident_end":72370,"extent_start":72361,"extent_end":72440,"fully_qualified_name":"Endianness::Arch","ident_utf16":{"start":{"line_number":1948,"utf16_col":17},"end":{"line_number":1948,"utf16_col":21}},"extent_utf16":{"start":{"line_number":1948,"utf16_col":12},"end":{"line_number":1951,"utf16_col":13}}},{"name":"which","kind":"function","ident_start":72467,"ident_end":72472,"extent_start":72455,"extent_end":72752,"fully_qualified_name":"Endianness::which","ident_utf16":{"start":{"line_number":1953,"utf16_col":24},"end":{"line_number":1953,"utf16_col":29}},"extent_utf16":{"start":{"line_number":1953,"utf16_col":12},"end":{"line_number":1959,"utf16_col":13}}},{"name":"fpToString","kind":"function","ident_start":72814,"ident_end":72824,"extent_start":72802,"extent_end":73375,"fully_qualified_name":"fpToString","ident_utf16":{"start":{"line_number":1963,"utf16_col":20},"end":{"line_number":1963,"utf16_col":30}},"extent_utf16":{"start":{"line_number":1963,"utf16_col":8},"end":{"line_number":1980,"utf16_col":9}}},{"name":"convertIntoString","kind":"function","ident_start":73424,"ident_end":73441,"extent_start":73412,"extent_end":74376,"fully_qualified_name":"convertIntoString","ident_utf16":{"start":{"line_number":1983,"utf16_col":16},"end":{"line_number":1983,"utf16_col":33}},"extent_utf16":{"start":{"line_number":1983,"utf16_col":4},"end":{"line_number":2019,"utf16_col":5}}},{"name":"convertIntoString","kind":"function","ident_start":74394,"ident_end":74411,"extent_start":74382,"extent_end":74530,"fully_qualified_name":"convertIntoString","ident_utf16":{"start":{"line_number":2021,"utf16_col":16},"end":{"line_number":2021,"utf16_col":33}},"extent_utf16":{"start":{"line_number":2021,"utf16_col":4},"end":{"line_number":2023,"utf16_col":5}}},{"name":"rawMemoryToString","kind":"function","ident_start":74548,"ident_end":74565,"extent_start":74536,"extent_end":75149,"fully_qualified_name":"rawMemoryToString","ident_utf16":{"start":{"line_number":2025,"utf16_col":16},"end":{"line_number":2025,"utf16_col":33}},"extent_utf16":{"start":{"line_number":2025,"utf16_col":4},"end":{"line_number":2039,"utf16_col":5}}},{"name":"total","kind":"method","ident_start":80023,"ident_end":80028,"extent_start":80001,"extent_end":80100,"fully_qualified_name":"Counts::total","ident_utf16":{"start":{"line_number":2203,"utf16_col":26},"end":{"line_number":2203,"utf16_col":31}},"extent_utf16":{"start":{"line_number":2203,"utf16_col":4},"end":{"line_number":2205,"utf16_col":5}}},{"name":"allPassed","kind":"method","ident_start":80118,"ident_end":80127,"extent_start":80105,"extent_end":80207,"fully_qualified_name":"Counts::allPassed","ident_utf16":{"start":{"line_number":2206,"utf16_col":17},"end":{"line_number":2206,"utf16_col":26}},"extent_utf16":{"start":{"line_number":2206,"utf16_col":4},"end":{"line_number":2208,"utf16_col":5}}},{"name":"allOk","kind":"method","ident_start":80225,"ident_end":80230,"extent_start":80212,"extent_end":80274,"fully_qualified_name":"Counts::allOk","ident_utf16":{"start":{"line_number":2209,"utf16_col":17},"end":{"line_number":2209,"utf16_col":22}},"extent_utf16":{"start":{"line_number":2209,"utf16_col":4},"end":{"line_number":2211,"utf16_col":5}}},{"name":"delta","kind":"method","ident_start":80682,"ident_end":80687,"extent_start":80667,"extent_end":81100,"fully_qualified_name":"Totals::delta","ident_utf16":{"start":{"line_number":2226,"utf16_col":19},"end":{"line_number":2226,"utf16_col":24}},"extent_utf16":{"start":{"line_number":2226,"utf16_col":4},"end":{"line_number":2237,"utf16_col":5}}},{"name":"registerTranslatorImpl","kind":"function","ident_start":81162,"ident_end":81184,"extent_start":81157,"extent_end":81365,"fully_qualified_name":"registerTranslatorImpl","ident_utf16":{"start":{"line_number":2246,"utf16_col":13},"end":{"line_number":2246,"utf16_col":35}},"extent_utf16":{"start":{"line_number":2246,"utf16_col":8},"end":{"line_number":2250,"utf16_col":9}}},{"name":"Version","kind":"method","ident_start":81467,"ident_end":81474,"extent_start":81458,"extent_end":81870,"fully_qualified_name":"Version::Version","ident_utf16":{"start":{"line_number":2259,"utf16_col":13},"end":{"line_number":2259,"utf16_col":20}},"extent_utf16":{"start":{"line_number":2259,"utf16_col":4},"end":{"line_number":2270,"utf16_col":6}}},{"name":"throw_generator_exception","kind":"function","ident_start":82710,"ident_end":82735,"extent_start":82688,"extent_end":82819,"fully_qualified_name":"throw_generator_exception","ident_utf16":{"start":{"line_number":2314,"utf16_col":9},"end":{"line_number":2314,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2313,"utf16_col":4},"end":{"line_number":2316,"utf16_col":5}}},{"name":"getSeed","kind":"function","ident_start":83602,"ident_end":83609,"extent_start":83588,"extent_end":83637,"fully_qualified_name":"getSeed","ident_utf16":{"start":{"line_number":2343,"utf16_col":26},"end":{"line_number":2343,"utf16_col":33}},"extent_utf16":{"start":{"line_number":2343,"utf16_col":12},"end":{"line_number":2343,"utf16_col":61}}},{"name":"PImpl","kind":"function","ident_start":83742,"ident_end":83747,"extent_start":83742,"extent_end":83840,"fully_qualified_name":"PImpl","ident_utf16":{"start":{"line_number":2347,"utf16_col":12},"end":{"line_number":2347,"utf16_col":17}},"extent_utf16":{"start":{"line_number":2347,"utf16_col":12},"end":{"line_number":2348,"utf16_col":44}}},{"name":"countedNext","kind":"method","ident_start":84909,"ident_end":84920,"extent_start":84882,"extent_end":85112,"fully_qualified_name":"GeneratorUntypedBase::countedNext","ident_utf16":{"start":{"line_number":2398,"utf16_col":35},"end":{"line_number":2398,"utf16_col":46}},"extent_utf16":{"start":{"line_number":2398,"utf16_col":8},"end":{"line_number":2405,"utf16_col":9}}},{"name":"currentElementAsString","kind":"method","ident_start":85154,"ident_end":85176,"extent_start":85122,"extent_end":85348,"fully_qualified_name":"GeneratorUntypedBase::currentElementAsString","ident_utf16":{"start":{"line_number":2407,"utf16_col":40},"end":{"line_number":2407,"utf16_col":62}},"extent_utf16":{"start":{"line_number":2407,"utf16_col":8},"end":{"line_number":2412,"utf16_col":9}}},{"name":"ReporterConfig","kind":"method","ident_start":85591,"ident_end":85605,"extent_start":85575,"extent_end":85950,"fully_qualified_name":"ReporterConfig::ReporterConfig","ident_utf16":{"start":{"line_number":2431,"utf16_col":20},"end":{"line_number":2431,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2431,"utf16_col":4},"end":{"line_number":2439,"utf16_col":57}}},{"name":"takeStream","kind":"method","ident_start":86000,"ident_end":86010,"extent_start":85956,"extent_end":86090,"fully_qualified_name":"ReporterConfig::takeStream","ident_utf16":{"start":{"line_number":2441,"utf16_col":48},"end":{"line_number":2441,"utf16_col":58}},"extent_utf16":{"start":{"line_number":2441,"utf16_col":4},"end":{"line_number":2444,"utf16_col":5}}},{"name":"colourMode","kind":"method","ident_start":86202,"ident_end":86212,"extent_start":86175,"extent_end":86245,"fully_qualified_name":"ReporterConfig::colourMode","ident_utf16":{"start":{"line_number":2446,"utf16_col":31},"end":{"line_number":2446,"utf16_col":41}},"extent_utf16":{"start":{"line_number":2446,"utf16_col":4},"end":{"line_number":2446,"utf16_col":74}}},{"name":"AssertionStats","kind":"method","ident_start":86446,"ident_end":86460,"extent_start":86430,"extent_end":87236,"fully_qualified_name":"AssertionStats::AssertionStats","ident_utf16":{"start":{"line_number":2455,"utf16_col":20},"end":{"line_number":2455,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2455,"utf16_col":4},"end":{"line_number":2470,"utf16_col":5}}},{"name":"SectionStats","kind":"method","ident_start":87256,"ident_end":87268,"extent_start":87242,"extent_end":87665,"fully_qualified_name":"SectionStats::SectionStats","ident_utf16":{"start":{"line_number":2472,"utf16_col":18},"end":{"line_number":2472,"utf16_col":30}},"extent_utf16":{"start":{"line_number":2472,"utf16_col":4},"end":{"line_number":2480,"utf16_col":6}}},{"name":"TestCaseStats","kind":"method","ident_start":87687,"ident_end":87700,"extent_start":87672,"extent_end":88131,"fully_qualified_name":"TestCaseStats::TestCaseStats","ident_utf16":{"start":{"line_number":2483,"utf16_col":19},"end":{"line_number":2483,"utf16_col":32}},"extent_utf16":{"start":{"line_number":2483,"utf16_col":4},"end":{"line_number":2493,"utf16_col":6}}},{"name":"TestRunStats","kind":"method","ident_start":88152,"ident_end":88164,"extent_start":88138,"extent_end":88369,"fully_qualified_name":"TestRunStats::TestRunStats","ident_utf16":{"start":{"line_number":2496,"utf16_col":18},"end":{"line_number":2496,"utf16_col":30}},"extent_utf16":{"start":{"line_number":2496,"utf16_col":4},"end":{"line_number":2502,"utf16_col":6}}},{"name":"AssertionHandler","kind":"method","ident_start":88707,"ident_end":88723,"extent_start":88689,"extent_end":89111,"fully_qualified_name":"AssertionHandler::AssertionHandler","ident_utf16":{"start":{"line_number":2527,"utf16_col":22},"end":{"line_number":2527,"utf16_col":38}},"extent_utf16":{"start":{"line_number":2527,"utf16_col":4},"end":{"line_number":2536,"utf16_col":5}}},{"name":"handleExpr","kind":"method","ident_start":89140,"ident_end":89150,"extent_start":89117,"extent_end":89267,"fully_qualified_name":"AssertionHandler::handleExpr","ident_utf16":{"start":{"line_number":2538,"utf16_col":27},"end":{"line_number":2538,"utf16_col":37}},"extent_utf16":{"start":{"line_number":2538,"utf16_col":4},"end":{"line_number":2540,"utf16_col":5}}},{"name":"handleMessage","kind":"method","ident_start":89295,"ident_end":89308,"extent_start":89272,"extent_end":89472,"fully_qualified_name":"AssertionHandler::handleMessage","ident_utf16":{"start":{"line_number":2541,"utf16_col":27},"end":{"line_number":2541,"utf16_col":40}},"extent_utf16":{"start":{"line_number":2541,"utf16_col":4},"end":{"line_number":2543,"utf16_col":5}}},{"name":"allowThrows","kind":"method","ident_start":89501,"ident_end":89512,"extent_start":89478,"extent_end":89599,"fully_qualified_name":"AssertionHandler::allowThrows","ident_utf16":{"start":{"line_number":2545,"utf16_col":27},"end":{"line_number":2545,"utf16_col":38}},"extent_utf16":{"start":{"line_number":2545,"utf16_col":4},"end":{"line_number":2547,"utf16_col":5}}},{"name":"complete","kind":"method","ident_start":89628,"ident_end":89636,"extent_start":89605,"extent_end":90213,"fully_qualified_name":"AssertionHandler::complete","ident_utf16":{"start":{"line_number":2549,"utf16_col":27},"end":{"line_number":2549,"utf16_col":35}},"extent_utf16":{"start":{"line_number":2549,"utf16_col":4},"end":{"line_number":2565,"utf16_col":5}}},{"name":"handleUnexpectedInflightException","kind":"method","ident_start":90242,"ident_end":90275,"extent_start":90219,"extent_end":90410,"fully_qualified_name":"AssertionHandler::handleUnexpectedInflightException","ident_utf16":{"start":{"line_number":2567,"utf16_col":27},"end":{"line_number":2567,"utf16_col":60}},"extent_utf16":{"start":{"line_number":2567,"utf16_col":4},"end":{"line_number":2569,"utf16_col":5}}},{"name":"handleExceptionThrownAsExpected","kind":"method","ident_start":90439,"ident_end":90470,"extent_start":90416,"extent_end":90563,"fully_qualified_name":"AssertionHandler::handleExceptionThrownAsExpected","ident_utf16":{"start":{"line_number":2571,"utf16_col":27},"end":{"line_number":2571,"utf16_col":58}},"extent_utf16":{"start":{"line_number":2571,"utf16_col":4},"end":{"line_number":2573,"utf16_col":5}}},{"name":"handleExceptionNotThrownAsExpected","kind":"method","ident_start":90591,"ident_end":90625,"extent_start":90568,"extent_end":90718,"fully_qualified_name":"AssertionHandler::handleExceptionNotThrownAsExpected","ident_utf16":{"start":{"line_number":2574,"utf16_col":27},"end":{"line_number":2574,"utf16_col":61}},"extent_utf16":{"start":{"line_number":2574,"utf16_col":4},"end":{"line_number":2576,"utf16_col":5}}},{"name":"handleUnexpectedExceptionNotThrown","kind":"method","ident_start":90747,"ident_end":90781,"extent_start":90724,"extent_end":90882,"fully_qualified_name":"AssertionHandler::handleUnexpectedExceptionNotThrown","ident_utf16":{"start":{"line_number":2578,"utf16_col":27},"end":{"line_number":2578,"utf16_col":61}},"extent_utf16":{"start":{"line_number":2578,"utf16_col":4},"end":{"line_number":2580,"utf16_col":5}}},{"name":"handleThrowingCallSkipped","kind":"method","ident_start":90911,"ident_end":90936,"extent_start":90888,"extent_end":91029,"fully_qualified_name":"AssertionHandler::handleThrowingCallSkipped","ident_utf16":{"start":{"line_number":2582,"utf16_col":27},"end":{"line_number":2582,"utf16_col":52}},"extent_utf16":{"start":{"line_number":2582,"utf16_col":4},"end":{"line_number":2584,"utf16_col":5}}},{"name":"handleExceptionMatchExpr","kind":"function","ident_start":91224,"ident_end":91248,"extent_start":91219,"extent_end":91379,"fully_qualified_name":"handleExceptionMatchExpr","ident_utf16":{"start":{"line_number":2588,"utf16_col":9},"end":{"line_number":2588,"utf16_col":33}},"extent_utf16":{"start":{"line_number":2588,"utf16_col":4},"end":{"line_number":2590,"utf16_col":5}}},{"name":"isOptPrefix","kind":"function","ident_start":92277,"ident_end":92288,"extent_start":92272,"extent_end":92408,"fully_qualified_name":"isOptPrefix","ident_utf16":{"start":{"line_number":2629,"utf16_col":9},"end":{"line_number":2629,"utf16_col":20}},"extent_utf16":{"start":{"line_number":2629,"utf16_col":4},"end":{"line_number":2635,"utf16_col":5}}},{"name":"normaliseOpt","kind":"function","ident_start":92431,"ident_end":92443,"extent_start":92414,"extent_end":92690,"fully_qualified_name":"normaliseOpt","ident_utf16":{"start":{"line_number":2637,"utf16_col":21},"end":{"line_number":2637,"utf16_col":33}},"extent_utf16":{"start":{"line_number":2637,"utf16_col":4},"end":{"line_number":2647,"utf16_col":5}}},{"name":"find_first_separator","kind":"function","ident_start":92710,"ident_end":92730,"extent_start":92696,"extent_end":93048,"fully_qualified_name":"find_first_separator","ident_utf16":{"start":{"line_number":2649,"utf16_col":18},"end":{"line_number":2649,"utf16_col":38}},"extent_utf16":{"start":{"line_number":2649,"utf16_col":4},"end":{"line_number":2660,"utf16_col":5}}},{"name":"loadBuffer","kind":"method","ident_start":93164,"ident_end":93174,"extent_start":93146,"extent_end":94908,"fully_qualified_name":"TokenStream::loadBuffer","ident_utf16":{"start":{"line_number":2668,"utf16_col":30},"end":{"line_number":2668,"utf16_col":40}},"extent_utf16":{"start":{"line_number":2668,"utf16_col":12},"end":{"line_number":2705,"utf16_col":13}}},{"name":"TokenStream","kind":"method","ident_start":94935,"ident_end":94946,"extent_start":94922,"extent_end":95040,"fully_qualified_name":"TokenStream::TokenStream","ident_utf16":{"start":{"line_number":2707,"utf16_col":25},"end":{"line_number":2707,"utf16_col":36}},"extent_utf16":{"start":{"line_number":2707,"utf16_col":12},"end":{"line_number":2708,"utf16_col":72}}},{"name":"TokenStream","kind":"method","ident_start":95067,"ident_end":95078,"extent_start":95054,"extent_end":95201,"fully_qualified_name":"TokenStream::TokenStream","ident_utf16":{"start":{"line_number":2710,"utf16_col":25},"end":{"line_number":2710,"utf16_col":36}},"extent_utf16":{"start":{"line_number":2710,"utf16_col":12},"end":{"line_number":2713,"utf16_col":13}}},{"name":"convertInto","kind":"function","ident_start":95589,"ident_end":95600,"extent_start":95576,"extent_end":95806,"fully_qualified_name":"convertInto","ident_utf16":{"start":{"line_number":2726,"utf16_col":25},"end":{"line_number":2726,"utf16_col":36}},"extent_utf16":{"start":{"line_number":2726,"utf16_col":12},"end":{"line_number":2730,"utf16_col":13}}},{"name":"convertInto","kind":"function","ident_start":95833,"ident_end":95844,"extent_start":95820,"extent_end":96627,"fully_qualified_name":"convertInto","ident_utf16":{"start":{"line_number":2732,"utf16_col":25},"end":{"line_number":2732,"utf16_col":36}},"extent_utf16":{"start":{"line_number":2732,"utf16_col":12},"end":{"line_number":2748,"utf16_col":13}}},{"name":"cardinality","kind":"method","ident_start":96660,"ident_end":96671,"extent_start":96641,"extent_end":96693,"fully_qualified_name":"ParserBase::cardinality","ident_utf16":{"start":{"line_number":2750,"utf16_col":31},"end":{"line_number":2750,"utf16_col":42}},"extent_utf16":{"start":{"line_number":2750,"utf16_col":12},"end":{"line_number":2750,"utf16_col":64}}},{"name":"parse","kind":"method","ident_start":96739,"ident_end":96744,"extent_start":96707,"extent_end":96881,"fully_qualified_name":"ParserBase::parse","ident_utf16":{"start":{"line_number":2752,"utf16_col":44},"end":{"line_number":2752,"utf16_col":49}},"extent_utf16":{"start":{"line_number":2752,"utf16_col":12},"end":{"line_number":2754,"utf16_col":13}}},{"name":"ParseState","kind":"method","ident_start":96907,"ident_end":96917,"extent_start":96895,"extent_end":97091,"fully_qualified_name":"ParseState::ParseState","ident_utf16":{"start":{"line_number":2756,"utf16_col":24},"end":{"line_number":2756,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2756,"utf16_col":12},"end":{"line_number":2758,"utf16_col":83}}},{"name":"setFlag","kind":"method","ident_start":97132,"ident_end":97139,"extent_start":97105,"extent_end":97267,"fully_qualified_name":"BoundFlagRef::setFlag","ident_utf16":{"start":{"line_number":2760,"utf16_col":39},"end":{"line_number":2760,"utf16_col":46}},"extent_utf16":{"start":{"line_number":2760,"utf16_col":12},"end":{"line_number":2763,"utf16_col":13}}},{"name":"isContainer","kind":"method","ident_start":97346,"ident_end":97357,"extent_start":97331,"extent_end":97383,"fully_qualified_name":"BoundRef::isContainer","ident_utf16":{"start":{"line_number":2767,"utf16_col":27},"end":{"line_number":2767,"utf16_col":38}},"extent_utf16":{"start":{"line_number":2767,"utf16_col":12},"end":{"line_number":2767,"utf16_col":64}}},{"name":"isFlag","kind":"method","ident_start":97412,"ident_end":97418,"extent_start":97397,"extent_end":97444,"fully_qualified_name":"BoundRef::isFlag","ident_utf16":{"start":{"line_number":2769,"utf16_col":27},"end":{"line_number":2769,"utf16_col":33}},"extent_utf16":{"start":{"line_number":2769,"utf16_col":12},"end":{"line_number":2769,"utf16_col":59}}},{"name":"isFlag","kind":"method","ident_start":97481,"ident_end":97487,"extent_start":97458,"extent_end":97512,"fully_qualified_name":"BoundFlagRefBase::isFlag","ident_utf16":{"start":{"line_number":2771,"utf16_col":35},"end":{"line_number":2771,"utf16_col":41}},"extent_utf16":{"start":{"line_number":2771,"utf16_col":12},"end":{"line_number":2771,"utf16_col":66}}},{"name":"parse","kind":"method","ident_start":97578,"ident_end":97583,"extent_start":97545,"extent_end":98605,"fully_qualified_name":"Arg::parse","ident_utf16":{"start":{"line_number":2775,"utf16_col":41},"end":{"line_number":2775,"utf16_col":46}},"extent_utf16":{"start":{"line_number":2775,"utf16_col":8},"end":{"line_number":2797,"utf16_col":9}}},{"name":"Opt","kind":"method","ident_start":98620,"ident_end":98623,"extent_start":98615,"extent_end":98710,"fully_qualified_name":"Opt::Opt","ident_utf16":{"start":{"line_number":2799,"utf16_col":13},"end":{"line_number":2799,"utf16_col":16}},"extent_utf16":{"start":{"line_number":2799,"utf16_col":8},"end":{"line_number":2800,"utf16_col":73}}},{"name":"getHelpColumns","kind":"method","ident_start":98745,"ident_end":98759,"extent_start":98720,"extent_end":99183,"fully_qualified_name":"Opt::getHelpColumns","ident_utf16":{"start":{"line_number":2802,"utf16_col":33},"end":{"line_number":2802,"utf16_col":47}},"extent_utf16":{"start":{"line_number":2802,"utf16_col":8},"end":{"line_number":2815,"utf16_col":9}}},{"name":"isMatch","kind":"method","ident_start":99203,"ident_end":99210,"extent_start":99193,"extent_end":99489,"fully_qualified_name":"Opt::isMatch","ident_utf16":{"start":{"line_number":2817,"utf16_col":18},"end":{"line_number":2817,"utf16_col":25}},"extent_utf16":{"start":{"line_number":2817,"utf16_col":8},"end":{"line_number":2824,"utf16_col":9}}},{"name":"parse","kind":"method","ident_start":99532,"ident_end":99537,"extent_start":99499,"extent_end":102189,"fully_qualified_name":"Opt::parse","ident_utf16":{"start":{"line_number":2826,"utf16_col":41},"end":{"line_number":2826,"utf16_col":46}},"extent_utf16":{"start":{"line_number":2826,"utf16_col":8},"end":{"line_number":2875,"utf16_col":9}}},{"name":"validate","kind":"method","ident_start":102219,"ident_end":102227,"extent_start":102199,"extent_end":102989,"fully_qualified_name":"Opt::validate","ident_utf16":{"start":{"line_number":2877,"utf16_col":28},"end":{"line_number":2877,"utf16_col":36}},"extent_utf16":{"start":{"line_number":2877,"utf16_col":8},"end":{"line_number":2895,"utf16_col":9}}},{"name":"ExeName","kind":"method","ident_start":103008,"ident_end":103015,"extent_start":102999,"extent_end":103088,"fully_qualified_name":"ExeName::ExeName","ident_utf16":{"start":{"line_number":2897,"utf16_col":17},"end":{"line_number":2897,"utf16_col":24}},"extent_utf16":{"start":{"line_number":2897,"utf16_col":8},"end":{"line_number":2898,"utf16_col":68}}},{"name":"ExeName","kind":"method","ident_start":103107,"ident_end":103114,"extent_start":103098,"extent_end":103235,"fully_qualified_name":"ExeName::ExeName","ident_utf16":{"start":{"line_number":2900,"utf16_col":17},"end":{"line_number":2900,"utf16_col":24}},"extent_utf16":{"start":{"line_number":2900,"utf16_col":8},"end":{"line_number":2902,"utf16_col":9}}},{"name":"parse","kind":"method","ident_start":103294,"ident_end":103299,"extent_start":103245,"extent_end":103527,"fully_qualified_name":"ExeName::parse","ident_utf16":{"start":{"line_number":2905,"utf16_col":21},"end":{"line_number":2905,"utf16_col":26}},"extent_utf16":{"start":{"line_number":2904,"utf16_col":8},"end":{"line_number":2909,"utf16_col":9}}},{"name":"set","kind":"method","ident_start":103559,"ident_end":103562,"extent_start":103537,"extent_end":103986,"fully_qualified_name":"ExeName::set","ident_utf16":{"start":{"line_number":2911,"utf16_col":30},"end":{"line_number":2911,"utf16_col":33}},"extent_utf16":{"start":{"line_number":2911,"utf16_col":8},"end":{"line_number":2922,"utf16_col":9}}},{"name":"getHelpColumns","kind":"method","ident_start":104395,"ident_end":104409,"extent_start":104354,"extent_end":104665,"fully_qualified_name":"Parser::getHelpColumns","ident_utf16":{"start":{"line_number":2936,"utf16_col":49},"end":{"line_number":2936,"utf16_col":63}},"extent_utf16":{"start":{"line_number":2936,"utf16_col":8},"end":{"line_number":2943,"utf16_col":9}}},{"name":"writeToStream","kind":"method","ident_start":104688,"ident_end":104701,"extent_start":104675,"extent_end":106425,"fully_qualified_name":"Parser::writeToStream","ident_utf16":{"start":{"line_number":2945,"utf16_col":21},"end":{"line_number":2945,"utf16_col":34}},"extent_utf16":{"start":{"line_number":2945,"utf16_col":8},"end":{"line_number":2987,"utf16_col":9}}},{"name":"validate","kind":"method","ident_start":106458,"ident_end":106466,"extent_start":106435,"extent_end":106876,"fully_qualified_name":"Parser::validate","ident_utf16":{"start":{"line_number":2989,"utf16_col":31},"end":{"line_number":2989,"utf16_col":39}},"extent_utf16":{"start":{"line_number":2989,"utf16_col":8},"end":{"line_number":3001,"utf16_col":9}}},{"name":"parse","kind":"method","ident_start":106930,"ident_end":106935,"extent_start":106886,"extent_end":108963,"fully_qualified_name":"Parser::parse","ident_utf16":{"start":{"line_number":3004,"utf16_col":16},"end":{"line_number":3004,"utf16_col":21}},"extent_utf16":{"start":{"line_number":3003,"utf16_col":8},"end":{"line_number":3052,"utf16_col":9}}},{"name":"ParserInfo","kind":"class","ident_start":107045,"ident_end":107055,"extent_start":107038,"extent_end":107157,"fully_qualified_name":"ParserInfo","ident_utf16":{"start":{"line_number":3007,"utf16_col":19},"end":{"line_number":3007,"utf16_col":29}},"extent_utf16":{"start":{"line_number":3007,"utf16_col":12},"end":{"line_number":3010,"utf16_col":13}}},{"name":"Args","kind":"method","ident_start":108979,"ident_end":108983,"extent_start":108973,"extent_end":109085,"fully_qualified_name":"Args::Args","ident_utf16":{"start":{"line_number":3054,"utf16_col":14},"end":{"line_number":3054,"utf16_col":18}},"extent_utf16":{"start":{"line_number":3054,"utf16_col":8},"end":{"line_number":3055,"utf16_col":64}}},{"name":"Args","kind":"method","ident_start":109101,"ident_end":109105,"extent_start":109095,"extent_end":109236,"fully_qualified_name":"Args::Args","ident_utf16":{"start":{"line_number":3057,"utf16_col":14},"end":{"line_number":3057,"utf16_col":18}},"extent_utf16":{"start":{"line_number":3057,"utf16_col":8},"end":{"line_number":3059,"utf16_col":51}}},{"name":"Help","kind":"method","ident_start":109253,"ident_end":109257,"extent_start":109247,"extent_end":109596,"fully_qualified_name":"Help::Help","ident_utf16":{"start":{"line_number":3062,"utf16_col":14},"end":{"line_number":3062,"utf16_col":18}},"extent_utf16":{"start":{"line_number":3062,"utf16_col":8},"end":{"line_number":3070,"utf16_col":9}}},{"name":"makeCommandLineParser","kind":"function","ident_start":109723,"ident_end":109744,"extent_start":109709,"extent_end":123779,"fully_qualified_name":"makeCommandLineParser","ident_utf16":{"start":{"line_number":3083,"utf16_col":18},"end":{"line_number":3083,"utf16_col":39}},"extent_utf16":{"start":{"line_number":3083,"utf16_col":4},"end":{"line_number":3371,"utf16_col":5}}},{"name":"guardColour","kind":"method","ident_start":124097,"ident_end":124108,"extent_start":124061,"extent_end":124190,"fully_qualified_name":"ColourImpl::guardColour","ident_utf16":{"start":{"line_number":3391,"utf16_col":40},"end":{"line_number":3391,"utf16_col":51}},"extent_utf16":{"start":{"line_number":3391,"utf16_col":4},"end":{"line_number":3393,"utf16_col":5}}},{"name":"NoColourImpl","kind":"class","ident_start":125886,"ident_end":125898,"extent_start":125880,"extent_end":126094,"fully_qualified_name":"NoColourImpl","ident_utf16":{"start":{"line_number":3445,"utf16_col":14},"end":{"line_number":3445,"utf16_col":26}},"extent_utf16":{"start":{"line_number":3445,"utf16_col":8},"end":{"line_number":3451,"utf16_col":9}}},{"name":"NoColourImpl","kind":"function","ident_start":125955,"ident_end":125967,"extent_start":125955,"extent_end":126011,"fully_qualified_name":"NoColourImpl::NoColourImpl","ident_utf16":{"start":{"line_number":3447,"utf16_col":12},"end":{"line_number":3447,"utf16_col":24}},"extent_utf16":{"start":{"line_number":3447,"utf16_col":12},"end":{"line_number":3447,"utf16_col":68}}},{"name":"use","kind":"function","ident_start":126047,"ident_end":126050,"extent_start":126042,"extent_end":126084,"fully_qualified_name":"NoColourImpl::use","ident_utf16":{"start":{"line_number":3450,"utf16_col":17},"end":{"line_number":3450,"utf16_col":20}},"extent_utf16":{"start":{"line_number":3450,"utf16_col":12},"end":{"line_number":3450,"utf16_col":54}}},{"name":"Win32ColourImpl","kind":"class","ident_start":126266,"ident_end":126281,"extent_start":126260,"extent_end":129222,"fully_qualified_name":"Win32ColourImpl","ident_utf16":{"start":{"line_number":3463,"utf16_col":10},"end":{"line_number":3463,"utf16_col":25}},"extent_utf16":{"start":{"line_number":3463,"utf16_col":4},"end":{"line_number":3513,"utf16_col":5}}},{"name":"Win32ColourImpl","kind":"function","ident_start":126330,"ident_end":126345,"extent_start":126330,"extent_end":126877,"fully_qualified_name":"Win32ColourImpl::Win32ColourImpl","ident_utf16":{"start":{"line_number":3465,"utf16_col":8},"end":{"line_number":3465,"utf16_col":23}},"extent_utf16":{"start":{"line_number":3465,"utf16_col":8},"end":{"line_number":3472,"utf16_col":9}}},{"name":"useImplementationForStream","kind":"function","ident_start":126899,"ident_end":126925,"extent_start":126887,"extent_end":127220,"fully_qualified_name":"Win32ColourImpl::useImplementationForStream","ident_utf16":{"start":{"line_number":3474,"utf16_col":20},"end":{"line_number":3474,"utf16_col":46}},"extent_utf16":{"start":{"line_number":3474,"utf16_col":8},"end":{"line_number":3479,"utf16_col":9}}},{"name":"use","kind":"function","ident_start":127248,"ident_end":127251,"extent_start":127243,"extent_end":128859,"fully_qualified_name":"Win32ColourImpl::use","ident_utf16":{"start":{"line_number":3482,"utf16_col":13},"end":{"line_number":3482,"utf16_col":16}},"extent_utf16":{"start":{"line_number":3482,"utf16_col":8},"end":{"line_number":3504,"utf16_col":9}}},{"name":"setTextAttribute","kind":"function","ident_start":128874,"ident_end":128890,"extent_start":128869,"extent_end":129130,"fully_qualified_name":"Win32ColourImpl::setTextAttribute","ident_utf16":{"start":{"line_number":3506,"utf16_col":13},"end":{"line_number":3506,"utf16_col":29}},"extent_utf16":{"start":{"line_number":3506,"utf16_col":8},"end":{"line_number":3510,"utf16_col":9}}},{"name":"ANSIColourImpl","kind":"class","ident_start":129511,"ident_end":129525,"extent_start":129505,"extent_end":132229,"fully_qualified_name":"ANSIColourImpl","ident_utf16":{"start":{"line_number":3529,"utf16_col":10},"end":{"line_number":3529,"utf16_col":24}},"extent_utf16":{"start":{"line_number":3529,"utf16_col":4},"end":{"line_number":3583,"utf16_col":5}}},{"name":"ANSIColourImpl","kind":"function","ident_start":129574,"ident_end":129588,"extent_start":129574,"extent_end":129632,"fully_qualified_name":"ANSIColourImpl::ANSIColourImpl","ident_utf16":{"start":{"line_number":3531,"utf16_col":8},"end":{"line_number":3531,"utf16_col":22}},"extent_utf16":{"start":{"line_number":3531,"utf16_col":8},"end":{"line_number":3531,"utf16_col":66}}},{"name":"useImplementationForStream","kind":"function","ident_start":129654,"ident_end":129680,"extent_start":129642,"extent_end":130656,"fully_qualified_name":"ANSIColourImpl::useImplementationForStream","ident_utf16":{"start":{"line_number":3533,"utf16_col":20},"end":{"line_number":3533,"utf16_col":46}},"extent_utf16":{"start":{"line_number":3533,"utf16_col":8},"end":{"line_number":3552,"utf16_col":9}}},{"name":"use","kind":"function","ident_start":130684,"ident_end":130687,"extent_start":130679,"extent_end":132223,"fully_qualified_name":"ANSIColourImpl::use","ident_utf16":{"start":{"line_number":3555,"utf16_col":13},"end":{"line_number":3555,"utf16_col":16}},"extent_utf16":{"start":{"line_number":3555,"utf16_col":8},"end":{"line_number":3582,"utf16_col":9}}},{"name":"makeColourImpl","kind":"function","ident_start":132336,"ident_end":132350,"extent_start":132305,"extent_end":133505,"fully_qualified_name":"makeColourImpl","ident_utf16":{"start":{"line_number":3590,"utf16_col":35},"end":{"line_number":3590,"utf16_col":49}},"extent_utf16":{"start":{"line_number":3590,"utf16_col":4},"end":{"line_number":3617,"utf16_col":5}}},{"name":"isColourImplAvailable","kind":"function","ident_start":133516,"ident_end":133537,"extent_start":133511,"extent_end":133874,"fully_qualified_name":"isColourImplAvailable","ident_utf16":{"start":{"line_number":3619,"utf16_col":9},"end":{"line_number":3619,"utf16_col":30}},"extent_utf16":{"start":{"line_number":3619,"utf16_col":4},"end":{"line_number":3631,"utf16_col":5}}},{"name":"cleanUpContext","kind":"function","ident_start":134047,"ident_end":134061,"extent_start":134042,"extent_end":134154,"fully_qualified_name":"cleanUpContext","ident_utf16":{"start":{"line_number":3647,"utf16_col":9},"end":{"line_number":3647,"utf16_col":23}},"extent_utf16":{"start":{"line_number":3647,"utf16_col":4},"end":{"line_number":3650,"utf16_col":5}}},{"name":"createContext","kind":"method","ident_start":134173,"ident_end":134186,"extent_start":134159,"extent_end":134236,"fully_qualified_name":"Context::createContext","ident_utf16":{"start":{"line_number":3651,"utf16_col":18},"end":{"line_number":3651,"utf16_col":31}},"extent_utf16":{"start":{"line_number":3651,"utf16_col":4},"end":{"line_number":3653,"utf16_col":5}}},{"name":"writeToDebugConsole","kind":"function","ident_start":134696,"ident_end":134715,"extent_start":134691,"extent_end":134831,"fully_qualified_name":"writeToDebugConsole","ident_utf16":{"start":{"line_number":3678,"utf16_col":13},"end":{"line_number":3678,"utf16_col":32}},"extent_utf16":{"start":{"line_number":3678,"utf16_col":8},"end":{"line_number":3680,"utf16_col":9}}},{"name":"writeToDebugConsole","kind":"function","ident_start":134913,"ident_end":134932,"extent_start":134908,"extent_end":135021,"fully_qualified_name":"writeToDebugConsole","ident_utf16":{"start":{"line_number":3686,"utf16_col":13},"end":{"line_number":3686,"utf16_col":32}},"extent_utf16":{"start":{"line_number":3686,"utf16_col":8},"end":{"line_number":3688,"utf16_col":9}}},{"name":"writeToDebugConsole","kind":"function","ident_start":135071,"ident_end":135090,"extent_start":135066,"extent_end":135230,"fully_qualified_name":"writeToDebugConsole","ident_utf16":{"start":{"line_number":3694,"utf16_col":13},"end":{"line_number":3694,"utf16_col":32}},"extent_utf16":{"start":{"line_number":3694,"utf16_col":8},"end":{"line_number":3697,"utf16_col":9}}},{"name":"isDebuggerActive","kind":"function","ident_start":136026,"ident_end":136042,"extent_start":136021,"extent_end":137082,"fully_qualified_name":"isDebuggerActive","ident_utf16":{"start":{"line_number":3725,"utf16_col":13},"end":{"line_number":3725,"utf16_col":29}},"extent_utf16":{"start":{"line_number":3725,"utf16_col":8},"end":{"line_number":3754,"utf16_col":9}}},{"name":"isDebuggerActive","kind":"function","ident_start":137110,"ident_end":137126,"extent_start":137105,"extent_end":137265,"fully_qualified_name":"isDebuggerActive","ident_utf16":{"start":{"line_number":3756,"utf16_col":13},"end":{"line_number":3756,"utf16_col":29}},"extent_utf16":{"start":{"line_number":3756,"utf16_col":8},"end":{"line_number":3759,"utf16_col":9}}},{"name":"isDebuggerActive","kind":"function","ident_start":137914,"ident_end":137930,"extent_start":137909,"extent_end":138688,"fully_qualified_name":"isDebuggerActive","ident_utf16":{"start":{"line_number":3775,"utf16_col":13},"end":{"line_number":3775,"utf16_col":29}},"extent_utf16":{"start":{"line_number":3775,"utf16_col":8},"end":{"line_number":3791,"utf16_col":9}}},{"name":"IsDebuggerPresent","kind":"function","ident_start":138789,"ident_end":138806,"extent_start":138753,"extent_end":138926,"fully_qualified_name":"IsDebuggerPresent","ident_utf16":{"start":{"line_number":3794,"utf16_col":51},"end":{"line_number":3794,"utf16_col":68}},"extent_utf16":{"start":{"line_number":3794,"utf16_col":15},"end":{"line_number":3799,"utf16_col":5}}},{"name":"isDebuggerActive","kind":"function","ident_start":138845,"ident_end":138861,"extent_start":138840,"extent_end":138920,"fully_qualified_name":"isDebuggerActive","ident_utf16":{"start":{"line_number":3796,"utf16_col":13},"end":{"line_number":3796,"utf16_col":29}},"extent_utf16":{"start":{"line_number":3796,"utf16_col":8},"end":{"line_number":3798,"utf16_col":9}}},{"name":"IsDebuggerPresent","kind":"function","ident_start":139005,"ident_end":139022,"extent_start":138969,"extent_end":139142,"fully_qualified_name":"IsDebuggerPresent","ident_utf16":{"start":{"line_number":3801,"utf16_col":51},"end":{"line_number":3801,"utf16_col":68}},"extent_utf16":{"start":{"line_number":3801,"utf16_col":15},"end":{"line_number":3806,"utf16_col":5}}},{"name":"isDebuggerActive","kind":"function","ident_start":139061,"ident_end":139077,"extent_start":139056,"extent_end":139136,"fully_qualified_name":"isDebuggerActive","ident_utf16":{"start":{"line_number":3803,"utf16_col":13},"end":{"line_number":3803,"utf16_col":29}},"extent_utf16":{"start":{"line_number":3803,"utf16_col":8},"end":{"line_number":3805,"utf16_col":9}}},{"name":"isDebuggerActive","kind":"function","ident_start":139183,"ident_end":139199,"extent_start":139178,"extent_end":139219,"fully_qualified_name":"isDebuggerActive","ident_utf16":{"start":{"line_number":3809,"utf16_col":12},"end":{"line_number":3809,"utf16_col":28}},"extent_utf16":{"start":{"line_number":3809,"utf16_col":7},"end":{"line_number":3809,"utf16_col":48}}},{"name":"streamReconstructedExpression","kind":"method","ident_start":139299,"ident_end":139328,"extent_start":139272,"extent_end":139618,"fully_qualified_name":"ITransientExpression::streamReconstructedExpression","ident_utf16":{"start":{"line_number":3818,"utf16_col":31},"end":{"line_number":3818,"utf16_col":60}},"extent_utf16":{"start":{"line_number":3818,"utf16_col":4},"end":{"line_number":3823,"utf16_col":5}}},{"name":"formatReconstructedExpression","kind":"function","ident_start":139629,"ident_end":139658,"extent_start":139624,"extent_end":140016,"fully_qualified_name":"formatReconstructedExpression","ident_utf16":{"start":{"line_number":3825,"utf16_col":9},"end":{"line_number":3825,"utf16_col":38}},"extent_utf16":{"start":{"line_number":3825,"utf16_col":4},"end":{"line_number":3832,"utf16_col":5}}},{"name":"throw_exception","kind":"function","ident_start":140194,"ident_end":140209,"extent_start":140172,"extent_end":140425,"fully_qualified_name":"throw_exception","ident_utf16":{"start":{"line_number":3843,"utf16_col":9},"end":{"line_number":3843,"utf16_col":24}},"extent_utf16":{"start":{"line_number":3842,"utf16_col":4},"end":{"line_number":3847,"utf16_col":5}}},{"name":"throw_logic_error","kind":"function","ident_start":140460,"ident_end":140477,"extent_start":140438,"extent_end":140557,"fully_qualified_name":"throw_logic_error","ident_utf16":{"start":{"line_number":3851,"utf16_col":9},"end":{"line_number":3851,"utf16_col":26}},"extent_utf16":{"start":{"line_number":3850,"utf16_col":4},"end":{"line_number":3853,"utf16_col":5}}},{"name":"throw_domain_error","kind":"function","ident_start":140585,"ident_end":140603,"extent_start":140563,"extent_end":140684,"fully_qualified_name":"throw_domain_error","ident_utf16":{"start":{"line_number":3856,"utf16_col":9},"end":{"line_number":3856,"utf16_col":27}},"extent_utf16":{"start":{"line_number":3855,"utf16_col":4},"end":{"line_number":3858,"utf16_col":5}}},{"name":"throw_runtime_error","kind":"function","ident_start":140712,"ident_end":140731,"extent_start":140690,"extent_end":140813,"fully_qualified_name":"throw_runtime_error","ident_utf16":{"start":{"line_number":3861,"utf16_col":9},"end":{"line_number":3861,"utf16_col":28}},"extent_utf16":{"start":{"line_number":3860,"utf16_col":4},"end":{"line_number":3863,"utf16_col":5}}},{"name":"extractInstanceName","kind":"function","ident_start":141168,"ident_end":141187,"extent_start":141158,"extent_end":141553,"fully_qualified_name":"extractInstanceName","ident_utf16":{"start":{"line_number":3882,"utf16_col":22},"end":{"line_number":3882,"utf16_col":41}},"extent_utf16":{"start":{"line_number":3882,"utf16_col":12},"end":{"line_number":3889,"utf16_col":13}}},{"name":"parseEnums","kind":"function","ident_start":141596,"ident_end":141606,"extent_start":141573,"extent_end":141958,"fully_qualified_name":"parseEnums","ident_utf16":{"start":{"line_number":3892,"utf16_col":31},"end":{"line_number":3892,"utf16_col":41}},"extent_utf16":{"start":{"line_number":3892,"utf16_col":8},"end":{"line_number":3900,"utf16_col":9}}},{"name":"lookup","kind":"method","ident_start":142030,"ident_end":142036,"extent_start":142010,"extent_end":142288,"fully_qualified_name":"EnumInfo::lookup","ident_utf16":{"start":{"line_number":3904,"utf16_col":28},"end":{"line_number":3904,"utf16_col":34}},"extent_utf16":{"start":{"line_number":3904,"utf16_col":8},"end":{"line_number":3910,"utf16_col":9}}},{"name":"makeEnumInfo","kind":"function","ident_start":142334,"ident_end":142346,"extent_start":142298,"extent_end":142915,"fully_qualified_name":"makeEnumInfo","ident_utf16":{"start":{"line_number":3912,"utf16_col":44},"end":{"line_number":3912,"utf16_col":56}},"extent_utf16":{"start":{"line_number":3912,"utf16_col":8},"end":{"line_number":3924,"utf16_col":9}}},{"name":"ErrnoGuard","kind":"method","ident_start":143277,"ident_end":143287,"extent_start":143265,"extent_end":143309,"fully_qualified_name":"ErrnoGuard::ErrnoGuard","ident_utf16":{"start":{"line_number":3941,"utf16_col":20},"end":{"line_number":3941,"utf16_col":30}},"extent_utf16":{"start":{"line_number":3941,"utf16_col":8},"end":{"line_number":3941,"utf16_col":52}}},{"name":"tryTranslators","kind":"function","ident_start":143503,"ident_end":143517,"extent_start":143484,"extent_end":143930,"fully_qualified_name":"tryTranslators","ident_utf16":{"start":{"line_number":3953,"utf16_col":27},"end":{"line_number":3953,"utf16_col":41}},"extent_utf16":{"start":{"line_number":3953,"utf16_col":8},"end":{"line_number":3962,"utf16_col":9}}},{"name":"registerTranslator","kind":"method","ident_start":144104,"ident_end":144122,"extent_start":144070,"extent_end":144248,"fully_qualified_name":"ExceptionTranslatorRegistry::registerTranslator","ident_utf16":{"start":{"line_number":3969,"utf16_col":38},"end":{"line_number":3969,"utf16_col":56}},"extent_utf16":{"start":{"line_number":3969,"utf16_col":4},"end":{"line_number":3971,"utf16_col":5}}},{"name":"translateActiveException","kind":"method","ident_start":144341,"ident_end":144365,"extent_start":144300,"extent_end":145869,"fully_qualified_name":"ExceptionTranslatorRegistry::translateActiveException","ident_utf16":{"start":{"line_number":3974,"utf16_col":45},"end":{"line_number":3974,"utf16_col":69}},"extent_utf16":{"start":{"line_number":3974,"utf16_col":4},"end":{"line_number":4012,"utf16_col":5}}},{"name":"translateActiveException","kind":"method","ident_start":145981,"ident_end":146005,"extent_start":145940,"extent_end":146133,"fully_qualified_name":"ExceptionTranslatorRegistry::translateActiveException","ident_utf16":{"start":{"line_number":4015,"utf16_col":45},"end":{"line_number":4015,"utf16_col":69}},"extent_utf16":{"start":{"line_number":4015,"utf16_col":4},"end":{"line_number":4017,"utf16_col":5}}},{"name":"engage_platform","kind":"method","ident_start":147181,"ident_end":147196,"extent_start":147153,"extent_end":147201,"fully_qualified_name":"FatalConditionHandler::engage_platform","ident_utf16":{"start":{"line_number":4052,"utf16_col":32},"end":{"line_number":4052,"utf16_col":47}},"extent_utf16":{"start":{"line_number":4052,"utf16_col":4},"end":{"line_number":4052,"utf16_col":52}}},{"name":"disengage_platform","kind":"method","ident_start":147234,"ident_end":147252,"extent_start":147206,"extent_end":147266,"fully_qualified_name":"FatalConditionHandler::disengage_platform","ident_utf16":{"start":{"line_number":4053,"utf16_col":32},"end":{"line_number":4053,"utf16_col":50}},"extent_utf16":{"start":{"line_number":4053,"utf16_col":4},"end":{"line_number":4053,"utf16_col":64}}},{"name":"FatalConditionHandler","kind":"method","ident_start":147294,"ident_end":147315,"extent_start":147271,"extent_end":147328,"fully_qualified_name":"FatalConditionHandler::FatalConditionHandler","ident_utf16":{"start":{"line_number":4054,"utf16_col":27},"end":{"line_number":4054,"utf16_col":48}},"extent_utf16":{"start":{"line_number":4054,"utf16_col":4},"end":{"line_number":4054,"utf16_col":61}}},{"name":"reportFatal","kind":"function","ident_start":147904,"ident_end":147915,"extent_start":147899,"extent_end":148046,"fully_qualified_name":"reportFatal","ident_utf16":{"start":{"line_number":4069,"utf16_col":9},"end":{"line_number":4069,"utf16_col":20}},"extent_utf16":{"start":{"line_number":4069,"utf16_col":4},"end":{"line_number":4071,"utf16_col":5}}},{"name":"SignalDefs","kind":"class","ident_start":148454,"ident_end":148464,"extent_start":148447,"extent_end":148496,"fully_qualified_name":"SignalDefs","ident_utf16":{"start":{"line_number":4085,"utf16_col":11},"end":{"line_number":4085,"utf16_col":21}},"extent_utf16":{"start":{"line_number":4085,"utf16_col":4},"end":{"line_number":4085,"utf16_col":53}}},{"name":"topLevelExceptionFilter","kind":"function","ident_start":149059,"ident_end":149082,"extent_start":149038,"extent_end":149473,"fully_qualified_name":"topLevelExceptionFilter","ident_utf16":{"start":{"line_number":4097,"utf16_col":25},"end":{"line_number":4097,"utf16_col":48}},"extent_utf16":{"start":{"line_number":4097,"utf16_col":4},"end":{"line_number":4106,"utf16_col":5}}},{"name":"FatalConditionHandler","kind":"method","ident_start":149869,"ident_end":149890,"extent_start":149846,"extent_end":150323,"fully_qualified_name":"FatalConditionHandler::FatalConditionHandler","ident_utf16":{"start":{"line_number":4116,"utf16_col":27},"end":{"line_number":4116,"utf16_col":48}},"extent_utf16":{"start":{"line_number":4116,"utf16_col":4},"end":{"line_number":4125,"utf16_col":5}}},{"name":"engage_platform","kind":"method","ident_start":150552,"ident_end":150567,"extent_start":150524,"extent_end":150730,"fully_qualified_name":"FatalConditionHandler::engage_platform","ident_utf16":{"start":{"line_number":4132,"utf16_col":32},"end":{"line_number":4132,"utf16_col":47}},"extent_utf16":{"start":{"line_number":4132,"utf16_col":4},"end":{"line_number":4135,"utf16_col":5}}},{"name":"disengage_platform","kind":"method","ident_start":150764,"ident_end":150782,"extent_start":150736,"extent_end":151155,"fully_qualified_name":"FatalConditionHandler::disengage_platform","ident_utf16":{"start":{"line_number":4137,"utf16_col":32},"end":{"line_number":4137,"utf16_col":50}},"extent_utf16":{"start":{"line_number":4137,"utf16_col":4},"end":{"line_number":4144,"utf16_col":5}}},{"name":"SignalDefs","kind":"class","ident_start":151313,"ident_end":151323,"extent_start":151306,"extent_end":151373,"fully_qualified_name":"SignalDefs","ident_utf16":{"start":{"line_number":4156,"utf16_col":11},"end":{"line_number":4156,"utf16_col":21}},"extent_utf16":{"start":{"line_number":4156,"utf16_col":4},"end":{"line_number":4159,"utf16_col":5}}},{"name":"restorePreviousSignalHandlers","kind":"function","ident_start":152286,"ident_end":152315,"extent_start":152274,"extent_end":152819,"fully_qualified_name":"restorePreviousSignalHandlers","ident_utf16":{"start":{"line_number":4183,"utf16_col":16},"end":{"line_number":4183,"utf16_col":45}},"extent_utf16":{"start":{"line_number":4183,"utf16_col":4},"end":{"line_number":4193,"utf16_col":5}}},{"name":"handleSignal","kind":"function","ident_start":152837,"ident_end":152849,"extent_start":152825,"extent_end":153354,"fully_qualified_name":"handleSignal","ident_utf16":{"start":{"line_number":4195,"utf16_col":16},"end":{"line_number":4195,"utf16_col":28}},"extent_utf16":{"start":{"line_number":4195,"utf16_col":4},"end":{"line_number":4209,"utf16_col":5}}},{"name":"FatalConditionHandler","kind":"method","ident_start":153383,"ident_end":153404,"extent_start":153360,"extent_end":153694,"fully_qualified_name":"FatalConditionHandler::FatalConditionHandler","ident_utf16":{"start":{"line_number":4211,"utf16_col":27},"end":{"line_number":4211,"utf16_col":48}},"extent_utf16":{"start":{"line_number":4211,"utf16_col":4},"end":{"line_number":4217,"utf16_col":5}}},{"name":"engage_platform","kind":"method","ident_start":153951,"ident_end":153966,"extent_start":153923,"extent_end":154423,"fully_qualified_name":"FatalConditionHandler::engage_platform","ident_utf16":{"start":{"line_number":4226,"utf16_col":32},"end":{"line_number":4226,"utf16_col":47}},"extent_utf16":{"start":{"line_number":4226,"utf16_col":4},"end":{"line_number":4239,"utf16_col":5}}},{"name":"disengage_platform","kind":"method","ident_start":154519,"ident_end":154537,"extent_start":154491,"extent_end":154597,"fully_qualified_name":"FatalConditionHandler::disengage_platform","ident_utf16":{"start":{"line_number":4246,"utf16_col":32},"end":{"line_number":4246,"utf16_col":50}},"extent_utf16":{"start":{"line_number":4246,"utf16_col":4},"end":{"line_number":4248,"utf16_col":5}}},{"name":"convertToBits","kind":"function","ident_start":154745,"ident_end":154758,"extent_start":154736,"extent_end":154976,"fully_qualified_name":"convertToBits","ident_utf16":{"start":{"line_number":4262,"utf16_col":17},"end":{"line_number":4262,"utf16_col":30}},"extent_utf16":{"start":{"line_number":4262,"utf16_col":8},"end":{"line_number":4267,"utf16_col":9}}},{"name":"convertToBits","kind":"function","ident_start":154995,"ident_end":155008,"extent_start":154986,"extent_end":155228,"fully_qualified_name":"convertToBits","ident_utf16":{"start":{"line_number":4269,"utf16_col":17},"end":{"line_number":4269,"utf16_col":30}},"extent_utf16":{"start":{"line_number":4269,"utf16_col":8},"end":{"line_number":4274,"utf16_col":9}}},{"name":"directCompare","kind":"function","ident_start":155381,"ident_end":155394,"extent_start":155376,"extent_end":155441,"fully_qualified_name":"directCompare","ident_utf16":{"start":{"line_number":4280,"utf16_col":13},"end":{"line_number":4280,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4280,"utf16_col":8},"end":{"line_number":4280,"utf16_col":73}}},{"name":"directCompare","kind":"function","ident_start":155455,"ident_end":155468,"extent_start":155450,"extent_end":155517,"fully_qualified_name":"directCompare","ident_utf16":{"start":{"line_number":4281,"utf16_col":13},"end":{"line_number":4281,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4281,"utf16_col":8},"end":{"line_number":4281,"utf16_col":75}}},{"name":"StreamBufImpl","kind":"class","ident_start":156460,"ident_end":156473,"extent_start":156454,"extent_end":157473,"fully_qualified_name":"StreamBufImpl","ident_utf16":{"start":{"line_number":4335,"utf16_col":14},"end":{"line_number":4335,"utf16_col":27}},"extent_utf16":{"start":{"line_number":4335,"utf16_col":8},"end":{"line_number":4368,"utf16_col":9}}},{"name":"StreamBufImpl","kind":"function","ident_start":156600,"ident_end":156613,"extent_start":156600,"extent_end":156682,"fully_qualified_name":"StreamBufImpl::StreamBufImpl","ident_utf16":{"start":{"line_number":4340,"utf16_col":12},"end":{"line_number":4340,"utf16_col":25}},"extent_utf16":{"start":{"line_number":4340,"utf16_col":12},"end":{"line_number":4342,"utf16_col":13}}},{"name":"overflow","kind":"function","ident_start":156820,"ident_end":156828,"extent_start":156816,"extent_end":157169,"fully_qualified_name":"StreamBufImpl::overflow","ident_utf16":{"start":{"line_number":4349,"utf16_col":16},"end":{"line_number":4349,"utf16_col":24}},"extent_utf16":{"start":{"line_number":4349,"utf16_col":12},"end":{"line_number":4359,"utf16_col":13}}},{"name":"sync","kind":"function","ident_start":157187,"ident_end":157191,"extent_start":157183,"extent_end":157463,"fully_qualified_name":"StreamBufImpl::sync","ident_utf16":{"start":{"line_number":4361,"utf16_col":16},"end":{"line_number":4361,"utf16_col":20}},"extent_utf16":{"start":{"line_number":4361,"utf16_col":12},"end":{"line_number":4367,"utf16_col":13}}},{"name":"OutputDebugWriter","kind":"class","ident_start":157576,"ident_end":157593,"extent_start":157569,"extent_end":157780,"fully_qualified_name":"OutputDebugWriter","ident_utf16":{"start":{"line_number":4372,"utf16_col":15},"end":{"line_number":4372,"utf16_col":32}},"extent_utf16":{"start":{"line_number":4372,"utf16_col":8},"end":{"line_number":4379,"utf16_col":9}}},{"name":"FileStream","kind":"class","ident_start":157882,"ident_end":157892,"extent_start":157876,"extent_end":158344,"fully_qualified_name":"FileStream","ident_utf16":{"start":{"line_number":4383,"utf16_col":14},"end":{"line_number":4383,"utf16_col":24}},"extent_utf16":{"start":{"line_number":4383,"utf16_col":8},"end":{"line_number":4395,"utf16_col":9}}},{"name":"FileStream","kind":"function","ident_start":157979,"ident_end":157989,"extent_start":157979,"extent_end":158217,"fully_qualified_name":"FileStream::FileStream","ident_utf16":{"start":{"line_number":4386,"utf16_col":12},"end":{"line_number":4386,"utf16_col":22}},"extent_utf16":{"start":{"line_number":4386,"utf16_col":12},"end":{"line_number":4390,"utf16_col":13}}},{"name":"CoutStream","kind":"class","ident_start":158446,"ident_end":158456,"extent_start":158440,"extent_end":158868,"fully_qualified_name":"CoutStream","ident_utf16":{"start":{"line_number":4399,"utf16_col":14},"end":{"line_number":4399,"utf16_col":24}},"extent_utf16":{"start":{"line_number":4399,"utf16_col":8},"end":{"line_number":4409,"utf16_col":9}}},{"name":"CoutStream","kind":"function","ident_start":158661,"ident_end":158671,"extent_start":158661,"extent_end":158708,"fully_qualified_name":"CoutStream::CoutStream","ident_utf16":{"start":{"line_number":4404,"utf16_col":12},"end":{"line_number":4404,"utf16_col":22}},"extent_utf16":{"start":{"line_number":4404,"utf16_col":12},"end":{"line_number":4404,"utf16_col":59}}},{"name":"isConsole","kind":"function","ident_start":158815,"ident_end":158824,"extent_start":158810,"extent_end":158858,"fully_qualified_name":"CoutStream::isConsole","ident_utf16":{"start":{"line_number":4408,"utf16_col":17},"end":{"line_number":4408,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4408,"utf16_col":12},"end":{"line_number":4408,"utf16_col":60}}},{"name":"CerrStream","kind":"class","ident_start":158885,"ident_end":158895,"extent_start":158879,"extent_end":159301,"fully_qualified_name":"CerrStream","ident_utf16":{"start":{"line_number":4411,"utf16_col":14},"end":{"line_number":4411,"utf16_col":24}},"extent_utf16":{"start":{"line_number":4411,"utf16_col":8},"end":{"line_number":4422,"utf16_col":9}}},{"name":"CerrStream","kind":"function","ident_start":159095,"ident_end":159105,"extent_start":159095,"extent_end":159141,"fully_qualified_name":"CerrStream::CerrStream","ident_utf16":{"start":{"line_number":4417,"utf16_col":12},"end":{"line_number":4417,"utf16_col":22}},"extent_utf16":{"start":{"line_number":4417,"utf16_col":12},"end":{"line_number":4417,"utf16_col":58}}},{"name":"isConsole","kind":"function","ident_start":159248,"ident_end":159257,"extent_start":159243,"extent_end":159291,"fully_qualified_name":"CerrStream::isConsole","ident_utf16":{"start":{"line_number":4421,"utf16_col":17},"end":{"line_number":4421,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4421,"utf16_col":12},"end":{"line_number":4421,"utf16_col":60}}},{"name":"DebugOutStream","kind":"class","ident_start":159403,"ident_end":159417,"extent_start":159397,"extent_end":159840,"fully_qualified_name":"DebugOutStream","ident_utf16":{"start":{"line_number":4426,"utf16_col":14},"end":{"line_number":4426,"utf16_col":28}},"extent_utf16":{"start":{"line_number":4426,"utf16_col":8},"end":{"line_number":4437,"utf16_col":9}}},{"name":"DebugOutStream","kind":"function","ident_start":159580,"ident_end":159594,"extent_start":159580,"extent_end":159741,"fully_qualified_name":"DebugOutStream::DebugOutStream","ident_utf16":{"start":{"line_number":4430,"utf16_col":12},"end":{"line_number":4430,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4430,"utf16_col":12},"end":{"line_number":4433,"utf16_col":14}}},{"name":"makeStream","kind":"function","ident_start":159983,"ident_end":159993,"extent_start":159978,"extent_end":160757,"fully_qualified_name":"makeStream","ident_utf16":{"start":{"line_number":4444,"utf16_col":9},"end":{"line_number":4444,"utf16_col":19}},"extent_utf16":{"start":{"line_number":4444,"utf16_col":4},"end":{"line_number":4460,"utf16_col":5}}},{"name":"indent","kind":"method","ident_start":160802,"ident_end":160808,"extent_start":160786,"extent_end":160945,"fully_qualified_name":"JsonUtils::indent","ident_utf16":{"start":{"line_number":4467,"utf16_col":20},"end":{"line_number":4467,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4467,"utf16_col":4},"end":{"line_number":4471,"utf16_col":5}}},{"name":"appendCommaNewline","kind":"method","ident_start":160966,"ident_end":160984,"extent_start":160950,"extent_end":161254,"fully_qualified_name":"JsonUtils::appendCommaNewline","ident_utf16":{"start":{"line_number":4472,"utf16_col":20},"end":{"line_number":4472,"utf16_col":38}},"extent_utf16":{"start":{"line_number":4472,"utf16_col":4},"end":{"line_number":4479,"utf16_col":5}}},{"name":"JsonObjectWriter","kind":"method","ident_start":161278,"ident_end":161294,"extent_start":161260,"extent_end":161352,"fully_qualified_name":"JsonObjectWriter::JsonObjectWriter","ident_utf16":{"start":{"line_number":4481,"utf16_col":22},"end":{"line_number":4481,"utf16_col":38}},"extent_utf16":{"start":{"line_number":4481,"utf16_col":4},"end":{"line_number":4482,"utf16_col":36}}},{"name":"JsonObjectWriter","kind":"method","ident_start":161376,"ident_end":161392,"extent_start":161358,"extent_end":161561,"fully_qualified_name":"JsonObjectWriter::JsonObjectWriter","ident_utf16":{"start":{"line_number":4484,"utf16_col":22},"end":{"line_number":4484,"utf16_col":38}},"extent_utf16":{"start":{"line_number":4484,"utf16_col":4},"end":{"line_number":4488,"utf16_col":5}}},{"name":"JsonObjectWriter","kind":"method","ident_start":161584,"ident_end":161600,"extent_start":161566,"extent_end":161843,"fully_qualified_name":"JsonObjectWriter::JsonObjectWriter","ident_utf16":{"start":{"line_number":4489,"utf16_col":22},"end":{"line_number":4489,"utf16_col":38}},"extent_utf16":{"start":{"line_number":4489,"utf16_col":4},"end":{"line_number":4495,"utf16_col":5}}},{"name":"write","kind":"method","ident_start":162066,"ident_end":162071,"extent_start":162032,"extent_end":162290,"fully_qualified_name":"JsonObjectWriter::write","ident_utf16":{"start":{"line_number":4505,"utf16_col":38},"end":{"line_number":4505,"utf16_col":43}},"extent_utf16":{"start":{"line_number":4505,"utf16_col":4},"end":{"line_number":4511,"utf16_col":5}}},{"name":"JsonArrayWriter","kind":"method","ident_start":162313,"ident_end":162328,"extent_start":162296,"extent_end":162385,"fully_qualified_name":"JsonArrayWriter::JsonArrayWriter","ident_utf16":{"start":{"line_number":4513,"utf16_col":21},"end":{"line_number":4513,"utf16_col":36}},"extent_utf16":{"start":{"line_number":4513,"utf16_col":4},"end":{"line_number":4514,"utf16_col":35}}},{"name":"JsonArrayWriter","kind":"method","ident_start":162407,"ident_end":162422,"extent_start":162390,"extent_end":162589,"fully_qualified_name":"JsonArrayWriter::JsonArrayWriter","ident_utf16":{"start":{"line_number":4515,"utf16_col":21},"end":{"line_number":4515,"utf16_col":36}},"extent_utf16":{"start":{"line_number":4515,"utf16_col":4},"end":{"line_number":4519,"utf16_col":5}}},{"name":"JsonArrayWriter","kind":"method","ident_start":162611,"ident_end":162626,"extent_start":162594,"extent_end":162868,"fully_qualified_name":"JsonArrayWriter::JsonArrayWriter","ident_utf16":{"start":{"line_number":4520,"utf16_col":21},"end":{"line_number":4520,"utf16_col":36}},"extent_utf16":{"start":{"line_number":4520,"utf16_col":4},"end":{"line_number":4526,"utf16_col":5}}},{"name":"writeObject","kind":"method","ident_start":163088,"ident_end":163099,"extent_start":163054,"extent_end":163265,"fully_qualified_name":"JsonArrayWriter::writeObject","ident_utf16":{"start":{"line_number":4535,"utf16_col":38},"end":{"line_number":4535,"utf16_col":49}},"extent_utf16":{"start":{"line_number":4535,"utf16_col":4},"end":{"line_number":4539,"utf16_col":5}}},{"name":"writeArray","kind":"method","ident_start":163304,"ident_end":163314,"extent_start":163271,"extent_end":163479,"fully_qualified_name":"JsonArrayWriter::writeArray","ident_utf16":{"start":{"line_number":4541,"utf16_col":37},"end":{"line_number":4541,"utf16_col":47}},"extent_utf16":{"start":{"line_number":4541,"utf16_col":4},"end":{"line_number":4545,"utf16_col":5}}},{"name":"JsonValueWriter","kind":"method","ident_start":163604,"ident_end":163619,"extent_start":163587,"extent_end":163676,"fully_qualified_name":"JsonValueWriter::JsonValueWriter","ident_utf16":{"start":{"line_number":4551,"utf16_col":21},"end":{"line_number":4551,"utf16_col":36}},"extent_utf16":{"start":{"line_number":4551,"utf16_col":4},"end":{"line_number":4552,"utf16_col":35}}},{"name":"JsonValueWriter","kind":"method","ident_start":163699,"ident_end":163714,"extent_start":163682,"extent_end":163855,"fully_qualified_name":"JsonValueWriter::JsonValueWriter","ident_utf16":{"start":{"line_number":4554,"utf16_col":21},"end":{"line_number":4554,"utf16_col":36}},"extent_utf16":{"start":{"line_number":4554,"utf16_col":4},"end":{"line_number":4556,"utf16_col":53}}},{"name":"writeObject","kind":"method","ident_start":163895,"ident_end":163906,"extent_start":163861,"extent_end":163976,"fully_qualified_name":"JsonValueWriter::writeObject","ident_utf16":{"start":{"line_number":4558,"utf16_col":38},"end":{"line_number":4558,"utf16_col":49}},"extent_utf16":{"start":{"line_number":4558,"utf16_col":4},"end":{"line_number":4560,"utf16_col":5}}},{"name":"writeArray","kind":"method","ident_start":164015,"ident_end":164025,"extent_start":163982,"extent_end":164094,"fully_qualified_name":"JsonValueWriter::writeArray","ident_utf16":{"start":{"line_number":4562,"utf16_col":37},"end":{"line_number":4562,"utf16_col":47}},"extent_utf16":{"start":{"line_number":4562,"utf16_col":4},"end":{"line_number":4564,"utf16_col":5}}},{"name":"write","kind":"method","ident_start":164122,"ident_end":164127,"extent_start":164100,"extent_end":164198,"fully_qualified_name":"JsonValueWriter::write","ident_utf16":{"start":{"line_number":4566,"utf16_col":26},"end":{"line_number":4566,"utf16_col":31}},"extent_utf16":{"start":{"line_number":4566,"utf16_col":4},"end":{"line_number":4568,"utf16_col":5}}},{"name":"write","kind":"method","ident_start":164226,"ident_end":164231,"extent_start":164204,"extent_end":164316,"fully_qualified_name":"JsonValueWriter::write","ident_utf16":{"start":{"line_number":4570,"utf16_col":26},"end":{"line_number":4570,"utf16_col":31}},"extent_utf16":{"start":{"line_number":4570,"utf16_col":4},"end":{"line_number":4572,"utf16_col":5}}},{"name":"writeImpl","kind":"method","ident_start":164344,"ident_end":164353,"extent_start":164322,"extent_end":165356,"fully_qualified_name":"JsonValueWriter::writeImpl","ident_utf16":{"start":{"line_number":4574,"utf16_col":26},"end":{"line_number":4574,"utf16_col":35}},"extent_utf16":{"start":{"line_number":4574,"utf16_col":4},"end":{"line_number":4601,"utf16_col":5}}},{"name":"LeakDetector","kind":"method","ident_start":166055,"ident_end":166067,"extent_start":166041,"extent_end":166477,"fully_qualified_name":"LeakDetector::LeakDetector","ident_utf16":{"start":{"line_number":4635,"utf16_col":18},"end":{"line_number":4635,"utf16_col":30}},"extent_utf16":{"start":{"line_number":4635,"utf16_col":4},"end":{"line_number":4644,"utf16_col":5}}},{"name":"listTests","kind":"function","ident_start":166769,"ident_end":166778,"extent_start":166764,"extent_end":167041,"fully_qualified_name":"listTests","ident_utf16":{"start":{"line_number":4663,"utf16_col":13},"end":{"line_number":4663,"utf16_col":22}},"extent_utf16":{"start":{"line_number":4663,"utf16_col":8},"end":{"line_number":4667,"utf16_col":9}}},{"name":"listTags","kind":"function","ident_start":167056,"ident_end":167064,"extent_start":167051,"extent_end":168043,"fully_qualified_name":"listTags","ident_utf16":{"start":{"line_number":4669,"utf16_col":13},"end":{"line_number":4669,"utf16_col":21}},"extent_utf16":{"start":{"line_number":4669,"utf16_col":8},"end":{"line_number":4689,"utf16_col":9}}},{"name":"listReporters","kind":"function","ident_start":168058,"ident_end":168071,"extent_start":168053,"extent_end":168510,"fully_qualified_name":"listReporters","ident_utf16":{"start":{"line_number":4691,"utf16_col":13},"end":{"line_number":4691,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4691,"utf16_col":8},"end":{"line_number":4701,"utf16_col":9}}},{"name":"listListeners","kind":"function","ident_start":168525,"ident_end":168538,"extent_start":168520,"extent_end":168999,"fully_qualified_name":"listListeners","ident_utf16":{"start":{"line_number":4703,"utf16_col":13},"end":{"line_number":4703,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4703,"utf16_col":8},"end":{"line_number":4714,"utf16_col":9}}},{"name":"add","kind":"method","ident_start":169053,"ident_end":169056,"extent_start":169039,"extent_end":169141,"fully_qualified_name":"TagInfo::add","ident_utf16":{"start":{"line_number":4718,"utf16_col":18},"end":{"line_number":4718,"utf16_col":21}},"extent_utf16":{"start":{"line_number":4718,"utf16_col":4},"end":{"line_number":4721,"utf16_col":5}}},{"name":"all","kind":"method","ident_start":169168,"ident_end":169171,"extent_start":169147,"extent_end":169575,"fully_qualified_name":"TagInfo::all","ident_utf16":{"start":{"line_number":4723,"utf16_col":25},"end":{"line_number":4723,"utf16_col":28}},"extent_utf16":{"start":{"line_number":4723,"utf16_col":4},"end":{"line_number":4737,"utf16_col":5}}},{"name":"list","kind":"function","ident_start":169586,"ident_end":169590,"extent_start":169581,"extent_end":170150,"fully_qualified_name":"list","ident_utf16":{"start":{"line_number":4739,"utf16_col":9},"end":{"line_number":4739,"utf16_col":13}},"extent_utf16":{"start":{"line_number":4739,"utf16_col":4},"end":{"line_number":4758,"utf16_col":5}}},{"name":"wmain","kind":"function","ident_start":170693,"ident_end":170698,"extent_start":170681,"extent_end":184371,"fully_qualified_name":"wmain","ident_utf16":{"start":{"line_number":4776,"utf16_col":23},"end":{"line_number":4776,"utf16_col":28}},"extent_utf16":{"start":{"line_number":4776,"utf16_col":11},"end":{"line_number":5180,"utf16_col":1}}},{"name":"main","kind":"function","ident_start":170789,"ident_end":170793,"extent_start":170785,"extent_end":171052,"fully_qualified_name":"main","ident_utf16":{"start":{"line_number":4779,"utf16_col":4},"end":{"line_number":4779,"utf16_col":8}},"extent_utf16":{"start":{"line_number":4779,"utf16_col":0},"end":{"line_number":4787,"utf16_col":1}}},{"name":"MessageInfo","kind":"method","ident_start":171143,"ident_end":171154,"extent_start":171130,"extent_end":171430,"fully_qualified_name":"MessageInfo::MessageInfo","ident_utf16":{"start":{"line_number":4796,"utf16_col":17},"end":{"line_number":4796,"utf16_col":28}},"extent_utf16":{"start":{"line_number":4796,"utf16_col":4},"end":{"line_number":4803,"utf16_col":6}}},{"name":"NoopRedirect","kind":"class","ident_start":172053,"ident_end":172065,"extent_start":172047,"extent_end":172355,"fully_qualified_name":"NoopRedirect","ident_utf16":{"start":{"line_number":4833,"utf16_col":14},"end":{"line_number":4833,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4833,"utf16_col":8},"end":{"line_number":4839,"utf16_col":9}}},{"name":"activateImpl","kind":"function","ident_start":172109,"ident_end":172121,"extent_start":172104,"extent_end":172135,"fully_qualified_name":"NoopRedirect::activateImpl","ident_utf16":{"start":{"line_number":4834,"utf16_col":17},"end":{"line_number":4834,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4834,"utf16_col":12},"end":{"line_number":4834,"utf16_col":43}}},{"name":"deactivateImpl","kind":"function","ident_start":172153,"ident_end":172167,"extent_start":172148,"extent_end":172181,"fully_qualified_name":"NoopRedirect::deactivateImpl","ident_utf16":{"start":{"line_number":4835,"utf16_col":17},"end":{"line_number":4835,"utf16_col":31}},"extent_utf16":{"start":{"line_number":4835,"utf16_col":12},"end":{"line_number":4835,"utf16_col":45}}},{"name":"getStdout","kind":"function","ident_start":172206,"ident_end":172215,"extent_start":172194,"extent_end":172241,"fully_qualified_name":"NoopRedirect::getStdout","ident_utf16":{"start":{"line_number":4836,"utf16_col":24},"end":{"line_number":4836,"utf16_col":33}},"extent_utf16":{"start":{"line_number":4836,"utf16_col":12},"end":{"line_number":4836,"utf16_col":59}}},{"name":"getStderr","kind":"function","ident_start":172266,"ident_end":172275,"extent_start":172254,"extent_end":172301,"fully_qualified_name":"NoopRedirect::getStderr","ident_utf16":{"start":{"line_number":4837,"utf16_col":24},"end":{"line_number":4837,"utf16_col":33}},"extent_utf16":{"start":{"line_number":4837,"utf16_col":12},"end":{"line_number":4837,"utf16_col":59}}},{"name":"clearBuffers","kind":"function","ident_start":172319,"ident_end":172331,"extent_start":172314,"extent_end":172345,"fully_qualified_name":"NoopRedirect::clearBuffers","ident_utf16":{"start":{"line_number":4838,"utf16_col":17},"end":{"line_number":4838,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4838,"utf16_col":12},"end":{"line_number":4838,"utf16_col":43}}},{"name":"RedirectedStreamNew","kind":"class","ident_start":172625,"ident_end":172644,"extent_start":172619,"extent_end":173295,"fully_qualified_name":"RedirectedStreamNew","ident_utf16":{"start":{"line_number":4848,"utf16_col":14},"end":{"line_number":4848,"utf16_col":33}},"extent_utf16":{"start":{"line_number":4848,"utf16_col":8},"end":{"line_number":4864,"utf16_col":9}}},{"name":"RedirectedStreamNew","kind":"function","ident_start":172806,"ident_end":172825,"extent_start":172806,"extent_end":173091,"fully_qualified_name":"RedirectedStreamNew::RedirectedStreamNew","ident_utf16":{"start":{"line_number":4854,"utf16_col":12},"end":{"line_number":4854,"utf16_col":31}},"extent_utf16":{"start":{"line_number":4854,"utf16_col":12},"end":{"line_number":4858,"utf16_col":56}}},{"name":"startRedirect","kind":"function","ident_start":173110,"ident_end":173123,"extent_start":173105,"extent_end":173212,"fully_qualified_name":"RedirectedStreamNew::startRedirect","ident_utf16":{"start":{"line_number":4860,"utf16_col":17},"end":{"line_number":4860,"utf16_col":30}},"extent_utf16":{"start":{"line_number":4860,"utf16_col":12},"end":{"line_number":4862,"utf16_col":13}}},{"name":"stopRedirect","kind":"function","ident_start":173230,"ident_end":173242,"extent_start":173225,"extent_end":173285,"fully_qualified_name":"RedirectedStreamNew::stopRedirect","ident_utf16":{"start":{"line_number":4863,"utf16_col":17},"end":{"line_number":4863,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4863,"utf16_col":12},"end":{"line_number":4863,"utf16_col":72}}},{"name":"StreamRedirect","kind":"class","ident_start":173485,"ident_end":173499,"extent_start":173479,"extent_end":174554,"fully_qualified_name":"StreamRedirect","ident_utf16":{"start":{"line_number":4870,"utf16_col":14},"end":{"line_number":4870,"utf16_col":28}},"extent_utf16":{"start":{"line_number":4870,"utf16_col":8},"end":{"line_number":4896,"utf16_col":9}}},{"name":"StreamRedirect","kind":"function","ident_start":173678,"ident_end":173692,"extent_start":173678,"extent_end":173889,"fully_qualified_name":"StreamRedirect::StreamRedirect","ident_utf16":{"start":{"line_number":4875,"utf16_col":12},"end":{"line_number":4875,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4875,"utf16_col":12},"end":{"line_number":4878,"utf16_col":65}}},{"name":"activateImpl","kind":"function","ident_start":173908,"ident_end":173920,"extent_start":173903,"extent_end":174067,"fully_qualified_name":"StreamRedirect::activateImpl","ident_utf16":{"start":{"line_number":4880,"utf16_col":17},"end":{"line_number":4880,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4880,"utf16_col":12},"end":{"line_number":4884,"utf16_col":13}}},{"name":"deactivateImpl","kind":"function","ident_start":174085,"ident_end":174099,"extent_start":174080,"extent_end":174243,"fully_qualified_name":"StreamRedirect::deactivateImpl","ident_utf16":{"start":{"line_number":4885,"utf16_col":17},"end":{"line_number":4885,"utf16_col":31}},"extent_utf16":{"start":{"line_number":4885,"utf16_col":12},"end":{"line_number":4889,"utf16_col":13}}},{"name":"getStdout","kind":"function","ident_start":174268,"ident_end":174277,"extent_start":174256,"extent_end":174322,"fully_qualified_name":"StreamRedirect::getStdout","ident_utf16":{"start":{"line_number":4890,"utf16_col":24},"end":{"line_number":4890,"utf16_col":33}},"extent_utf16":{"start":{"line_number":4890,"utf16_col":12},"end":{"line_number":4890,"utf16_col":78}}},{"name":"getStderr","kind":"function","ident_start":174347,"ident_end":174356,"extent_start":174335,"extent_end":174401,"fully_qualified_name":"StreamRedirect::getStderr","ident_utf16":{"start":{"line_number":4891,"utf16_col":24},"end":{"line_number":4891,"utf16_col":33}},"extent_utf16":{"start":{"line_number":4891,"utf16_col":12},"end":{"line_number":4891,"utf16_col":78}}},{"name":"clearBuffers","kind":"function","ident_start":174419,"ident_end":174431,"extent_start":174414,"extent_end":174544,"fully_qualified_name":"StreamRedirect::clearBuffers","ident_utf16":{"start":{"line_number":4892,"utf16_col":17},"end":{"line_number":4892,"utf16_col":29}},"extent_utf16":{"start":{"line_number":4892,"utf16_col":12},"end":{"line_number":4895,"utf16_col":13}}},{"name":"TempFile","kind":"class","ident_start":174876,"ident_end":174884,"extent_start":174870,"extent_end":177519,"fully_qualified_name":"TempFile","ident_utf16":{"start":{"line_number":4904,"utf16_col":14},"end":{"line_number":4904,"utf16_col":22}},"extent_utf16":{"start":{"line_number":4904,"utf16_col":8},"end":{"line_number":4973,"utf16_col":9}}},{"name":"TempFile","kind":"function","ident_start":174915,"ident_end":174923,"extent_start":174915,"extent_end":174952,"fully_qualified_name":"TempFile::TempFile","ident_utf16":{"start":{"line_number":4906,"utf16_col":12},"end":{"line_number":4906,"utf16_col":20}},"extent_utf16":{"start":{"line_number":4906,"utf16_col":12},"end":{"line_number":4906,"utf16_col":49}}},{"name":"TempFile","kind":"function","ident_start":175026,"ident_end":175034,"extent_start":175026,"extent_end":175058,"fully_qualified_name":"TempFile::TempFile","ident_utf16":{"start":{"line_number":4908,"utf16_col":12},"end":{"line_number":4908,"utf16_col":20}},"extent_utf16":{"start":{"line_number":4908,"utf16_col":12},"end":{"line_number":4908,"utf16_col":44}}},{"name":"TempFile","kind":"function","ident_start":175156,"ident_end":175164,"extent_start":175156,"extent_end":175833,"fully_qualified_name":"TempFile::TempFile","ident_utf16":{"start":{"line_number":4912,"utf16_col":12},"end":{"line_number":4912,"utf16_col":20}},"extent_utf16":{"start":{"line_number":4912,"utf16_col":12},"end":{"line_number":4926,"utf16_col":13}}},{"name":"TempFile","kind":"function","ident_start":175856,"ident_end":175864,"extent_start":175856,"extent_end":176050,"fully_qualified_name":"TempFile::TempFile","ident_utf16":{"start":{"line_number":4928,"utf16_col":12},"end":{"line_number":4928,"utf16_col":20}},"extent_utf16":{"start":{"line_number":4928,"utf16_col":12},"end":{"line_number":4933,"utf16_col":13}}},{"name":"getContents","kind":"function","ident_start":176468,"ident_end":176479,"extent_start":176456,"extent_end":177352,"fully_qualified_name":"TempFile::getContents","ident_utf16":{"start":{"line_number":4947,"utf16_col":24},"end":{"line_number":4947,"utf16_col":35}},"extent_utf16":{"start":{"line_number":4947,"utf16_col":12},"end":{"line_number":4966,"utf16_col":13}}},{"name":"clear","kind":"function","ident_start":177371,"ident_end":177376,"extent_start":177366,"extent_end":177405,"fully_qualified_name":"TempFile::clear","ident_utf16":{"start":{"line_number":4968,"utf16_col":17},"end":{"line_number":4968,"utf16_col":22}},"extent_utf16":{"start":{"line_number":4968,"utf16_col":12},"end":{"line_number":4968,"utf16_col":51}}},{"name":"FileRedirect","kind":"class","ident_start":177747,"ident_end":177759,"extent_start":177741,"extent_end":180322,"fully_qualified_name":"FileRedirect","ident_utf16":{"start":{"line_number":4981,"utf16_col":14},"end":{"line_number":4981,"utf16_col":26}},"extent_utf16":{"start":{"line_number":4981,"utf16_col":8},"end":{"line_number":5040,"utf16_col":9}}},{"name":"flushEverything","kind":"function","ident_start":177987,"ident_end":178002,"extent_start":177982,"extent_end":178354,"fully_qualified_name":"FileRedirect::flushEverything","ident_utf16":{"start":{"line_number":4987,"utf16_col":17},"end":{"line_number":4987,"utf16_col":32}},"extent_utf16":{"start":{"line_number":4987,"utf16_col":12},"end":{"line_number":4995,"utf16_col":13}}},{"name":"FileRedirect","kind":"function","ident_start":178384,"ident_end":178396,"extent_start":178384,"extent_end":178684,"fully_qualified_name":"FileRedirect::FileRedirect","ident_utf16":{"start":{"line_number":4998,"utf16_col":12},"end":{"line_number":4998,"utf16_col":24}},"extent_utf16":{"start":{"line_number":4998,"utf16_col":12},"end":{"line_number":5003,"utf16_col":13}}},{"name":"getStdout","kind":"function","ident_start":178710,"ident_end":178719,"extent_start":178698,"extent_end":178766,"fully_qualified_name":"FileRedirect::getStdout","ident_utf16":{"start":{"line_number":5005,"utf16_col":24},"end":{"line_number":5005,"utf16_col":33}},"extent_utf16":{"start":{"line_number":5005,"utf16_col":12},"end":{"line_number":5005,"utf16_col":80}}},{"name":"getStderr","kind":"function","ident_start":178791,"ident_end":178800,"extent_start":178779,"extent_end":178847,"fully_qualified_name":"FileRedirect::getStderr","ident_utf16":{"start":{"line_number":5006,"utf16_col":24},"end":{"line_number":5006,"utf16_col":33}},"extent_utf16":{"start":{"line_number":5006,"utf16_col":12},"end":{"line_number":5006,"utf16_col":80}}},{"name":"clearBuffers","kind":"function","ident_start":178865,"ident_end":178877,"extent_start":178860,"extent_end":178974,"fully_qualified_name":"FileRedirect::clearBuffers","ident_utf16":{"start":{"line_number":5007,"utf16_col":17},"end":{"line_number":5007,"utf16_col":29}},"extent_utf16":{"start":{"line_number":5007,"utf16_col":12},"end":{"line_number":5010,"utf16_col":13}}},{"name":"activateImpl","kind":"function","ident_start":178993,"ident_end":179005,"extent_start":178988,"extent_end":179642,"fully_qualified_name":"FileRedirect::activateImpl","ident_utf16":{"start":{"line_number":5012,"utf16_col":17},"end":{"line_number":5012,"utf16_col":29}},"extent_utf16":{"start":{"line_number":5012,"utf16_col":12},"end":{"line_number":5024,"utf16_col":13}}},{"name":"deactivateImpl","kind":"function","ident_start":179660,"ident_end":179674,"extent_start":179655,"extent_end":180312,"fully_qualified_name":"FileRedirect::deactivateImpl","ident_utf16":{"start":{"line_number":5025,"utf16_col":17},"end":{"line_number":5025,"utf16_col":31}},"extent_utf16":{"start":{"line_number":5025,"utf16_col":12},"end":{"line_number":5039,"utf16_col":13}}},{"name":"isRedirectAvailable","kind":"function","ident_start":180394,"ident_end":180413,"extent_start":180389,"extent_end":180787,"fully_qualified_name":"isRedirectAvailable","ident_utf16":{"start":{"line_number":5046,"utf16_col":9},"end":{"line_number":5046,"utf16_col":28}},"extent_utf16":{"start":{"line_number":5046,"utf16_col":4},"end":{"line_number":5059,"utf16_col":5}}},{"name":"makeOutputRedirect","kind":"function","ident_start":180828,"ident_end":180846,"extent_start":180793,"extent_end":181184,"fully_qualified_name":"makeOutputRedirect","ident_utf16":{"start":{"line_number":5061,"utf16_col":39},"end":{"line_number":5061,"utf16_col":57}},"extent_utf16":{"start":{"line_number":5061,"utf16_col":4},"end":{"line_number":5072,"utf16_col":5}}},{"name":"scopedActivate","kind":"function","ident_start":181204,"ident_end":181218,"extent_start":181190,"extent_end":181310,"fully_qualified_name":"scopedActivate","ident_utf16":{"start":{"line_number":5074,"utf16_col":18},"end":{"line_number":5074,"utf16_col":32}},"extent_utf16":{"start":{"line_number":5074,"utf16_col":4},"end":{"line_number":5076,"utf16_col":5}}},{"name":"scopedDeactivate","kind":"function","ident_start":181330,"ident_end":181346,"extent_start":181316,"extent_end":181439,"fully_qualified_name":"scopedDeactivate","ident_utf16":{"start":{"line_number":5078,"utf16_col":18},"end":{"line_number":5078,"utf16_col":34}},"extent_utf16":{"start":{"line_number":5078,"utf16_col":4},"end":{"line_number":5080,"utf16_col":5}}},{"name":"RedirectGuard","kind":"method","ident_start":181510,"ident_end":181523,"extent_start":181495,"extent_end":181954,"fully_qualified_name":"RedirectGuard::RedirectGuard","ident_utf16":{"start":{"line_number":5084,"utf16_col":19},"end":{"line_number":5084,"utf16_col":32}},"extent_utf16":{"start":{"line_number":5084,"utf16_col":4},"end":{"line_number":5097,"utf16_col":5}}},{"name":"RedirectGuard","kind":"method","ident_start":182324,"ident_end":182337,"extent_start":182309,"extent_end":182561,"fully_qualified_name":"RedirectGuard::RedirectGuard","ident_utf16":{"start":{"line_number":5111,"utf16_col":19},"end":{"line_number":5111,"utf16_col":32}},"extent_utf16":{"start":{"line_number":5111,"utf16_col":4},"end":{"line_number":5117,"utf16_col":5}}},{"name":"parseUInt","kind":"function","ident_start":183109,"ident_end":183118,"extent_start":183086,"extent_end":184096,"fully_qualified_name":"parseUInt","ident_utf16":{"start":{"line_number":5146,"utf16_col":27},"end":{"line_number":5146,"utf16_col":36}},"extent_utf16":{"start":{"line_number":5146,"utf16_col":4},"end":{"line_number":5170,"utf16_col":9}}},{"name":"CATCH_CATCH_ANON","kind":"function","ident_start":184105,"ident_end":184121,"extent_start":184105,"extent_end":184213,"fully_qualified_name":"CATCH_CATCH_ANON","ident_utf16":{"start":{"line_number":5171,"utf16_col":8},"end":{"line_number":5171,"utf16_col":24}},"extent_utf16":{"start":{"line_number":5171,"utf16_col":8},"end":{"line_number":5173,"utf16_col":9}}},{"name":"CATCH_CATCH_ANON","kind":"function","ident_start":184222,"ident_end":184238,"extent_start":184222,"extent_end":184343,"fully_qualified_name":"CATCH_CATCH_ANON","ident_utf16":{"start":{"line_number":5174,"utf16_col":8},"end":{"line_number":5174,"utf16_col":24}},"extent_utf16":{"start":{"line_number":5174,"utf16_col":8},"end":{"line_number":5176,"utf16_col":9}}},{"name":"isnan","kind":"function","ident_start":184483,"ident_end":184488,"extent_start":184478,"extent_end":184535,"fully_qualified_name":"isnan","ident_utf16":{"start":{"line_number":5190,"utf16_col":9},"end":{"line_number":5190,"utf16_col":14}},"extent_utf16":{"start":{"line_number":5190,"utf16_col":4},"end":{"line_number":5192,"utf16_col":5}}},{"name":"isnan","kind":"function","ident_start":184545,"ident_end":184550,"extent_start":184540,"extent_end":184598,"fully_qualified_name":"isnan","ident_utf16":{"start":{"line_number":5193,"utf16_col":9},"end":{"line_number":5193,"utf16_col":14}},"extent_utf16":{"start":{"line_number":5193,"utf16_col":4},"end":{"line_number":5195,"utf16_col":5}}},{"name":"isnan","kind":"function","ident_start":184662,"ident_end":184667,"extent_start":184657,"extent_end":184715,"fully_qualified_name":"isnan","ident_utf16":{"start":{"line_number":5198,"utf16_col":9},"end":{"line_number":5198,"utf16_col":14}},"extent_utf16":{"start":{"line_number":5198,"utf16_col":4},"end":{"line_number":5200,"utf16_col":5}}},{"name":"isnan","kind":"function","ident_start":184725,"ident_end":184730,"extent_start":184720,"extent_end":184779,"fully_qualified_name":"isnan","ident_utf16":{"start":{"line_number":5201,"utf16_col":9},"end":{"line_number":5201,"utf16_col":14}},"extent_utf16":{"start":{"line_number":5201,"utf16_col":4},"end":{"line_number":5203,"utf16_col":5}}},{"name":"nextafter","kind":"function","ident_start":184844,"ident_end":184853,"extent_start":184838,"extent_end":184908,"fully_qualified_name":"nextafter","ident_utf16":{"start":{"line_number":5207,"utf16_col":10},"end":{"line_number":5207,"utf16_col":19}},"extent_utf16":{"start":{"line_number":5207,"utf16_col":4},"end":{"line_number":5207,"utf16_col":74}}},{"name":"nextafter","kind":"function","ident_start":184920,"ident_end":184929,"extent_start":184913,"extent_end":184986,"fully_qualified_name":"nextafter","ident_utf16":{"start":{"line_number":5208,"utf16_col":11},"end":{"line_number":5208,"utf16_col":20}},"extent_utf16":{"start":{"line_number":5208,"utf16_col":4},"end":{"line_number":5208,"utf16_col":77}}},{"name":"nextafter","kind":"function","ident_start":185003,"ident_end":185012,"extent_start":184997,"extent_end":185065,"fully_qualified_name":"nextafter","ident_utf16":{"start":{"line_number":5210,"utf16_col":10},"end":{"line_number":5210,"utf16_col":19}},"extent_utf16":{"start":{"line_number":5210,"utf16_col":4},"end":{"line_number":5210,"utf16_col":72}}},{"name":"nextafter","kind":"function","ident_start":185077,"ident_end":185086,"extent_start":185070,"extent_end":185140,"fully_qualified_name":"nextafter","ident_utf16":{"start":{"line_number":5211,"utf16_col":11},"end":{"line_number":5211,"utf16_col":20}},"extent_utf16":{"start":{"line_number":5211,"utf16_col":4},"end":{"line_number":5211,"utf16_col":74}}},{"name":"rotate_right","kind":"function","ident_start":185403,"ident_end":185415,"extent_start":185394,"extent_end":185584,"fully_qualified_name":"rotate_right","ident_utf16":{"start":{"line_number":5227,"utf16_col":17},"end":{"line_number":5227,"utf16_col":29}},"extent_utf16":{"start":{"line_number":5227,"utf16_col":8},"end":{"line_number":5231,"utf16_col":9}}},{"name":"SimplePcg32","kind":"method","ident_start":185658,"ident_end":185669,"extent_start":185645,"extent_end":185717,"fully_qualified_name":"SimplePcg32::SimplePcg32","ident_utf16":{"start":{"line_number":5240,"utf16_col":17},"end":{"line_number":5240,"utf16_col":28}},"extent_utf16":{"start":{"line_number":5240,"utf16_col":4},"end":{"line_number":5242,"utf16_col":5}}},{"name":"seed","kind":"method","ident_start":185742,"ident_end":185746,"extent_start":185724,"extent_end":185858,"fully_qualified_name":"SimplePcg32::seed","ident_utf16":{"start":{"line_number":5245,"utf16_col":22},"end":{"line_number":5245,"utf16_col":26}},"extent_utf16":{"start":{"line_number":5245,"utf16_col":4},"end":{"line_number":5250,"utf16_col":5}}},{"name":"discard","kind":"method","ident_start":185882,"ident_end":185889,"extent_start":185864,"extent_end":186124,"fully_qualified_name":"SimplePcg32::discard","ident_utf16":{"start":{"line_number":5252,"utf16_col":22},"end":{"line_number":5252,"utf16_col":29}},"extent_utf16":{"start":{"line_number":5252,"utf16_col":4},"end":{"line_number":5258,"utf16_col":5}}},{"name":"generateRandomSeed","kind":"function","ident_start":186844,"ident_end":186862,"extent_start":186830,"extent_end":187290,"fully_qualified_name":"generateRandomSeed","ident_utf16":{"start":{"line_number":5289,"utf16_col":18},"end":{"line_number":5289,"utf16_col":36}},"extent_utf16":{"start":{"line_number":5289,"utf16_col":4},"end":{"line_number":5303,"utf16_col":5}}},{"name":"ReporterRegistry","kind":"method","ident_start":187597,"ident_end":187613,"extent_start":187579,"extent_end":188757,"fully_qualified_name":"ReporterRegistry::ReporterRegistry","ident_utf16":{"start":{"line_number":5317,"utf16_col":22},"end":{"line_number":5317,"utf16_col":38}},"extent_utf16":{"start":{"line_number":5317,"utf16_col":4},"end":{"line_number":5339,"utf16_col":5}}},{"name":"create","kind":"method","ident_start":188857,"ident_end":188863,"extent_start":188817,"extent_end":189129,"fully_qualified_name":"ReporterRegistry::create","ident_utf16":{"start":{"line_number":5344,"utf16_col":22},"end":{"line_number":5344,"utf16_col":28}},"extent_utf16":{"start":{"line_number":5343,"utf16_col":4},"end":{"line_number":5349,"utf16_col":5}}},{"name":"registerReporter","kind":"method","ident_start":189158,"ident_end":189174,"extent_start":189135,"extent_end":189675,"fully_qualified_name":"ReporterRegistry::registerReporter","ident_utf16":{"start":{"line_number":5351,"utf16_col":27},"end":{"line_number":5351,"utf16_col":43}},"extent_utf16":{"start":{"line_number":5351,"utf16_col":4},"end":{"line_number":5360,"utf16_col":5}}},{"name":"registerListener","kind":"method","ident_start":189703,"ident_end":189719,"extent_start":189680,"extent_end":189849,"fully_qualified_name":"ReporterRegistry::registerListener","ident_utf16":{"start":{"line_number":5361,"utf16_col":27},"end":{"line_number":5361,"utf16_col":43}},"extent_utf16":{"start":{"line_number":5361,"utf16_col":4},"end":{"line_number":5364,"utf16_col":5}}},{"name":"kvPair","kind":"class","ident_start":190294,"ident_end":190300,"extent_start":190287,"extent_end":190346,"fully_qualified_name":"kvPair","ident_utf16":{"start":{"line_number":5388,"utf16_col":15},"end":{"line_number":5388,"utf16_col":21}},"extent_utf16":{"start":{"line_number":5388,"utf16_col":8},"end":{"line_number":5390,"utf16_col":9}}},{"name":"splitKVPair","kind":"function","ident_start":190364,"ident_end":190375,"extent_start":190357,"extent_end":190688,"fully_qualified_name":"splitKVPair","ident_utf16":{"start":{"line_number":5392,"utf16_col":15},"end":{"line_number":5392,"utf16_col":26}},"extent_utf16":{"start":{"line_number":5392,"utf16_col":8},"end":{"line_number":5399,"utf16_col":9}}},{"name":"splitReporterSpec","kind":"function","ident_start":190752,"ident_end":190769,"extent_start":190727,"extent_end":192615,"fully_qualified_name":"splitReporterSpec","ident_utf16":{"start":{"line_number":5403,"utf16_col":33},"end":{"line_number":5403,"utf16_col":50}},"extent_utf16":{"start":{"line_number":5403,"utf16_col":8},"end":{"line_number":5450,"utf16_col":9}}},{"name":"stringToColourMode","kind":"function","ident_start":192646,"ident_end":192664,"extent_start":192625,"extent_end":193131,"fully_qualified_name":"stringToColourMode","ident_utf16":{"start":{"line_number":5452,"utf16_col":29},"end":{"line_number":5452,"utf16_col":47}},"extent_utf16":{"start":{"line_number":5452,"utf16_col":8},"end":{"line_number":5464,"utf16_col":9}}},{"name":"parseReporterSpec","kind":"function","ident_start":193488,"ident_end":193505,"extent_start":193465,"extent_end":195645,"fully_qualified_name":"parseReporterSpec","ident_utf16":{"start":{"line_number":5475,"utf16_col":27},"end":{"line_number":5475,"utf16_col":44}},"extent_utf16":{"start":{"line_number":5475,"utf16_col":4},"end":{"line_number":5530,"utf16_col":5}}},{"name":"ReporterSpec","kind":"method","ident_start":195661,"ident_end":195673,"extent_start":195647,"extent_end":196051,"fully_qualified_name":"ReporterSpec::ReporterSpec","ident_utf16":{"start":{"line_number":5532,"utf16_col":14},"end":{"line_number":5532,"utf16_col":26}},"extent_utf16":{"start":{"line_number":5532,"utf16_col":0},"end":{"line_number":5540,"utf16_col":57}}},{"name":"StringStreams","kind":"class","ident_start":196251,"ident_end":196264,"extent_start":196244,"extent_end":197031,"fully_qualified_name":"StringStreams","ident_utf16":{"start":{"line_number":5553,"utf16_col":11},"end":{"line_number":5553,"utf16_col":24}},"extent_utf16":{"start":{"line_number":5553,"utf16_col":4},"end":{"line_number":5574,"utf16_col":5}}},{"name":"add","kind":"function","ident_start":196476,"ident_end":196479,"extent_start":196471,"extent_end":196830,"fully_qualified_name":"StringStreams::add","ident_utf16":{"start":{"line_number":5558,"utf16_col":13},"end":{"line_number":5558,"utf16_col":16}},"extent_utf16":{"start":{"line_number":5558,"utf16_col":8},"end":{"line_number":5568,"utf16_col":9}}},{"name":"release","kind":"function","ident_start":196845,"ident_end":196852,"extent_start":196840,"extent_end":197025,"fully_qualified_name":"StringStreams::release","ident_utf16":{"start":{"line_number":5570,"utf16_col":13},"end":{"line_number":5570,"utf16_col":20}},"extent_utf16":{"start":{"line_number":5570,"utf16_col":8},"end":{"line_number":5573,"utf16_col":9}}},{"name":"ReusableStringStream","kind":"method","ident_start":197060,"ident_end":197080,"extent_start":197038,"extent_end":197235,"fully_qualified_name":"ReusableStringStream::ReusableStringStream","ident_utf16":{"start":{"line_number":5576,"utf16_col":26},"end":{"line_number":5576,"utf16_col":46}},"extent_utf16":{"start":{"line_number":5576,"utf16_col":4},"end":{"line_number":5579,"utf16_col":6}}},{"name":"str","kind":"method","ident_start":197485,"ident_end":197488,"extent_start":197451,"extent_end":197569,"fully_qualified_name":"ReusableStringStream::str","ident_utf16":{"start":{"line_number":5587,"utf16_col":38},"end":{"line_number":5587,"utf16_col":41}},"extent_utf16":{"start":{"line_number":5587,"utf16_col":4},"end":{"line_number":5589,"utf16_col":5}}},{"name":"str","kind":"method","ident_start":197602,"ident_end":197605,"extent_start":197575,"extent_end":197702,"fully_qualified_name":"ReusableStringStream::str","ident_utf16":{"start":{"line_number":5591,"utf16_col":31},"end":{"line_number":5591,"utf16_col":34}},"extent_utf16":{"start":{"line_number":5591,"utf16_col":4},"end":{"line_number":5593,"utf16_col":5}}},{"name":"GeneratorTracker","kind":"class","ident_start":197837,"ident_end":197853,"extent_start":197830,"extent_end":204650,"fully_qualified_name":"GeneratorTracker","ident_utf16":{"start":{"line_number":5608,"utf16_col":19},"end":{"line_number":5608,"utf16_col":35}},"extent_utf16":{"start":{"line_number":5608,"utf16_col":12},"end":{"line_number":5740,"utf16_col":13}}},{"name":"GeneratorTracker","kind":"function","ident_start":198014,"ident_end":198030,"extent_start":198014,"extent_end":198266,"fully_qualified_name":"GeneratorTracker::GeneratorTracker","ident_utf16":{"start":{"line_number":5612,"utf16_col":16},"end":{"line_number":5612,"utf16_col":32}},"extent_utf16":{"start":{"line_number":5612,"utf16_col":16},"end":{"line_number":5616,"utf16_col":80}}},{"name":"isGeneratorTracker","kind":"function","ident_start":200324,"ident_end":200342,"extent_start":200319,"extent_end":200376,"fully_qualified_name":"GeneratorTracker::isGeneratorTracker","ident_utf16":{"start":{"line_number":5659,"utf16_col":21},"end":{"line_number":5659,"utf16_col":39}},"extent_utf16":{"start":{"line_number":5659,"utf16_col":16},"end":{"line_number":5659,"utf16_col":73}}},{"name":"hasGenerator","kind":"function","ident_start":200398,"ident_end":200410,"extent_start":200393,"extent_end":200497,"fully_qualified_name":"GeneratorTracker::hasGenerator","ident_utf16":{"start":{"line_number":5660,"utf16_col":21},"end":{"line_number":5660,"utf16_col":33}},"extent_utf16":{"start":{"line_number":5660,"utf16_col":16},"end":{"line_number":5662,"utf16_col":17}}},{"name":"close","kind":"function","ident_start":200519,"ident_end":200524,"extent_start":200514,"extent_end":204296,"fully_qualified_name":"GeneratorTracker::close","ident_utf16":{"start":{"line_number":5663,"utf16_col":21},"end":{"line_number":5663,"utf16_col":26}},"extent_utf16":{"start":{"line_number":5663,"utf16_col":16},"end":{"line_number":5731,"utf16_col":17}}},{"name":"getGenerator","kind":"function","ident_start":204366,"ident_end":204378,"extent_start":204361,"extent_end":204482,"fully_qualified_name":"GeneratorTracker::getGenerator","ident_utf16":{"start":{"line_number":5734,"utf16_col":21},"end":{"line_number":5734,"utf16_col":33}},"extent_utf16":{"start":{"line_number":5734,"utf16_col":16},"end":{"line_number":5736,"utf16_col":17}}},{"name":"setGenerator","kind":"function","ident_start":204504,"ident_end":204516,"extent_start":204499,"extent_end":204636,"fully_qualified_name":"GeneratorTracker::setGenerator","ident_utf16":{"start":{"line_number":5737,"utf16_col":21},"end":{"line_number":5737,"utf16_col":33}},"extent_utf16":{"start":{"line_number":5737,"utf16_col":16},"end":{"line_number":5739,"utf16_col":17}}},{"name":"RunContext","kind":"method","ident_start":204698,"ident_end":204708,"extent_start":204686,"extent_end":205328,"fully_qualified_name":"RunContext::RunContext","ident_utf16":{"start":{"line_number":5744,"utf16_col":16},"end":{"line_number":5744,"utf16_col":26}},"extent_utf16":{"start":{"line_number":5744,"utf16_col":4},"end":{"line_number":5754,"utf16_col":5}}},{"name":"runTest","kind":"method","ident_start":205473,"ident_end":205480,"extent_start":205454,"extent_end":209448,"fully_qualified_name":"RunContext::runTest","ident_utf16":{"start":{"line_number":5760,"utf16_col":23},"end":{"line_number":5760,"utf16_col":30}},"extent_utf16":{"start":{"line_number":5760,"utf16_col":4},"end":{"line_number":5848,"utf16_col":5}}},{"name":"assertionEnded","kind":"method","ident_start":209472,"ident_end":209486,"extent_start":209455,"extent_end":210654,"fully_qualified_name":"RunContext::assertionEnded","ident_utf16":{"start":{"line_number":5851,"utf16_col":21},"end":{"line_number":5851,"utf16_col":35}},"extent_utf16":{"start":{"line_number":5851,"utf16_col":4},"end":{"line_number":5883,"utf16_col":5}}},{"name":"resetAssertionInfo","kind":"method","ident_start":210676,"ident_end":210694,"extent_start":210659,"extent_end":210932,"fully_qualified_name":"RunContext::resetAssertionInfo","ident_utf16":{"start":{"line_number":5884,"utf16_col":21},"end":{"line_number":5884,"utf16_col":39}},"extent_utf16":{"start":{"line_number":5884,"utf16_col":4},"end":{"line_number":5888,"utf16_col":5}}},{"name":"notifyAssertionStarted","kind":"method","ident_start":210955,"ident_end":210977,"extent_start":210938,"extent_end":211117,"fully_qualified_name":"RunContext::notifyAssertionStarted","ident_utf16":{"start":{"line_number":5890,"utf16_col":21},"end":{"line_number":5890,"utf16_col":43}},"extent_utf16":{"start":{"line_number":5890,"utf16_col":4},"end":{"line_number":5893,"utf16_col":5}}},{"name":"sectionStarted","kind":"method","ident_start":211140,"ident_end":211154,"extent_start":211123,"extent_end":212033,"fully_qualified_name":"RunContext::sectionStarted","ident_utf16":{"start":{"line_number":5895,"utf16_col":21},"end":{"line_number":5895,"utf16_col":35}},"extent_utf16":{"start":{"line_number":5895,"utf16_col":4},"end":{"line_number":5918,"utf16_col":5}}},{"name":"testForMissingAssertions","kind":"method","ident_start":213402,"ident_end":213426,"extent_start":213385,"extent_end":213771,"fully_qualified_name":"RunContext::testForMissingAssertions","ident_utf16":{"start":{"line_number":5952,"utf16_col":21},"end":{"line_number":5952,"utf16_col":45}},"extent_utf16":{"start":{"line_number":5952,"utf16_col":4},"end":{"line_number":5962,"utf16_col":5}}},{"name":"sectionEnded","kind":"method","ident_start":213794,"ident_end":213806,"extent_start":213777,"extent_end":214522,"fully_qualified_name":"RunContext::sectionEnded","ident_utf16":{"start":{"line_number":5964,"utf16_col":21},"end":{"line_number":5964,"utf16_col":33}},"extent_utf16":{"start":{"line_number":5964,"utf16_col":4},"end":{"line_number":5984,"utf16_col":5}}},{"name":"sectionEndedEarly","kind":"method","ident_start":214545,"ident_end":214562,"extent_start":214528,"extent_end":214859,"fully_qualified_name":"RunContext::sectionEndedEarly","ident_utf16":{"start":{"line_number":5986,"utf16_col":21},"end":{"line_number":5986,"utf16_col":38}},"extent_utf16":{"start":{"line_number":5986,"utf16_col":4},"end":{"line_number":5995,"utf16_col":5}}},{"name":"benchmarkPreparing","kind":"method","ident_start":214882,"ident_end":214900,"extent_start":214865,"extent_end":215030,"fully_qualified_name":"RunContext::benchmarkPreparing","ident_utf16":{"start":{"line_number":5997,"utf16_col":21},"end":{"line_number":5997,"utf16_col":39}},"extent_utf16":{"start":{"line_number":5997,"utf16_col":4},"end":{"line_number":6000,"utf16_col":5}}},{"name":"benchmarkStarting","kind":"method","ident_start":215052,"ident_end":215069,"extent_start":215035,"extent_end":215209,"fully_qualified_name":"RunContext::benchmarkStarting","ident_utf16":{"start":{"line_number":6001,"utf16_col":21},"end":{"line_number":6001,"utf16_col":38}},"extent_utf16":{"start":{"line_number":6001,"utf16_col":4},"end":{"line_number":6004,"utf16_col":5}}},{"name":"benchmarkEnded","kind":"method","ident_start":215231,"ident_end":215245,"extent_start":215214,"extent_end":215387,"fully_qualified_name":"RunContext::benchmarkEnded","ident_utf16":{"start":{"line_number":6005,"utf16_col":21},"end":{"line_number":6005,"utf16_col":35}},"extent_utf16":{"start":{"line_number":6005,"utf16_col":4},"end":{"line_number":6008,"utf16_col":5}}},{"name":"benchmarkFailed","kind":"method","ident_start":215409,"ident_end":215424,"extent_start":215392,"extent_end":215553,"fully_qualified_name":"RunContext::benchmarkFailed","ident_utf16":{"start":{"line_number":6009,"utf16_col":21},"end":{"line_number":6009,"utf16_col":36}},"extent_utf16":{"start":{"line_number":6009,"utf16_col":4},"end":{"line_number":6012,"utf16_col":5}}},{"name":"pushScopedMessage","kind":"method","ident_start":215576,"ident_end":215593,"extent_start":215559,"extent_end":215669,"fully_qualified_name":"RunContext::pushScopedMessage","ident_utf16":{"start":{"line_number":6014,"utf16_col":21},"end":{"line_number":6014,"utf16_col":38}},"extent_utf16":{"start":{"line_number":6014,"utf16_col":4},"end":{"line_number":6016,"utf16_col":5}}},{"name":"popScopedMessage","kind":"method","ident_start":215692,"ident_end":215708,"extent_start":215675,"extent_end":215849,"fully_qualified_name":"RunContext::popScopedMessage","ident_utf16":{"start":{"line_number":6018,"utf16_col":21},"end":{"line_number":6018,"utf16_col":37}},"extent_utf16":{"start":{"line_number":6018,"utf16_col":4},"end":{"line_number":6020,"utf16_col":5}}},{"name":"emplaceUnscopedMessage","kind":"method","ident_start":215872,"ident_end":215894,"extent_start":215855,"extent_end":215991,"fully_qualified_name":"RunContext::emplaceUnscopedMessage","ident_utf16":{"start":{"line_number":6022,"utf16_col":21},"end":{"line_number":6022,"utf16_col":43}},"extent_utf16":{"start":{"line_number":6022,"utf16_col":4},"end":{"line_number":6024,"utf16_col":5}}},{"name":"getCurrentTestName","kind":"method","ident_start":216021,"ident_end":216039,"extent_start":215997,"extent_end":216171,"fully_qualified_name":"RunContext::getCurrentTestName","ident_utf16":{"start":{"line_number":6026,"utf16_col":28},"end":{"line_number":6026,"utf16_col":46}},"extent_utf16":{"start":{"line_number":6026,"utf16_col":4},"end":{"line_number":6030,"utf16_col":5}}},{"name":"exceptionEarlyReported","kind":"method","ident_start":216298,"ident_end":216320,"extent_start":216281,"extent_end":216372,"fully_qualified_name":"RunContext::exceptionEarlyReported","ident_utf16":{"start":{"line_number":6036,"utf16_col":21},"end":{"line_number":6036,"utf16_col":43}},"extent_utf16":{"start":{"line_number":6036,"utf16_col":4},"end":{"line_number":6038,"utf16_col":5}}},{"name":"handleFatalErrorCondition","kind":"method","ident_start":216395,"ident_end":216420,"extent_start":216378,"extent_end":218727,"fully_qualified_name":"RunContext::handleFatalErrorCondition","ident_utf16":{"start":{"line_number":6040,"utf16_col":21},"end":{"line_number":6040,"utf16_col":46}},"extent_utf16":{"start":{"line_number":6040,"utf16_col":4},"end":{"line_number":6088,"utf16_col":5}}},{"name":"lastAssertionPassed","kind":"method","ident_start":218750,"ident_end":218769,"extent_start":218733,"extent_end":218818,"fully_qualified_name":"RunContext::lastAssertionPassed","ident_utf16":{"start":{"line_number":6090,"utf16_col":21},"end":{"line_number":6090,"utf16_col":40}},"extent_utf16":{"start":{"line_number":6090,"utf16_col":4},"end":{"line_number":6092,"utf16_col":5}}},{"name":"assertionPassed","kind":"method","ident_start":218841,"ident_end":218856,"extent_start":218824,"extent_end":219005,"fully_qualified_name":"RunContext::assertionPassed","ident_utf16":{"start":{"line_number":6094,"utf16_col":21},"end":{"line_number":6094,"utf16_col":36}},"extent_utf16":{"start":{"line_number":6094,"utf16_col":4},"end":{"line_number":6099,"utf16_col":5}}},{"name":"aborting","kind":"method","ident_start":219028,"ident_end":219036,"extent_start":219011,"extent_end":219147,"fully_qualified_name":"RunContext::aborting","ident_utf16":{"start":{"line_number":6101,"utf16_col":21},"end":{"line_number":6101,"utf16_col":29}},"extent_utf16":{"start":{"line_number":6101,"utf16_col":4},"end":{"line_number":6103,"utf16_col":5}}},{"name":"runCurrentTest","kind":"method","ident_start":219170,"ident_end":219184,"extent_start":219153,"extent_end":219892,"fully_qualified_name":"RunContext::runCurrentTest","ident_utf16":{"start":{"line_number":6105,"utf16_col":21},"end":{"line_number":6105,"utf16_col":35}},"extent_utf16":{"start":{"line_number":6105,"utf16_col":4},"end":{"line_number":6122,"utf16_col":9}}},{"name":"CATCH_CATCH_ANON","kind":"function","ident_start":219893,"ident_end":219909,"extent_start":219893,"extent_end":220012,"fully_qualified_name":"CATCH_CATCH_ANON","ident_utf16":{"start":{"line_number":6122,"utf16_col":10},"end":{"line_number":6122,"utf16_col":26}},"extent_utf16":{"start":{"line_number":6122,"utf16_col":10},"end":{"line_number":6124,"utf16_col":9}}},{"name":"CATCH_CATCH_ANON","kind":"function","ident_start":220013,"ident_end":220029,"extent_start":220013,"extent_end":220125,"fully_qualified_name":"CATCH_CATCH_ANON","ident_utf16":{"start":{"line_number":6124,"utf16_col":10},"end":{"line_number":6124,"utf16_col":26}},"extent_utf16":{"start":{"line_number":6124,"utf16_col":10},"end":{"line_number":6126,"utf16_col":9}}},{"name":"invokeActiveTestCase","kind":"method","ident_start":221015,"ident_end":221035,"extent_start":220998,"extent_end":221577,"fully_qualified_name":"RunContext::invokeActiveTestCase","ident_utf16":{"start":{"line_number":6146,"utf16_col":21},"end":{"line_number":6146,"utf16_col":41}},"extent_utf16":{"start":{"line_number":6146,"utf16_col":4},"end":{"line_number":6157,"utf16_col":5}}},{"name":"handleUnfinishedSections","kind":"method","ident_start":221600,"ident_end":221624,"extent_start":221583,"extent_end":222042,"fully_qualified_name":"RunContext::handleUnfinishedSections","ident_utf16":{"start":{"line_number":6159,"utf16_col":21},"end":{"line_number":6159,"utf16_col":45}},"extent_utf16":{"start":{"line_number":6159,"utf16_col":4},"end":{"line_number":6169,"utf16_col":5}}},{"name":"handleExpr","kind":"method","ident_start":222065,"ident_end":222075,"extent_start":222048,"extent_end":222717,"fully_qualified_name":"RunContext::handleExpr","ident_utf16":{"start":{"line_number":6171,"utf16_col":21},"end":{"line_number":6171,"utf16_col":31}},"extent_utf16":{"start":{"line_number":6171,"utf16_col":4},"end":{"line_number":6192,"utf16_col":5}}},{"name":"reportExpr","kind":"method","ident_start":222739,"ident_end":222749,"extent_start":222722,"extent_end":223232,"fully_qualified_name":"RunContext::reportExpr","ident_utf16":{"start":{"line_number":6193,"utf16_col":21},"end":{"line_number":6193,"utf16_col":31}},"extent_utf16":{"start":{"line_number":6193,"utf16_col":4},"end":{"line_number":6206,"utf16_col":5}}},{"name":"handleMessage","kind":"method","ident_start":223255,"ident_end":223268,"extent_start":223238,"extent_end":224136,"fully_qualified_name":"RunContext::handleMessage","ident_utf16":{"start":{"line_number":6208,"utf16_col":21},"end":{"line_number":6208,"utf16_col":34}},"extent_utf16":{"start":{"line_number":6208,"utf16_col":4},"end":{"line_number":6231,"utf16_col":5}}},{"name":"handleUnexpectedExceptionNotThrown","kind":"method","ident_start":224158,"ident_end":224192,"extent_start":224141,"extent_end":224364,"fully_qualified_name":"RunContext::handleUnexpectedExceptionNotThrown","ident_utf16":{"start":{"line_number":6232,"utf16_col":21},"end":{"line_number":6232,"utf16_col":55}},"extent_utf16":{"start":{"line_number":6232,"utf16_col":4},"end":{"line_number":6237,"utf16_col":5}}},{"name":"handleUnexpectedInflightException","kind":"method","ident_start":224387,"ident_end":224420,"extent_start":224370,"extent_end":224908,"fully_qualified_name":"RunContext::handleUnexpectedInflightException","ident_utf16":{"start":{"line_number":6239,"utf16_col":21},"end":{"line_number":6239,"utf16_col":54}},"extent_utf16":{"start":{"line_number":6239,"utf16_col":4},"end":{"line_number":6252,"utf16_col":5}}},{"name":"populateReaction","kind":"method","ident_start":224931,"ident_end":224947,"extent_start":224914,"extent_end":225166,"fully_qualified_name":"RunContext::populateReaction","ident_utf16":{"start":{"line_number":6254,"utf16_col":21},"end":{"line_number":6254,"utf16_col":37}},"extent_utf16":{"start":{"line_number":6254,"utf16_col":4},"end":{"line_number":6257,"utf16_col":5}}},{"name":"handleIncomplete","kind":"method","ident_start":225189,"ident_end":225205,"extent_start":225172,"extent_end":225674,"fully_qualified_name":"RunContext::handleIncomplete","ident_utf16":{"start":{"line_number":6259,"utf16_col":21},"end":{"line_number":6259,"utf16_col":37}},"extent_utf16":{"start":{"line_number":6259,"utf16_col":4},"end":{"line_number":6270,"utf16_col":5}}},{"name":"handleNonExpr","kind":"method","ident_start":225696,"ident_end":225709,"extent_start":225679,"extent_end":226215,"fully_qualified_name":"RunContext::handleNonExpr","ident_utf16":{"start":{"line_number":6271,"utf16_col":21},"end":{"line_number":6271,"utf16_col":34}},"extent_utf16":{"start":{"line_number":6271,"utf16_col":4},"end":{"line_number":6285,"utf16_col":5}}},{"name":"seedRng","kind":"function","ident_start":226449,"ident_end":226456,"extent_start":226444,"extent_end":226531,"fully_qualified_name":"seedRng","ident_utf16":{"start":{"line_number":6295,"utf16_col":9},"end":{"line_number":6295,"utf16_col":16}},"extent_utf16":{"start":{"line_number":6295,"utf16_col":4},"end":{"line_number":6297,"utf16_col":5}}},{"name":"rngSeed","kind":"function","ident_start":226550,"ident_end":226557,"extent_start":226537,"extent_end":226626,"fully_qualified_name":"rngSeed","ident_utf16":{"start":{"line_number":6299,"utf16_col":17},"end":{"line_number":6299,"utf16_col":24}},"extent_utf16":{"start":{"line_number":6299,"utf16_col":4},"end":{"line_number":6301,"utf16_col":5}}},{"name":"Section","kind":"method","ident_start":226665,"ident_end":226672,"extent_start":226656,"extent_end":227068,"fully_qualified_name":"Section::Section","ident_utf16":{"start":{"line_number":6309,"utf16_col":13},"end":{"line_number":6309,"utf16_col":20}},"extent_utf16":{"start":{"line_number":6309,"utf16_col":4},"end":{"line_number":6318,"utf16_col":5}}},{"name":"Section","kind":"method","ident_start":227083,"ident_end":227090,"extent_start":227074,"extent_end":227849,"fully_qualified_name":"Section::Section","ident_utf16":{"start":{"line_number":6320,"utf16_col":13},"end":{"line_number":6320,"utf16_col":20}},"extent_utf16":{"start":{"line_number":6320,"utf16_col":4},"end":{"line_number":6335,"utf16_col":5}}},{"name":"getSingletons","kind":"function","ident_start":228507,"ident_end":228520,"extent_start":228495,"extent_end":228761,"fully_qualified_name":"getSingletons","ident_utf16":{"start":{"line_number":6363,"utf16_col":20},"end":{"line_number":6363,"utf16_col":33}},"extent_utf16":{"start":{"line_number":6363,"utf16_col":8},"end":{"line_number":6368,"utf16_col":9}}},{"name":"addSingleton","kind":"function","ident_start":228820,"ident_end":228832,"extent_start":228815,"extent_end":228913,"fully_qualified_name":"addSingleton","ident_utf16":{"start":{"line_number":6373,"utf16_col":9},"end":{"line_number":6373,"utf16_col":21}},"extent_utf16":{"start":{"line_number":6373,"utf16_col":4},"end":{"line_number":6375,"utf16_col":5}}},{"name":"cleanupSingletons","kind":"function","ident_start":228923,"ident_end":228940,"extent_start":228918,"extent_end":229125,"fully_qualified_name":"cleanupSingletons","ident_utf16":{"start":{"line_number":6376,"utf16_col":9},"end":{"line_number":6376,"utf16_col":26}},"extent_utf16":{"start":{"line_number":6376,"utf16_col":4},"end":{"line_number":6382,"utf16_col":5}}},{"name":"add","kind":"method","ident_start":230139,"ident_end":230142,"extent_start":230108,"extent_end":230269,"fully_qualified_name":"StartupExceptionRegistry::add","ident_utf16":{"start":{"line_number":6418,"utf16_col":35},"end":{"line_number":6418,"utf16_col":38}},"extent_utf16":{"start":{"line_number":6418,"utf16_col":4},"end":{"line_number":6421,"utf16_col":9}}},{"name":"startsWith","kind":"function","ident_start":231026,"ident_end":231036,"extent_start":231021,"extent_end":231192,"fully_qualified_name":"startsWith","ident_utf16":{"start":{"line_number":6460,"utf16_col":9},"end":{"line_number":6460,"utf16_col":19}},"extent_utf16":{"start":{"line_number":6460,"utf16_col":4},"end":{"line_number":6462,"utf16_col":5}}},{"name":"startsWith","kind":"function","ident_start":231202,"ident_end":231212,"extent_start":231197,"extent_end":231293,"fully_qualified_name":"startsWith","ident_utf16":{"start":{"line_number":6463,"utf16_col":9},"end":{"line_number":6463,"utf16_col":19}},"extent_utf16":{"start":{"line_number":6463,"utf16_col":4},"end":{"line_number":6465,"utf16_col":5}}},{"name":"endsWith","kind":"function","ident_start":231303,"ident_end":231311,"extent_start":231298,"extent_end":231470,"fully_qualified_name":"endsWith","ident_utf16":{"start":{"line_number":6466,"utf16_col":9},"end":{"line_number":6466,"utf16_col":17}},"extent_utf16":{"start":{"line_number":6466,"utf16_col":4},"end":{"line_number":6468,"utf16_col":5}}},{"name":"endsWith","kind":"function","ident_start":231480,"ident_end":231488,"extent_start":231475,"extent_end":231587,"fully_qualified_name":"endsWith","ident_utf16":{"start":{"line_number":6469,"utf16_col":9},"end":{"line_number":6469,"utf16_col":17}},"extent_utf16":{"start":{"line_number":6469,"utf16_col":4},"end":{"line_number":6471,"utf16_col":5}}},{"name":"contains","kind":"function","ident_start":231597,"ident_end":231605,"extent_start":231592,"extent_end":231716,"fully_qualified_name":"contains","ident_utf16":{"start":{"line_number":6472,"utf16_col":9},"end":{"line_number":6472,"utf16_col":17}},"extent_utf16":{"start":{"line_number":6472,"utf16_col":4},"end":{"line_number":6474,"utf16_col":5}}},{"name":"toLowerInPlace","kind":"function","ident_start":231726,"ident_end":231740,"extent_start":231721,"extent_end":231836,"fully_qualified_name":"toLowerInPlace","ident_utf16":{"start":{"line_number":6475,"utf16_col":9},"end":{"line_number":6475,"utf16_col":23}},"extent_utf16":{"start":{"line_number":6475,"utf16_col":4},"end":{"line_number":6479,"utf16_col":5}}},{"name":"toLower","kind":"function","ident_start":231853,"ident_end":231860,"extent_start":231841,"extent_end":231969,"fully_qualified_name":"toLower","ident_utf16":{"start":{"line_number":6480,"utf16_col":16},"end":{"line_number":6480,"utf16_col":23}},"extent_utf16":{"start":{"line_number":6480,"utf16_col":4},"end":{"line_number":6484,"utf16_col":5}}},{"name":"toLower","kind":"function","ident_start":231979,"ident_end":231986,"extent_start":231974,"extent_end":232081,"fully_qualified_name":"toLower","ident_utf16":{"start":{"line_number":6485,"utf16_col":9},"end":{"line_number":6485,"utf16_col":16}},"extent_utf16":{"start":{"line_number":6485,"utf16_col":4},"end":{"line_number":6487,"utf16_col":5}}},{"name":"trim","kind":"function","ident_start":232099,"ident_end":232103,"extent_start":232087,"extent_end":232447,"fully_qualified_name":"trim","ident_utf16":{"start":{"line_number":6489,"utf16_col":16},"end":{"line_number":6489,"utf16_col":20}},"extent_utf16":{"start":{"line_number":6489,"utf16_col":4},"end":{"line_number":6495,"utf16_col":5}}},{"name":"trim","kind":"function","ident_start":232463,"ident_end":232467,"extent_start":232453,"extent_end":232907,"fully_qualified_name":"trim","ident_utf16":{"start":{"line_number":6497,"utf16_col":14},"end":{"line_number":6497,"utf16_col":18}},"extent_utf16":{"start":{"line_number":6497,"utf16_col":4},"end":{"line_number":6507,"utf16_col":5}}},{"name":"replaceInPlace","kind":"function","ident_start":232918,"ident_end":232932,"extent_start":232913,"extent_end":233963,"fully_qualified_name":"replaceInPlace","ident_utf16":{"start":{"line_number":6509,"utf16_col":9},"end":{"line_number":6509,"utf16_col":23}},"extent_utf16":{"start":{"line_number":6509,"utf16_col":4},"end":{"line_number":6533,"utf16_col":5}}},{"name":"splitStringRef","kind":"function","ident_start":233992,"ident_end":234006,"extent_start":233969,"extent_end":234528,"fully_qualified_name":"splitStringRef","ident_utf16":{"start":{"line_number":6535,"utf16_col":27},"end":{"line_number":6535,"utf16_col":41}},"extent_utf16":{"start":{"line_number":6535,"utf16_col":4},"end":{"line_number":6548,"utf16_col":5}}},{"name":"StringRef","kind":"method","ident_start":234879,"ident_end":234888,"extent_start":234868,"extent_end":234979,"fully_qualified_name":"StringRef::StringRef","ident_utf16":{"start":{"line_number":6567,"utf16_col":15},"end":{"line_number":6567,"utf16_col":24}},"extent_utf16":{"start":{"line_number":6567,"utf16_col":4},"end":{"line_number":6569,"utf16_col":6}}},{"name":"compare","kind":"method","ident_start":235240,"ident_end":235247,"extent_start":235225,"extent_end":235851,"fully_qualified_name":"StringRef::compare","ident_utf16":{"start":{"line_number":6579,"utf16_col":19},"end":{"line_number":6579,"utf16_col":26}},"extent_utf16":{"start":{"line_number":6579,"utf16_col":4},"end":{"line_number":6598,"utf16_col":5}}},{"name":"expandAliases","kind":"method","ident_start":236728,"ident_end":236741,"extent_start":236698,"extent_end":237313,"fully_qualified_name":"TagAliasRegistry::expandAliases","ident_utf16":{"start":{"line_number":6633,"utf16_col":34},"end":{"line_number":6633,"utf16_col":47}},"extent_utf16":{"start":{"line_number":6633,"utf16_col":4},"end":{"line_number":6644,"utf16_col":5}}},{"name":"add","kind":"method","ident_start":237342,"ident_end":237345,"extent_start":237319,"extent_end":237937,"fully_qualified_name":"TagAliasRegistry::add","ident_utf16":{"start":{"line_number":6646,"utf16_col":27},"end":{"line_number":6646,"utf16_col":30}},"extent_utf16":{"start":{"line_number":6646,"utf16_col":4},"end":{"line_number":6654,"utf16_col":5}}},{"name":"TestCaseInfoHasher","kind":"method","ident_start":238184,"ident_end":238202,"extent_start":238164,"extent_end":238236,"fully_qualified_name":"TestCaseInfoHasher::TestCaseInfoHasher","ident_utf16":{"start":{"line_number":6668,"utf16_col":24},"end":{"line_number":6668,"utf16_col":42}},"extent_utf16":{"start":{"line_number":6668,"utf16_col":4},"end":{"line_number":6668,"utf16_col":76}}},{"name":"enforceNoDuplicateTestCases","kind":"function","ident_start":239176,"ident_end":239203,"extent_start":239164,"extent_end":240245,"fully_qualified_name":"enforceNoDuplicateTestCases","ident_utf16":{"start":{"line_number":6705,"utf16_col":20},"end":{"line_number":6705,"utf16_col":47}},"extent_utf16":{"start":{"line_number":6705,"utf16_col":8},"end":{"line_number":6725,"utf16_col":9}}},{"name":"matchTest","kind":"function","ident_start":240267,"ident_end":240276,"extent_start":240255,"extent_end":240554,"fully_qualified_name":"matchTest","ident_utf16":{"start":{"line_number":6727,"utf16_col":20},"end":{"line_number":6727,"utf16_col":29}},"extent_utf16":{"start":{"line_number":6727,"utf16_col":8},"end":{"line_number":6732,"utf16_col":9}}},{"name":"sortTests","kind":"function","ident_start":240620,"ident_end":240629,"extent_start":240592,"extent_end":242535,"fully_qualified_name":"sortTests","ident_utf16":{"start":{"line_number":6736,"utf16_col":32},"end":{"line_number":6736,"utf16_col":41}},"extent_utf16":{"start":{"line_number":6736,"utf16_col":4},"end":{"line_number":6785,"utf16_col":5}}},{"name":"isThrowSafe","kind":"function","ident_start":242546,"ident_end":242557,"extent_start":242541,"extent_end":242699,"fully_qualified_name":"isThrowSafe","ident_utf16":{"start":{"line_number":6787,"utf16_col":9},"end":{"line_number":6787,"utf16_col":20}},"extent_utf16":{"start":{"line_number":6787,"utf16_col":4},"end":{"line_number":6789,"utf16_col":5}}},{"name":"filterTests","kind":"function","ident_start":242733,"ident_end":242744,"extent_start":242705,"extent_end":243310,"fully_qualified_name":"filterTests","ident_utf16":{"start":{"line_number":6791,"utf16_col":32},"end":{"line_number":6791,"utf16_col":43}},"extent_utf16":{"start":{"line_number":6791,"utf16_col":4},"end":{"line_number":6801,"utf16_col":5}}},{"name":"registerTest","kind":"method","ident_start":243558,"ident_end":243570,"extent_start":243539,"extent_end":243904,"fully_qualified_name":"TestRegistry::registerTest","ident_utf16":{"start":{"line_number":6808,"utf16_col":23},"end":{"line_number":6808,"utf16_col":35}},"extent_utf16":{"start":{"line_number":6808,"utf16_col":4},"end":{"line_number":6813,"utf16_col":5}}},{"name":"NameAndLocation","kind":"method","ident_start":244849,"ident_end":244864,"extent_start":244832,"extent_end":244992,"fully_qualified_name":"NameAndLocation::NameAndLocation","ident_utf16":{"start":{"line_number":6849,"utf16_col":21},"end":{"line_number":6849,"utf16_col":36}},"extent_utf16":{"start":{"line_number":6849,"utf16_col":4},"end":{"line_number":6852,"utf16_col":6}}},{"name":"markAsNeedingAnotherRun","kind":"method","ident_start":245052,"ident_end":245075,"extent_start":245037,"extent_end":245123,"fully_qualified_name":"ITracker::markAsNeedingAnotherRun","ident_utf16":{"start":{"line_number":6857,"utf16_col":19},"end":{"line_number":6857,"utf16_col":42}},"extent_utf16":{"start":{"line_number":6857,"utf16_col":4},"end":{"line_number":6859,"utf16_col":5}}},{"name":"addChild","kind":"method","ident_start":245144,"ident_end":245152,"extent_start":245129,"extent_end":245234,"fully_qualified_name":"ITracker::addChild","ident_utf16":{"start":{"line_number":6861,"utf16_col":19},"end":{"line_number":6861,"utf16_col":27}},"extent_utf16":{"start":{"line_number":6861,"utf16_col":4},"end":{"line_number":6863,"utf16_col":5}}},{"name":"isSectionTracker","kind":"method","ident_start":245864,"ident_end":245880,"extent_start":245849,"extent_end":245906,"fully_qualified_name":"ITracker::isSectionTracker","ident_utf16":{"start":{"line_number":6880,"utf16_col":19},"end":{"line_number":6880,"utf16_col":35}},"extent_utf16":{"start":{"line_number":6880,"utf16_col":4},"end":{"line_number":6880,"utf16_col":61}}},{"name":"isGeneratorTracker","kind":"method","ident_start":245926,"ident_end":245944,"extent_start":245911,"extent_end":245970,"fully_qualified_name":"ITracker::isGeneratorTracker","ident_utf16":{"start":{"line_number":6881,"utf16_col":19},"end":{"line_number":6881,"utf16_col":37}},"extent_utf16":{"start":{"line_number":6881,"utf16_col":4},"end":{"line_number":6881,"utf16_col":63}}},{"name":"isOpen","kind":"method","ident_start":245991,"ident_end":245997,"extent_start":245976,"extent_end":246071,"fully_qualified_name":"ITracker::isOpen","ident_utf16":{"start":{"line_number":6883,"utf16_col":19},"end":{"line_number":6883,"utf16_col":25}},"extent_utf16":{"start":{"line_number":6883,"utf16_col":4},"end":{"line_number":6885,"utf16_col":5}}},{"name":"hasStarted","kind":"method","ident_start":246092,"ident_end":246102,"extent_start":246077,"extent_end":246147,"fully_qualified_name":"ITracker::hasStarted","ident_utf16":{"start":{"line_number":6887,"utf16_col":19},"end":{"line_number":6887,"utf16_col":29}},"extent_utf16":{"start":{"line_number":6887,"utf16_col":4},"end":{"line_number":6887,"utf16_col":74}}},{"name":"openChild","kind":"method","ident_start":246168,"ident_end":246177,"extent_start":246153,"extent_end":246369,"fully_qualified_name":"ITracker::openChild","ident_utf16":{"start":{"line_number":6889,"utf16_col":19},"end":{"line_number":6889,"utf16_col":28}},"extent_utf16":{"start":{"line_number":6889,"utf16_col":4},"end":{"line_number":6896,"utf16_col":5}}},{"name":"completeCycle","kind":"method","ident_start":246768,"ident_end":246781,"extent_start":246747,"extent_end":246828,"fully_qualified_name":"TrackerContext::completeCycle","ident_utf16":{"start":{"line_number":6909,"utf16_col":25},"end":{"line_number":6909,"utf16_col":38}},"extent_utf16":{"start":{"line_number":6909,"utf16_col":4},"end":{"line_number":6911,"utf16_col":5}}},{"name":"completedCycle","kind":"method","ident_start":246855,"ident_end":246869,"extent_start":246834,"extent_end":246930,"fully_qualified_name":"TrackerContext::completedCycle","ident_utf16":{"start":{"line_number":6913,"utf16_col":25},"end":{"line_number":6913,"utf16_col":39}},"extent_utf16":{"start":{"line_number":6913,"utf16_col":4},"end":{"line_number":6915,"utf16_col":5}}},{"name":"setCurrentTracker","kind":"method","ident_start":246956,"ident_end":246973,"extent_start":246935,"extent_end":247038,"fully_qualified_name":"TrackerContext::setCurrentTracker","ident_utf16":{"start":{"line_number":6916,"utf16_col":25},"end":{"line_number":6916,"utf16_col":42}},"extent_utf16":{"start":{"line_number":6916,"utf16_col":4},"end":{"line_number":6918,"utf16_col":5}}},{"name":"TrackerBase","kind":"method","ident_start":247058,"ident_end":247069,"extent_start":247045,"extent_end":247229,"fully_qualified_name":"TrackerBase::TrackerBase","ident_utf16":{"start":{"line_number":6921,"utf16_col":17},"end":{"line_number":6921,"utf16_col":28}},"extent_utf16":{"start":{"line_number":6921,"utf16_col":4},"end":{"line_number":6924,"utf16_col":6}}},{"name":"isComplete","kind":"method","ident_start":247253,"ident_end":247263,"extent_start":247235,"extent_end":247355,"fully_qualified_name":"TrackerBase::isComplete","ident_utf16":{"start":{"line_number":6926,"utf16_col":22},"end":{"line_number":6926,"utf16_col":32}},"extent_utf16":{"start":{"line_number":6926,"utf16_col":4},"end":{"line_number":6928,"utf16_col":5}}},{"name":"open","kind":"method","ident_start":247379,"ident_end":247383,"extent_start":247361,"extent_end":247505,"fully_qualified_name":"TrackerBase::open","ident_utf16":{"start":{"line_number":6930,"utf16_col":22},"end":{"line_number":6930,"utf16_col":26}},"extent_utf16":{"start":{"line_number":6930,"utf16_col":4},"end":{"line_number":6935,"utf16_col":5}}},{"name":"close","kind":"method","ident_start":247529,"ident_end":247534,"extent_start":247511,"extent_end":248460,"fully_qualified_name":"TrackerBase::close","ident_utf16":{"start":{"line_number":6937,"utf16_col":22},"end":{"line_number":6937,"utf16_col":27}},"extent_utf16":{"start":{"line_number":6937,"utf16_col":4},"end":{"line_number":6965,"utf16_col":5}}},{"name":"fail","kind":"method","ident_start":248483,"ident_end":248487,"extent_start":248465,"extent_end":248653,"fully_qualified_name":"TrackerBase::fail","ident_utf16":{"start":{"line_number":6966,"utf16_col":22},"end":{"line_number":6966,"utf16_col":26}},"extent_utf16":{"start":{"line_number":6966,"utf16_col":4},"end":{"line_number":6972,"utf16_col":5}}},{"name":"moveToParent","kind":"method","ident_start":248677,"ident_end":248689,"extent_start":248659,"extent_end":248772,"fully_qualified_name":"TrackerBase::moveToParent","ident_utf16":{"start":{"line_number":6974,"utf16_col":22},"end":{"line_number":6974,"utf16_col":34}},"extent_utf16":{"start":{"line_number":6974,"utf16_col":4},"end":{"line_number":6977,"utf16_col":5}}},{"name":"moveToThis","kind":"method","ident_start":248795,"ident_end":248805,"extent_start":248777,"extent_end":248856,"fully_qualified_name":"TrackerBase::moveToThis","ident_utf16":{"start":{"line_number":6978,"utf16_col":22},"end":{"line_number":6978,"utf16_col":32}},"extent_utf16":{"start":{"line_number":6978,"utf16_col":4},"end":{"line_number":6980,"utf16_col":5}}},{"name":"SectionTracker","kind":"method","ident_start":248878,"ident_end":248892,"extent_start":248862,"extent_end":249402,"fully_qualified_name":"SectionTracker::SectionTracker","ident_utf16":{"start":{"line_number":6982,"utf16_col":20},"end":{"line_number":6982,"utf16_col":34}},"extent_utf16":{"start":{"line_number":6982,"utf16_col":4},"end":{"line_number":6994,"utf16_col":5}}},{"name":"isComplete","kind":"method","ident_start":249429,"ident_end":249439,"extent_start":249408,"extent_end":249736,"fully_qualified_name":"SectionTracker::isComplete","ident_utf16":{"start":{"line_number":6996,"utf16_col":25},"end":{"line_number":6996,"utf16_col":35}},"extent_utf16":{"start":{"line_number":6996,"utf16_col":4},"end":{"line_number":7005,"utf16_col":5}}},{"name":"isSectionTracker","kind":"method","ident_start":249763,"ident_end":249779,"extent_start":249742,"extent_end":249804,"fully_qualified_name":"SectionTracker::isSectionTracker","ident_utf16":{"start":{"line_number":7007,"utf16_col":25},"end":{"line_number":7007,"utf16_col":41}},"extent_utf16":{"start":{"line_number":7007,"utf16_col":4},"end":{"line_number":7007,"utf16_col":66}}},{"name":"tryOpen","kind":"method","ident_start":250816,"ident_end":250823,"extent_start":250795,"extent_end":250881,"fully_qualified_name":"SectionTracker::tryOpen","ident_utf16":{"start":{"line_number":7035,"utf16_col":25},"end":{"line_number":7035,"utf16_col":32}},"extent_utf16":{"start":{"line_number":7035,"utf16_col":4},"end":{"line_number":7038,"utf16_col":5}}},{"name":"addInitialFilters","kind":"method","ident_start":250908,"ident_end":250925,"extent_start":250887,"extent_end":251342,"fully_qualified_name":"SectionTracker::addInitialFilters","ident_utf16":{"start":{"line_number":7040,"utf16_col":25},"end":{"line_number":7040,"utf16_col":42}},"extent_utf16":{"start":{"line_number":7040,"utf16_col":4},"end":{"line_number":7047,"utf16_col":5}}},{"name":"addNextFilters","kind":"method","ident_start":251368,"ident_end":251382,"extent_start":251347,"extent_end":251547,"fully_qualified_name":"SectionTracker::addNextFilters","ident_utf16":{"start":{"line_number":7048,"utf16_col":25},"end":{"line_number":7048,"utf16_col":39}},"extent_utf16":{"start":{"line_number":7048,"utf16_col":4},"end":{"line_number":7051,"utf16_col":5}}},{"name":"trimmedName","kind":"method","ident_start":251579,"ident_end":251590,"extent_start":251553,"extent_end":251637,"fully_qualified_name":"SectionTracker::trimmedName","ident_utf16":{"start":{"line_number":7053,"utf16_col":30},"end":{"line_number":7053,"utf16_col":41}},"extent_utf16":{"start":{"line_number":7053,"utf16_col":4},"end":{"line_number":7055,"utf16_col":5}}},{"name":"throw_test_failure_exception","kind":"function","ident_start":251789,"ident_end":251817,"extent_start":251784,"extent_end":251989,"fully_qualified_name":"throw_test_failure_exception","ident_utf16":{"start":{"line_number":7070,"utf16_col":9},"end":{"line_number":7070,"utf16_col":37}},"extent_utf16":{"start":{"line_number":7070,"utf16_col":4},"end":{"line_number":7076,"utf16_col":5}}},{"name":"throw_test_skip_exception","kind":"function","ident_start":252000,"ident_end":252025,"extent_start":251995,"extent_end":252225,"fully_qualified_name":"throw_test_skip_exception","ident_utf16":{"start":{"line_number":7078,"utf16_col":9},"end":{"line_number":7078,"utf16_col":34}},"extent_utf16":{"start":{"line_number":7078,"utf16_col":4},"end":{"line_number":7084,"utf16_col":5}}},{"name":"prepareTestCase","kind":"method","ident_start":252334,"ident_end":252349,"extent_start":252315,"extent_end":252354,"fully_qualified_name":"ITestInvoker::prepareTestCase","ident_utf16":{"start":{"line_number":7094,"utf16_col":23},"end":{"line_number":7094,"utf16_col":38}},"extent_utf16":{"start":{"line_number":7094,"utf16_col":4},"end":{"line_number":7094,"utf16_col":43}}},{"name":"tearDownTestCase","kind":"method","ident_start":252378,"ident_end":252394,"extent_start":252359,"extent_end":252399,"fully_qualified_name":"ITestInvoker::tearDownTestCase","ident_utf16":{"start":{"line_number":7095,"utf16_col":23},"end":{"line_number":7095,"utf16_col":39}},"extent_utf16":{"start":{"line_number":7095,"utf16_col":4},"end":{"line_number":7095,"utf16_col":44}}},{"name":"extractClassName","kind":"function","ident_start":252487,"ident_end":252503,"extent_start":252470,"extent_end":253765,"fully_qualified_name":"extractClassName","ident_utf16":{"start":{"line_number":7099,"utf16_col":25},"end":{"line_number":7099,"utf16_col":41}},"extent_utf16":{"start":{"line_number":7099,"utf16_col":8},"end":{"line_number":7125,"utf16_col":9}}},{"name":"TestInvokerAsFunction","kind":"class","ident_start":253781,"ident_end":253802,"extent_start":253775,"extent_end":254142,"fully_qualified_name":"TestInvokerAsFunction","ident_utf16":{"start":{"line_number":7127,"utf16_col":14},"end":{"line_number":7127,"utf16_col":35}},"extent_utf16":{"start":{"line_number":7127,"utf16_col":8},"end":{"line_number":7136,"utf16_col":9}}},{"name":"TestInvokerAsFunction","kind":"function","ident_start":253954,"ident_end":253975,"extent_start":253944,"extent_end":254066,"fully_qualified_name":"TestInvokerAsFunction::TestInvokerAsFunction","ident_utf16":{"start":{"line_number":7132,"utf16_col":22},"end":{"line_number":7132,"utf16_col":43}},"extent_utf16":{"start":{"line_number":7132,"utf16_col":12},"end":{"line_number":7133,"utf16_col":53}}},{"name":"invoke","kind":"function","ident_start":254085,"ident_end":254091,"extent_start":254080,"extent_end":254132,"fully_qualified_name":"TestInvokerAsFunction::invoke","ident_utf16":{"start":{"line_number":7135,"utf16_col":17},"end":{"line_number":7135,"utf16_col":23}},"extent_utf16":{"start":{"line_number":7135,"utf16_col":12},"end":{"line_number":7135,"utf16_col":64}}},{"name":"makeTestInvoker","kind":"function","ident_start":254202,"ident_end":254217,"extent_start":254169,"extent_end":254329,"fully_qualified_name":"makeTestInvoker","ident_utf16":{"start":{"line_number":7140,"utf16_col":37},"end":{"line_number":7140,"utf16_col":52}},"extent_utf16":{"start":{"line_number":7140,"utf16_col":4},"end":{"line_number":7142,"utf16_col":5}}},{"name":"AutoReg","kind":"method","ident_start":254344,"ident_end":254351,"extent_start":254335,"extent_end":254848,"fully_qualified_name":"AutoReg::AutoReg","ident_utf16":{"start":{"line_number":7144,"utf16_col":13},"end":{"line_number":7144,"utf16_col":20}},"extent_utf16":{"start":{"line_number":7144,"utf16_col":4},"end":{"line_number":7154,"utf16_col":9}}},{"name":"TestSpecParser","kind":"method","ident_start":255108,"ident_end":255122,"extent_start":255092,"extent_end":255194,"fully_qualified_name":"TestSpecParser::TestSpecParser","ident_utf16":{"start":{"line_number":7167,"utf16_col":20},"end":{"line_number":7167,"utf16_col":34}},"extent_utf16":{"start":{"line_number":7167,"utf16_col":4},"end":{"line_number":7167,"utf16_col":106}}},{"name":"testSpec","kind":"method","ident_start":255820,"ident_end":255828,"extent_start":255795,"extent_end":255898,"fully_qualified_name":"TestSpecParser::testSpec","ident_utf16":{"start":{"line_number":7187,"utf16_col":29},"end":{"line_number":7187,"utf16_col":37}},"extent_utf16":{"start":{"line_number":7187,"utf16_col":4},"end":{"line_number":7190,"utf16_col":5}}},{"name":"visitChar","kind":"method","ident_start":255924,"ident_end":255933,"extent_start":255903,"extent_end":256816,"fully_qualified_name":"TestSpecParser::visitChar","ident_utf16":{"start":{"line_number":7191,"utf16_col":25},"end":{"line_number":7191,"utf16_col":34}},"extent_utf16":{"start":{"line_number":7191,"utf16_col":4},"end":{"line_number":7226,"utf16_col":5}}},{"name":"processNoneChar","kind":"method","ident_start":256995,"ident_end":257010,"extent_start":256974,"extent_end":257417,"fully_qualified_name":"TestSpecParser::processNoneChar","ident_utf16":{"start":{"line_number":7229,"utf16_col":25},"end":{"line_number":7229,"utf16_col":40}},"extent_utf16":{"start":{"line_number":7229,"utf16_col":4},"end":{"line_number":7246,"utf16_col":5}}},{"name":"processNameChar","kind":"method","ident_start":257443,"ident_end":257458,"extent_start":257422,"extent_end":257668,"fully_qualified_name":"TestSpecParser::processNameChar","ident_utf16":{"start":{"line_number":7247,"utf16_col":25},"end":{"line_number":7247,"utf16_col":40}},"extent_utf16":{"start":{"line_number":7247,"utf16_col":4},"end":{"line_number":7255,"utf16_col":5}}},{"name":"processOtherChar","kind":"method","ident_start":257694,"ident_end":257710,"extent_start":257673,"extent_end":257854,"fully_qualified_name":"TestSpecParser::processOtherChar","ident_utf16":{"start":{"line_number":7256,"utf16_col":25},"end":{"line_number":7256,"utf16_col":41}},"extent_utf16":{"start":{"line_number":7256,"utf16_col":4},"end":{"line_number":7262,"utf16_col":5}}},{"name":"startNewMode","kind":"method","ident_start":257880,"ident_end":257892,"extent_start":257859,"extent_end":257936,"fully_qualified_name":"TestSpecParser::startNewMode","ident_utf16":{"start":{"line_number":7263,"utf16_col":25},"end":{"line_number":7263,"utf16_col":37}},"extent_utf16":{"start":{"line_number":7263,"utf16_col":4},"end":{"line_number":7265,"utf16_col":5}}},{"name":"endMode","kind":"method","ident_start":257962,"ident_end":257969,"extent_start":257941,"extent_end":258310,"fully_qualified_name":"TestSpecParser::endMode","ident_utf16":{"start":{"line_number":7266,"utf16_col":25},"end":{"line_number":7266,"utf16_col":32}},"extent_utf16":{"start":{"line_number":7266,"utf16_col":4},"end":{"line_number":7280,"utf16_col":5}}},{"name":"escape","kind":"method","ident_start":258336,"ident_end":258342,"extent_start":258315,"extent_end":258457,"fully_qualified_name":"TestSpecParser::escape","ident_utf16":{"start":{"line_number":7281,"utf16_col":25},"end":{"line_number":7281,"utf16_col":31}},"extent_utf16":{"start":{"line_number":7281,"utf16_col":4},"end":{"line_number":7285,"utf16_col":5}}},{"name":"isControlChar","kind":"method","ident_start":258483,"ident_end":258496,"extent_start":258462,"extent_end":258908,"fully_qualified_name":"TestSpecParser::isControlChar","ident_utf16":{"start":{"line_number":7286,"utf16_col":25},"end":{"line_number":7286,"utf16_col":38}},"extent_utf16":{"start":{"line_number":7286,"utf16_col":4},"end":{"line_number":7301,"utf16_col":5}}},{"name":"addFilter","kind":"method","ident_start":258935,"ident_end":258944,"extent_start":258914,"extent_end":259181,"fully_qualified_name":"TestSpecParser::addFilter","ident_utf16":{"start":{"line_number":7303,"utf16_col":25},"end":{"line_number":7303,"utf16_col":34}},"extent_utf16":{"start":{"line_number":7303,"utf16_col":4},"end":{"line_number":7308,"utf16_col":5}}},{"name":"saveLastMode","kind":"method","ident_start":259208,"ident_end":259220,"extent_start":259187,"extent_end":259255,"fully_qualified_name":"TestSpecParser::saveLastMode","ident_utf16":{"start":{"line_number":7310,"utf16_col":25},"end":{"line_number":7310,"utf16_col":37}},"extent_utf16":{"start":{"line_number":7310,"utf16_col":4},"end":{"line_number":7312,"utf16_col":5}}},{"name":"revertBackToLastMode","kind":"method","ident_start":259282,"ident_end":259302,"extent_start":259261,"extent_end":259337,"fully_qualified_name":"TestSpecParser::revertBackToLastMode","ident_utf16":{"start":{"line_number":7314,"utf16_col":25},"end":{"line_number":7314,"utf16_col":45}},"extent_utf16":{"start":{"line_number":7314,"utf16_col":4},"end":{"line_number":7316,"utf16_col":5}}},{"name":"separate","kind":"method","ident_start":259364,"ident_end":259372,"extent_start":259343,"extent_end":259740,"fully_qualified_name":"TestSpecParser::separate","ident_utf16":{"start":{"line_number":7318,"utf16_col":25},"end":{"line_number":7318,"utf16_col":33}},"extent_utf16":{"start":{"line_number":7318,"utf16_col":4},"end":{"line_number":7331,"utf16_col":5}}},{"name":"preprocessPattern","kind":"method","ident_start":259774,"ident_end":259791,"extent_start":259746,"extent_end":260247,"fully_qualified_name":"TestSpecParser::preprocessPattern","ident_utf16":{"start":{"line_number":7333,"utf16_col":32},"end":{"line_number":7333,"utf16_col":49}},"extent_utf16":{"start":{"line_number":7333,"utf16_col":4},"end":{"line_number":7347,"utf16_col":5}}},{"name":"addNamePattern","kind":"method","ident_start":260274,"ident_end":260288,"extent_start":260253,"extent_end":260771,"fully_qualified_name":"TestSpecParser::addNamePattern","ident_utf16":{"start":{"line_number":7349,"utf16_col":25},"end":{"line_number":7349,"utf16_col":39}},"extent_utf16":{"start":{"line_number":7349,"utf16_col":4},"end":{"line_number":7362,"utf16_col":5}}},{"name":"addTagPattern","kind":"method","ident_start":260798,"ident_end":260811,"extent_start":260777,"extent_end":261886,"fully_qualified_name":"TestSpecParser::addTagPattern","ident_utf16":{"start":{"line_number":7364,"utf16_col":25},"end":{"line_number":7364,"utf16_col":38}},"extent_utf16":{"start":{"line_number":7364,"utf16_col":4},"end":{"line_number":7387,"utf16_col":5}}},{"name":"isWhitespace","kind":"function","ident_start":261993,"ident_end":262005,"extent_start":261988,"extent_end":262087,"fully_qualified_name":"isWhitespace","ident_utf16":{"start":{"line_number":7398,"utf16_col":9},"end":{"line_number":7398,"utf16_col":21}},"extent_utf16":{"start":{"line_number":7398,"utf16_col":4},"end":{"line_number":7400,"utf16_col":5}}},{"name":"isBreakableBefore","kind":"function","ident_start":262098,"ident_end":262115,"extent_start":262093,"extent_end":262250,"fully_qualified_name":"isBreakableBefore","ident_utf16":{"start":{"line_number":7402,"utf16_col":9},"end":{"line_number":7402,"utf16_col":26}},"extent_utf16":{"start":{"line_number":7402,"utf16_col":4},"end":{"line_number":7405,"utf16_col":5}}},{"name":"isBreakableAfter","kind":"function","ident_start":262261,"ident_end":262277,"extent_start":262256,"extent_end":262423,"fully_qualified_name":"isBreakableAfter","ident_utf16":{"start":{"line_number":7407,"utf16_col":9},"end":{"line_number":7407,"utf16_col":25}},"extent_utf16":{"start":{"line_number":7407,"utf16_col":4},"end":{"line_number":7410,"utf16_col":5}}},{"name":"preprocessString","kind":"method","ident_start":262517,"ident_end":262533,"extent_start":262492,"extent_end":263580,"fully_qualified_name":"AnsiSkippingString::preprocessString","ident_utf16":{"start":{"line_number":7416,"utf16_col":33},"end":{"line_number":7416,"utf16_col":49}},"extent_utf16":{"start":{"line_number":7416,"utf16_col":8},"end":{"line_number":7440,"utf16_col":9}}},{"name":"AnsiSkippingString","kind":"method","ident_start":263610,"ident_end":263628,"extent_start":263590,"extent_end":263729,"fully_qualified_name":"AnsiSkippingString::AnsiSkippingString","ident_utf16":{"start":{"line_number":7442,"utf16_col":28},"end":{"line_number":7442,"utf16_col":46}},"extent_utf16":{"start":{"line_number":7442,"utf16_col":8},"end":{"line_number":7445,"utf16_col":9}}},{"name":"AnsiSkippingString","kind":"method","ident_start":263759,"ident_end":263777,"extent_start":263739,"extent_end":263887,"fully_qualified_name":"AnsiSkippingString::AnsiSkippingString","ident_utf16":{"start":{"line_number":7447,"utf16_col":28},"end":{"line_number":7447,"utf16_col":46}},"extent_utf16":{"start":{"line_number":7447,"utf16_col":8},"end":{"line_number":7450,"utf16_col":9}}},{"name":"begin","kind":"method","ident_start":263952,"ident_end":263957,"extent_start":263897,"extent_end":264024,"fully_qualified_name":"AnsiSkippingString::begin","ident_utf16":{"start":{"line_number":7452,"utf16_col":63},"end":{"line_number":7452,"utf16_col":68}},"extent_utf16":{"start":{"line_number":7452,"utf16_col":8},"end":{"line_number":7454,"utf16_col":9}}},{"name":"end","kind":"method","ident_start":264089,"ident_end":264092,"extent_start":264034,"extent_end":264185,"fully_qualified_name":"AnsiSkippingString::end","ident_utf16":{"start":{"line_number":7456,"utf16_col":63},"end":{"line_number":7456,"utf16_col":66}},"extent_utf16":{"start":{"line_number":7456,"utf16_col":8},"end":{"line_number":7458,"utf16_col":9}}},{"name":"substring","kind":"method","ident_start":264227,"ident_end":264236,"extent_start":264195,"extent_end":265156,"fully_qualified_name":"AnsiSkippingString::substring","ident_utf16":{"start":{"line_number":7460,"utf16_col":40},"end":{"line_number":7460,"utf16_col":49}},"extent_utf16":{"start":{"line_number":7460,"utf16_col":8},"end":{"line_number":7475,"utf16_col":9}}},{"name":"isBoundary","kind":"function","ident_start":266971,"ident_end":266981,"extent_start":266959,"extent_end":267343,"fully_qualified_name":"isBoundary","ident_utf16":{"start":{"line_number":7521,"utf16_col":20},"end":{"line_number":7521,"utf16_col":30}},"extent_utf16":{"start":{"line_number":7521,"utf16_col":8},"end":{"line_number":7528,"utf16_col":9}}},{"name":"Spacer","kind":"function","ident_start":272173,"ident_end":272179,"extent_start":272166,"extent_end":272303,"fully_qualified_name":"Spacer","ident_utf16":{"start":{"line_number":7656,"utf16_col":15},"end":{"line_number":7656,"utf16_col":21}},"extent_utf16":{"start":{"line_number":7656,"utf16_col":8},"end":{"line_number":7660,"utf16_col":9}}},{"name":"uncaught_exceptions","kind":"function","ident_start":275596,"ident_end":275615,"extent_start":275591,"extent_end":275846,"fully_qualified_name":"uncaught_exceptions","ident_utf16":{"start":{"line_number":7770,"utf16_col":9},"end":{"line_number":7770,"utf16_col":28}},"extent_utf16":{"start":{"line_number":7770,"utf16_col":4},"end":{"line_number":7778,"utf16_col":3}}},{"name":"WildcardPattern","kind":"method","ident_start":275915,"ident_end":275930,"extent_start":275898,"extent_end":276485,"fully_qualified_name":"WildcardPattern::WildcardPattern","ident_utf16":{"start":{"line_number":7785,"utf16_col":21},"end":{"line_number":7785,"utf16_col":36}},"extent_utf16":{"start":{"line_number":7785,"utf16_col":4},"end":{"line_number":7798,"utf16_col":5}}},{"name":"matches","kind":"method","ident_start":276513,"ident_end":276520,"extent_start":276491,"extent_end":277082,"fully_qualified_name":"WildcardPattern::matches","ident_utf16":{"start":{"line_number":7800,"utf16_col":26},"end":{"line_number":7800,"utf16_col":33}},"extent_utf16":{"start":{"line_number":7800,"utf16_col":4},"end":{"line_number":7813,"utf16_col":5}}},{"name":"normaliseString","kind":"method","ident_start":277117,"ident_end":277132,"extent_start":277088,"extent_end":277258,"fully_qualified_name":"WildcardPattern::normaliseString","ident_utf16":{"start":{"line_number":7815,"utf16_col":33},"end":{"line_number":7815,"utf16_col":48}},"extent_utf16":{"start":{"line_number":7815,"utf16_col":4},"end":{"line_number":7817,"utf16_col":5}}},{"name":"trailingBytes","kind":"function","ident_start":277537,"ident_end":277550,"extent_start":277530,"extent_end":277853,"fully_qualified_name":"trailingBytes","ident_utf16":{"start":{"line_number":7833,"utf16_col":11},"end":{"line_number":7833,"utf16_col":24}},"extent_utf16":{"start":{"line_number":7833,"utf16_col":4},"end":{"line_number":7844,"utf16_col":5}}},{"name":"headerValue","kind":"function","ident_start":277868,"ident_end":277879,"extent_start":277859,"extent_end":278203,"fully_qualified_name":"headerValue","ident_utf16":{"start":{"line_number":7846,"utf16_col":13},"end":{"line_number":7846,"utf16_col":24}},"extent_utf16":{"start":{"line_number":7846,"utf16_col":4},"end":{"line_number":7857,"utf16_col":5}}},{"name":"hexEscapeChar","kind":"function","ident_start":278214,"ident_end":278227,"extent_start":278209,"extent_end":278473,"fully_qualified_name":"hexEscapeChar","ident_utf16":{"start":{"line_number":7859,"utf16_col":9},"end":{"line_number":7859,"utf16_col":22}},"extent_utf16":{"start":{"line_number":7859,"utf16_col":4},"end":{"line_number":7865,"utf16_col":5}}},{"name":"shouldNewline","kind":"function","ident_start":278494,"ident_end":278507,"extent_start":278479,"extent_end":278635,"fully_qualified_name":"shouldNewline","ident_utf16":{"start":{"line_number":7867,"utf16_col":19},"end":{"line_number":7867,"utf16_col":32}},"extent_utf16":{"start":{"line_number":7867,"utf16_col":4},"end":{"line_number":7869,"utf16_col":5}}},{"name":"shouldIndent","kind":"function","ident_start":278656,"ident_end":278668,"extent_start":278641,"extent_end":278795,"fully_qualified_name":"shouldIndent","ident_utf16":{"start":{"line_number":7871,"utf16_col":19},"end":{"line_number":7871,"utf16_col":31}},"extent_utf16":{"start":{"line_number":7871,"utf16_col":4},"end":{"line_number":7873,"utf16_col":5}}},{"name":"encodeTo","kind":"method","ident_start":278843,"ident_end":278851,"extent_start":278827,"extent_end":282534,"fully_qualified_name":"XmlEncode::encodeTo","ident_utf16":{"start":{"line_number":7877,"utf16_col":20},"end":{"line_number":7877,"utf16_col":28}},"extent_utf16":{"start":{"line_number":7877,"utf16_col":4},"end":{"line_number":7969,"utf16_col":5}}},{"name":"XmlWriter","kind":"method","ident_start":283962,"ident_end":283971,"extent_start":283951,"extent_end":284044,"fully_qualified_name":"XmlWriter::XmlWriter","ident_utf16":{"start":{"line_number":8020,"utf16_col":15},"end":{"line_number":8020,"utf16_col":24}},"extent_utf16":{"start":{"line_number":8020,"utf16_col":4},"end":{"line_number":8023,"utf16_col":5}}},{"name":"scopedElement","kind":"method","ident_start":284620,"ident_end":284633,"extent_start":284584,"extent_end":284788,"fully_qualified_name":"XmlWriter::scopedElement","ident_utf16":{"start":{"line_number":8046,"utf16_col":40},"end":{"line_number":8046,"utf16_col":53}},"extent_utf16":{"start":{"line_number":8046,"utf16_col":4},"end":{"line_number":8050,"utf16_col":5}}},{"name":"writeStylesheetRef","kind":"method","ident_start":286791,"ident_end":286809,"extent_start":286775,"extent_end":286923,"fully_qualified_name":"XmlWriter::writeStylesheetRef","ident_utf16":{"start":{"line_number":8113,"utf16_col":20},"end":{"line_number":8113,"utf16_col":38}},"extent_utf16":{"start":{"line_number":8113,"utf16_col":4},"end":{"line_number":8115,"utf16_col":5}}},{"name":"ensureTagClosed","kind":"method","ident_start":286945,"ident_end":286960,"extent_start":286929,"extent_end":287114,"fully_qualified_name":"XmlWriter::ensureTagClosed","ident_utf16":{"start":{"line_number":8117,"utf16_col":20},"end":{"line_number":8117,"utf16_col":35}},"extent_utf16":{"start":{"line_number":8117,"utf16_col":4},"end":{"line_number":8123,"utf16_col":5}}},{"name":"applyFormatting","kind":"method","ident_start":287136,"ident_end":287151,"extent_start":287120,"extent_end":287223,"fully_qualified_name":"XmlWriter::applyFormatting","ident_utf16":{"start":{"line_number":8125,"utf16_col":20},"end":{"line_number":8125,"utf16_col":35}},"extent_utf16":{"start":{"line_number":8125,"utf16_col":4},"end":{"line_number":8127,"utf16_col":5}}},{"name":"writeDeclaration","kind":"method","ident_start":287245,"ident_end":287261,"extent_start":287229,"extent_end":287340,"fully_qualified_name":"XmlWriter::writeDeclaration","ident_utf16":{"start":{"line_number":8129,"utf16_col":20},"end":{"line_number":8129,"utf16_col":36}},"extent_utf16":{"start":{"line_number":8129,"utf16_col":4},"end":{"line_number":8131,"utf16_col":5}}},{"name":"newlineIfNecessary","kind":"method","ident_start":287362,"ident_end":287380,"extent_start":287346,"extent_end":287507,"fully_qualified_name":"XmlWriter::newlineIfNecessary","ident_utf16":{"start":{"line_number":8133,"utf16_col":20},"end":{"line_number":8133,"utf16_col":38}},"extent_utf16":{"start":{"line_number":8133,"utf16_col":4},"end":{"line_number":8138,"utf16_col":5}}},{"name":"toString","kind":"method","ident_start":287591,"ident_end":287599,"extent_start":287559,"extent_end":287741,"fully_qualified_name":"MatcherUntypedBase::toString","ident_utf16":{"start":{"line_number":8148,"utf16_col":36},"end":{"line_number":8148,"utf16_col":44}},"extent_utf16":{"start":{"line_number":8148,"utf16_col":4},"end":{"line_number":8153,"utf16_col":5}}},{"name":"describe","kind":"method","ident_start":287922,"ident_end":287930,"extent_start":287894,"extent_end":287973,"fully_qualified_name":"IsEmptyMatcher::describe","ident_utf16":{"start":{"line_number":8166,"utf16_col":32},"end":{"line_number":8166,"utf16_col":40}},"extent_utf16":{"start":{"line_number":8166,"utf16_col":4},"end":{"line_number":8168,"utf16_col":5}}},{"name":"describe","kind":"method","ident_start":288007,"ident_end":288015,"extent_start":287979,"extent_end":288142,"fully_qualified_name":"HasSizeMatcher::describe","ident_utf16":{"start":{"line_number":8170,"utf16_col":32},"end":{"line_number":8170,"utf16_col":40}},"extent_utf16":{"start":{"line_number":8170,"utf16_col":4},"end":{"line_number":8174,"utf16_col":5}}},{"name":"IsEmpty","kind":"function","ident_start":288163,"ident_end":288170,"extent_start":288148,"extent_end":288199,"fully_qualified_name":"IsEmpty","ident_utf16":{"start":{"line_number":8176,"utf16_col":19},"end":{"line_number":8176,"utf16_col":26}},"extent_utf16":{"start":{"line_number":8176,"utf16_col":4},"end":{"line_number":8178,"utf16_col":5}}},{"name":"SizeIs","kind":"function","ident_start":288220,"ident_end":288226,"extent_start":288205,"extent_end":288287,"fully_qualified_name":"SizeIs","ident_utf16":{"start":{"line_number":8180,"utf16_col":19},"end":{"line_number":8180,"utf16_col":25}},"extent_utf16":{"start":{"line_number":8180,"utf16_col":4},"end":{"line_number":8182,"utf16_col":5}}},{"name":"match","kind":"method","ident_start":288415,"ident_end":288420,"extent_start":288385,"extent_end":288491,"fully_qualified_name":"ExceptionMessageMatcher::match","ident_utf16":{"start":{"line_number":8192,"utf16_col":30},"end":{"line_number":8192,"utf16_col":35}},"extent_utf16":{"start":{"line_number":8192,"utf16_col":0},"end":{"line_number":8194,"utf16_col":1}}},{"name":"describe","kind":"method","ident_start":288530,"ident_end":288538,"extent_start":288493,"extent_end":288611,"fully_qualified_name":"ExceptionMessageMatcher::describe","ident_utf16":{"start":{"line_number":8196,"utf16_col":37},"end":{"line_number":8196,"utf16_col":45}},"extent_utf16":{"start":{"line_number":8196,"utf16_col":0},"end":{"line_number":8198,"utf16_col":1}}},{"name":"Message","kind":"function","ident_start":288637,"ident_end":288644,"extent_start":288613,"extent_end":288721,"fully_qualified_name":"Message","ident_utf16":{"start":{"line_number":8200,"utf16_col":24},"end":{"line_number":8200,"utf16_col":31}},"extent_utf16":{"start":{"line_number":8200,"utf16_col":0},"end":{"line_number":8202,"utf16_col":1}}},{"name":"almostEqualUlps","kind":"function","ident_start":288972,"ident_end":288987,"extent_start":288967,"extent_end":289420,"fully_qualified_name":"almostEqualUlps","ident_utf16":{"start":{"line_number":8222,"utf16_col":9},"end":{"line_number":8222,"utf16_col":24}},"extent_utf16":{"start":{"line_number":8222,"utf16_col":4},"end":{"line_number":8233,"utf16_col":5}}},{"name":"step","kind":"function","ident_start":289449,"ident_end":289453,"extent_start":289446,"extent_end":289616,"fully_qualified_name":"step","ident_utf16":{"start":{"line_number":8237,"utf16_col":3},"end":{"line_number":8237,"utf16_col":7}},"extent_utf16":{"start":{"line_number":8237,"utf16_col":0},"end":{"line_number":8242,"utf16_col":1}}},{"name":"marginComparison","kind":"function","ident_start":289753,"ident_end":289769,"extent_start":289748,"extent_end":289871,"fully_qualified_name":"marginComparison","ident_utf16":{"start":{"line_number":8246,"utf16_col":5},"end":{"line_number":8246,"utf16_col":21}},"extent_utf16":{"start":{"line_number":8246,"utf16_col":0},"end":{"line_number":8248,"utf16_col":1}}},{"name":"write","kind":"function","ident_start":289912,"ident_end":289917,"extent_start":289907,"extent_end":290085,"fully_qualified_name":"write","ident_utf16":{"start":{"line_number":8251,"utf16_col":5},"end":{"line_number":8251,"utf16_col":10}},"extent_utf16":{"start":{"line_number":8251,"utf16_col":0},"end":{"line_number":8255,"utf16_col":1}}},{"name":"FloatingPointKind","kind":"type","ident_start":290173,"ident_end":290190,"extent_start":290162,"extent_end":290238,"fully_qualified_name":"FloatingPointKind","ident_utf16":{"start":{"line_number":8262,"utf16_col":15},"end":{"line_number":8262,"utf16_col":32}},"extent_utf16":{"start":{"line_number":8262,"utf16_col":4},"end":{"line_number":8265,"utf16_col":5}}},{"name":"WithinAbsMatcher","kind":"method","ident_start":290291,"ident_end":290307,"extent_start":290273,"extent_end":290515,"fully_qualified_name":"WithinAbsMatcher::WithinAbsMatcher","ident_utf16":{"start":{"line_number":8270,"utf16_col":22},"end":{"line_number":8270,"utf16_col":38}},"extent_utf16":{"start":{"line_number":8270,"utf16_col":4},"end":{"line_number":8274,"utf16_col":5}}},{"name":"match","kind":"method","ident_start":290682,"ident_end":290687,"extent_start":290659,"extent_end":290809,"fully_qualified_name":"WithinAbsMatcher::match","ident_utf16":{"start":{"line_number":8278,"utf16_col":27},"end":{"line_number":8278,"utf16_col":32}},"extent_utf16":{"start":{"line_number":8278,"utf16_col":4},"end":{"line_number":8280,"utf16_col":5}}},{"name":"describe","kind":"method","ident_start":290845,"ident_end":290853,"extent_start":290815,"extent_end":290985,"fully_qualified_name":"WithinAbsMatcher::describe","ident_utf16":{"start":{"line_number":8282,"utf16_col":34},"end":{"line_number":8282,"utf16_col":42}},"extent_utf16":{"start":{"line_number":8282,"utf16_col":4},"end":{"line_number":8284,"utf16_col":5}}},{"name":"WithinUlpsMatcher","kind":"method","ident_start":291011,"ident_end":291028,"extent_start":290992,"extent_end":291590,"fully_qualified_name":"WithinUlpsMatcher::WithinUlpsMatcher","ident_utf16":{"start":{"line_number":8287,"utf16_col":23},"end":{"line_number":8287,"utf16_col":40}},"extent_utf16":{"start":{"line_number":8287,"utf16_col":4},"end":{"line_number":8295,"utf16_col":5}}},{"name":"match","kind":"method","ident_start":291799,"ident_end":291804,"extent_start":291775,"extent_end":292249,"fully_qualified_name":"WithinUlpsMatcher::match","ident_utf16":{"start":{"line_number":8303,"utf16_col":28},"end":{"line_number":8303,"utf16_col":33}},"extent_utf16":{"start":{"line_number":8303,"utf16_col":4},"end":{"line_number":8312,"utf16_col":5}}},{"name":"describe","kind":"method","ident_start":292346,"ident_end":292354,"extent_start":292315,"extent_end":293630,"fully_qualified_name":"WithinUlpsMatcher::describe","ident_utf16":{"start":{"line_number":8318,"utf16_col":35},"end":{"line_number":8318,"utf16_col":43}},"extent_utf16":{"start":{"line_number":8318,"utf16_col":4},"end":{"line_number":8356,"utf16_col":5}}},{"name":"WithinRelMatcher","kind":"method","ident_start":293654,"ident_end":293670,"extent_start":293636,"extent_end":293966,"fully_qualified_name":"WithinRelMatcher::WithinRelMatcher","ident_utf16":{"start":{"line_number":8358,"utf16_col":22},"end":{"line_number":8358,"utf16_col":38}},"extent_utf16":{"start":{"line_number":8358,"utf16_col":4},"end":{"line_number":8363,"utf16_col":5}}},{"name":"match","kind":"method","ident_start":293995,"ident_end":294000,"extent_start":293972,"extent_end":294255,"fully_qualified_name":"WithinRelMatcher::match","ident_utf16":{"start":{"line_number":8365,"utf16_col":27},"end":{"line_number":8365,"utf16_col":32}},"extent_utf16":{"start":{"line_number":8365,"utf16_col":4},"end":{"line_number":8369,"utf16_col":5}}},{"name":"describe","kind":"method","ident_start":294291,"ident_end":294299,"extent_start":294261,"extent_end":294507,"fully_qualified_name":"WithinRelMatcher::describe","ident_utf16":{"start":{"line_number":8371,"utf16_col":34},"end":{"line_number":8371,"utf16_col":42}},"extent_utf16":{"start":{"line_number":8371,"utf16_col":4},"end":{"line_number":8375,"utf16_col":5}}},{"name":"WithinULP","kind":"function","ident_start":294528,"ident_end":294537,"extent_start":294510,"extent_end":294662,"fully_qualified_name":"WithinULP","ident_utf16":{"start":{"line_number":8378,"utf16_col":18},"end":{"line_number":8378,"utf16_col":27}},"extent_utf16":{"start":{"line_number":8378,"utf16_col":0},"end":{"line_number":8380,"utf16_col":1}}},{"name":"WithinULP","kind":"function","ident_start":294682,"ident_end":294691,"extent_start":294664,"extent_end":294814,"fully_qualified_name":"WithinULP","ident_utf16":{"start":{"line_number":8382,"utf16_col":18},"end":{"line_number":8382,"utf16_col":27}},"extent_utf16":{"start":{"line_number":8382,"utf16_col":0},"end":{"line_number":8384,"utf16_col":1}}},{"name":"WithinAbs","kind":"function","ident_start":294833,"ident_end":294842,"extent_start":294816,"extent_end":294921,"fully_qualified_name":"WithinAbs","ident_utf16":{"start":{"line_number":8386,"utf16_col":17},"end":{"line_number":8386,"utf16_col":26}},"extent_utf16":{"start":{"line_number":8386,"utf16_col":0},"end":{"line_number":8388,"utf16_col":1}}},{"name":"WithinRel","kind":"function","ident_start":294940,"ident_end":294949,"extent_start":294923,"extent_end":295022,"fully_qualified_name":"WithinRel","ident_utf16":{"start":{"line_number":8390,"utf16_col":17},"end":{"line_number":8390,"utf16_col":26}},"extent_utf16":{"start":{"line_number":8390,"utf16_col":0},"end":{"line_number":8392,"utf16_col":1}}},{"name":"WithinRel","kind":"function","ident_start":295041,"ident_end":295050,"extent_start":295024,"extent_end":295152,"fully_qualified_name":"WithinRel","ident_utf16":{"start":{"line_number":8394,"utf16_col":17},"end":{"line_number":8394,"utf16_col":26}},"extent_utf16":{"start":{"line_number":8394,"utf16_col":0},"end":{"line_number":8396,"utf16_col":1}}},{"name":"WithinRel","kind":"function","ident_start":295171,"ident_end":295180,"extent_start":295154,"extent_end":295251,"fully_qualified_name":"WithinRel","ident_utf16":{"start":{"line_number":8398,"utf16_col":17},"end":{"line_number":8398,"utf16_col":26}},"extent_utf16":{"start":{"line_number":8398,"utf16_col":0},"end":{"line_number":8400,"utf16_col":1}}},{"name":"WithinRel","kind":"function","ident_start":295270,"ident_end":295279,"extent_start":295253,"extent_end":295379,"fully_qualified_name":"WithinRel","ident_utf16":{"start":{"line_number":8402,"utf16_col":17},"end":{"line_number":8402,"utf16_col":26}},"extent_utf16":{"start":{"line_number":8402,"utf16_col":0},"end":{"line_number":8404,"utf16_col":1}}},{"name":"match","kind":"method","ident_start":295402,"ident_end":295407,"extent_start":295383,"extent_end":295476,"fully_qualified_name":"IsNaNMatcher::match","ident_utf16":{"start":{"line_number":8408,"utf16_col":19},"end":{"line_number":8408,"utf16_col":24}},"extent_utf16":{"start":{"line_number":8408,"utf16_col":0},"end":{"line_number":8410,"utf16_col":1}}},{"name":"describe","kind":"method","ident_start":295504,"ident_end":295512,"extent_start":295478,"extent_end":295588,"fully_qualified_name":"IsNaNMatcher::describe","ident_utf16":{"start":{"line_number":8412,"utf16_col":26},"end":{"line_number":8412,"utf16_col":34}},"extent_utf16":{"start":{"line_number":8412,"utf16_col":0},"end":{"line_number":8415,"utf16_col":1}}},{"name":"IsNaN","kind":"function","ident_start":295603,"ident_end":295608,"extent_start":295590,"extent_end":295637,"fully_qualified_name":"IsNaN","ident_utf16":{"start":{"line_number":8417,"utf16_col":13},"end":{"line_number":8417,"utf16_col":18}},"extent_utf16":{"start":{"line_number":8417,"utf16_col":0},"end":{"line_number":8417,"utf16_col":47}}},{"name":"describe","kind":"method","ident_start":296004,"ident_end":296012,"extent_start":295976,"extent_end":296053,"fully_qualified_name":"AllTrueMatcher::describe","ident_utf16":{"start":{"line_number":8437,"utf16_col":36},"end":{"line_number":8437,"utf16_col":44}},"extent_utf16":{"start":{"line_number":8437,"utf16_col":8},"end":{"line_number":8437,"utf16_col":85}}},{"name":"AllTrue","kind":"function","ident_start":296078,"ident_end":296085,"extent_start":296063,"extent_end":296116,"fully_qualified_name":"AllTrue","ident_utf16":{"start":{"line_number":8439,"utf16_col":23},"end":{"line_number":8439,"utf16_col":30}},"extent_utf16":{"start":{"line_number":8439,"utf16_col":8},"end":{"line_number":8439,"utf16_col":61}}},{"name":"describe","kind":"method","ident_start":296155,"ident_end":296163,"extent_start":296126,"extent_end":296202,"fully_qualified_name":"NoneTrueMatcher::describe","ident_utf16":{"start":{"line_number":8441,"utf16_col":37},"end":{"line_number":8441,"utf16_col":45}},"extent_utf16":{"start":{"line_number":8441,"utf16_col":8},"end":{"line_number":8441,"utf16_col":84}}},{"name":"NoneTrue","kind":"function","ident_start":296228,"ident_end":296236,"extent_start":296212,"extent_end":296268,"fully_qualified_name":"NoneTrue","ident_utf16":{"start":{"line_number":8443,"utf16_col":24},"end":{"line_number":8443,"utf16_col":32}},"extent_utf16":{"start":{"line_number":8443,"utf16_col":8},"end":{"line_number":8443,"utf16_col":64}}},{"name":"describe","kind":"method","ident_start":296306,"ident_end":296314,"extent_start":296278,"extent_end":296363,"fully_qualified_name":"AnyTrueMatcher::describe","ident_utf16":{"start":{"line_number":8445,"utf16_col":36},"end":{"line_number":8445,"utf16_col":44}},"extent_utf16":{"start":{"line_number":8445,"utf16_col":8},"end":{"line_number":8445,"utf16_col":93}}},{"name":"AnyTrue","kind":"function","ident_start":296388,"ident_end":296395,"extent_start":296373,"extent_end":296426,"fully_qualified_name":"AnyTrue","ident_utf16":{"start":{"line_number":8447,"utf16_col":23},"end":{"line_number":8447,"utf16_col":30}},"extent_utf16":{"start":{"line_number":8447,"utf16_col":8},"end":{"line_number":8447,"utf16_col":61}}},{"name":"CasedString","kind":"method","ident_start":296554,"ident_end":296565,"extent_start":296541,"extent_end":296712,"fully_qualified_name":"CasedString::CasedString","ident_utf16":{"start":{"line_number":8458,"utf16_col":17},"end":{"line_number":8458,"utf16_col":28}},"extent_utf16":{"start":{"line_number":8458,"utf16_col":4},"end":{"line_number":8461,"utf16_col":6}}},{"name":"adjustString","kind":"method","ident_start":296742,"ident_end":296754,"extent_start":296717,"extent_end":296902,"fully_qualified_name":"CasedString::adjustString","ident_utf16":{"start":{"line_number":8462,"utf16_col":29},"end":{"line_number":8462,"utf16_col":41}},"extent_utf16":{"start":{"line_number":8462,"utf16_col":4},"end":{"line_number":8466,"utf16_col":5}}},{"name":"caseSensitivitySuffix","kind":"method","ident_start":296930,"ident_end":296951,"extent_start":296907,"extent_end":297102,"fully_qualified_name":"CasedString::caseSensitivitySuffix","ident_utf16":{"start":{"line_number":8467,"utf16_col":27},"end":{"line_number":8467,"utf16_col":48}},"extent_utf16":{"start":{"line_number":8467,"utf16_col":4},"end":{"line_number":8471,"utf16_col":5}}},{"name":"StringMatcherBase","kind":"method","ident_start":297128,"ident_end":297145,"extent_start":297109,"extent_end":297272,"fully_qualified_name":"StringMatcherBase::StringMatcherBase","ident_utf16":{"start":{"line_number":8474,"utf16_col":23},"end":{"line_number":8474,"utf16_col":40}},"extent_utf16":{"start":{"line_number":8474,"utf16_col":4},"end":{"line_number":8477,"utf16_col":5}}},{"name":"describe","kind":"method","ident_start":297309,"ident_end":297317,"extent_start":297278,"extent_end":297756,"fully_qualified_name":"StringMatcherBase::describe","ident_utf16":{"start":{"line_number":8479,"utf16_col":35},"end":{"line_number":8479,"utf16_col":43}},"extent_utf16":{"start":{"line_number":8479,"utf16_col":4},"end":{"line_number":8489,"utf16_col":5}}},{"name":"StringEqualsMatcher","kind":"method","ident_start":297783,"ident_end":297802,"extent_start":297762,"extent_end":297885,"fully_qualified_name":"StringEqualsMatcher::StringEqualsMatcher","ident_utf16":{"start":{"line_number":8491,"utf16_col":25},"end":{"line_number":8491,"utf16_col":44}},"extent_utf16":{"start":{"line_number":8491,"utf16_col":4},"end":{"line_number":8491,"utf16_col":127}}},{"name":"match","kind":"method","ident_start":297917,"ident_end":297922,"extent_start":297891,"extent_end":298039,"fully_qualified_name":"StringEqualsMatcher::match","ident_utf16":{"start":{"line_number":8493,"utf16_col":30},"end":{"line_number":8493,"utf16_col":35}},"extent_utf16":{"start":{"line_number":8493,"utf16_col":4},"end":{"line_number":8495,"utf16_col":5}}},{"name":"StringContainsMatcher","kind":"method","ident_start":298069,"ident_end":298090,"extent_start":298046,"extent_end":298175,"fully_qualified_name":"StringContainsMatcher::StringContainsMatcher","ident_utf16":{"start":{"line_number":8498,"utf16_col":27},"end":{"line_number":8498,"utf16_col":48}},"extent_utf16":{"start":{"line_number":8498,"utf16_col":4},"end":{"line_number":8498,"utf16_col":133}}},{"name":"match","kind":"method","ident_start":298209,"ident_end":298214,"extent_start":298181,"extent_end":298341,"fully_qualified_name":"StringContainsMatcher::match","ident_utf16":{"start":{"line_number":8500,"utf16_col":32},"end":{"line_number":8500,"utf16_col":37}},"extent_utf16":{"start":{"line_number":8500,"utf16_col":4},"end":{"line_number":8502,"utf16_col":5}}},{"name":"StartsWithMatcher","kind":"method","ident_start":298367,"ident_end":298384,"extent_start":298348,"extent_end":298472,"fully_qualified_name":"StartsWithMatcher::StartsWithMatcher","ident_utf16":{"start":{"line_number":8505,"utf16_col":23},"end":{"line_number":8505,"utf16_col":40}},"extent_utf16":{"start":{"line_number":8505,"utf16_col":4},"end":{"line_number":8505,"utf16_col":128}}},{"name":"match","kind":"method","ident_start":298502,"ident_end":298507,"extent_start":298478,"extent_end":298636,"fully_qualified_name":"StartsWithMatcher::match","ident_utf16":{"start":{"line_number":8507,"utf16_col":28},"end":{"line_number":8507,"utf16_col":33}},"extent_utf16":{"start":{"line_number":8507,"utf16_col":4},"end":{"line_number":8509,"utf16_col":5}}},{"name":"EndsWithMatcher","kind":"method","ident_start":298660,"ident_end":298675,"extent_start":298643,"extent_end":298761,"fully_qualified_name":"EndsWithMatcher::EndsWithMatcher","ident_utf16":{"start":{"line_number":8512,"utf16_col":21},"end":{"line_number":8512,"utf16_col":36}},"extent_utf16":{"start":{"line_number":8512,"utf16_col":4},"end":{"line_number":8512,"utf16_col":122}}},{"name":"match","kind":"method","ident_start":298789,"ident_end":298794,"extent_start":298767,"extent_end":298921,"fully_qualified_name":"EndsWithMatcher::match","ident_utf16":{"start":{"line_number":8514,"utf16_col":26},"end":{"line_number":8514,"utf16_col":31}},"extent_utf16":{"start":{"line_number":8514,"utf16_col":4},"end":{"line_number":8516,"utf16_col":5}}},{"name":"RegexMatcher","kind":"method","ident_start":298943,"ident_end":298955,"extent_start":298929,"extent_end":299072,"fully_qualified_name":"RegexMatcher::RegexMatcher","ident_utf16":{"start":{"line_number":8520,"utf16_col":18},"end":{"line_number":8520,"utf16_col":30}},"extent_utf16":{"start":{"line_number":8520,"utf16_col":4},"end":{"line_number":8520,"utf16_col":147}}},{"name":"match","kind":"method","ident_start":299097,"ident_end":299102,"extent_start":299078,"extent_end":299437,"fully_qualified_name":"RegexMatcher::match","ident_utf16":{"start":{"line_number":8522,"utf16_col":23},"end":{"line_number":8522,"utf16_col":28}},"extent_utf16":{"start":{"line_number":8522,"utf16_col":4},"end":{"line_number":8529,"utf16_col":5}}},{"name":"describe","kind":"method","ident_start":299469,"ident_end":299477,"extent_start":299443,"extent_end":299649,"fully_qualified_name":"RegexMatcher::describe","ident_utf16":{"start":{"line_number":8531,"utf16_col":30},"end":{"line_number":8531,"utf16_col":38}},"extent_utf16":{"start":{"line_number":8531,"utf16_col":4},"end":{"line_number":8533,"utf16_col":5}}},{"name":"Equals","kind":"function","ident_start":299676,"ident_end":299682,"extent_start":299656,"extent_end":299821,"fully_qualified_name":"Equals","ident_utf16":{"start":{"line_number":8536,"utf16_col":24},"end":{"line_number":8536,"utf16_col":30}},"extent_utf16":{"start":{"line_number":8536,"utf16_col":4},"end":{"line_number":8538,"utf16_col":5}}},{"name":"ContainsSubstring","kind":"function","ident_start":299848,"ident_end":299865,"extent_start":299826,"extent_end":300006,"fully_qualified_name":"ContainsSubstring","ident_utf16":{"start":{"line_number":8539,"utf16_col":26},"end":{"line_number":8539,"utf16_col":43}},"extent_utf16":{"start":{"line_number":8539,"utf16_col":4},"end":{"line_number":8541,"utf16_col":5}}},{"name":"EndsWith","kind":"function","ident_start":300027,"ident_end":300035,"extent_start":300011,"extent_end":300170,"fully_qualified_name":"EndsWith","ident_utf16":{"start":{"line_number":8542,"utf16_col":20},"end":{"line_number":8542,"utf16_col":28}},"extent_utf16":{"start":{"line_number":8542,"utf16_col":4},"end":{"line_number":8544,"utf16_col":5}}},{"name":"StartsWith","kind":"function","ident_start":300193,"ident_end":300203,"extent_start":300175,"extent_end":300340,"fully_qualified_name":"StartsWith","ident_utf16":{"start":{"line_number":8545,"utf16_col":22},"end":{"line_number":8545,"utf16_col":32}},"extent_utf16":{"start":{"line_number":8545,"utf16_col":4},"end":{"line_number":8547,"utf16_col":5}}},{"name":"Matches","kind":"function","ident_start":300359,"ident_end":300366,"extent_start":300346,"extent_end":300484,"fully_qualified_name":"Matches","ident_utf16":{"start":{"line_number":8549,"utf16_col":17},"end":{"line_number":8549,"utf16_col":24}},"extent_utf16":{"start":{"line_number":8549,"utf16_col":4},"end":{"line_number":8551,"utf16_col":5}}},{"name":"describe_multi_matcher","kind":"function","ident_start":300675,"ident_end":300697,"extent_start":300663,"extent_end":301587,"fully_qualified_name":"describe_multi_matcher","ident_utf16":{"start":{"line_number":8564,"utf16_col":20},"end":{"line_number":8564,"utf16_col":42}},"extent_utf16":{"start":{"line_number":8564,"utf16_col":8},"end":{"line_number":8585,"utf16_col":9}}},{"name":"handleExceptionMatchExpr","kind":"function","ident_start":301932,"ident_end":301956,"extent_start":301927,"extent_end":302233,"fully_qualified_name":"handleExceptionMatchExpr","ident_utf16":{"start":{"line_number":8599,"utf16_col":9},"end":{"line_number":8599,"utf16_col":33}},"extent_utf16":{"start":{"line_number":8599,"utf16_col":4},"end":{"line_number":8603,"utf16_col":5}}},{"name":"testCaseEnded","kind":"method","ident_start":302379,"ident_end":302392,"extent_start":302356,"extent_end":303031,"fully_qualified_name":"AutomakeReporter::testCaseEnded","ident_utf16":{"start":{"line_number":8615,"utf16_col":27},"end":{"line_number":8615,"utf16_col":40}},"extent_utf16":{"start":{"line_number":8615,"utf16_col":4},"end":{"line_number":8629,"utf16_col":5}}},{"name":"skipTest","kind":"method","ident_start":303060,"ident_end":303068,"extent_start":303037,"extent_end":303174,"fully_qualified_name":"AutomakeReporter::skipTest","ident_utf16":{"start":{"line_number":8631,"utf16_col":27},"end":{"line_number":8631,"utf16_col":35}},"extent_utf16":{"start":{"line_number":8631,"utf16_col":4},"end":{"line_number":8633,"utf16_col":5}}},{"name":"ReporterBase","kind":"method","ident_start":303243,"ident_end":303255,"extent_start":303229,"extent_end":303579,"fully_qualified_name":"ReporterBase::ReporterBase","ident_utf16":{"start":{"line_number":8643,"utf16_col":18},"end":{"line_number":8643,"utf16_col":30}},"extent_utf16":{"start":{"line_number":8643,"utf16_col":4},"end":{"line_number":8649,"utf16_col":6}}},{"name":"listReporters","kind":"method","ident_start":303650,"ident_end":303663,"extent_start":303631,"extent_end":303812,"fully_qualified_name":"ReporterBase::listReporters","ident_utf16":{"start":{"line_number":8653,"utf16_col":23},"end":{"line_number":8653,"utf16_col":36}},"extent_utf16":{"start":{"line_number":8653,"utf16_col":4},"end":{"line_number":8656,"utf16_col":5}}},{"name":"listListeners","kind":"method","ident_start":303837,"ident_end":303850,"extent_start":303818,"extent_end":303978,"fully_qualified_name":"ReporterBase::listListeners","ident_utf16":{"start":{"line_number":8658,"utf16_col":23},"end":{"line_number":8658,"utf16_col":36}},"extent_utf16":{"start":{"line_number":8658,"utf16_col":4},"end":{"line_number":8661,"utf16_col":5}}},{"name":"listTests","kind":"method","ident_start":304003,"ident_end":304012,"extent_start":303984,"extent_end":304272,"fully_qualified_name":"ReporterBase::listTests","ident_utf16":{"start":{"line_number":8663,"utf16_col":23},"end":{"line_number":8663,"utf16_col":32}},"extent_utf16":{"start":{"line_number":8663,"utf16_col":4},"end":{"line_number":8669,"utf16_col":5}}},{"name":"listTags","kind":"method","ident_start":304297,"ident_end":304305,"extent_start":304278,"extent_end":304418,"fully_qualified_name":"ReporterBase::listTags","ident_utf16":{"start":{"line_number":8671,"utf16_col":23},"end":{"line_number":8671,"utf16_col":31}},"extent_utf16":{"start":{"line_number":8671,"utf16_col":4},"end":{"line_number":8673,"utf16_col":5}}},{"name":"AssertionPrinter","kind":"class","ident_start":304979,"ident_end":304995,"extent_start":304973,"extent_end":310578,"fully_qualified_name":"AssertionPrinter","ident_utf16":{"start":{"line_number":8697,"utf16_col":6},"end":{"line_number":8697,"utf16_col":22}},"extent_utf16":{"start":{"line_number":8697,"utf16_col":0},"end":{"line_number":8860,"utf16_col":1}}},{"name":"AssertionPrinter","kind":"function","ident_start":305078,"ident_end":305094,"extent_start":305078,"extent_end":305129,"fully_qualified_name":"AssertionPrinter::AssertionPrinter","ident_utf16":{"start":{"line_number":8700,"utf16_col":4},"end":{"line_number":8700,"utf16_col":20}},"extent_utf16":{"start":{"line_number":8700,"utf16_col":4},"end":{"line_number":8700,"utf16_col":55}}},{"name":"AssertionPrinter","kind":"function","ident_start":305134,"ident_end":305150,"extent_start":305134,"extent_end":305498,"fully_qualified_name":"AssertionPrinter::AssertionPrinter","ident_utf16":{"start":{"line_number":8701,"utf16_col":4},"end":{"line_number":8701,"utf16_col":20}},"extent_utf16":{"start":{"line_number":8701,"utf16_col":4},"end":{"line_number":8708,"utf16_col":6}}},{"name":"print","kind":"function","ident_start":305509,"ident_end":305514,"extent_start":305504,"extent_end":308225,"fully_qualified_name":"AssertionPrinter::print","ident_utf16":{"start":{"line_number":8710,"utf16_col":9},"end":{"line_number":8710,"utf16_col":14}},"extent_utf16":{"start":{"line_number":8710,"utf16_col":4},"end":{"line_number":8781,"utf16_col":5}}},{"name":"printSourceInfo","kind":"function","ident_start":308245,"ident_end":308260,"extent_start":308240,"extent_end":308387,"fully_qualified_name":"AssertionPrinter::printSourceInfo","ident_utf16":{"start":{"line_number":8784,"utf16_col":9},"end":{"line_number":8784,"utf16_col":24}},"extent_utf16":{"start":{"line_number":8784,"utf16_col":4},"end":{"line_number":8787,"utf16_col":5}}},{"name":"printResultType","kind":"function","ident_start":308398,"ident_end":308413,"extent_start":308393,"extent_end":308618,"fully_qualified_name":"AssertionPrinter::printResultType","ident_utf16":{"start":{"line_number":8789,"utf16_col":9},"end":{"line_number":8789,"utf16_col":24}},"extent_utf16":{"start":{"line_number":8789,"utf16_col":4},"end":{"line_number":8794,"utf16_col":5}}},{"name":"printIssue","kind":"function","ident_start":308629,"ident_end":308639,"extent_start":308624,"extent_end":308704,"fully_qualified_name":"AssertionPrinter::printIssue","ident_utf16":{"start":{"line_number":8796,"utf16_col":9},"end":{"line_number":8796,"utf16_col":19}},"extent_utf16":{"start":{"line_number":8796,"utf16_col":4},"end":{"line_number":8798,"utf16_col":5}}},{"name":"printExpressionWas","kind":"function","ident_start":308715,"ident_end":308733,"extent_start":308710,"extent_end":308976,"fully_qualified_name":"AssertionPrinter::printExpressionWas","ident_utf16":{"start":{"line_number":8800,"utf16_col":9},"end":{"line_number":8800,"utf16_col":27}},"extent_utf16":{"start":{"line_number":8800,"utf16_col":4},"end":{"line_number":8808,"utf16_col":5}}},{"name":"printOriginalExpression","kind":"function","ident_start":308987,"ident_end":309010,"extent_start":308982,"extent_end":309127,"fully_qualified_name":"AssertionPrinter::printOriginalExpression","ident_utf16":{"start":{"line_number":8810,"utf16_col":9},"end":{"line_number":8810,"utf16_col":32}},"extent_utf16":{"start":{"line_number":8810,"utf16_col":4},"end":{"line_number":8814,"utf16_col":5}}},{"name":"printReconstructedExpression","kind":"function","ident_start":309138,"ident_end":309166,"extent_start":309133,"extent_end":309369,"fully_qualified_name":"AssertionPrinter::printReconstructedExpression","ident_utf16":{"start":{"line_number":8816,"utf16_col":9},"end":{"line_number":8816,"utf16_col":37}},"extent_utf16":{"start":{"line_number":8816,"utf16_col":4},"end":{"line_number":8821,"utf16_col":5}}},{"name":"printMessage","kind":"function","ident_start":309380,"ident_end":309392,"extent_start":309375,"extent_end":309538,"fully_qualified_name":"AssertionPrinter::printMessage","ident_utf16":{"start":{"line_number":8823,"utf16_col":9},"end":{"line_number":8823,"utf16_col":21}},"extent_utf16":{"start":{"line_number":8823,"utf16_col":4},"end":{"line_number":8828,"utf16_col":5}}},{"name":"printRemainingMessages","kind":"function","ident_start":309549,"ident_end":309571,"extent_start":309544,"extent_end":310347,"fully_qualified_name":"AssertionPrinter::printRemainingMessages","ident_utf16":{"start":{"line_number":8830,"utf16_col":9},"end":{"line_number":8830,"utf16_col":31}},"extent_utf16":{"start":{"line_number":8830,"utf16_col":4},"end":{"line_number":8851,"utf16_col":5}}},{"name":"getDescription","kind":"method","ident_start":310639,"ident_end":310653,"extent_start":310610,"extent_end":310746,"fully_qualified_name":"CompactReporter::getDescription","ident_utf16":{"start":{"line_number":8864,"utf16_col":37},"end":{"line_number":8864,"utf16_col":51}},"extent_utf16":{"start":{"line_number":8864,"utf16_col":8},"end":{"line_number":8866,"utf16_col":9}}},{"name":"noMatchingTestCases","kind":"method","ident_start":310778,"ident_end":310797,"extent_start":310756,"extent_end":310913,"fully_qualified_name":"CompactReporter::noMatchingTestCases","ident_utf16":{"start":{"line_number":8868,"utf16_col":30},"end":{"line_number":8868,"utf16_col":49}},"extent_utf16":{"start":{"line_number":8868,"utf16_col":8},"end":{"line_number":8870,"utf16_col":9}}},{"name":"testRunStarting","kind":"method","ident_start":310945,"ident_end":310960,"extent_start":310923,"extent_end":311319,"fully_qualified_name":"CompactReporter::testRunStarting","ident_utf16":{"start":{"line_number":8872,"utf16_col":30},"end":{"line_number":8872,"utf16_col":45}},"extent_utf16":{"start":{"line_number":8872,"utf16_col":8},"end":{"line_number":8880,"utf16_col":9}}},{"name":"assertionEnded","kind":"method","ident_start":311351,"ident_end":311365,"extent_start":311329,"extent_end":312075,"fully_qualified_name":"CompactReporter::assertionEnded","ident_utf16":{"start":{"line_number":8882,"utf16_col":30},"end":{"line_number":8882,"utf16_col":44}},"extent_utf16":{"start":{"line_number":8882,"utf16_col":8},"end":{"line_number":8898,"utf16_col":9}}},{"name":"sectionEnded","kind":"method","ident_start":312107,"ident_end":312119,"extent_start":312085,"extent_end":312419,"fully_qualified_name":"CompactReporter::sectionEnded","ident_utf16":{"start":{"line_number":8900,"utf16_col":30},"end":{"line_number":8900,"utf16_col":42}},"extent_utf16":{"start":{"line_number":8900,"utf16_col":8},"end":{"line_number":8905,"utf16_col":9}}},{"name":"testRunEnded","kind":"method","ident_start":312451,"ident_end":312463,"extent_start":312429,"extent_end":312701,"fully_qualified_name":"CompactReporter::testRunEnded","ident_utf16":{"start":{"line_number":8907,"utf16_col":30},"end":{"line_number":8907,"utf16_col":42}},"extent_utf16":{"start":{"line_number":8907,"utf16_col":8},"end":{"line_number":8911,"utf16_col":9}}},{"name":"ConsoleAssertionPrinter","kind":"class","ident_start":313282,"ident_end":313305,"extent_start":313276,"extent_end":318736,"fully_qualified_name":"ConsoleAssertionPrinter","ident_utf16":{"start":{"line_number":8941,"utf16_col":6},"end":{"line_number":8941,"utf16_col":29}},"extent_utf16":{"start":{"line_number":8941,"utf16_col":0},"end":{"line_number":9089,"utf16_col":1}}},{"name":"ConsoleAssertionPrinter","kind":"function","ident_start":313402,"ident_end":313425,"extent_start":313402,"extent_end":313467,"fully_qualified_name":"ConsoleAssertionPrinter::ConsoleAssertionPrinter","ident_utf16":{"start":{"line_number":8944,"utf16_col":4},"end":{"line_number":8944,"utf16_col":27}},"extent_utf16":{"start":{"line_number":8944,"utf16_col":4},"end":{"line_number":8944,"utf16_col":69}}},{"name":"ConsoleAssertionPrinter","kind":"function","ident_start":313472,"ident_end":313495,"extent_start":313472,"extent_end":316823,"fully_qualified_name":"ConsoleAssertionPrinter::ConsoleAssertionPrinter","ident_utf16":{"start":{"line_number":8945,"utf16_col":4},"end":{"line_number":8945,"utf16_col":27}},"extent_utf16":{"start":{"line_number":8945,"utf16_col":4},"end":{"line_number":9031,"utf16_col":5}}},{"name":"print","kind":"function","ident_start":316834,"ident_end":316839,"extent_start":316829,"extent_end":317126,"fully_qualified_name":"ConsoleAssertionPrinter::print","ident_utf16":{"start":{"line_number":9033,"utf16_col":9},"end":{"line_number":9033,"utf16_col":14}},"extent_utf16":{"start":{"line_number":9033,"utf16_col":4},"end":{"line_number":9043,"utf16_col":5}}},{"name":"printResultType","kind":"function","ident_start":317146,"ident_end":317161,"extent_start":317141,"extent_end":317300,"fully_qualified_name":"ConsoleAssertionPrinter::printResultType","ident_utf16":{"start":{"line_number":9046,"utf16_col":9},"end":{"line_number":9046,"utf16_col":24}},"extent_utf16":{"start":{"line_number":9046,"utf16_col":4},"end":{"line_number":9050,"utf16_col":5}}},{"name":"printOriginalExpression","kind":"function","ident_start":317310,"ident_end":317333,"extent_start":317305,"extent_end":317542,"fully_qualified_name":"ConsoleAssertionPrinter::printOriginalExpression","ident_utf16":{"start":{"line_number":9051,"utf16_col":9},"end":{"line_number":9051,"utf16_col":32}},"extent_utf16":{"start":{"line_number":9051,"utf16_col":4},"end":{"line_number":9056,"utf16_col":5}}},{"name":"printReconstructedExpression","kind":"function","ident_start":317552,"ident_end":317580,"extent_start":317547,"extent_end":317916,"fully_qualified_name":"ConsoleAssertionPrinter::printReconstructedExpression","ident_utf16":{"start":{"line_number":9057,"utf16_col":9},"end":{"line_number":9057,"utf16_col":37}},"extent_utf16":{"start":{"line_number":9057,"utf16_col":4},"end":{"line_number":9065,"utf16_col":5}}},{"name":"printMessage","kind":"function","ident_start":317926,"ident_end":317938,"extent_start":317921,"extent_end":318305,"fully_qualified_name":"ConsoleAssertionPrinter::printMessage","ident_utf16":{"start":{"line_number":9066,"utf16_col":9},"end":{"line_number":9066,"utf16_col":21}},"extent_utf16":{"start":{"line_number":9066,"utf16_col":4},"end":{"line_number":9074,"utf16_col":5}}},{"name":"printSourceInfo","kind":"function","ident_start":318315,"ident_end":318330,"extent_start":318310,"extent_end":318458,"fully_qualified_name":"ConsoleAssertionPrinter::printSourceInfo","ident_utf16":{"start":{"line_number":9075,"utf16_col":9},"end":{"line_number":9075,"utf16_col":24}},"extent_utf16":{"start":{"line_number":9075,"utf16_col":4},"end":{"line_number":9078,"utf16_col":5}}},{"name":"makeRatio","kind":"function","ident_start":318751,"ident_end":318760,"extent_start":318739,"extent_end":318970,"fully_qualified_name":"makeRatio","ident_utf16":{"start":{"line_number":9091,"utf16_col":12},"end":{"line_number":9091,"utf16_col":21}},"extent_utf16":{"start":{"line_number":9091,"utf16_col":0},"end":{"line_number":9094,"utf16_col":1}}},{"name":"ColumnBreak","kind":"class","ident_start":319234,"ident_end":319245,"extent_start":319227,"extent_end":319248,"fully_qualified_name":"ColumnBreak","ident_utf16":{"start":{"line_number":9108,"utf16_col":7},"end":{"line_number":9108,"utf16_col":18}},"extent_utf16":{"start":{"line_number":9108,"utf16_col":0},"end":{"line_number":9108,"utf16_col":21}}},{"name":"RowBreak","kind":"class","ident_start":319257,"ident_end":319265,"extent_start":319250,"extent_end":319268,"fully_qualified_name":"RowBreak","ident_utf16":{"start":{"line_number":9109,"utf16_col":7},"end":{"line_number":9109,"utf16_col":15}},"extent_utf16":{"start":{"line_number":9109,"utf16_col":0},"end":{"line_number":9109,"utf16_col":18}}},{"name":"OutputFlush","kind":"class","ident_start":319277,"ident_end":319288,"extent_start":319270,"extent_end":319291,"fully_qualified_name":"OutputFlush","ident_utf16":{"start":{"line_number":9110,"utf16_col":7},"end":{"line_number":9110,"utf16_col":18}},"extent_utf16":{"start":{"line_number":9110,"utf16_col":0},"end":{"line_number":9110,"utf16_col":21}}},{"name":"Duration","kind":"class","ident_start":319300,"ident_end":319308,"extent_start":319294,"extent_end":321724,"fully_qualified_name":"Duration","ident_utf16":{"start":{"line_number":9112,"utf16_col":6},"end":{"line_number":9112,"utf16_col":14}},"extent_utf16":{"start":{"line_number":9112,"utf16_col":0},"end":{"line_number":9182,"utf16_col":1}}},{"name":"Unit","kind":"type","ident_start":319326,"ident_end":319330,"extent_start":319315,"extent_end":319460,"fully_qualified_name":"Duration::Unit","ident_utf16":{"start":{"line_number":9113,"utf16_col":15},"end":{"line_number":9113,"utf16_col":19}},"extent_utf16":{"start":{"line_number":9113,"utf16_col":4},"end":{"line_number":9120,"utf16_col":5}}},{"name":"Duration","kind":"function","ident_start":319852,"ident_end":319860,"extent_start":319843,"extent_end":320521,"fully_qualified_name":"Duration::Duration","ident_utf16":{"start":{"line_number":9130,"utf16_col":13},"end":{"line_number":9130,"utf16_col":21}},"extent_utf16":{"start":{"line_number":9130,"utf16_col":4},"end":{"line_number":9146,"utf16_col":5}}},{"name":"value","kind":"function","ident_start":320532,"ident_end":320537,"extent_start":320527,"extent_end":321113,"fully_qualified_name":"Duration::value","ident_utf16":{"start":{"line_number":9148,"utf16_col":9},"end":{"line_number":9148,"utf16_col":14}},"extent_utf16":{"start":{"line_number":9148,"utf16_col":4},"end":{"line_number":9161,"utf16_col":5}}},{"name":"unitsAsString","kind":"function","ident_start":321128,"ident_end":321141,"extent_start":321118,"extent_end":321550,"fully_qualified_name":"Duration::unitsAsString","ident_utf16":{"start":{"line_number":9162,"utf16_col":14},"end":{"line_number":9162,"utf16_col":27}},"extent_utf16":{"start":{"line_number":9162,"utf16_col":4},"end":{"line_number":9178,"utf16_col":5}}},{"name":"Justification","kind":"type","ident_start":321762,"ident_end":321775,"extent_start":321751,"extent_end":321809,"fully_qualified_name":"Justification","ident_utf16":{"start":{"line_number":9185,"utf16_col":11},"end":{"line_number":9185,"utf16_col":24}},"extent_utf16":{"start":{"line_number":9185,"utf16_col":0},"end":{"line_number":9188,"utf16_col":1}}},{"name":"ColumnInfo","kind":"class","ident_start":321819,"ident_end":321829,"extent_start":321812,"extent_end":321911,"fully_qualified_name":"ColumnInfo","ident_utf16":{"start":{"line_number":9190,"utf16_col":7},"end":{"line_number":9190,"utf16_col":17}},"extent_utf16":{"start":{"line_number":9190,"utf16_col":0},"end":{"line_number":9194,"utf16_col":1}}},{"name":"TablePrinter","kind":"class","ident_start":321920,"ident_end":321932,"extent_start":321914,"extent_end":324229,"fully_qualified_name":"TablePrinter","ident_utf16":{"start":{"line_number":9196,"utf16_col":6},"end":{"line_number":9196,"utf16_col":18}},"extent_utf16":{"start":{"line_number":9196,"utf16_col":0},"end":{"line_number":9276,"utf16_col":1}}},{"name":"TablePrinter","kind":"function","ident_start":322104,"ident_end":322116,"extent_start":322104,"extent_end":322247,"fully_qualified_name":"TablePrinter::TablePrinter","ident_utf16":{"start":{"line_number":9204,"utf16_col":4},"end":{"line_number":9204,"utf16_col":16}},"extent_utf16":{"start":{"line_number":9204,"utf16_col":4},"end":{"line_number":9206,"utf16_col":53}}},{"name":"columnInfos","kind":"function","ident_start":322258,"ident_end":322269,"extent_start":322253,"extent_end":322349,"fully_qualified_name":"TablePrinter::columnInfos","ident_utf16":{"start":{"line_number":9208,"utf16_col":9},"end":{"line_number":9208,"utf16_col":20}},"extent_utf16":{"start":{"line_number":9208,"utf16_col":4},"end":{"line_number":9210,"utf16_col":5}}},{"name":"open","kind":"function","ident_start":322360,"ident_end":322364,"extent_start":322355,"extent_end":322794,"fully_qualified_name":"TablePrinter::open","ident_utf16":{"start":{"line_number":9212,"utf16_col":9},"end":{"line_number":9212,"utf16_col":13}},"extent_utf16":{"start":{"line_number":9212,"utf16_col":4},"end":{"line_number":9227,"utf16_col":5}}},{"name":"close","kind":"function","ident_start":322804,"ident_end":322809,"extent_start":322799,"extent_end":322956,"fully_qualified_name":"TablePrinter::close","ident_utf16":{"start":{"line_number":9228,"utf16_col":9},"end":{"line_number":9228,"utf16_col":14}},"extent_utf16":{"start":{"line_number":9228,"utf16_col":4},"end":{"line_number":9234,"utf16_col":5}}},{"name":"ConsoleReporter","kind":"method","ident_start":324249,"ident_end":324264,"extent_start":324232,"extent_end":325265,"fully_qualified_name":"ConsoleReporter::ConsoleReporter","ident_utf16":{"start":{"line_number":9278,"utf16_col":17},"end":{"line_number":9278,"utf16_col":32}},"extent_utf16":{"start":{"line_number":9278,"utf16_col":0},"end":{"line_number":9300,"utf16_col":12}}},{"name":"getDescription","kind":"method","ident_start":325343,"ident_end":325357,"extent_start":325314,"extent_end":325421,"fully_qualified_name":"ConsoleReporter::getDescription","ident_utf16":{"start":{"line_number":9303,"utf16_col":29},"end":{"line_number":9303,"utf16_col":43}},"extent_utf16":{"start":{"line_number":9303,"utf16_col":0},"end":{"line_number":9305,"utf16_col":1}}},{"name":"noMatchingTestCases","kind":"method","ident_start":325445,"ident_end":325464,"extent_start":325423,"extent_end":325564,"fully_qualified_name":"ConsoleReporter::noMatchingTestCases","ident_utf16":{"start":{"line_number":9307,"utf16_col":22},"end":{"line_number":9307,"utf16_col":41}},"extent_utf16":{"start":{"line_number":9307,"utf16_col":0},"end":{"line_number":9309,"utf16_col":1}}},{"name":"reportInvalidTestSpec","kind":"method","ident_start":325588,"ident_end":325609,"extent_start":325566,"extent_end":325681,"fully_qualified_name":"ConsoleReporter::reportInvalidTestSpec","ident_utf16":{"start":{"line_number":9311,"utf16_col":22},"end":{"line_number":9311,"utf16_col":43}},"extent_utf16":{"start":{"line_number":9311,"utf16_col":0},"end":{"line_number":9313,"utf16_col":1}}},{"name":"assertionStarting","kind":"method","ident_start":325705,"ident_end":325722,"extent_start":325683,"extent_end":325747,"fully_qualified_name":"ConsoleReporter::assertionStarting","ident_utf16":{"start":{"line_number":9315,"utf16_col":22},"end":{"line_number":9315,"utf16_col":39}},"extent_utf16":{"start":{"line_number":9315,"utf16_col":0},"end":{"line_number":9315,"utf16_col":64}}},{"name":"assertionEnded","kind":"method","ident_start":325771,"ident_end":325785,"extent_start":325749,"extent_end":326428,"fully_qualified_name":"ConsoleReporter::assertionEnded","ident_utf16":{"start":{"line_number":9317,"utf16_col":22},"end":{"line_number":9317,"utf16_col":36}},"extent_utf16":{"start":{"line_number":9317,"utf16_col":0},"end":{"line_number":9332,"utf16_col":1}}},{"name":"sectionStarting","kind":"method","ident_start":326452,"ident_end":326467,"extent_start":326430,"extent_end":326620,"fully_qualified_name":"ConsoleReporter::sectionStarting","ident_utf16":{"start":{"line_number":9334,"utf16_col":22},"end":{"line_number":9334,"utf16_col":37}},"extent_utf16":{"start":{"line_number":9334,"utf16_col":0},"end":{"line_number":9338,"utf16_col":1}}},{"name":"sectionEnded","kind":"method","ident_start":326643,"ident_end":326655,"extent_start":326621,"extent_end":327475,"fully_qualified_name":"ConsoleReporter::sectionEnded","ident_utf16":{"start":{"line_number":9339,"utf16_col":22},"end":{"line_number":9339,"utf16_col":34}},"extent_utf16":{"start":{"line_number":9339,"utf16_col":0},"end":{"line_number":9359,"utf16_col":1}}},{"name":"benchmarkPreparing","kind":"method","ident_start":327499,"ident_end":327517,"extent_start":327477,"extent_end":327952,"fully_qualified_name":"ConsoleReporter::benchmarkPreparing","ident_utf16":{"start":{"line_number":9361,"utf16_col":22},"end":{"line_number":9361,"utf16_col":40}},"extent_utf16":{"start":{"line_number":9361,"utf16_col":0},"end":{"line_number":9376,"utf16_col":1}}},{"name":"benchmarkStarting","kind":"method","ident_start":327976,"ident_end":327993,"extent_start":327954,"extent_end":328314,"fully_qualified_name":"ConsoleReporter::benchmarkStarting","ident_utf16":{"start":{"line_number":9378,"utf16_col":22},"end":{"line_number":9378,"utf16_col":39}},"extent_utf16":{"start":{"line_number":9378,"utf16_col":0},"end":{"line_number":9386,"utf16_col":1}}},{"name":"benchmarkEnded","kind":"method","ident_start":328337,"ident_end":328351,"extent_start":328315,"extent_end":329136,"fully_qualified_name":"ConsoleReporter::benchmarkEnded","ident_utf16":{"start":{"line_number":9387,"utf16_col":22},"end":{"line_number":9387,"utf16_col":36}},"extent_utf16":{"start":{"line_number":9387,"utf16_col":0},"end":{"line_number":9402,"utf16_col":1}}},{"name":"benchmarkFailed","kind":"method","ident_start":329160,"ident_end":329175,"extent_start":329138,"extent_end":329382,"fully_qualified_name":"ConsoleReporter::benchmarkFailed","ident_utf16":{"start":{"line_number":9404,"utf16_col":22},"end":{"line_number":9404,"utf16_col":37}},"extent_utf16":{"start":{"line_number":9404,"utf16_col":0},"end":{"line_number":9409,"utf16_col":1}}},{"name":"testCaseEnded","kind":"method","ident_start":329406,"ident_end":329419,"extent_start":329384,"extent_end":329576,"fully_qualified_name":"ConsoleReporter::testCaseEnded","ident_utf16":{"start":{"line_number":9411,"utf16_col":22},"end":{"line_number":9411,"utf16_col":35}},"extent_utf16":{"start":{"line_number":9411,"utf16_col":0},"end":{"line_number":9415,"utf16_col":1}}},{"name":"testRunEnded","kind":"method","ident_start":329599,"ident_end":329611,"extent_start":329577,"extent_end":329857,"fully_qualified_name":"ConsoleReporter::testRunEnded","ident_utf16":{"start":{"line_number":9416,"utf16_col":22},"end":{"line_number":9416,"utf16_col":34}},"extent_utf16":{"start":{"line_number":9416,"utf16_col":0},"end":{"line_number":9421,"utf16_col":1}}},{"name":"testRunStarting","kind":"method","ident_start":329880,"ident_end":329895,"extent_start":329858,"extent_end":330237,"fully_qualified_name":"ConsoleReporter::testRunStarting","ident_utf16":{"start":{"line_number":9422,"utf16_col":22},"end":{"line_number":9422,"utf16_col":37}},"extent_utf16":{"start":{"line_number":9422,"utf16_col":0},"end":{"line_number":9429,"utf16_col":1}}},{"name":"lazyPrint","kind":"method","ident_start":330261,"ident_end":330270,"extent_start":330239,"extent_end":330351,"fully_qualified_name":"ConsoleReporter::lazyPrint","ident_utf16":{"start":{"line_number":9431,"utf16_col":22},"end":{"line_number":9431,"utf16_col":31}},"extent_utf16":{"start":{"line_number":9431,"utf16_col":0},"end":{"line_number":9435,"utf16_col":1}}},{"name":"lazyPrintWithoutClosingBenchmarkTable","kind":"method","ident_start":330375,"ident_end":330412,"extent_start":330353,"extent_end":330595,"fully_qualified_name":"ConsoleReporter::lazyPrintWithoutClosingBenchmarkTable","ident_utf16":{"start":{"line_number":9437,"utf16_col":22},"end":{"line_number":9437,"utf16_col":59}},"extent_utf16":{"start":{"line_number":9437,"utf16_col":0},"end":{"line_number":9446,"utf16_col":1}}},{"name":"lazyPrintRunInfo","kind":"method","ident_start":330618,"ident_end":330634,"extent_start":330596,"extent_end":330967,"fully_qualified_name":"ConsoleReporter::lazyPrintRunInfo","ident_utf16":{"start":{"line_number":9447,"utf16_col":22},"end":{"line_number":9447,"utf16_col":38}},"extent_utf16":{"start":{"line_number":9447,"utf16_col":0},"end":{"line_number":9456,"utf16_col":1}}},{"name":"printTestCaseAndSectionHeader","kind":"method","ident_start":330990,"ident_end":331019,"extent_start":330968,"extent_end":331708,"fully_qualified_name":"ConsoleReporter::printTestCaseAndSectionHeader","ident_utf16":{"start":{"line_number":9457,"utf16_col":22},"end":{"line_number":9457,"utf16_col":51}},"extent_utf16":{"start":{"line_number":9457,"utf16_col":0},"end":{"line_number":9478,"utf16_col":1}}},{"name":"printClosedHeader","kind":"method","ident_start":331732,"ident_end":331749,"extent_start":331710,"extent_end":331849,"fully_qualified_name":"ConsoleReporter::printClosedHeader","ident_utf16":{"start":{"line_number":9480,"utf16_col":22},"end":{"line_number":9480,"utf16_col":39}},"extent_utf16":{"start":{"line_number":9480,"utf16_col":0},"end":{"line_number":9483,"utf16_col":1}}},{"name":"printOpenHeader","kind":"method","ident_start":331872,"ident_end":331887,"extent_start":331850,"extent_end":332087,"fully_qualified_name":"ConsoleReporter::printOpenHeader","ident_utf16":{"start":{"line_number":9484,"utf16_col":22},"end":{"line_number":9484,"utf16_col":37}},"extent_utf16":{"start":{"line_number":9484,"utf16_col":0},"end":{"line_number":9490,"utf16_col":1}}},{"name":"printHeaderString","kind":"method","ident_start":332111,"ident_end":332128,"extent_start":332089,"extent_end":333116,"fully_qualified_name":"ConsoleReporter::printHeaderString","ident_utf16":{"start":{"line_number":9492,"utf16_col":22},"end":{"line_number":9492,"utf16_col":39}},"extent_utf16":{"start":{"line_number":9492,"utf16_col":0},"end":{"line_number":9523,"utf16_col":1}}},{"name":"printTotalsDivider","kind":"method","ident_start":333140,"ident_end":333158,"extent_start":333118,"extent_end":334839,"fully_qualified_name":"ConsoleReporter::printTotalsDivider","ident_utf16":{"start":{"line_number":9525,"utf16_col":22},"end":{"line_number":9525,"utf16_col":40}},"extent_utf16":{"start":{"line_number":9525,"utf16_col":0},"end":{"line_number":9554,"utf16_col":1}}},{"name":"BySectionInfo","kind":"class","ident_start":335073,"ident_end":335086,"extent_start":335066,"extent_end":335693,"fully_qualified_name":"BySectionInfo","ident_utf16":{"start":{"line_number":9574,"utf16_col":15},"end":{"line_number":9574,"utf16_col":28}},"extent_utf16":{"start":{"line_number":9574,"utf16_col":8},"end":{"line_number":9588,"utf16_col":9}}},{"name":"BySectionInfo","kind":"function","ident_start":335101,"ident_end":335114,"extent_start":335101,"extent_end":335163,"fully_qualified_name":"BySectionInfo::BySectionInfo","ident_utf16":{"start":{"line_number":9575,"utf16_col":12},"end":{"line_number":9575,"utf16_col":25}},"extent_utf16":{"start":{"line_number":9575,"utf16_col":12},"end":{"line_number":9575,"utf16_col":74}}},{"name":"BySectionInfo","kind":"function","ident_start":335176,"ident_end":335189,"extent_start":335176,"extent_end":335230,"fully_qualified_name":"BySectionInfo::BySectionInfo","ident_utf16":{"start":{"line_number":9576,"utf16_col":12},"end":{"line_number":9576,"utf16_col":25}},"extent_utf16":{"start":{"line_number":9576,"utf16_col":12},"end":{"line_number":9576,"utf16_col":66}}},{"name":"AssertionOrBenchmarkResult","kind":"method","ident_start":335775,"ident_end":335801,"extent_start":335747,"extent_end":335889,"fully_qualified_name":"AssertionOrBenchmarkResult::AssertionOrBenchmarkResult","ident_utf16":{"start":{"line_number":9593,"utf16_col":36},"end":{"line_number":9593,"utf16_col":62}},"extent_utf16":{"start":{"line_number":9593,"utf16_col":8},"end":{"line_number":9595,"utf16_col":39}}},{"name":"AssertionOrBenchmarkResult","kind":"method","ident_start":335927,"ident_end":335953,"extent_start":335899,"extent_end":336043,"fully_qualified_name":"AssertionOrBenchmarkResult::AssertionOrBenchmarkResult","ident_utf16":{"start":{"line_number":9597,"utf16_col":36},"end":{"line_number":9597,"utf16_col":62}},"extent_utf16":{"start":{"line_number":9597,"utf16_col":8},"end":{"line_number":9599,"utf16_col":39}}},{"name":"isAssertion","kind":"method","ident_start":336086,"ident_end":336097,"extent_start":336053,"extent_end":336156,"fully_qualified_name":"AssertionOrBenchmarkResult::isAssertion","ident_utf16":{"start":{"line_number":9601,"utf16_col":41},"end":{"line_number":9601,"utf16_col":52}},"extent_utf16":{"start":{"line_number":9601,"utf16_col":8},"end":{"line_number":9603,"utf16_col":9}}},{"name":"isBenchmark","kind":"method","ident_start":336198,"ident_end":336209,"extent_start":336165,"extent_end":336268,"fully_qualified_name":"AssertionOrBenchmarkResult::isBenchmark","ident_utf16":{"start":{"line_number":9604,"utf16_col":41},"end":{"line_number":9604,"utf16_col":52}},"extent_utf16":{"start":{"line_number":9604,"utf16_col":8},"end":{"line_number":9606,"utf16_col":9}}},{"name":"benchmarkEnded","kind":"method","ident_start":336707,"ident_end":336721,"extent_start":336678,"extent_end":336854,"fully_qualified_name":"CumulativeReporterBase::benchmarkEnded","ident_utf16":{"start":{"line_number":9623,"utf16_col":33},"end":{"line_number":9623,"utf16_col":47}},"extent_utf16":{"start":{"line_number":9623,"utf16_col":4},"end":{"line_number":9625,"utf16_col":5}}},{"name":"sectionStarting","kind":"method","ident_start":336893,"ident_end":336908,"extent_start":336860,"extent_end":338088,"fully_qualified_name":"CumulativeReporterBase::sectionStarting","ident_utf16":{"start":{"line_number":9628,"utf16_col":28},"end":{"line_number":9628,"utf16_col":43}},"extent_utf16":{"start":{"line_number":9627,"utf16_col":4},"end":{"line_number":9655,"utf16_col":5}}},{"name":"assertionEnded","kind":"method","ident_start":338123,"ident_end":338137,"extent_start":338094,"extent_end":339163,"fully_qualified_name":"CumulativeReporterBase::assertionEnded","ident_utf16":{"start":{"line_number":9657,"utf16_col":33},"end":{"line_number":9657,"utf16_col":47}},"extent_utf16":{"start":{"line_number":9657,"utf16_col":4},"end":{"line_number":9677,"utf16_col":5}}},{"name":"sectionEnded","kind":"method","ident_start":339198,"ident_end":339210,"extent_start":339169,"extent_end":339419,"fully_qualified_name":"CumulativeReporterBase::sectionEnded","ident_utf16":{"start":{"line_number":9679,"utf16_col":33},"end":{"line_number":9679,"utf16_col":45}},"extent_utf16":{"start":{"line_number":9679,"utf16_col":4},"end":{"line_number":9684,"utf16_col":5}}},{"name":"testCaseEnded","kind":"method","ident_start":339454,"ident_end":339467,"extent_start":339425,"extent_end":339904,"fully_qualified_name":"CumulativeReporterBase::testCaseEnded","ident_utf16":{"start":{"line_number":9686,"utf16_col":33},"end":{"line_number":9686,"utf16_col":46}},"extent_utf16":{"start":{"line_number":9686,"utf16_col":4},"end":{"line_number":9696,"utf16_col":5}}},{"name":"testRunEnded","kind":"method","ident_start":339940,"ident_end":339952,"extent_start":339911,"extent_end":340244,"fully_qualified_name":"CumulativeReporterBase::testRunEnded","ident_utf16":{"start":{"line_number":9699,"utf16_col":33},"end":{"line_number":9699,"utf16_col":45}},"extent_utf16":{"start":{"line_number":9699,"utf16_col":4},"end":{"line_number":9704,"utf16_col":5}}},{"name":"fatalErrorEncountered","kind":"method","ident_start":340643,"ident_end":340664,"extent_start":340619,"extent_end":340680,"fully_qualified_name":"EventListenerBase::fatalErrorEncountered","ident_utf16":{"start":{"line_number":9722,"utf16_col":28},"end":{"line_number":9722,"utf16_col":49}},"extent_utf16":{"start":{"line_number":9722,"utf16_col":4},"end":{"line_number":9722,"utf16_col":65}}},{"name":"benchmarkPreparing","kind":"method","ident_start":340710,"ident_end":340728,"extent_start":340686,"extent_end":340744,"fully_qualified_name":"EventListenerBase::benchmarkPreparing","ident_utf16":{"start":{"line_number":9724,"utf16_col":28},"end":{"line_number":9724,"utf16_col":46}},"extent_utf16":{"start":{"line_number":9724,"utf16_col":4},"end":{"line_number":9724,"utf16_col":62}}},{"name":"benchmarkStarting","kind":"method","ident_start":340773,"ident_end":340790,"extent_start":340749,"extent_end":340817,"fully_qualified_name":"EventListenerBase::benchmarkStarting","ident_utf16":{"start":{"line_number":9725,"utf16_col":28},"end":{"line_number":9725,"utf16_col":45}},"extent_utf16":{"start":{"line_number":9725,"utf16_col":4},"end":{"line_number":9725,"utf16_col":72}}},{"name":"benchmarkEnded","kind":"method","ident_start":340846,"ident_end":340860,"extent_start":340822,"extent_end":340890,"fully_qualified_name":"EventListenerBase::benchmarkEnded","ident_utf16":{"start":{"line_number":9726,"utf16_col":28},"end":{"line_number":9726,"utf16_col":42}},"extent_utf16":{"start":{"line_number":9726,"utf16_col":4},"end":{"line_number":9726,"utf16_col":72}}},{"name":"benchmarkFailed","kind":"method","ident_start":340919,"ident_end":340934,"extent_start":340895,"extent_end":340950,"fully_qualified_name":"EventListenerBase::benchmarkFailed","ident_utf16":{"start":{"line_number":9727,"utf16_col":28},"end":{"line_number":9727,"utf16_col":43}},"extent_utf16":{"start":{"line_number":9727,"utf16_col":4},"end":{"line_number":9727,"utf16_col":59}}},{"name":"assertionStarting","kind":"method","ident_start":340980,"ident_end":340997,"extent_start":340956,"extent_end":341024,"fully_qualified_name":"EventListenerBase::assertionStarting","ident_utf16":{"start":{"line_number":9729,"utf16_col":28},"end":{"line_number":9729,"utf16_col":45}},"extent_utf16":{"start":{"line_number":9729,"utf16_col":4},"end":{"line_number":9729,"utf16_col":72}}},{"name":"assertionEnded","kind":"method","ident_start":341054,"ident_end":341068,"extent_start":341030,"extent_end":341096,"fully_qualified_name":"EventListenerBase::assertionEnded","ident_utf16":{"start":{"line_number":9731,"utf16_col":28},"end":{"line_number":9731,"utf16_col":42}},"extent_utf16":{"start":{"line_number":9731,"utf16_col":4},"end":{"line_number":9731,"utf16_col":70}}},{"name":"listReporters","kind":"method","ident_start":341125,"ident_end":341138,"extent_start":341101,"extent_end":341192,"fully_qualified_name":"EventListenerBase::listReporters","ident_utf16":{"start":{"line_number":9732,"utf16_col":28},"end":{"line_number":9732,"utf16_col":41}},"extent_utf16":{"start":{"line_number":9732,"utf16_col":4},"end":{"line_number":9733,"utf16_col":52}}},{"name":"listListeners","kind":"method","ident_start":341221,"ident_end":341234,"extent_start":341197,"extent_end":341288,"fully_qualified_name":"EventListenerBase::listListeners","ident_utf16":{"start":{"line_number":9734,"utf16_col":28},"end":{"line_number":9734,"utf16_col":41}},"extent_utf16":{"start":{"line_number":9734,"utf16_col":4},"end":{"line_number":9735,"utf16_col":52}}},{"name":"listTests","kind":"method","ident_start":341317,"ident_end":341326,"extent_start":341293,"extent_end":341367,"fully_qualified_name":"EventListenerBase::listTests","ident_utf16":{"start":{"line_number":9736,"utf16_col":28},"end":{"line_number":9736,"utf16_col":37}},"extent_utf16":{"start":{"line_number":9736,"utf16_col":4},"end":{"line_number":9736,"utf16_col":78}}},{"name":"listTags","kind":"method","ident_start":341396,"ident_end":341404,"extent_start":341372,"extent_end":341438,"fully_qualified_name":"EventListenerBase::listTags","ident_utf16":{"start":{"line_number":9737,"utf16_col":28},"end":{"line_number":9737,"utf16_col":36}},"extent_utf16":{"start":{"line_number":9737,"utf16_col":4},"end":{"line_number":9737,"utf16_col":70}}},{"name":"noMatchingTestCases","kind":"method","ident_start":341467,"ident_end":341486,"extent_start":341443,"extent_end":341502,"fully_qualified_name":"EventListenerBase::noMatchingTestCases","ident_utf16":{"start":{"line_number":9738,"utf16_col":28},"end":{"line_number":9738,"utf16_col":47}},"extent_utf16":{"start":{"line_number":9738,"utf16_col":4},"end":{"line_number":9738,"utf16_col":63}}},{"name":"reportInvalidTestSpec","kind":"method","ident_start":341531,"ident_end":341552,"extent_start":341507,"extent_end":341568,"fully_qualified_name":"EventListenerBase::reportInvalidTestSpec","ident_utf16":{"start":{"line_number":9739,"utf16_col":28},"end":{"line_number":9739,"utf16_col":49}},"extent_utf16":{"start":{"line_number":9739,"utf16_col":4},"end":{"line_number":9739,"utf16_col":65}}},{"name":"testRunStarting","kind":"method","ident_start":341597,"ident_end":341612,"extent_start":341573,"extent_end":341637,"fully_qualified_name":"EventListenerBase::testRunStarting","ident_utf16":{"start":{"line_number":9740,"utf16_col":28},"end":{"line_number":9740,"utf16_col":43}},"extent_utf16":{"start":{"line_number":9740,"utf16_col":4},"end":{"line_number":9740,"utf16_col":68}}},{"name":"testCaseStarting","kind":"method","ident_start":341666,"ident_end":341682,"extent_start":341642,"extent_end":341708,"fully_qualified_name":"EventListenerBase::testCaseStarting","ident_utf16":{"start":{"line_number":9741,"utf16_col":28},"end":{"line_number":9741,"utf16_col":44}},"extent_utf16":{"start":{"line_number":9741,"utf16_col":4},"end":{"line_number":9741,"utf16_col":70}}},{"name":"testCasePartialStarting","kind":"method","ident_start":341737,"ident_end":341760,"extent_start":341713,"extent_end":341794,"fully_qualified_name":"EventListenerBase::testCasePartialStarting","ident_utf16":{"start":{"line_number":9742,"utf16_col":28},"end":{"line_number":9742,"utf16_col":51}},"extent_utf16":{"start":{"line_number":9742,"utf16_col":4},"end":{"line_number":9742,"utf16_col":85}}},{"name":"sectionStarting","kind":"method","ident_start":341823,"ident_end":341838,"extent_start":341799,"extent_end":341863,"fully_qualified_name":"EventListenerBase::sectionStarting","ident_utf16":{"start":{"line_number":9743,"utf16_col":28},"end":{"line_number":9743,"utf16_col":43}},"extent_utf16":{"start":{"line_number":9743,"utf16_col":4},"end":{"line_number":9743,"utf16_col":68}}},{"name":"sectionEnded","kind":"method","ident_start":341892,"ident_end":341904,"extent_start":341868,"extent_end":341930,"fully_qualified_name":"EventListenerBase::sectionEnded","ident_utf16":{"start":{"line_number":9744,"utf16_col":28},"end":{"line_number":9744,"utf16_col":40}},"extent_utf16":{"start":{"line_number":9744,"utf16_col":4},"end":{"line_number":9744,"utf16_col":66}}},{"name":"testCasePartialEnded","kind":"method","ident_start":341959,"ident_end":341979,"extent_start":341935,"extent_end":342014,"fully_qualified_name":"EventListenerBase::testCasePartialEnded","ident_utf16":{"start":{"line_number":9745,"utf16_col":28},"end":{"line_number":9745,"utf16_col":48}},"extent_utf16":{"start":{"line_number":9745,"utf16_col":4},"end":{"line_number":9745,"utf16_col":83}}},{"name":"testCaseEnded","kind":"method","ident_start":342043,"ident_end":342056,"extent_start":342019,"extent_end":342083,"fully_qualified_name":"EventListenerBase::testCaseEnded","ident_utf16":{"start":{"line_number":9746,"utf16_col":28},"end":{"line_number":9746,"utf16_col":41}},"extent_utf16":{"start":{"line_number":9746,"utf16_col":4},"end":{"line_number":9746,"utf16_col":68}}},{"name":"testRunEnded","kind":"method","ident_start":342112,"ident_end":342124,"extent_start":342088,"extent_end":342150,"fully_qualified_name":"EventListenerBase::testRunEnded","ident_utf16":{"start":{"line_number":9747,"utf16_col":28},"end":{"line_number":9747,"utf16_col":40}},"extent_utf16":{"start":{"line_number":9747,"utf16_col":4},"end":{"line_number":9747,"utf16_col":66}}},{"name":"skipTest","kind":"method","ident_start":342179,"ident_end":342187,"extent_start":342155,"extent_end":342213,"fully_qualified_name":"EventListenerBase::skipTest","ident_utf16":{"start":{"line_number":9748,"utf16_col":28},"end":{"line_number":9748,"utf16_col":36}},"extent_utf16":{"start":{"line_number":9748,"utf16_col":4},"end":{"line_number":9748,"utf16_col":62}}},{"name":"listTestNamesOnly","kind":"function","ident_start":342383,"ident_end":342400,"extent_start":342378,"extent_end":342899,"fully_qualified_name":"listTestNamesOnly","ident_utf16":{"start":{"line_number":9763,"utf16_col":13},"end":{"line_number":9763,"utf16_col":30}},"extent_utf16":{"start":{"line_number":9763,"utf16_col":8},"end":{"line_number":9777,"utf16_col":9}}},{"name":"getFormattedDuration","kind":"function","ident_start":343124,"ident_end":343144,"extent_start":343112,"extent_end":343866,"fully_qualified_name":"getFormattedDuration","ident_utf16":{"start":{"line_number":9784,"utf16_col":16},"end":{"line_number":9784,"utf16_col":36}},"extent_utf16":{"start":{"line_number":9784,"utf16_col":4},"end":{"line_number":9802,"utf16_col":5}}},{"name":"shouldShowDuration","kind":"function","ident_start":343877,"ident_end":343895,"extent_start":343872,"extent_end":344238,"fully_qualified_name":"shouldShowDuration","ident_utf16":{"start":{"line_number":9804,"utf16_col":9},"end":{"line_number":9804,"utf16_col":27}},"extent_utf16":{"start":{"line_number":9804,"utf16_col":4},"end":{"line_number":9813,"utf16_col":5}}},{"name":"serializeFilters","kind":"function","ident_start":344256,"ident_end":344272,"extent_start":344244,"extent_end":344869,"fully_qualified_name":"serializeFilters","ident_utf16":{"start":{"line_number":9815,"utf16_col":16},"end":{"line_number":9815,"utf16_col":32}},"extent_utf16":{"start":{"line_number":9815,"utf16_col":4},"end":{"line_number":9835,"utf16_col":5}}},{"name":"defaultListReporters","kind":"function","ident_start":345102,"ident_end":345122,"extent_start":345093,"extent_end":346519,"fully_qualified_name":"defaultListReporters","ident_utf16":{"start":{"line_number":9845,"utf16_col":4},"end":{"line_number":9845,"utf16_col":24}},"extent_utf16":{"start":{"line_number":9844,"utf16_col":4},"end":{"line_number":9876,"utf16_col":5}}},{"name":"defaultListListeners","kind":"function","ident_start":346530,"ident_end":346550,"extent_start":346525,"extent_end":347747,"fully_qualified_name":"defaultListListeners","ident_utf16":{"start":{"line_number":9878,"utf16_col":9},"end":{"line_number":9878,"utf16_col":29}},"extent_utf16":{"start":{"line_number":9878,"utf16_col":4},"end":{"line_number":9908,"utf16_col":5}}},{"name":"defaultListTags","kind":"function","ident_start":347758,"ident_end":347773,"extent_start":347753,"extent_end":348612,"fully_qualified_name":"defaultListTags","ident_utf16":{"start":{"line_number":9910,"utf16_col":9},"end":{"line_number":9910,"utf16_col":24}},"extent_utf16":{"start":{"line_number":9910,"utf16_col":4},"end":{"line_number":9930,"utf16_col":5}}},{"name":"defaultListTests","kind":"function","ident_start":348623,"ident_end":348639,"extent_start":348618,"extent_end":350195,"fully_qualified_name":"defaultListTests","ident_utf16":{"start":{"line_number":9932,"utf16_col":9},"end":{"line_number":9932,"utf16_col":25}},"extent_utf16":{"start":{"line_number":9932,"utf16_col":4},"end":{"line_number":9970,"utf16_col":5}}},{"name":"SummaryColumn","kind":"class","ident_start":350227,"ident_end":350240,"extent_start":350221,"extent_end":351457,"fully_qualified_name":"SummaryColumn","ident_utf16":{"start":{"line_number":9973,"utf16_col":14},"end":{"line_number":9973,"utf16_col":27}},"extent_utf16":{"start":{"line_number":9973,"utf16_col":8},"end":{"line_number":10004,"utf16_col":9}}},{"name":"SummaryColumn","kind":"function","ident_start":350271,"ident_end":350284,"extent_start":350271,"extent_end":350400,"fully_qualified_name":"SummaryColumn::SummaryColumn","ident_utf16":{"start":{"line_number":9975,"utf16_col":12},"end":{"line_number":9975,"utf16_col":25}},"extent_utf16":{"start":{"line_number":9975,"utf16_col":12},"end":{"line_number":9976,"utf16_col":71}}},{"name":"getColour","kind":"function","ident_start":351121,"ident_end":351130,"extent_start":351108,"extent_end":351159,"fully_qualified_name":"SummaryColumn::getColour","ident_utf16":{"start":{"line_number":9994,"utf16_col":25},"end":{"line_number":9994,"utf16_col":34}},"extent_utf16":{"start":{"line_number":9994,"utf16_col":12},"end":{"line_number":9994,"utf16_col":63}}},{"name":"printSummaryRow","kind":"function","ident_start":351473,"ident_end":351488,"extent_start":351468,"extent_end":352535,"fully_qualified_name":"printSummaryRow","ident_utf16":{"start":{"line_number":10006,"utf16_col":13},"end":{"line_number":10006,"utf16_col":28}},"extent_utf16":{"start":{"line_number":10006,"utf16_col":8},"end":{"line_number":10029,"utf16_col":9}}},{"name":"printTestRunTotals","kind":"function","ident_start":352565,"ident_end":352583,"extent_start":352560,"extent_end":354822,"fully_qualified_name":"printTestRunTotals","ident_utf16":{"start":{"line_number":10032,"utf16_col":9},"end":{"line_number":10032,"utf16_col":27}},"extent_utf16":{"start":{"line_number":10032,"utf16_col":4},"end":{"line_number":10075,"utf16_col":5}}},{"name":"writeSourceInfo","kind":"function","ident_start":354898,"ident_end":354913,"extent_start":354893,"extent_end":355308,"fully_qualified_name":"writeSourceInfo","ident_utf16":{"start":{"line_number":10084,"utf16_col":13},"end":{"line_number":10084,"utf16_col":28}},"extent_utf16":{"start":{"line_number":10084,"utf16_col":8},"end":{"line_number":10091,"utf16_col":9}}},{"name":"writeTags","kind":"function","ident_start":355323,"ident_end":355332,"extent_start":355318,"extent_end":355505,"fully_qualified_name":"writeTags","ident_utf16":{"start":{"line_number":10093,"utf16_col":13},"end":{"line_number":10093,"utf16_col":22}},"extent_utf16":{"start":{"line_number":10093,"utf16_col":8},"end":{"line_number":10097,"utf16_col":9}}},{"name":"writeProperties","kind":"function","ident_start":355520,"ident_end":355535,"extent_start":355515,"extent_end":355950,"fully_qualified_name":"writeProperties","ident_utf16":{"start":{"line_number":10099,"utf16_col":13},"end":{"line_number":10099,"utf16_col":28}},"extent_utf16":{"start":{"line_number":10099,"utf16_col":8},"end":{"line_number":10107,"utf16_col":9}}},{"name":"JsonReporter","kind":"method","ident_start":355990,"ident_end":356002,"extent_start":355976,"extent_end":357097,"fully_qualified_name":"JsonReporter::JsonReporter","ident_utf16":{"start":{"line_number":10111,"utf16_col":18},"end":{"line_number":10111,"utf16_col":30}},"extent_utf16":{"start":{"line_number":10111,"utf16_col":4},"end":{"line_number":10137,"utf16_col":5}}},{"name":"endObject","kind":"method","ident_start":358415,"ident_end":358424,"extent_start":358396,"extent_end":358536,"fully_qualified_name":"JsonReporter::endObject","ident_utf16":{"start":{"line_number":10173,"utf16_col":23},"end":{"line_number":10173,"utf16_col":32}},"extent_utf16":{"start":{"line_number":10173,"utf16_col":4},"end":{"line_number":10177,"utf16_col":5}}},{"name":"endArray","kind":"method","ident_start":358560,"ident_end":358568,"extent_start":358541,"extent_end":358678,"fully_qualified_name":"JsonReporter::endArray","ident_utf16":{"start":{"line_number":10178,"utf16_col":23},"end":{"line_number":10178,"utf16_col":31}},"extent_utf16":{"start":{"line_number":10178,"utf16_col":4},"end":{"line_number":10182,"utf16_col":5}}},{"name":"isInside","kind":"method","ident_start":358703,"ident_end":358711,"extent_start":358684,"extent_end":358800,"fully_qualified_name":"JsonReporter::isInside","ident_utf16":{"start":{"line_number":10184,"utf16_col":23},"end":{"line_number":10184,"utf16_col":31}},"extent_utf16":{"start":{"line_number":10184,"utf16_col":4},"end":{"line_number":10186,"utf16_col":5}}},{"name":"startListing","kind":"method","ident_start":358825,"ident_end":358837,"extent_start":358806,"extent_end":358947,"fully_qualified_name":"JsonReporter::startListing","ident_utf16":{"start":{"line_number":10188,"utf16_col":23},"end":{"line_number":10188,"utf16_col":35}},"extent_utf16":{"start":{"line_number":10188,"utf16_col":4},"end":{"line_number":10191,"utf16_col":5}}},{"name":"endListing","kind":"method","ident_start":358971,"ident_end":358981,"extent_start":358952,"extent_end":359074,"fully_qualified_name":"JsonReporter::endListing","ident_utf16":{"start":{"line_number":10192,"utf16_col":23},"end":{"line_number":10192,"utf16_col":33}},"extent_utf16":{"start":{"line_number":10192,"utf16_col":4},"end":{"line_number":10195,"utf16_col":5}}},{"name":"getDescription","kind":"method","ident_start":359106,"ident_end":359120,"extent_start":359080,"extent_end":359208,"fully_qualified_name":"JsonReporter::getDescription","ident_utf16":{"start":{"line_number":10197,"utf16_col":30},"end":{"line_number":10197,"utf16_col":44}},"extent_utf16":{"start":{"line_number":10197,"utf16_col":4},"end":{"line_number":10199,"utf16_col":5}}},{"name":"testRunStarting","kind":"method","ident_start":359233,"ident_end":359248,"extent_start":359214,"extent_end":359491,"fully_qualified_name":"JsonReporter::testRunStarting","ident_utf16":{"start":{"line_number":10201,"utf16_col":23},"end":{"line_number":10201,"utf16_col":38}},"extent_utf16":{"start":{"line_number":10201,"utf16_col":4},"end":{"line_number":10208,"utf16_col":5}}},{"name":"writeCounts","kind":"function","ident_start":359510,"ident_end":359521,"extent_start":359498,"extent_end":359832,"fully_qualified_name":"writeCounts","ident_utf16":{"start":{"line_number":10210,"utf16_col":17},"end":{"line_number":10210,"utf16_col":28}},"extent_utf16":{"start":{"line_number":10210,"utf16_col":5},"end":{"line_number":10215,"utf16_col":5}}},{"name":"testRunEnded","kind":"method","ident_start":359857,"ident_end":359869,"extent_start":359838,"extent_end":360433,"fully_qualified_name":"JsonReporter::testRunEnded","ident_utf16":{"start":{"line_number":10217,"utf16_col":23},"end":{"line_number":10217,"utf16_col":35}},"extent_utf16":{"start":{"line_number":10217,"utf16_col":4},"end":{"line_number":10233,"utf16_col":5}}},{"name":"testCaseStarting","kind":"method","ident_start":360458,"ident_end":360474,"extent_start":360439,"extent_end":361333,"fully_qualified_name":"JsonReporter::testCaseStarting","ident_utf16":{"start":{"line_number":10235,"utf16_col":23},"end":{"line_number":10235,"utf16_col":39}},"extent_utf16":{"start":{"line_number":10235,"utf16_col":4},"end":{"line_number":10256,"utf16_col":5}}},{"name":"testCaseEnded","kind":"method","ident_start":361358,"ident_end":361371,"extent_start":361339,"extent_end":362299,"fully_qualified_name":"JsonReporter::testCaseEnded","ident_utf16":{"start":{"line_number":10258,"utf16_col":23},"end":{"line_number":10258,"utf16_col":36}},"extent_utf16":{"start":{"line_number":10258,"utf16_col":4},"end":{"line_number":10280,"utf16_col":5}}},{"name":"testCasePartialStarting","kind":"method","ident_start":362324,"ident_end":362347,"extent_start":362305,"extent_end":362694,"fully_qualified_name":"JsonReporter::testCasePartialStarting","ident_utf16":{"start":{"line_number":10282,"utf16_col":23},"end":{"line_number":10282,"utf16_col":46}},"extent_utf16":{"start":{"line_number":10282,"utf16_col":4},"end":{"line_number":10289,"utf16_col":5}}},{"name":"testCasePartialEnded","kind":"method","ident_start":362719,"ident_end":362739,"extent_start":362700,"extent_end":363833,"fully_qualified_name":"JsonReporter::testCasePartialEnded","ident_utf16":{"start":{"line_number":10291,"utf16_col":23},"end":{"line_number":10291,"utf16_col":43}},"extent_utf16":{"start":{"line_number":10291,"utf16_col":4},"end":{"line_number":10319,"utf16_col":5}}},{"name":"sectionStarting","kind":"method","ident_start":363858,"ident_end":363873,"extent_start":363839,"extent_end":364667,"fully_qualified_name":"JsonReporter::sectionStarting","ident_utf16":{"start":{"line_number":10321,"utf16_col":23},"end":{"line_number":10321,"utf16_col":38}},"extent_utf16":{"start":{"line_number":10321,"utf16_col":4},"end":{"line_number":10337,"utf16_col":5}}},{"name":"sectionEnded","kind":"method","ident_start":364691,"ident_end":364703,"extent_start":364672,"extent_end":364930,"fully_qualified_name":"JsonReporter::sectionEnded","ident_utf16":{"start":{"line_number":10338,"utf16_col":23},"end":{"line_number":10338,"utf16_col":35}},"extent_utf16":{"start":{"line_number":10338,"utf16_col":4},"end":{"line_number":10346,"utf16_col":5}}},{"name":"assertionStarting","kind":"method","ident_start":364955,"ident_end":364972,"extent_start":364936,"extent_end":365017,"fully_qualified_name":"JsonReporter::assertionStarting","ident_utf16":{"start":{"line_number":10348,"utf16_col":23},"end":{"line_number":10348,"utf16_col":40}},"extent_utf16":{"start":{"line_number":10348,"utf16_col":4},"end":{"line_number":10348,"utf16_col":85}}},{"name":"assertionEnded","kind":"method","ident_start":365041,"ident_end":365055,"extent_start":365022,"extent_end":365954,"fully_qualified_name":"JsonReporter::assertionEnded","ident_utf16":{"start":{"line_number":10349,"utf16_col":23},"end":{"line_number":10349,"utf16_col":37}},"extent_utf16":{"start":{"line_number":10349,"utf16_col":4},"end":{"line_number":10368,"utf16_col":5}}},{"name":"benchmarkPreparing","kind":"method","ident_start":365980,"ident_end":365998,"extent_start":365961,"extent_end":366032,"fully_qualified_name":"JsonReporter::benchmarkPreparing","ident_utf16":{"start":{"line_number":10371,"utf16_col":23},"end":{"line_number":10371,"utf16_col":41}},"extent_utf16":{"start":{"line_number":10371,"utf16_col":4},"end":{"line_number":10371,"utf16_col":75}}},{"name":"benchmarkStarting","kind":"method","ident_start":366056,"ident_end":366073,"extent_start":366037,"extent_end":366100,"fully_qualified_name":"JsonReporter::benchmarkStarting","ident_utf16":{"start":{"line_number":10372,"utf16_col":23},"end":{"line_number":10372,"utf16_col":40}},"extent_utf16":{"start":{"line_number":10372,"utf16_col":4},"end":{"line_number":10372,"utf16_col":67}}},{"name":"benchmarkEnded","kind":"method","ident_start":366124,"ident_end":366138,"extent_start":366105,"extent_end":366168,"fully_qualified_name":"JsonReporter::benchmarkEnded","ident_utf16":{"start":{"line_number":10373,"utf16_col":23},"end":{"line_number":10373,"utf16_col":37}},"extent_utf16":{"start":{"line_number":10373,"utf16_col":4},"end":{"line_number":10373,"utf16_col":67}}},{"name":"benchmarkFailed","kind":"method","ident_start":366192,"ident_end":366207,"extent_start":366173,"extent_end":366243,"fully_qualified_name":"JsonReporter::benchmarkFailed","ident_utf16":{"start":{"line_number":10374,"utf16_col":23},"end":{"line_number":10374,"utf16_col":38}},"extent_utf16":{"start":{"line_number":10374,"utf16_col":4},"end":{"line_number":10374,"utf16_col":74}}},{"name":"listReporters","kind":"method","ident_start":366268,"ident_end":366281,"extent_start":366249,"extent_end":366725,"fully_qualified_name":"JsonReporter::listReporters","ident_utf16":{"start":{"line_number":10376,"utf16_col":23},"end":{"line_number":10376,"utf16_col":36}},"extent_utf16":{"start":{"line_number":10376,"utf16_col":4},"end":{"line_number":10387,"utf16_col":5}}},{"name":"listListeners","kind":"method","ident_start":366749,"ident_end":366762,"extent_start":366730,"extent_end":367207,"fully_qualified_name":"JsonReporter::listListeners","ident_utf16":{"start":{"line_number":10388,"utf16_col":23},"end":{"line_number":10388,"utf16_col":36}},"extent_utf16":{"start":{"line_number":10388,"utf16_col":4},"end":{"line_number":10400,"utf16_col":5}}},{"name":"listTests","kind":"method","ident_start":367231,"ident_end":367240,"extent_start":367212,"extent_end":367987,"fully_qualified_name":"JsonReporter::listTests","ident_utf16":{"start":{"line_number":10401,"utf16_col":23},"end":{"line_number":10401,"utf16_col":32}},"extent_utf16":{"start":{"line_number":10401,"utf16_col":4},"end":{"line_number":10420,"utf16_col":5}}},{"name":"listTags","kind":"method","ident_start":368011,"ident_end":368019,"extent_start":367992,"extent_end":368586,"fully_qualified_name":"JsonReporter::listTags","ident_utf16":{"start":{"line_number":10421,"utf16_col":23},"end":{"line_number":10421,"utf16_col":31}},"extent_utf16":{"start":{"line_number":10421,"utf16_col":4},"end":{"line_number":10436,"utf16_col":5}}},{"name":"getCurrentTimestamp","kind":"function","ident_start":368744,"ident_end":368763,"extent_start":368732,"extent_end":369497,"fully_qualified_name":"getCurrentTimestamp","ident_utf16":{"start":{"line_number":10450,"utf16_col":20},"end":{"line_number":10450,"utf16_col":39}},"extent_utf16":{"start":{"line_number":10450,"utf16_col":8},"end":{"line_number":10472,"utf16_col":9}}},{"name":"fileNameTag","kind":"function","ident_start":369519,"ident_end":369530,"extent_start":369507,"extent_end":370087,"fully_qualified_name":"fileNameTag","ident_utf16":{"start":{"line_number":10474,"utf16_col":20},"end":{"line_number":10474,"utf16_col":31}},"extent_utf16":{"start":{"line_number":10474,"utf16_col":8},"end":{"line_number":10486,"utf16_col":9}}},{"name":"formatDuration","kind":"function","ident_start":370391,"ident_end":370405,"extent_start":370379,"extent_end":370571,"fully_qualified_name":"formatDuration","ident_utf16":{"start":{"line_number":10492,"utf16_col":20},"end":{"line_number":10492,"utf16_col":34}},"extent_utf16":{"start":{"line_number":10492,"utf16_col":8},"end":{"line_number":10496,"utf16_col":9}}},{"name":"normalizeNamespaceMarkers","kind":"function","ident_start":370593,"ident_end":370618,"extent_start":370581,"extent_end":370874,"fully_qualified_name":"normalizeNamespaceMarkers","ident_utf16":{"start":{"line_number":10498,"utf16_col":20},"end":{"line_number":10498,"utf16_col":45}},"extent_utf16":{"start":{"line_number":10498,"utf16_col":8},"end":{"line_number":10505,"utf16_col":9}}},{"name":"JunitReporter","kind":"method","ident_start":370925,"ident_end":370938,"extent_start":370910,"extent_end":371243,"fully_qualified_name":"JunitReporter::JunitReporter","ident_utf16":{"start":{"line_number":10509,"utf16_col":19},"end":{"line_number":10509,"utf16_col":32}},"extent_utf16":{"start":{"line_number":10509,"utf16_col":4},"end":{"line_number":10516,"utf16_col":9}}},{"name":"getDescription","kind":"method","ident_start":371276,"ident_end":371290,"extent_start":371249,"extent_end":371397,"fully_qualified_name":"JunitReporter::getDescription","ident_utf16":{"start":{"line_number":10518,"utf16_col":31},"end":{"line_number":10518,"utf16_col":45}},"extent_utf16":{"start":{"line_number":10518,"utf16_col":4},"end":{"line_number":10520,"utf16_col":5}}},{"name":"testRunStarting","kind":"method","ident_start":371423,"ident_end":371438,"extent_start":371403,"extent_end":371705,"fully_qualified_name":"JunitReporter::testRunStarting","ident_utf16":{"start":{"line_number":10522,"utf16_col":24},"end":{"line_number":10522,"utf16_col":39}},"extent_utf16":{"start":{"line_number":10522,"utf16_col":4},"end":{"line_number":10529,"utf16_col":5}}},{"name":"testCaseStarting","kind":"method","ident_start":371731,"ident_end":371747,"extent_start":371711,"extent_end":371837,"fully_qualified_name":"JunitReporter::testCaseStarting","ident_utf16":{"start":{"line_number":10531,"utf16_col":24},"end":{"line_number":10531,"utf16_col":40}},"extent_utf16":{"start":{"line_number":10531,"utf16_col":4},"end":{"line_number":10533,"utf16_col":5}}},{"name":"assertionEnded","kind":"method","ident_start":371863,"ident_end":371877,"extent_start":371843,"extent_end":372132,"fully_qualified_name":"JunitReporter::assertionEnded","ident_utf16":{"start":{"line_number":10535,"utf16_col":24},"end":{"line_number":10535,"utf16_col":38}},"extent_utf16":{"start":{"line_number":10535,"utf16_col":4},"end":{"line_number":10539,"utf16_col":5}}},{"name":"testCaseEnded","kind":"method","ident_start":372158,"ident_end":372171,"extent_start":372138,"extent_end":372377,"fully_qualified_name":"JunitReporter::testCaseEnded","ident_utf16":{"start":{"line_number":10541,"utf16_col":24},"end":{"line_number":10541,"utf16_col":37}},"extent_utf16":{"start":{"line_number":10541,"utf16_col":4},"end":{"line_number":10545,"utf16_col":5}}},{"name":"testRunEndedCumulative","kind":"method","ident_start":372403,"ident_end":372425,"extent_start":372383,"extent_end":372567,"fully_qualified_name":"JunitReporter::testRunEndedCumulative","ident_utf16":{"start":{"line_number":10547,"utf16_col":24},"end":{"line_number":10547,"utf16_col":46}},"extent_utf16":{"start":{"line_number":10547,"utf16_col":4},"end":{"line_number":10551,"utf16_col":5}}},{"name":"writeRun","kind":"method","ident_start":372593,"ident_end":372601,"extent_start":372573,"extent_end":374354,"fully_qualified_name":"JunitReporter::writeRun","ident_utf16":{"start":{"line_number":10553,"utf16_col":24},"end":{"line_number":10553,"utf16_col":32}},"extent_utf16":{"start":{"line_number":10553,"utf16_col":4},"end":{"line_number":10588,"utf16_col":5}}},{"name":"writeTestCase","kind":"method","ident_start":374380,"ident_end":374393,"extent_start":374360,"extent_end":375317,"fully_qualified_name":"JunitReporter::writeTestCase","ident_utf16":{"start":{"line_number":10590,"utf16_col":24},"end":{"line_number":10590,"utf16_col":37}},"extent_utf16":{"start":{"line_number":10590,"utf16_col":4},"end":{"line_number":10614,"utf16_col":5}}},{"name":"writeSection","kind":"method","ident_start":375343,"ident_end":375355,"extent_start":375323,"extent_end":377506,"fully_qualified_name":"JunitReporter::writeSection","ident_utf16":{"start":{"line_number":10616,"utf16_col":24},"end":{"line_number":10616,"utf16_col":36}},"extent_utf16":{"start":{"line_number":10616,"utf16_col":4},"end":{"line_number":10661,"utf16_col":5}}},{"name":"writeAssertions","kind":"method","ident_start":377532,"ident_end":377547,"extent_start":377512,"extent_end":377822,"fully_qualified_name":"JunitReporter::writeAssertions","ident_utf16":{"start":{"line_number":10663,"utf16_col":24},"end":{"line_number":10663,"utf16_col":39}},"extent_utf16":{"start":{"line_number":10663,"utf16_col":4},"end":{"line_number":10669,"utf16_col":5}}},{"name":"writeAssertion","kind":"method","ident_start":377848,"ident_end":377862,"extent_start":377828,"extent_end":380264,"fully_qualified_name":"JunitReporter::writeAssertion","ident_utf16":{"start":{"line_number":10671,"utf16_col":24},"end":{"line_number":10671,"utf16_col":38}},"extent_utf16":{"start":{"line_number":10671,"utf16_col":4},"end":{"line_number":10730,"utf16_col":5}}},{"name":"updatePreferences","kind":"method","ident_start":380357,"ident_end":380374,"extent_start":380337,"extent_end":380645,"fully_qualified_name":"MultiReporter::updatePreferences","ident_utf16":{"start":{"line_number":10740,"utf16_col":24},"end":{"line_number":10740,"utf16_col":41}},"extent_utf16":{"start":{"line_number":10740,"utf16_col":4},"end":{"line_number":10745,"utf16_col":5}}},{"name":"addListener","kind":"method","ident_start":380671,"ident_end":380682,"extent_start":380651,"extent_end":380893,"fully_qualified_name":"MultiReporter::addListener","ident_utf16":{"start":{"line_number":10747,"utf16_col":24},"end":{"line_number":10747,"utf16_col":35}},"extent_utf16":{"start":{"line_number":10747,"utf16_col":4},"end":{"line_number":10751,"utf16_col":5}}},{"name":"addReporter","kind":"method","ident_start":380919,"ident_end":380930,"extent_start":380899,"extent_end":381583,"fully_qualified_name":"MultiReporter::addReporter","ident_utf16":{"start":{"line_number":10753,"utf16_col":24},"end":{"line_number":10753,"utf16_col":35}},"extent_utf16":{"start":{"line_number":10753,"utf16_col":4},"end":{"line_number":10766,"utf16_col":5}}},{"name":"noMatchingTestCases","kind":"method","ident_start":381609,"ident_end":381628,"extent_start":381589,"extent_end":381790,"fully_qualified_name":"MultiReporter::noMatchingTestCases","ident_utf16":{"start":{"line_number":10768,"utf16_col":24},"end":{"line_number":10768,"utf16_col":43}},"extent_utf16":{"start":{"line_number":10768,"utf16_col":4},"end":{"line_number":10772,"utf16_col":5}}},{"name":"fatalErrorEncountered","kind":"method","ident_start":381816,"ident_end":381837,"extent_start":381796,"extent_end":381985,"fully_qualified_name":"MultiReporter::fatalErrorEncountered","ident_utf16":{"start":{"line_number":10774,"utf16_col":24},"end":{"line_number":10774,"utf16_col":45}},"extent_utf16":{"start":{"line_number":10774,"utf16_col":4},"end":{"line_number":10778,"utf16_col":5}}},{"name":"reportInvalidTestSpec","kind":"method","ident_start":382011,"ident_end":382032,"extent_start":381991,"extent_end":382176,"fully_qualified_name":"MultiReporter::reportInvalidTestSpec","ident_utf16":{"start":{"line_number":10780,"utf16_col":24},"end":{"line_number":10780,"utf16_col":45}},"extent_utf16":{"start":{"line_number":10780,"utf16_col":4},"end":{"line_number":10784,"utf16_col":5}}},{"name":"benchmarkPreparing","kind":"method","ident_start":382202,"ident_end":382220,"extent_start":382182,"extent_end":382359,"fully_qualified_name":"MultiReporter::benchmarkPreparing","ident_utf16":{"start":{"line_number":10786,"utf16_col":24},"end":{"line_number":10786,"utf16_col":42}},"extent_utf16":{"start":{"line_number":10786,"utf16_col":4},"end":{"line_number":10790,"utf16_col":5}}},{"name":"benchmarkStarting","kind":"method","ident_start":382384,"ident_end":382401,"extent_start":382364,"extent_end":382572,"fully_qualified_name":"MultiReporter::benchmarkStarting","ident_utf16":{"start":{"line_number":10791,"utf16_col":24},"end":{"line_number":10791,"utf16_col":41}},"extent_utf16":{"start":{"line_number":10791,"utf16_col":4},"end":{"line_number":10795,"utf16_col":5}}},{"name":"benchmarkEnded","kind":"method","ident_start":382597,"ident_end":382611,"extent_start":382577,"extent_end":382784,"fully_qualified_name":"MultiReporter::benchmarkEnded","ident_utf16":{"start":{"line_number":10796,"utf16_col":24},"end":{"line_number":10796,"utf16_col":38}},"extent_utf16":{"start":{"line_number":10796,"utf16_col":4},"end":{"line_number":10800,"utf16_col":5}}},{"name":"benchmarkFailed","kind":"method","ident_start":382810,"ident_end":382825,"extent_start":382790,"extent_end":382963,"fully_qualified_name":"MultiReporter::benchmarkFailed","ident_utf16":{"start":{"line_number":10802,"utf16_col":24},"end":{"line_number":10802,"utf16_col":39}},"extent_utf16":{"start":{"line_number":10802,"utf16_col":4},"end":{"line_number":10806,"utf16_col":5}}},{"name":"testRunStarting","kind":"method","ident_start":382989,"ident_end":383004,"extent_start":382969,"extent_end":383167,"fully_qualified_name":"MultiReporter::testRunStarting","ident_utf16":{"start":{"line_number":10808,"utf16_col":24},"end":{"line_number":10808,"utf16_col":39}},"extent_utf16":{"start":{"line_number":10808,"utf16_col":4},"end":{"line_number":10812,"utf16_col":5}}},{"name":"testCaseStarting","kind":"method","ident_start":383193,"ident_end":383209,"extent_start":383173,"extent_end":383368,"fully_qualified_name":"MultiReporter::testCaseStarting","ident_utf16":{"start":{"line_number":10814,"utf16_col":24},"end":{"line_number":10814,"utf16_col":40}},"extent_utf16":{"start":{"line_number":10814,"utf16_col":4},"end":{"line_number":10818,"utf16_col":5}}},{"name":"testCasePartialStarting","kind":"method","ident_start":383398,"ident_end":383421,"extent_start":383374,"extent_end":383668,"fully_qualified_name":"MultiReporter::testCasePartialStarting","ident_utf16":{"start":{"line_number":10821,"utf16_col":19},"end":{"line_number":10821,"utf16_col":42}},"extent_utf16":{"start":{"line_number":10820,"utf16_col":4},"end":{"line_number":10826,"utf16_col":5}}},{"name":"sectionStarting","kind":"method","ident_start":383694,"ident_end":383709,"extent_start":383674,"extent_end":383872,"fully_qualified_name":"MultiReporter::sectionStarting","ident_utf16":{"start":{"line_number":10828,"utf16_col":24},"end":{"line_number":10828,"utf16_col":39}},"extent_utf16":{"start":{"line_number":10828,"utf16_col":4},"end":{"line_number":10832,"utf16_col":5}}},{"name":"assertionStarting","kind":"method","ident_start":383898,"ident_end":383915,"extent_start":383878,"extent_end":384086,"fully_qualified_name":"MultiReporter::assertionStarting","ident_utf16":{"start":{"line_number":10834,"utf16_col":24},"end":{"line_number":10834,"utf16_col":41}},"extent_utf16":{"start":{"line_number":10834,"utf16_col":4},"end":{"line_number":10838,"utf16_col":5}}},{"name":"assertionEnded","kind":"method","ident_start":384112,"ident_end":384126,"extent_start":384092,"extent_end":384600,"fully_qualified_name":"MultiReporter::assertionEnded","ident_utf16":{"start":{"line_number":10840,"utf16_col":24},"end":{"line_number":10840,"utf16_col":38}},"extent_utf16":{"start":{"line_number":10840,"utf16_col":4},"end":{"line_number":10851,"utf16_col":5}}},{"name":"sectionEnded","kind":"method","ident_start":384626,"ident_end":384638,"extent_start":384606,"extent_end":384801,"fully_qualified_name":"MultiReporter::sectionEnded","ident_utf16":{"start":{"line_number":10853,"utf16_col":24},"end":{"line_number":10853,"utf16_col":36}},"extent_utf16":{"start":{"line_number":10853,"utf16_col":4},"end":{"line_number":10857,"utf16_col":5}}},{"name":"testCasePartialEnded","kind":"method","ident_start":384827,"ident_end":384847,"extent_start":384807,"extent_end":385455,"fully_qualified_name":"MultiReporter::testCasePartialEnded","ident_utf16":{"start":{"line_number":10859,"utf16_col":24},"end":{"line_number":10859,"utf16_col":44}},"extent_utf16":{"start":{"line_number":10859,"utf16_col":4},"end":{"line_number":10874,"utf16_col":5}}},{"name":"testCaseEnded","kind":"method","ident_start":385481,"ident_end":385494,"extent_start":385461,"extent_end":385661,"fully_qualified_name":"MultiReporter::testCaseEnded","ident_utf16":{"start":{"line_number":10876,"utf16_col":24},"end":{"line_number":10876,"utf16_col":37}},"extent_utf16":{"start":{"line_number":10876,"utf16_col":4},"end":{"line_number":10880,"utf16_col":5}}},{"name":"testRunEnded","kind":"method","ident_start":385687,"ident_end":385699,"extent_start":385667,"extent_end":385862,"fully_qualified_name":"MultiReporter::testRunEnded","ident_utf16":{"start":{"line_number":10882,"utf16_col":24},"end":{"line_number":10882,"utf16_col":36}},"extent_utf16":{"start":{"line_number":10882,"utf16_col":4},"end":{"line_number":10886,"utf16_col":5}}},{"name":"skipTest","kind":"method","ident_start":385889,"ident_end":385897,"extent_start":385869,"extent_end":386048,"fully_qualified_name":"MultiReporter::skipTest","ident_utf16":{"start":{"line_number":10889,"utf16_col":24},"end":{"line_number":10889,"utf16_col":32}},"extent_utf16":{"start":{"line_number":10889,"utf16_col":4},"end":{"line_number":10893,"utf16_col":5}}},{"name":"listReporters","kind":"method","ident_start":386074,"ident_end":386087,"extent_start":386054,"extent_end":386265,"fully_qualified_name":"MultiReporter::listReporters","ident_utf16":{"start":{"line_number":10895,"utf16_col":24},"end":{"line_number":10895,"utf16_col":37}},"extent_utf16":{"start":{"line_number":10895,"utf16_col":4},"end":{"line_number":10899,"utf16_col":5}}},{"name":"listListeners","kind":"method","ident_start":386291,"ident_end":386304,"extent_start":386271,"extent_end":386496,"fully_qualified_name":"MultiReporter::listListeners","ident_utf16":{"start":{"line_number":10901,"utf16_col":24},"end":{"line_number":10901,"utf16_col":37}},"extent_utf16":{"start":{"line_number":10901,"utf16_col":4},"end":{"line_number":10906,"utf16_col":5}}},{"name":"listTests","kind":"method","ident_start":386522,"ident_end":386531,"extent_start":386502,"extent_end":386686,"fully_qualified_name":"MultiReporter::listTests","ident_utf16":{"start":{"line_number":10908,"utf16_col":24},"end":{"line_number":10908,"utf16_col":33}},"extent_utf16":{"start":{"line_number":10908,"utf16_col":4},"end":{"line_number":10912,"utf16_col":5}}},{"name":"listTags","kind":"method","ident_start":386712,"ident_end":386720,"extent_start":386692,"extent_end":386865,"fully_qualified_name":"MultiReporter::listTags","ident_utf16":{"start":{"line_number":10914,"utf16_col":24},"end":{"line_number":10914,"utf16_col":32}},"extent_utf16":{"start":{"line_number":10914,"utf16_col":4},"end":{"line_number":10918,"utf16_col":5}}},{"name":"registerReporterImpl","kind":"function","ident_start":386952,"ident_end":386972,"extent_start":386947,"extent_end":387220,"fully_qualified_name":"registerReporterImpl","ident_utf16":{"start":{"line_number":10929,"utf16_col":13},"end":{"line_number":10929,"utf16_col":33}},"extent_utf16":{"start":{"line_number":10929,"utf16_col":8},"end":{"line_number":10934,"utf16_col":13}}},{"name":"registerListenerImpl","kind":"function","ident_start":387495,"ident_end":387515,"extent_start":387490,"extent_end":387672,"fully_qualified_name":"registerListenerImpl","ident_utf16":{"start":{"line_number":10942,"utf16_col":13},"end":{"line_number":10942,"utf16_col":33}},"extent_utf16":{"start":{"line_number":10942,"utf16_col":8},"end":{"line_number":10944,"utf16_col":9}}},{"name":"createMetadataString","kind":"function","ident_start":387797,"ident_end":387817,"extent_start":387785,"extent_end":388157,"fully_qualified_name":"createMetadataString","ident_utf16":{"start":{"line_number":10958,"utf16_col":20},"end":{"line_number":10958,"utf16_col":40}},"extent_utf16":{"start":{"line_number":10958,"utf16_col":8},"end":{"line_number":10967,"utf16_col":9}}},{"name":"testRunStarting","kind":"method","ident_start":388193,"ident_end":388208,"extent_start":388169,"extent_end":388465,"fully_qualified_name":"SonarQubeReporter::testRunStarting","ident_utf16":{"start":{"line_number":10970,"utf16_col":28},"end":{"line_number":10970,"utf16_col":43}},"extent_utf16":{"start":{"line_number":10970,"utf16_col":4},"end":{"line_number":10976,"utf16_col":5}}},{"name":"writeRun","kind":"method","ident_start":388495,"ident_end":388503,"extent_start":388471,"extent_end":388897,"fully_qualified_name":"SonarQubeReporter::writeRun","ident_utf16":{"start":{"line_number":10978,"utf16_col":28},"end":{"line_number":10978,"utf16_col":36}},"extent_utf16":{"start":{"line_number":10978,"utf16_col":4},"end":{"line_number":10989,"utf16_col":5}}},{"name":"writeTestFile","kind":"method","ident_start":388927,"ident_end":388940,"extent_start":388903,"extent_end":389220,"fully_qualified_name":"SonarQubeReporter::writeTestFile","ident_utf16":{"start":{"line_number":10991,"utf16_col":28},"end":{"line_number":10991,"utf16_col":41}},"extent_utf16":{"start":{"line_number":10991,"utf16_col":4},"end":{"line_number":10997,"utf16_col":5}}},{"name":"writeTestCase","kind":"method","ident_start":389250,"ident_end":389263,"extent_start":389226,"extent_end":389654,"fully_qualified_name":"SonarQubeReporter::writeTestCase","ident_utf16":{"start":{"line_number":10999,"utf16_col":28},"end":{"line_number":10999,"utf16_col":41}},"extent_utf16":{"start":{"line_number":10999,"utf16_col":4},"end":{"line_number":11005,"utf16_col":5}}},{"name":"writeSection","kind":"method","ident_start":389684,"ident_end":389696,"extent_start":389660,"extent_end":390480,"fully_qualified_name":"SonarQubeReporter::writeSection","ident_utf16":{"start":{"line_number":11007,"utf16_col":28},"end":{"line_number":11007,"utf16_col":40}},"extent_utf16":{"start":{"line_number":11007,"utf16_col":4},"end":{"line_number":11024,"utf16_col":5}}},{"name":"writeAssertions","kind":"method","ident_start":390510,"ident_end":390525,"extent_start":390486,"extent_end":390823,"fully_qualified_name":"SonarQubeReporter::writeAssertions","ident_utf16":{"start":{"line_number":11026,"utf16_col":28},"end":{"line_number":11026,"utf16_col":43}},"extent_utf16":{"start":{"line_number":11026,"utf16_col":4},"end":{"line_number":11032,"utf16_col":5}}},{"name":"writeAssertion","kind":"method","ident_start":390853,"ident_end":390867,"extent_start":390829,"extent_end":393378,"fully_qualified_name":"SonarQubeReporter::writeAssertion","ident_utf16":{"start":{"line_number":11034,"utf16_col":28},"end":{"line_number":11034,"utf16_col":42}},"extent_utf16":{"start":{"line_number":11034,"utf16_col":4},"end":{"line_number":11096,"utf16_col":5}}},{"name":"testRunStarting","kind":"method","ident_start":393527,"ident_end":393542,"extent_start":393495,"extent_end":393628,"fully_qualified_name":"StreamingReporterBase::testRunStarting","ident_utf16":{"start":{"line_number":11107,"utf16_col":27},"end":{"line_number":11107,"utf16_col":42}},"extent_utf16":{"start":{"line_number":11106,"utf16_col":4},"end":{"line_number":11109,"utf16_col":5}}},{"name":"testRunEnded","kind":"method","ident_start":393662,"ident_end":393674,"extent_start":393634,"extent_end":393744,"fully_qualified_name":"StreamingReporterBase::testRunEnded","ident_utf16":{"start":{"line_number":11111,"utf16_col":32},"end":{"line_number":11111,"utf16_col":44}},"extent_utf16":{"start":{"line_number":11111,"utf16_col":4},"end":{"line_number":11113,"utf16_col":5}}},{"name":"TapAssertionPrinter","kind":"class","ident_start":394187,"ident_end":394206,"extent_start":394181,"extent_end":400894,"fully_qualified_name":"TapAssertionPrinter","ident_utf16":{"start":{"line_number":11131,"utf16_col":14},"end":{"line_number":11131,"utf16_col":33}},"extent_utf16":{"start":{"line_number":11131,"utf16_col":8},"end":{"line_number":11294,"utf16_col":9}}},{"name":"TapAssertionPrinter","kind":"function","ident_start":394319,"ident_end":394338,"extent_start":394319,"extent_end":394376,"fully_qualified_name":"TapAssertionPrinter::TapAssertionPrinter","ident_utf16":{"start":{"line_number":11134,"utf16_col":12},"end":{"line_number":11134,"utf16_col":31}},"extent_utf16":{"start":{"line_number":11134,"utf16_col":12},"end":{"line_number":11134,"utf16_col":69}}},{"name":"TapAssertionPrinter","kind":"function","ident_start":394389,"ident_end":394408,"extent_start":394389,"extent_end":394813,"fully_qualified_name":"TapAssertionPrinter::TapAssertionPrinter","ident_utf16":{"start":{"line_number":11135,"utf16_col":12},"end":{"line_number":11135,"utf16_col":31}},"extent_utf16":{"start":{"line_number":11135,"utf16_col":12},"end":{"line_number":11142,"utf16_col":42}}},{"name":"print","kind":"function","ident_start":394832,"ident_end":394837,"extent_start":394827,"extent_end":398039,"fully_qualified_name":"TapAssertionPrinter::print","ident_utf16":{"start":{"line_number":11144,"utf16_col":17},"end":{"line_number":11144,"utf16_col":22}},"extent_utf16":{"start":{"line_number":11144,"utf16_col":12},"end":{"line_number":11218,"utf16_col":13}}},{"name":"printResultType","kind":"function","ident_start":398075,"ident_end":398090,"extent_start":398070,"extent_end":398263,"fully_qualified_name":"TapAssertionPrinter::printResultType","ident_utf16":{"start":{"line_number":11221,"utf16_col":17},"end":{"line_number":11221,"utf16_col":32}},"extent_utf16":{"start":{"line_number":11221,"utf16_col":12},"end":{"line_number":11225,"utf16_col":13}}},{"name":"printIssue","kind":"function","ident_start":398282,"ident_end":398292,"extent_start":398277,"extent_end":398371,"fully_qualified_name":"TapAssertionPrinter::printIssue","ident_utf16":{"start":{"line_number":11227,"utf16_col":17},"end":{"line_number":11227,"utf16_col":27}},"extent_utf16":{"start":{"line_number":11227,"utf16_col":12},"end":{"line_number":11229,"utf16_col":13}}},{"name":"printExpressionWas","kind":"function","ident_start":398390,"ident_end":398408,"extent_start":398385,"extent_end":398692,"fully_qualified_name":"TapAssertionPrinter::printExpressionWas","ident_utf16":{"start":{"line_number":11231,"utf16_col":17},"end":{"line_number":11231,"utf16_col":35}},"extent_utf16":{"start":{"line_number":11231,"utf16_col":12},"end":{"line_number":11238,"utf16_col":13}}},{"name":"printOriginalExpression","kind":"function","ident_start":398711,"ident_end":398734,"extent_start":398706,"extent_end":398883,"fully_qualified_name":"TapAssertionPrinter::printOriginalExpression","ident_utf16":{"start":{"line_number":11240,"utf16_col":17},"end":{"line_number":11240,"utf16_col":40}},"extent_utf16":{"start":{"line_number":11240,"utf16_col":12},"end":{"line_number":11244,"utf16_col":13}}},{"name":"printReconstructedExpression","kind":"function","ident_start":398902,"ident_end":398930,"extent_start":398897,"extent_end":399288,"fully_qualified_name":"TapAssertionPrinter::printReconstructedExpression","ident_utf16":{"start":{"line_number":11246,"utf16_col":17},"end":{"line_number":11246,"utf16_col":45}},"extent_utf16":{"start":{"line_number":11246,"utf16_col":12},"end":{"line_number":11254,"utf16_col":13}}},{"name":"printMessage","kind":"function","ident_start":399307,"ident_end":399319,"extent_start":399302,"extent_end":399505,"fully_qualified_name":"TapAssertionPrinter::printMessage","ident_utf16":{"start":{"line_number":11256,"utf16_col":17},"end":{"line_number":11256,"utf16_col":29}},"extent_utf16":{"start":{"line_number":11256,"utf16_col":12},"end":{"line_number":11261,"utf16_col":13}}},{"name":"printRemainingMessages","kind":"function","ident_start":399524,"ident_end":399546,"extent_start":399519,"extent_end":400566,"fully_qualified_name":"TapAssertionPrinter::printRemainingMessages","ident_utf16":{"start":{"line_number":11263,"utf16_col":17},"end":{"line_number":11263,"utf16_col":39}},"extent_utf16":{"start":{"line_number":11263,"utf16_col":12},"end":{"line_number":11284,"utf16_col":13}}},{"name":"testRunStarting","kind":"method","ident_start":400953,"ident_end":400968,"extent_start":400935,"extent_end":401197,"fully_qualified_name":"TAPReporter::testRunStarting","ident_utf16":{"start":{"line_number":11298,"utf16_col":22},"end":{"line_number":11298,"utf16_col":37}},"extent_utf16":{"start":{"line_number":11298,"utf16_col":4},"end":{"line_number":11303,"utf16_col":5}}},{"name":"noMatchingTestCases","kind":"method","ident_start":401221,"ident_end":401240,"extent_start":401203,"extent_end":401350,"fully_qualified_name":"TAPReporter::noMatchingTestCases","ident_utf16":{"start":{"line_number":11305,"utf16_col":22},"end":{"line_number":11305,"utf16_col":41}},"extent_utf16":{"start":{"line_number":11305,"utf16_col":4},"end":{"line_number":11307,"utf16_col":5}}},{"name":"assertionEnded","kind":"method","ident_start":401374,"ident_end":401388,"extent_start":401356,"extent_end":401673,"fully_qualified_name":"TAPReporter::assertionEnded","ident_utf16":{"start":{"line_number":11309,"utf16_col":22},"end":{"line_number":11309,"utf16_col":36}},"extent_utf16":{"start":{"line_number":11309,"utf16_col":4},"end":{"line_number":11317,"utf16_col":5}}},{"name":"testRunEnded","kind":"method","ident_start":401697,"ident_end":401709,"extent_start":401679,"extent_end":402046,"fully_qualified_name":"TAPReporter::testRunEnded","ident_utf16":{"start":{"line_number":11319,"utf16_col":22},"end":{"line_number":11319,"utf16_col":34}},"extent_utf16":{"start":{"line_number":11319,"utf16_col":4},"end":{"line_number":11326,"utf16_col":5}}},{"name":"printHeaderString","kind":"function","ident_start":402270,"ident_end":402287,"extent_start":402265,"extent_end":402653,"fully_qualified_name":"printHeaderString","ident_utf16":{"start":{"line_number":11344,"utf16_col":13},"end":{"line_number":11344,"utf16_col":30}},"extent_utf16":{"start":{"line_number":11344,"utf16_col":8},"end":{"line_number":11353,"utf16_col":9}}},{"name":"escape","kind":"function","ident_start":402675,"ident_end":402681,"extent_start":402663,"extent_end":403091,"fully_qualified_name":"escape","ident_utf16":{"start":{"line_number":11355,"utf16_col":20},"end":{"line_number":11355,"utf16_col":26}},"extent_utf16":{"start":{"line_number":11355,"utf16_col":8},"end":{"line_number":11364,"utf16_col":9}}},{"name":"testRunStarting","kind":"method","ident_start":403208,"ident_end":403223,"extent_start":403185,"extent_end":403370,"fully_qualified_name":"TeamCityReporter::testRunStarting","ident_utf16":{"start":{"line_number":11370,"utf16_col":27},"end":{"line_number":11370,"utf16_col":42}},"extent_utf16":{"start":{"line_number":11370,"utf16_col":4},"end":{"line_number":11373,"utf16_col":5}}},{"name":"testRunEnded","kind":"method","ident_start":403399,"ident_end":403411,"extent_start":403376,"extent_end":403570,"fully_qualified_name":"TeamCityReporter::testRunEnded","ident_utf16":{"start":{"line_number":11375,"utf16_col":27},"end":{"line_number":11375,"utf16_col":39}},"extent_utf16":{"start":{"line_number":11375,"utf16_col":4},"end":{"line_number":11378,"utf16_col":5}}},{"name":"assertionEnded","kind":"method","ident_start":403599,"ident_end":403613,"extent_start":403576,"extent_end":406494,"fully_qualified_name":"TeamCityReporter::assertionEnded","ident_utf16":{"start":{"line_number":11380,"utf16_col":27},"end":{"line_number":11380,"utf16_col":41}},"extent_utf16":{"start":{"line_number":11380,"utf16_col":4},"end":{"line_number":11450,"utf16_col":5}}},{"name":"testCaseStarting","kind":"method","ident_start":406523,"ident_end":406539,"extent_start":406500,"extent_end":406791,"fully_qualified_name":"TeamCityReporter::testCaseStarting","ident_utf16":{"start":{"line_number":11452,"utf16_col":27},"end":{"line_number":11452,"utf16_col":43}},"extent_utf16":{"start":{"line_number":11452,"utf16_col":4},"end":{"line_number":11458,"utf16_col":5}}},{"name":"testCaseEnded","kind":"method","ident_start":406820,"ident_end":406833,"extent_start":406797,"extent_end":407613,"fully_qualified_name":"TeamCityReporter::testCaseEnded","ident_utf16":{"start":{"line_number":11460,"utf16_col":27},"end":{"line_number":11460,"utf16_col":40}},"extent_utf16":{"start":{"line_number":11460,"utf16_col":4},"end":{"line_number":11475,"utf16_col":5}}},{"name":"printSectionHeader","kind":"method","ident_start":407642,"ident_end":407660,"extent_start":407619,"extent_end":408280,"fully_qualified_name":"TeamCityReporter::printSectionHeader","ident_utf16":{"start":{"line_number":11477,"utf16_col":27},"end":{"line_number":11477,"utf16_col":45}},"extent_utf16":{"start":{"line_number":11477,"utf16_col":4},"end":{"line_number":11495,"utf16_col":5}}},{"name":"XmlReporter","kind":"method","ident_start":408623,"ident_end":408634,"extent_start":408610,"extent_end":408859,"fully_qualified_name":"XmlReporter::XmlReporter","ident_utf16":{"start":{"line_number":11510,"utf16_col":17},"end":{"line_number":11510,"utf16_col":28}},"extent_utf16":{"start":{"line_number":11510,"utf16_col":4},"end":{"line_number":11516,"utf16_col":5}}},{"name":"getDescription","kind":"method","ident_start":408934,"ident_end":408948,"extent_start":408909,"extent_end":409016,"fully_qualified_name":"XmlReporter::getDescription","ident_utf16":{"start":{"line_number":11520,"utf16_col":29},"end":{"line_number":11520,"utf16_col":43}},"extent_utf16":{"start":{"line_number":11520,"utf16_col":4},"end":{"line_number":11522,"utf16_col":5}}},{"name":"getStylesheetRef","kind":"method","ident_start":409047,"ident_end":409063,"extent_start":409022,"extent_end":409109,"fully_qualified_name":"XmlReporter::getStylesheetRef","ident_utf16":{"start":{"line_number":11524,"utf16_col":29},"end":{"line_number":11524,"utf16_col":45}},"extent_utf16":{"start":{"line_number":11524,"utf16_col":4},"end":{"line_number":11526,"utf16_col":5}}},{"name":"writeSourceInfo","kind":"method","ident_start":409133,"ident_end":409148,"extent_start":409115,"extent_end":409327,"fully_qualified_name":"XmlReporter::writeSourceInfo","ident_utf16":{"start":{"line_number":11528,"utf16_col":22},"end":{"line_number":11528,"utf16_col":37}},"extent_utf16":{"start":{"line_number":11528,"utf16_col":4},"end":{"line_number":11532,"utf16_col":5}}},{"name":"testRunStarting","kind":"method","ident_start":409351,"ident_end":409366,"extent_start":409333,"extent_end":410039,"fully_qualified_name":"XmlReporter::testRunStarting","ident_utf16":{"start":{"line_number":11534,"utf16_col":22},"end":{"line_number":11534,"utf16_col":37}},"extent_utf16":{"start":{"line_number":11534,"utf16_col":4},"end":{"line_number":11547,"utf16_col":5}}},{"name":"testCaseStarting","kind":"method","ident_start":410063,"ident_end":410079,"extent_start":410045,"extent_end":410545,"fully_qualified_name":"XmlReporter::testCaseStarting","ident_utf16":{"start":{"line_number":11549,"utf16_col":22},"end":{"line_number":11549,"utf16_col":38}},"extent_utf16":{"start":{"line_number":11549,"utf16_col":4},"end":{"line_number":11560,"utf16_col":5}}},{"name":"sectionStarting","kind":"method","ident_start":410569,"ident_end":410584,"extent_start":410551,"extent_end":410953,"fully_qualified_name":"XmlReporter::sectionStarting","ident_utf16":{"start":{"line_number":11562,"utf16_col":22},"end":{"line_number":11562,"utf16_col":37}},"extent_utf16":{"start":{"line_number":11562,"utf16_col":4},"end":{"line_number":11570,"utf16_col":5}}},{"name":"assertionStarting","kind":"method","ident_start":410977,"ident_end":410994,"extent_start":410959,"extent_end":411022,"fully_qualified_name":"XmlReporter::assertionStarting","ident_utf16":{"start":{"line_number":11572,"utf16_col":22},"end":{"line_number":11572,"utf16_col":39}},"extent_utf16":{"start":{"line_number":11572,"utf16_col":4},"end":{"line_number":11572,"utf16_col":67}}},{"name":"assertionEnded","kind":"method","ident_start":411046,"ident_end":411060,"extent_start":411028,"extent_end":414367,"fully_qualified_name":"XmlReporter::assertionEnded","ident_utf16":{"start":{"line_number":11574,"utf16_col":22},"end":{"line_number":11574,"utf16_col":36}},"extent_utf16":{"start":{"line_number":11574,"utf16_col":4},"end":{"line_number":11654,"utf16_col":5}}},{"name":"sectionEnded","kind":"method","ident_start":414391,"ident_end":414403,"extent_start":414373,"extent_end":415257,"fully_qualified_name":"XmlReporter::sectionEnded","ident_utf16":{"start":{"line_number":11656,"utf16_col":22},"end":{"line_number":11656,"utf16_col":34}},"extent_utf16":{"start":{"line_number":11656,"utf16_col":4},"end":{"line_number":11672,"utf16_col":5}}},{"name":"testCaseEnded","kind":"method","ident_start":415281,"ident_end":415294,"extent_start":415263,"extent_end":416165,"fully_qualified_name":"XmlReporter::testCaseEnded","ident_utf16":{"start":{"line_number":11674,"utf16_col":22},"end":{"line_number":11674,"utf16_col":35}},"extent_utf16":{"start":{"line_number":11674,"utf16_col":4},"end":{"line_number":11688,"utf16_col":5}}},{"name":"testRunEnded","kind":"method","ident_start":416189,"ident_end":416201,"extent_start":416171,"extent_end":417128,"fully_qualified_name":"XmlReporter::testRunEnded","ident_utf16":{"start":{"line_number":11690,"utf16_col":22},"end":{"line_number":11690,"utf16_col":34}},"extent_utf16":{"start":{"line_number":11690,"utf16_col":4},"end":{"line_number":11703,"utf16_col":5}}},{"name":"benchmarkPreparing","kind":"method","ident_start":417152,"ident_end":417170,"extent_start":417134,"extent_end":417290,"fully_qualified_name":"XmlReporter::benchmarkPreparing","ident_utf16":{"start":{"line_number":11705,"utf16_col":22},"end":{"line_number":11705,"utf16_col":40}},"extent_utf16":{"start":{"line_number":11705,"utf16_col":4},"end":{"line_number":11708,"utf16_col":5}}},{"name":"benchmarkStarting","kind":"method","ident_start":417314,"ident_end":417331,"extent_start":417296,"extent_end":417753,"fully_qualified_name":"XmlReporter::benchmarkStarting","ident_utf16":{"start":{"line_number":11710,"utf16_col":22},"end":{"line_number":11710,"utf16_col":39}},"extent_utf16":{"start":{"line_number":11710,"utf16_col":4},"end":{"line_number":11717,"utf16_col":5}}},{"name":"benchmarkEnded","kind":"method","ident_start":417777,"ident_end":417791,"extent_start":417759,"extent_end":419088,"fully_qualified_name":"XmlReporter::benchmarkEnded","ident_utf16":{"start":{"line_number":11719,"utf16_col":22},"end":{"line_number":11719,"utf16_col":36}},"extent_utf16":{"start":{"line_number":11719,"utf16_col":4},"end":{"line_number":11737,"utf16_col":5}}},{"name":"benchmarkFailed","kind":"method","ident_start":419112,"ident_end":419127,"extent_start":419094,"extent_end":419268,"fully_qualified_name":"XmlReporter::benchmarkFailed","ident_utf16":{"start":{"line_number":11739,"utf16_col":22},"end":{"line_number":11739,"utf16_col":37}},"extent_utf16":{"start":{"line_number":11739,"utf16_col":4},"end":{"line_number":11743,"utf16_col":5}}},{"name":"listReporters","kind":"method","ident_start":419292,"ident_end":419305,"extent_start":419274,"extent_end":419928,"fully_qualified_name":"XmlReporter::listReporters","ident_utf16":{"start":{"line_number":11745,"utf16_col":22},"end":{"line_number":11745,"utf16_col":35}},"extent_utf16":{"start":{"line_number":11745,"utf16_col":4},"end":{"line_number":11756,"utf16_col":5}}},{"name":"listListeners","kind":"method","ident_start":419952,"ident_end":419965,"extent_start":419934,"extent_end":420603,"fully_qualified_name":"XmlReporter::listListeners","ident_utf16":{"start":{"line_number":11758,"utf16_col":22},"end":{"line_number":11758,"utf16_col":35}},"extent_utf16":{"start":{"line_number":11758,"utf16_col":4},"end":{"line_number":11769,"utf16_col":5}}},{"name":"listTests","kind":"method","ident_start":420627,"ident_end":420636,"extent_start":420609,"extent_end":421938,"fully_qualified_name":"XmlReporter::listTests","ident_utf16":{"start":{"line_number":11771,"utf16_col":22},"end":{"line_number":11771,"utf16_col":31}},"extent_utf16":{"start":{"line_number":11771,"utf16_col":4},"end":{"line_number":11794,"utf16_col":5}}},{"name":"listTags","kind":"method","ident_start":421962,"ident_end":421970,"extent_start":421944,"extent_end":422693,"fully_qualified_name":"XmlReporter::listTags","ident_utf16":{"start":{"line_number":11796,"utf16_col":22},"end":{"line_number":11796,"utf16_col":30}},"extent_utf16":{"start":{"line_number":11796,"utf16_col":4},"end":{"line_number":11810,"utf16_col":5}}}]}},"copilotInfo":null,"copilotAccessAllowed":false,"modelsAccessAllowed":false,"modelsRepoIntegrationEnabled":false,"isMarketplaceEnabled":true,"csrf_tokens":{"/catchorg/Catch2/branches":{"post":"HrrryzdQpB57b4kVCVKJ1EsfurqIrVd3XXeMGQKMUFfKkFFxYbyxRJ6DWhEmKpxTGn82DeGNhIYA53WwnrtkWw"},"/repos/preferences":{"post":"lIFA4paVPd1zomXzYlYJ-PXVtQay5M5ZliHBxNM9HsMC3gjHRfjUiYJr-Gj0suR6QGawo_O2sQoBmqkO-9y9eA"}}},"title":"Catch2/extras/catch_amalgamated.cpp at devel · catchorg/Catch2","appPayload":{"helpUrl":"https://docs.github.com","findFileWorkerPath":"/assets-cdn/worker/find-file-worker-263cab1760dd.js","findInFileWorkerPath":"/assets-cdn/worker/find-in-file-worker-41d93d549163.js","githubDevUrl":null,"enabled_features":{"code_nav_ui_events":false,"react_blob_overlay":false,"accessible_code_button":true}}}</script>
  <div data-target="react-app.reactRoot"></div>
</react-app>
</turbo-frame>



  </div>

</turbo-frame>

    </main>
  </div>

  </div>

          <footer class="footer pt-8 pb-6 f6 color-fg-muted p-responsive" role="contentinfo" >
  <h2 class='sr-only'>Footer</h2>

  


  <div class="d-flex flex-justify-center flex-items-center flex-column-reverse flex-lg-row flex-wrap flex-lg-nowrap">
    <div class="d-flex flex-items-center flex-shrink-0 mx-2">
      <a aria-label="GitHub Homepage" class="footer-octicon mr-2" href="https://github.com">
        <svg aria-hidden="true" height="24" viewBox="0 0 24 24" version="1.1" width="24" data-view-component="true" class="octicon octicon-mark-github">
    <path d="M12 1C5.923 1 1 5.923 1 12c0 4.867 3.149 8.979 7.521 10.436.55.096.756-.233.756-.522 0-.262-.013-1.128-.013-2.049-2.764.509-3.479-.674-3.699-1.292-.124-.317-.66-1.293-1.127-1.554-.385-.207-.936-.715-.014-.729.866-.014 1.485.797 1.691 1.128.99 1.663 2.571 1.196 3.204.907.096-.715.385-1.196.701-1.471-2.448-.275-5.005-1.224-5.005-5.432 0-1.196.426-2.186 1.128-2.956-.111-.275-.496-1.402.11-2.915 0 0 .921-.288 3.024 1.128a10.193 10.193 0 0 1 2.75-.371c.936 0 1.871.123 2.75.371 2.104-1.43 3.025-1.128 3.025-1.128.605 1.513.221 2.64.111 2.915.701.77 1.127 1.747 1.127 2.956 0 4.222-2.571 5.157-5.019 5.432.399.344.743 1.004.743 2.035 0 1.471-.014 2.654-.014 3.025 0 .289.206.632.756.522C19.851 20.979 23 16.854 23 12c0-6.077-4.922-11-11-11Z"></path>
</svg>
</a>
      <span>
        &copy; 2025 GitHub,&nbsp;Inc.
      </span>
    </div>

    <nav aria-label="Footer">
      <h3 class="sr-only" id="sr-footer-heading">Footer navigation</h3>

      <ul class="list-style-none d-flex flex-justify-center flex-wrap mb-2 mb-lg-0" aria-labelledby="sr-footer-heading">

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to Terms&quot;,&quot;label&quot;:&quot;text:terms&quot;}" href="https://docs.github.com/site-policy/github-terms/github-terms-of-service" data-view-component="true" class="Link--secondary Link">Terms</a>
          </li>

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to privacy&quot;,&quot;label&quot;:&quot;text:privacy&quot;}" href="https://docs.github.com/site-policy/privacy-policies/github-privacy-statement" data-view-component="true" class="Link--secondary Link">Privacy</a>
          </li>

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to security&quot;,&quot;label&quot;:&quot;text:security&quot;}" href="https://github.com/security" data-view-component="true" class="Link--secondary Link">Security</a>
          </li>

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to status&quot;,&quot;label&quot;:&quot;text:status&quot;}" href="https://www.githubstatus.com/" data-view-component="true" class="Link--secondary Link">Status</a>
          </li>

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to docs&quot;,&quot;label&quot;:&quot;text:docs&quot;}" href="https://docs.github.com/" data-view-component="true" class="Link--secondary Link">Docs</a>
          </li>

          <li class="mx-2">
            <a data-analytics-event="{&quot;category&quot;:&quot;Footer&quot;,&quot;action&quot;:&quot;go to contact&quot;,&quot;label&quot;:&quot;text:contact&quot;}" href="https://support.github.com?tags=dotcom-footer" data-view-component="true" class="Link--secondary Link">Contact</a>
          </li>

          <li class="mx-2" >
  <cookie-consent-link>
    <button
      type="button"
      class="Link--secondary underline-on-hover border-0 p-0 color-bg-transparent"
      data-action="click:cookie-consent-link#showConsentManagement"
      data-analytics-event="{&quot;location&quot;:&quot;footer&quot;,&quot;action&quot;:&quot;cookies&quot;,&quot;context&quot;:&quot;subfooter&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;cookies_link_subfooter_footer&quot;}"
    >
       Manage cookies
    </button>
  </cookie-consent-link>
</li>

<li class="mx-2">
  <cookie-consent-link>
    <button
      type="button"
      class="Link--secondary underline-on-hover border-0 p-0 color-bg-transparent text-left"
      data-action="click:cookie-consent-link#showConsentManagement"
      data-analytics-event="{&quot;location&quot;:&quot;footer&quot;,&quot;action&quot;:&quot;dont_share_info&quot;,&quot;context&quot;:&quot;subfooter&quot;,&quot;tag&quot;:&quot;link&quot;,&quot;label&quot;:&quot;dont_share_info_link_subfooter_footer&quot;}"
    >
      Do not share my personal information
    </button>
  </cookie-consent-link>
</li>

      </ul>
    </nav>
  </div>
</footer>



    <ghcc-consent id="ghcc" class="position-fixed bottom-0 left-0" style="z-index: 999999"
      data-locale="en"
      data-initial-cookie-consent-allowed=""
      data-cookie-consent-required="true"
    ></ghcc-consent>



  <div id="ajax-error-message" class="ajax-error-message flash flash-error" hidden>
    <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-alert">
    <path d="M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z"></path>
</svg>
    <button type="button" class="flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
    </button>
    You can’t perform that action at this time.
  </div>

    <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default color-fg-default hx_rsm" open>
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog>
        <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-x">
    <path d="M3.72 3.72a.75.75 0 0 1 1.06 0L8 6.94l3.22-3.22a.749.749 0 0 1 1.275.326.749.749 0 0 1-.215.734L9.06 8l3.22 3.22a.749.749 0 0 1-.326 1.275.749.749 0 0 1-.734-.215L8 9.06l-3.22 3.22a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042L6.94 8 3.72 4.78a.75.75 0 0 1 0-1.06Z"></path>
</svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

    <div class="Popover js-hovercard-content position-absolute" style="display: none; outline: none;">
  <div class="Popover-message Popover-message--bottom-left Popover-message--large Box color-shadow-large" style="width:360px;">
  </div>
</div>

    <template id="snippet-clipboard-copy-button">
  <div class="zeroclipboard-container position-absolute right-0 top-0">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn js-clipboard-copy m-2 p-0" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon m-2">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none m-2">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>
<template id="snippet-clipboard-copy-button-unpositioned">
  <div class="zeroclipboard-container">
    <clipboard-copy aria-label="Copy" class="ClipboardButton btn btn-invisible js-clipboard-copy m-2 p-0 d-flex flex-justify-center flex-items-center" data-copy-feedback="Copied!" data-tooltip-direction="w">
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-copy js-clipboard-copy-icon">
    <path d="M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 0 1 0 1.5h-1.5a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-1.5a.75.75 0 0 1 1.5 0v1.5A1.75 1.75 0 0 1 9.25 16h-7.5A1.75 1.75 0 0 1 0 14.25Z"></path><path d="M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0 1 14.25 11h-7.5A1.75 1.75 0 0 1 5 9.25Zm1.75-.25a.25.25 0 0 0-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 0 0 .25-.25v-7.5a.25.25 0 0 0-.25-.25Z"></path>
</svg>
      <svg aria-hidden="true" height="16" viewBox="0 0 16 16" version="1.1" width="16" data-view-component="true" class="octicon octicon-check js-clipboard-check-icon color-fg-success d-none">
    <path d="M13.78 4.22a.75.75 0 0 1 0 1.06l-7.25 7.25a.75.75 0 0 1-1.06 0L2.22 9.28a.751.751 0 0 1 .018-1.042.751.751 0 0 1 1.042-.018L6 10.94l6.72-6.72a.75.75 0 0 1 1.06 0Z"></path>
</svg>
    </clipboard-copy>
  </div>
</template>




    </div>
    <div id="js-global-screen-reader-notice" class="sr-only mt-n1" aria-live="polite" aria-atomic="true" ></div>
    <div id="js-global-screen-reader-notice-assertive" class="sr-only mt-n1" aria-live="assertive" aria-atomic="true"></div>
  </body>
</html>

